#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import hive_metastore.ttypes
import fb303.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class GeminiPrincipalType:
  USER = 0
  ROLE = 1
  GROUP = 2
  ACCOUNT = 3
  GROUP_DATALEAP = 4

  _VALUES_TO_NAMES = {
    0: "USER",
    1: "ROLE",
    2: "GROUP",
    3: "ACCOUNT",
    4: "GROUP_DATALEAP",
  }

  _NAMES_TO_VALUES = {
    "USER": 0,
    "ROLE": 1,
    "GROUP": 2,
    "ACCOUNT": 3,
    "GROUP_DATALEAP": 4,
  }


class Authentication:
  """
  Attributes:
   - version
   - accessKeyId
   - sessionToken
   - requestDate
   - serviceName
   - region
   - signature
   - identityId
   - identityType
   - project
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'version', None, None, ), # 1
    (2, TType.STRING, 'accessKeyId', None, None, ), # 2
    (3, TType.STRING, 'sessionToken', None, None, ), # 3
    (4, TType.STRING, 'requestDate', None, None, ), # 4
    (5, TType.STRING, 'serviceName', None, None, ), # 5
    (6, TType.STRING, 'region', None, None, ), # 6
    (7, TType.STRING, 'signature', None, None, ), # 7
    (8, TType.STRING, 'identityId', None, None, ), # 8
    (9, TType.I32, 'identityType', None, None, ), # 9
    (10, TType.STRING, 'project', None, None, ), # 10
  )

  def __init__(self, version=None, accessKeyId=None, sessionToken=None, requestDate=None, serviceName=None, region=None, signature=None, identityId=None, identityType=None, project=None,):
    self.version = version
    self.accessKeyId = accessKeyId
    self.sessionToken = sessionToken
    self.requestDate = requestDate
    self.serviceName = serviceName
    self.region = region
    self.signature = signature
    self.identityId = identityId
    self.identityType = identityType
    self.project = project

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.version = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.accessKeyId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sessionToken = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.requestDate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.serviceName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.region = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.signature = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.identityId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.identityType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.project = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Authentication')
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 1)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.accessKeyId is not None:
      oprot.writeFieldBegin('accessKeyId', TType.STRING, 2)
      oprot.writeString(self.accessKeyId)
      oprot.writeFieldEnd()
    if self.sessionToken is not None:
      oprot.writeFieldBegin('sessionToken', TType.STRING, 3)
      oprot.writeString(self.sessionToken)
      oprot.writeFieldEnd()
    if self.requestDate is not None:
      oprot.writeFieldBegin('requestDate', TType.STRING, 4)
      oprot.writeString(self.requestDate)
      oprot.writeFieldEnd()
    if self.serviceName is not None:
      oprot.writeFieldBegin('serviceName', TType.STRING, 5)
      oprot.writeString(self.serviceName)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.STRING, 6)
      oprot.writeString(self.region)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 7)
      oprot.writeString(self.signature)
      oprot.writeFieldEnd()
    if self.identityId is not None:
      oprot.writeFieldBegin('identityId', TType.STRING, 8)
      oprot.writeString(self.identityId)
      oprot.writeFieldEnd()
    if self.identityType is not None:
      oprot.writeFieldBegin('identityType', TType.I32, 9)
      oprot.writeI32(self.identityType)
      oprot.writeFieldEnd()
    if self.project is not None:
      oprot.writeFieldBegin('project', TType.STRING, 10)
      oprot.writeString(self.project)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.version is None:
      raise TProtocol.TProtocolException(message='Required field version is unset!')
    if self.accessKeyId is None:
      raise TProtocol.TProtocolException(message='Required field accessKeyId is unset!')
    if self.requestDate is None:
      raise TProtocol.TProtocolException(message='Required field requestDate is unset!')
    if self.serviceName is None:
      raise TProtocol.TProtocolException(message='Required field serviceName is unset!')
    if self.region is None:
      raise TProtocol.TProtocolException(message='Required field region is unset!')
    if self.signature is None:
      raise TProtocol.TProtocolException(message='Required field signature is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.accessKeyId)
    value = (value * 31) ^ hash(self.sessionToken)
    value = (value * 31) ^ hash(self.requestDate)
    value = (value * 31) ^ hash(self.serviceName)
    value = (value * 31) ^ hash(self.region)
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.identityId)
    value = (value * 31) ^ hash(self.identityType)
    value = (value * 31) ^ hash(self.project)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
