# coding: utf-8

"""
    PredictionMarket

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from olab_open_api.configuration import Configuration


class V2PortfolioData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency_address': 'str',
        'day_profit': 'str',
        'day_profit_rate': 'str',
        'first_create_time': 'int',
        'last_create_time': 'int',
        'mutil_title': 'str',
        'mutil_topic_id': 'int',
        'outcome': 'str',
        'outcome_side': 'int',
        'position_avg_price': 'str',
        'profit': 'str',
        'profit_rate': 'str',
        'token_amount': 'str',
        'token_frozen_amount': 'str',
        'token_id': 'str',
        'topic_cutoff_time': 'int',
        'topic_id': 'int',
        'topic_title': 'str',
        'value': 'str'
    }

    attribute_map = {
        'currency_address': 'currency_address',
        'day_profit': 'dayProfit',
        'day_profit_rate': 'dayProfitRate',
        'first_create_time': 'firstCreateTime',
        'last_create_time': 'lastCreateTime',
        'mutil_title': 'mutilTitle',
        'mutil_topic_id': 'mutilTopicId',
        'outcome': 'outcome',
        'outcome_side': 'outcomeSide',
        'position_avg_price': 'positionAvgPrice',
        'profit': 'profit',
        'profit_rate': 'profitRate',
        'token_amount': 'tokenAmount',
        'token_frozen_amount': 'tokenFrozenAmount',
        'token_id': 'tokenId',
        'topic_cutoff_time': 'topicCutoffTime',
        'topic_id': 'topicId',
        'topic_title': 'topicTitle',
        'value': 'value'
    }

    def __init__(self, currency_address=None, day_profit=None, day_profit_rate=None, first_create_time=None, last_create_time=None, mutil_title=None, mutil_topic_id=None, outcome=None, outcome_side=None, position_avg_price=None, profit=None, profit_rate=None, token_amount=None, token_frozen_amount=None, token_id=None, topic_cutoff_time=None, topic_id=None, topic_title=None, value=None, local_vars_configuration=None):  # noqa: E501
        """V2PortfolioData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency_address = None
        self._day_profit = None
        self._day_profit_rate = None
        self._first_create_time = None
        self._last_create_time = None
        self._mutil_title = None
        self._mutil_topic_id = None
        self._outcome = None
        self._outcome_side = None
        self._position_avg_price = None
        self._profit = None
        self._profit_rate = None
        self._token_amount = None
        self._token_frozen_amount = None
        self._token_id = None
        self._topic_cutoff_time = None
        self._topic_id = None
        self._topic_title = None
        self._value = None
        self.discriminator = None

        if currency_address is not None:
            self.currency_address = currency_address
        if day_profit is not None:
            self.day_profit = day_profit
        if day_profit_rate is not None:
            self.day_profit_rate = day_profit_rate
        if first_create_time is not None:
            self.first_create_time = first_create_time
        if last_create_time is not None:
            self.last_create_time = last_create_time
        if mutil_title is not None:
            self.mutil_title = mutil_title
        if mutil_topic_id is not None:
            self.mutil_topic_id = mutil_topic_id
        if outcome is not None:
            self.outcome = outcome
        if outcome_side is not None:
            self.outcome_side = outcome_side
        if position_avg_price is not None:
            self.position_avg_price = position_avg_price
        if profit is not None:
            self.profit = profit
        if profit_rate is not None:
            self.profit_rate = profit_rate
        if token_amount is not None:
            self.token_amount = token_amount
        if token_frozen_amount is not None:
            self.token_frozen_amount = token_frozen_amount
        if token_id is not None:
            self.token_id = token_id
        if topic_cutoff_time is not None:
            self.topic_cutoff_time = topic_cutoff_time
        if topic_id is not None:
            self.topic_id = topic_id
        if topic_title is not None:
            self.topic_title = topic_title
        if value is not None:
            self.value = value

    @property
    def currency_address(self):
        """Gets the currency_address of this V2PortfolioData.  # noqa: E501


        :return: The currency_address of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._currency_address

    @currency_address.setter
    def currency_address(self, currency_address):
        """Sets the currency_address of this V2PortfolioData.


        :param currency_address: The currency_address of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._currency_address = currency_address

    @property
    def day_profit(self):
        """Gets the day_profit of this V2PortfolioData.  # noqa: E501


        :return: The day_profit of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._day_profit

    @day_profit.setter
    def day_profit(self, day_profit):
        """Sets the day_profit of this V2PortfolioData.


        :param day_profit: The day_profit of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._day_profit = day_profit

    @property
    def day_profit_rate(self):
        """Gets the day_profit_rate of this V2PortfolioData.  # noqa: E501


        :return: The day_profit_rate of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._day_profit_rate

    @day_profit_rate.setter
    def day_profit_rate(self, day_profit_rate):
        """Sets the day_profit_rate of this V2PortfolioData.


        :param day_profit_rate: The day_profit_rate of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._day_profit_rate = day_profit_rate

    @property
    def first_create_time(self):
        """Gets the first_create_time of this V2PortfolioData.  # noqa: E501


        :return: The first_create_time of this V2PortfolioData.  # noqa: E501
        :rtype: int
        """
        return self._first_create_time

    @first_create_time.setter
    def first_create_time(self, first_create_time):
        """Sets the first_create_time of this V2PortfolioData.


        :param first_create_time: The first_create_time of this V2PortfolioData.  # noqa: E501
        :type: int
        """

        self._first_create_time = first_create_time

    @property
    def last_create_time(self):
        """Gets the last_create_time of this V2PortfolioData.  # noqa: E501


        :return: The last_create_time of this V2PortfolioData.  # noqa: E501
        :rtype: int
        """
        return self._last_create_time

    @last_create_time.setter
    def last_create_time(self, last_create_time):
        """Sets the last_create_time of this V2PortfolioData.


        :param last_create_time: The last_create_time of this V2PortfolioData.  # noqa: E501
        :type: int
        """

        self._last_create_time = last_create_time

    @property
    def mutil_title(self):
        """Gets the mutil_title of this V2PortfolioData.  # noqa: E501


        :return: The mutil_title of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._mutil_title

    @mutil_title.setter
    def mutil_title(self, mutil_title):
        """Sets the mutil_title of this V2PortfolioData.


        :param mutil_title: The mutil_title of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._mutil_title = mutil_title

    @property
    def mutil_topic_id(self):
        """Gets the mutil_topic_id of this V2PortfolioData.  # noqa: E501


        :return: The mutil_topic_id of this V2PortfolioData.  # noqa: E501
        :rtype: int
        """
        return self._mutil_topic_id

    @mutil_topic_id.setter
    def mutil_topic_id(self, mutil_topic_id):
        """Sets the mutil_topic_id of this V2PortfolioData.


        :param mutil_topic_id: The mutil_topic_id of this V2PortfolioData.  # noqa: E501
        :type: int
        """

        self._mutil_topic_id = mutil_topic_id

    @property
    def outcome(self):
        """Gets the outcome of this V2PortfolioData.  # noqa: E501


        :return: The outcome of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this V2PortfolioData.


        :param outcome: The outcome of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._outcome = outcome

    @property
    def outcome_side(self):
        """Gets the outcome_side of this V2PortfolioData.  # noqa: E501

        1 - yes, 2 - no  # noqa: E501

        :return: The outcome_side of this V2PortfolioData.  # noqa: E501
        :rtype: int
        """
        return self._outcome_side

    @outcome_side.setter
    def outcome_side(self, outcome_side):
        """Sets the outcome_side of this V2PortfolioData.

        1 - yes, 2 - no  # noqa: E501

        :param outcome_side: The outcome_side of this V2PortfolioData.  # noqa: E501
        :type: int
        """

        self._outcome_side = outcome_side

    @property
    def position_avg_price(self):
        """Gets the position_avg_price of this V2PortfolioData.  # noqa: E501


        :return: The position_avg_price of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._position_avg_price

    @position_avg_price.setter
    def position_avg_price(self, position_avg_price):
        """Sets the position_avg_price of this V2PortfolioData.


        :param position_avg_price: The position_avg_price of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._position_avg_price = position_avg_price

    @property
    def profit(self):
        """Gets the profit of this V2PortfolioData.  # noqa: E501


        :return: The profit of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._profit

    @profit.setter
    def profit(self, profit):
        """Sets the profit of this V2PortfolioData.


        :param profit: The profit of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._profit = profit

    @property
    def profit_rate(self):
        """Gets the profit_rate of this V2PortfolioData.  # noqa: E501


        :return: The profit_rate of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._profit_rate

    @profit_rate.setter
    def profit_rate(self, profit_rate):
        """Sets the profit_rate of this V2PortfolioData.


        :param profit_rate: The profit_rate of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._profit_rate = profit_rate

    @property
    def token_amount(self):
        """Gets the token_amount of this V2PortfolioData.  # noqa: E501


        :return: The token_amount of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._token_amount

    @token_amount.setter
    def token_amount(self, token_amount):
        """Sets the token_amount of this V2PortfolioData.


        :param token_amount: The token_amount of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._token_amount = token_amount

    @property
    def token_frozen_amount(self):
        """Gets the token_frozen_amount of this V2PortfolioData.  # noqa: E501


        :return: The token_frozen_amount of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._token_frozen_amount

    @token_frozen_amount.setter
    def token_frozen_amount(self, token_frozen_amount):
        """Sets the token_frozen_amount of this V2PortfolioData.


        :param token_frozen_amount: The token_frozen_amount of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._token_frozen_amount = token_frozen_amount

    @property
    def token_id(self):
        """Gets the token_id of this V2PortfolioData.  # noqa: E501


        :return: The token_id of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this V2PortfolioData.


        :param token_id: The token_id of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def topic_cutoff_time(self):
        """Gets the topic_cutoff_time of this V2PortfolioData.  # noqa: E501


        :return: The topic_cutoff_time of this V2PortfolioData.  # noqa: E501
        :rtype: int
        """
        return self._topic_cutoff_time

    @topic_cutoff_time.setter
    def topic_cutoff_time(self, topic_cutoff_time):
        """Sets the topic_cutoff_time of this V2PortfolioData.


        :param topic_cutoff_time: The topic_cutoff_time of this V2PortfolioData.  # noqa: E501
        :type: int
        """

        self._topic_cutoff_time = topic_cutoff_time

    @property
    def topic_id(self):
        """Gets the topic_id of this V2PortfolioData.  # noqa: E501


        :return: The topic_id of this V2PortfolioData.  # noqa: E501
        :rtype: int
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """Sets the topic_id of this V2PortfolioData.


        :param topic_id: The topic_id of this V2PortfolioData.  # noqa: E501
        :type: int
        """

        self._topic_id = topic_id

    @property
    def topic_title(self):
        """Gets the topic_title of this V2PortfolioData.  # noqa: E501


        :return: The topic_title of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._topic_title

    @topic_title.setter
    def topic_title(self, topic_title):
        """Sets the topic_title of this V2PortfolioData.


        :param topic_title: The topic_title of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._topic_title = topic_title

    @property
    def value(self):
        """Gets the value of this V2PortfolioData.  # noqa: E501


        :return: The value of this V2PortfolioData.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this V2PortfolioData.


        :param value: The value of this V2PortfolioData.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2PortfolioData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2PortfolioData):
            return True

        return self.to_dict() != other.to_dict()
