# coding: utf-8

"""
    PredictionMarket

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from olab_open_api.configuration import Configuration


class V2AddOrderReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contract_address': 'str',
        'currency_address': 'str',
        'expiration': 'str',
        'fee_rate_bps': 'str',
        'maker': 'str',
        'maker_amount': 'str',
        'nonce': 'str',
        'order_exp_time': 'str',
        'origin': 'str',
        'price': 'str',
        'safe_rate': 'str',
        'salt': 'str',
        'side': 'str',
        'sign': 'str',
        'signature': 'str',
        'signature_type': 'str',
        'signer': 'str',
        'taker': 'str',
        'taker_amount': 'str',
        'timestamp': 'int',
        'token_id': 'str',
        'topic_id': 'int',
        'trading_method': 'int'
    }

    attribute_map = {
        'contract_address': 'contractAddress',
        'currency_address': 'currencyAddress',
        'expiration': 'expiration',
        'fee_rate_bps': 'feeRateBps',
        'maker': 'maker',
        'maker_amount': 'makerAmount',
        'nonce': 'nonce',
        'order_exp_time': 'orderExpTime',
        'origin': 'origin',
        'price': 'price',
        'safe_rate': 'safeRate',
        'salt': 'salt',
        'side': 'side',
        'sign': 'sign',
        'signature': 'signature',
        'signature_type': 'signatureType',
        'signer': 'signer',
        'taker': 'taker',
        'taker_amount': 'takerAmount',
        'timestamp': 'timestamp',
        'token_id': 'tokenId',
        'topic_id': 'topicId',
        'trading_method': 'tradingMethod'
    }

    def __init__(self, contract_address=None, currency_address=None, expiration=None, fee_rate_bps=None, maker=None, maker_amount=None, nonce=None, order_exp_time=None, origin=None, price=None, safe_rate=None, salt=None, side=None, sign=None, signature=None, signature_type=None, signer=None, taker=None, taker_amount=None, timestamp=None, token_id=None, topic_id=None, trading_method=None, local_vars_configuration=None):  # noqa: E501
        """V2AddOrderReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contract_address = None
        self._currency_address = None
        self._expiration = None
        self._fee_rate_bps = None
        self._maker = None
        self._maker_amount = None
        self._nonce = None
        self._order_exp_time = None
        self._origin = None
        self._price = None
        self._safe_rate = None
        self._salt = None
        self._side = None
        self._sign = None
        self._signature = None
        self._signature_type = None
        self._signer = None
        self._taker = None
        self._taker_amount = None
        self._timestamp = None
        self._token_id = None
        self._topic_id = None
        self._trading_method = None
        self.discriminator = None

        if contract_address is not None:
            self.contract_address = contract_address
        if currency_address is not None:
            self.currency_address = currency_address
        if expiration is not None:
            self.expiration = expiration
        if fee_rate_bps is not None:
            self.fee_rate_bps = fee_rate_bps
        if maker is not None:
            self.maker = maker
        if maker_amount is not None:
            self.maker_amount = maker_amount
        if nonce is not None:
            self.nonce = nonce
        if order_exp_time is not None:
            self.order_exp_time = order_exp_time
        if origin is not None:
            self.origin = origin
        if price is not None:
            self.price = price
        if safe_rate is not None:
            self.safe_rate = safe_rate
        if salt is not None:
            self.salt = salt
        if side is not None:
            self.side = side
        if sign is not None:
            self.sign = sign
        if signature is not None:
            self.signature = signature
        if signature_type is not None:
            self.signature_type = signature_type
        if signer is not None:
            self.signer = signer
        if taker is not None:
            self.taker = taker
        if taker_amount is not None:
            self.taker_amount = taker_amount
        if timestamp is not None:
            self.timestamp = timestamp
        if token_id is not None:
            self.token_id = token_id
        if topic_id is not None:
            self.topic_id = topic_id
        if trading_method is not None:
            self.trading_method = trading_method

    @property
    def contract_address(self):
        """Gets the contract_address of this V2AddOrderReq.  # noqa: E501

        conditionToken  # noqa: E501

        :return: The contract_address of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this V2AddOrderReq.

        conditionToken  # noqa: E501

        :param contract_address: The contract_address of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._contract_address = contract_address

    @property
    def currency_address(self):
        """Gets the currency_address of this V2AddOrderReq.  # noqa: E501


        :return: The currency_address of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._currency_address

    @currency_address.setter
    def currency_address(self, currency_address):
        """Sets the currency_address of this V2AddOrderReq.


        :param currency_address: The currency_address of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._currency_address = currency_address

    @property
    def expiration(self):
        """Gets the expiration of this V2AddOrderReq.  # noqa: E501

        Order expiration time stamp (no signature) for build order salt  # noqa: E501

        :return: The expiration of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this V2AddOrderReq.

        Order expiration time stamp (no signature) for build order salt  # noqa: E501

        :param expiration: The expiration of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._expiration = expiration

    @property
    def fee_rate_bps(self):
        """Gets the fee_rate_bps of this V2AddOrderReq.  # noqa: E501

        A processing rate expressed in basis points, collected from the earnings of the order creator  # noqa: E501

        :return: The fee_rate_bps of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._fee_rate_bps

    @fee_rate_bps.setter
    def fee_rate_bps(self, fee_rate_bps):
        """Sets the fee_rate_bps of this V2AddOrderReq.

        A processing rate expressed in basis points, collected from the earnings of the order creator  # noqa: E501

        :param fee_rate_bps: The fee_rate_bps of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._fee_rate_bps = fee_rate_bps

    @property
    def maker(self):
        """Gets the maker of this V2AddOrderReq.  # noqa: E501

        The creator of the order, that is, the source of the order funds  # noqa: E501

        :return: The maker of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._maker

    @maker.setter
    def maker(self, maker):
        """Sets the maker of this V2AddOrderReq.

        The creator of the order, that is, the source of the order funds  # noqa: E501

        :param maker: The maker of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._maker = maker

    @property
    def maker_amount(self):
        """Gets the maker_amount of this V2AddOrderReq.  # noqa: E501

        The number of creators, i.e. the maximum number of tokens to be sold  # noqa: E501

        :return: The maker_amount of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._maker_amount

    @maker_amount.setter
    def maker_amount(self, maker_amount):
        """Sets the maker_amount of this V2AddOrderReq.

        The number of creators, i.e. the maximum number of tokens to be sold  # noqa: E501

        :param maker_amount: The maker_amount of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._maker_amount = maker_amount

    @property
    def nonce(self):
        """Gets the nonce of this V2AddOrderReq.  # noqa: E501

        nonce for on-chain order cancellation  # noqa: E501

        :return: The nonce of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this V2AddOrderReq.

        nonce for on-chain order cancellation  # noqa: E501

        :param nonce: The nonce of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._nonce = nonce

    @property
    def order_exp_time(self):
        """Gets the order_exp_time of this V2AddOrderReq.  # noqa: E501

        Order expiration time stamp (for automatic cancellation)  # noqa: E501

        :return: The order_exp_time of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._order_exp_time

    @order_exp_time.setter
    def order_exp_time(self, order_exp_time):
        """Sets the order_exp_time of this V2AddOrderReq.

        Order expiration time stamp (for automatic cancellation)  # noqa: E501

        :param order_exp_time: The order_exp_time of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._order_exp_time = order_exp_time

    @property
    def origin(self):
        """Gets the origin of this V2AddOrderReq.  # noqa: E501


        :return: The origin of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this V2AddOrderReq.


        :param origin: The origin of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def price(self):
        """Gets the price of this V2AddOrderReq.  # noqa: E501

        price  # noqa: E501

        :return: The price of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this V2AddOrderReq.

        price  # noqa: E501

        :param price: The price of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def safe_rate(self):
        """Gets the safe_rate of this V2AddOrderReq.  # noqa: E501

        Market protection rate, the final transaction price deviates from the current spread, 0 means no protection, eg: 0.05  # noqa: E501

        :return: The safe_rate of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._safe_rate

    @safe_rate.setter
    def safe_rate(self, safe_rate):
        """Sets the safe_rate of this V2AddOrderReq.

        Market protection rate, the final transaction price deviates from the current spread, 0 means no protection, eg: 0.05  # noqa: E501

        :param safe_rate: The safe_rate of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._safe_rate = safe_rate

    @property
    def salt(self):
        """Gets the salt of this V2AddOrderReq.  # noqa: E501

        A unique salt value that ensures entropy randomness  # noqa: E501

        :return: The salt of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this V2AddOrderReq.

        A unique salt value that ensures entropy randomness  # noqa: E501

        :param salt: The salt of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._salt = salt

    @property
    def side(self):
        """Gets the side of this V2AddOrderReq.  # noqa: E501

        Direction of the order: SELL or SELL  # noqa: E501

        :return: The side of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this V2AddOrderReq.

        Direction of the order: SELL or SELL  # noqa: E501

        :param side: The side of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def sign(self):
        """Gets the sign of this V2AddOrderReq.  # noqa: E501

        order unique sign  # noqa: E501

        :return: The sign of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this V2AddOrderReq.

        order unique sign  # noqa: E501

        :param sign: The sign of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._sign = sign

    @property
    def signature(self):
        """Gets the signature of this V2AddOrderReq.  # noqa: E501

        Order signature  # noqa: E501

        :return: The signature of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this V2AddOrderReq.

        Order signature  # noqa: E501

        :param signature: The signature of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def signature_type(self):
        """Gets the signature_type of this V2AddOrderReq.  # noqa: E501

        The type of signature used for the order: EOA, POLY_PROXY or POLY_GNOSIS_SAFE  # noqa: E501

        :return: The signature_type of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._signature_type

    @signature_type.setter
    def signature_type(self, signature_type):
        """Sets the signature_type of this V2AddOrderReq.

        The type of signature used for the order: EOA, POLY_PROXY or POLY_GNOSIS_SAFE  # noqa: E501

        :param signature_type: The signature_type of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._signature_type = signature_type

    @property
    def signer(self):
        """Gets the signer of this V2AddOrderReq.  # noqa: E501

        The signer of the order  # noqa: E501

        :return: The signer of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._signer

    @signer.setter
    def signer(self, signer):
        """Sets the signer of this V2AddOrderReq.

        The signer of the order  # noqa: E501

        :param signer: The signer of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._signer = signer

    @property
    def taker(self):
        """Gets the taker of this V2AddOrderReq.  # noqa: E501

        The address of the recipient of the order. Use a zero address to indicate a public order  # noqa: E501

        :return: The taker of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._taker

    @taker.setter
    def taker(self, taker):
        """Sets the taker of this V2AddOrderReq.

        The address of the recipient of the order. Use a zero address to indicate a public order  # noqa: E501

        :param taker: The taker of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._taker = taker

    @property
    def taker_amount(self):
        """Gets the taker_amount of this V2AddOrderReq.  # noqa: E501

        The number of recipients is the minimum number of tokens to be received  # noqa: E501

        :return: The taker_amount of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._taker_amount

    @taker_amount.setter
    def taker_amount(self, taker_amount):
        """Sets the taker_amount of this V2AddOrderReq.

        The number of recipients is the minimum number of tokens to be received  # noqa: E501

        :param taker_amount: The taker_amount of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._taker_amount = taker_amount

    @property
    def timestamp(self):
        """Gets the timestamp of this V2AddOrderReq.  # noqa: E501

        sign timestamp  # noqa: E501

        :return: The timestamp of this V2AddOrderReq.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this V2AddOrderReq.

        sign timestamp  # noqa: E501

        :param timestamp: The timestamp of this V2AddOrderReq.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def token_id(self):
        """Gets the token_id of this V2AddOrderReq.  # noqa: E501

        To buy or sell the token of the c t f e r c1155 asset id  # noqa: E501

        :return: The token_id of this V2AddOrderReq.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this V2AddOrderReq.

        To buy or sell the token of the c t f e r c1155 asset id  # noqa: E501

        :param token_id: The token_id of this V2AddOrderReq.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def topic_id(self):
        """Gets the topic_id of this V2AddOrderReq.  # noqa: E501

        topicId  # noqa: E501

        :return: The topic_id of this V2AddOrderReq.  # noqa: E501
        :rtype: int
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """Sets the topic_id of this V2AddOrderReq.

        topicId  # noqa: E501

        :param topic_id: The topic_id of this V2AddOrderReq.  # noqa: E501
        :type: int
        """

        self._topic_id = topic_id

    @property
    def trading_method(self):
        """Gets the trading_method of this V2AddOrderReq.  # noqa: E501

        Trading method :1- market price, 2- limit price  # noqa: E501

        :return: The trading_method of this V2AddOrderReq.  # noqa: E501
        :rtype: int
        """
        return self._trading_method

    @trading_method.setter
    def trading_method(self, trading_method):
        """Sets the trading_method of this V2AddOrderReq.

        Trading method :1- market price, 2- limit price  # noqa: E501

        :param trading_method: The trading_method of this V2AddOrderReq.  # noqa: E501
        :type: int
        """

        self._trading_method = trading_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2AddOrderReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2AddOrderReq):
            return True

        return self.to_dict() != other.to_dict()
