# coding: utf-8

"""
    PredictionMarket

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from olab_open_api.configuration import Configuration


class V2TopicData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abstract': 'str',
        'child_list': 'list[V2ChildTopicData]',
        'claim_status': 'int',
        'comment_count': 'int',
        'condition_id': 'str',
        'content': 'str',
        'cover_url': 'str',
        'create_time': 'int',
        'creator_avatar': 'str',
        'creator_id': 'int',
        'creator_name': 'str',
        'currency_address': 'str',
        'cutoff_time': 'int',
        'fee_rate_bps': 'str',
        'hold_no_count': 'str',
        'hold_no_price': 'str',
        'hold_yes_count': 'str',
        'hold_yes_price': 'str',
        'inc_rate': 'str',
        'is_show': 'int',
        'is_watched': 'bool',
        'label_id': 'list[int]',
        'label_name': 'list[str]',
        'no_buy_price': 'str',
        'no_label': 'str',
        'no_market_price': 'str',
        'no_pos': 'str',
        'no_remain_token': 'str',
        'no_sell_price': 'str',
        'result_pos': 'str',
        'rules': 'str',
        'status': 'ModelsTopicStatus',
        'thumbnail_url': 'str',
        'title': 'str',
        'topic_id': 'int',
        'total_price': 'str',
        'volume': 'str',
        'yes_buy_price': 'str',
        'yes_label': 'str',
        'yes_market_price': 'str',
        'yes_pos': 'str',
        'yes_remain_token': 'str',
        'yes_sell_price': 'str'
    }

    attribute_map = {
        'abstract': 'abstract',
        'child_list': 'childList',
        'claim_status': 'claimStatus',
        'comment_count': 'commentCount',
        'condition_id': 'conditionId',
        'content': 'content',
        'cover_url': 'coverUrl',
        'create_time': 'createTime',
        'creator_avatar': 'creatorAvatar',
        'creator_id': 'creatorId',
        'creator_name': 'creatorName',
        'currency_address': 'currencyAddress',
        'cutoff_time': 'cutoffTime',
        'fee_rate_bps': 'feeRateBps',
        'hold_no_count': 'holdNoCount',
        'hold_no_price': 'holdNoPrice',
        'hold_yes_count': 'holdYesCount',
        'hold_yes_price': 'holdYesPrice',
        'inc_rate': 'incRate',
        'is_show': 'isShow',
        'is_watched': 'isWatched',
        'label_id': 'labelId',
        'label_name': 'labelName',
        'no_buy_price': 'noBuyPrice',
        'no_label': 'noLabel',
        'no_market_price': 'noMarketPrice',
        'no_pos': 'noPos',
        'no_remain_token': 'noRemainToken',
        'no_sell_price': 'noSellPrice',
        'result_pos': 'resultPos',
        'rules': 'rules',
        'status': 'status',
        'thumbnail_url': 'thumbnailUrl',
        'title': 'title',
        'topic_id': 'topicId',
        'total_price': 'totalPrice',
        'volume': 'volume',
        'yes_buy_price': 'yesBuyPrice',
        'yes_label': 'yesLabel',
        'yes_market_price': 'yesMarketPrice',
        'yes_pos': 'yesPos',
        'yes_remain_token': 'yesRemainToken',
        'yes_sell_price': 'yesSellPrice'
    }

    def __init__(self, abstract=None, child_list=None, claim_status=None, comment_count=None, condition_id=None, content=None, cover_url=None, create_time=None, creator_avatar=None, creator_id=None, creator_name=None, currency_address=None, cutoff_time=None, fee_rate_bps=None, hold_no_count=None, hold_no_price=None, hold_yes_count=None, hold_yes_price=None, inc_rate=None, is_show=None, is_watched=None, label_id=None, label_name=None, no_buy_price=None, no_label=None, no_market_price=None, no_pos=None, no_remain_token=None, no_sell_price=None, result_pos=None, rules=None, status=None, thumbnail_url=None, title=None, topic_id=None, total_price=None, volume=None, yes_buy_price=None, yes_label=None, yes_market_price=None, yes_pos=None, yes_remain_token=None, yes_sell_price=None, local_vars_configuration=None):  # noqa: E501
        """V2TopicData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._abstract = None
        self._child_list = None
        self._claim_status = None
        self._comment_count = None
        self._condition_id = None
        self._content = None
        self._cover_url = None
        self._create_time = None
        self._creator_avatar = None
        self._creator_id = None
        self._creator_name = None
        self._currency_address = None
        self._cutoff_time = None
        self._fee_rate_bps = None
        self._hold_no_count = None
        self._hold_no_price = None
        self._hold_yes_count = None
        self._hold_yes_price = None
        self._inc_rate = None
        self._is_show = None
        self._is_watched = None
        self._label_id = None
        self._label_name = None
        self._no_buy_price = None
        self._no_label = None
        self._no_market_price = None
        self._no_pos = None
        self._no_remain_token = None
        self._no_sell_price = None
        self._result_pos = None
        self._rules = None
        self._status = None
        self._thumbnail_url = None
        self._title = None
        self._topic_id = None
        self._total_price = None
        self._volume = None
        self._yes_buy_price = None
        self._yes_label = None
        self._yes_market_price = None
        self._yes_pos = None
        self._yes_remain_token = None
        self._yes_sell_price = None
        self.discriminator = None

        if abstract is not None:
            self.abstract = abstract
        if child_list is not None:
            self.child_list = child_list
        if claim_status is not None:
            self.claim_status = claim_status
        if comment_count is not None:
            self.comment_count = comment_count
        if condition_id is not None:
            self.condition_id = condition_id
        if content is not None:
            self.content = content
        if cover_url is not None:
            self.cover_url = cover_url
        if create_time is not None:
            self.create_time = create_time
        if creator_avatar is not None:
            self.creator_avatar = creator_avatar
        if creator_id is not None:
            self.creator_id = creator_id
        if creator_name is not None:
            self.creator_name = creator_name
        if currency_address is not None:
            self.currency_address = currency_address
        if cutoff_time is not None:
            self.cutoff_time = cutoff_time
        if fee_rate_bps is not None:
            self.fee_rate_bps = fee_rate_bps
        if hold_no_count is not None:
            self.hold_no_count = hold_no_count
        if hold_no_price is not None:
            self.hold_no_price = hold_no_price
        if hold_yes_count is not None:
            self.hold_yes_count = hold_yes_count
        if hold_yes_price is not None:
            self.hold_yes_price = hold_yes_price
        if inc_rate is not None:
            self.inc_rate = inc_rate
        if is_show is not None:
            self.is_show = is_show
        if is_watched is not None:
            self.is_watched = is_watched
        if label_id is not None:
            self.label_id = label_id
        if label_name is not None:
            self.label_name = label_name
        if no_buy_price is not None:
            self.no_buy_price = no_buy_price
        if no_label is not None:
            self.no_label = no_label
        if no_market_price is not None:
            self.no_market_price = no_market_price
        if no_pos is not None:
            self.no_pos = no_pos
        if no_remain_token is not None:
            self.no_remain_token = no_remain_token
        if no_sell_price is not None:
            self.no_sell_price = no_sell_price
        if result_pos is not None:
            self.result_pos = result_pos
        if rules is not None:
            self.rules = rules
        if status is not None:
            self.status = status
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if title is not None:
            self.title = title
        if topic_id is not None:
            self.topic_id = topic_id
        if total_price is not None:
            self.total_price = total_price
        if volume is not None:
            self.volume = volume
        if yes_buy_price is not None:
            self.yes_buy_price = yes_buy_price
        if yes_label is not None:
            self.yes_label = yes_label
        if yes_market_price is not None:
            self.yes_market_price = yes_market_price
        if yes_pos is not None:
            self.yes_pos = yes_pos
        if yes_remain_token is not None:
            self.yes_remain_token = yes_remain_token
        if yes_sell_price is not None:
            self.yes_sell_price = yes_sell_price

    @property
    def abstract(self):
        """Gets the abstract of this V2TopicData.  # noqa: E501

        topic abstract  # noqa: E501

        :return: The abstract of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this V2TopicData.

        topic abstract  # noqa: E501

        :param abstract: The abstract of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._abstract = abstract

    @property
    def child_list(self):
        """Gets the child_list of this V2TopicData.  # noqa: E501


        :return: The child_list of this V2TopicData.  # noqa: E501
        :rtype: list[V2ChildTopicData]
        """
        return self._child_list

    @child_list.setter
    def child_list(self, child_list):
        """Sets the child_list of this V2TopicData.


        :param child_list: The child_list of this V2TopicData.  # noqa: E501
        :type: list[V2ChildTopicData]
        """

        self._child_list = child_list

    @property
    def claim_status(self):
        """Gets the claim_status of this V2TopicData.  # noqa: E501

        claim status:0 - can''t claim, 1 - wait claim, 2 - claiming, 3 - claim failed, 4 - claimed, while claim failed, user can claim again  # noqa: E501

        :return: The claim_status of this V2TopicData.  # noqa: E501
        :rtype: int
        """
        return self._claim_status

    @claim_status.setter
    def claim_status(self, claim_status):
        """Sets the claim_status of this V2TopicData.

        claim status:0 - can''t claim, 1 - wait claim, 2 - claiming, 3 - claim failed, 4 - claimed, while claim failed, user can claim again  # noqa: E501

        :param claim_status: The claim_status of this V2TopicData.  # noqa: E501
        :type: int
        """

        self._claim_status = claim_status

    @property
    def comment_count(self):
        """Gets the comment_count of this V2TopicData.  # noqa: E501

        Number of comments  # noqa: E501

        :return: The comment_count of this V2TopicData.  # noqa: E501
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this V2TopicData.

        Number of comments  # noqa: E501

        :param comment_count: The comment_count of this V2TopicData.  # noqa: E501
        :type: int
        """

        self._comment_count = comment_count

    @property
    def condition_id(self):
        """Gets the condition_id of this V2TopicData.  # noqa: E501


        :return: The condition_id of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """Sets the condition_id of this V2TopicData.


        :param condition_id: The condition_id of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._condition_id = condition_id

    @property
    def content(self):
        """Gets the content of this V2TopicData.  # noqa: E501

        topic's content  # noqa: E501

        :return: The content of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this V2TopicData.

        topic's content  # noqa: E501

        :param content: The content of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def cover_url(self):
        """Gets the cover_url of this V2TopicData.  # noqa: E501

        cover picture of this topic  # noqa: E501

        :return: The cover_url of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._cover_url

    @cover_url.setter
    def cover_url(self, cover_url):
        """Sets the cover_url of this V2TopicData.

        cover picture of this topic  # noqa: E501

        :param cover_url: The cover_url of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._cover_url = cover_url

    @property
    def create_time(self):
        """Gets the create_time of this V2TopicData.  # noqa: E501

        created time  # noqa: E501

        :return: The create_time of this V2TopicData.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V2TopicData.

        created time  # noqa: E501

        :param create_time: The create_time of this V2TopicData.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def creator_avatar(self):
        """Gets the creator_avatar of this V2TopicData.  # noqa: E501

        creator's avatar  # noqa: E501

        :return: The creator_avatar of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._creator_avatar

    @creator_avatar.setter
    def creator_avatar(self, creator_avatar):
        """Sets the creator_avatar of this V2TopicData.

        creator's avatar  # noqa: E501

        :param creator_avatar: The creator_avatar of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._creator_avatar = creator_avatar

    @property
    def creator_id(self):
        """Gets the creator_id of this V2TopicData.  # noqa: E501

        management user id  # noqa: E501

        :return: The creator_id of this V2TopicData.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this V2TopicData.

        management user id  # noqa: E501

        :param creator_id: The creator_id of this V2TopicData.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def creator_name(self):
        """Gets the creator_name of this V2TopicData.  # noqa: E501

        creator's name  # noqa: E501

        :return: The creator_name of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this V2TopicData.

        creator's name  # noqa: E501

        :param creator_name: The creator_name of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def currency_address(self):
        """Gets the currency_address of this V2TopicData.  # noqa: E501


        :return: The currency_address of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._currency_address

    @currency_address.setter
    def currency_address(self, currency_address):
        """Sets the currency_address of this V2TopicData.


        :param currency_address: The currency_address of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._currency_address = currency_address

    @property
    def cutoff_time(self):
        """Gets the cutoff_time of this V2TopicData.  # noqa: E501


        :return: The cutoff_time of this V2TopicData.  # noqa: E501
        :rtype: int
        """
        return self._cutoff_time

    @cutoff_time.setter
    def cutoff_time(self, cutoff_time):
        """Sets the cutoff_time of this V2TopicData.


        :param cutoff_time: The cutoff_time of this V2TopicData.  # noqa: E501
        :type: int
        """

        self._cutoff_time = cutoff_time

    @property
    def fee_rate_bps(self):
        """Gets the fee_rate_bps of this V2TopicData.  # noqa: E501


        :return: The fee_rate_bps of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._fee_rate_bps

    @fee_rate_bps.setter
    def fee_rate_bps(self, fee_rate_bps):
        """Sets the fee_rate_bps of this V2TopicData.


        :param fee_rate_bps: The fee_rate_bps of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._fee_rate_bps = fee_rate_bps

    @property
    def hold_no_count(self):
        """Gets the hold_no_count of this V2TopicData.  # noqa: E501

        hold no count  # noqa: E501

        :return: The hold_no_count of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._hold_no_count

    @hold_no_count.setter
    def hold_no_count(self, hold_no_count):
        """Sets the hold_no_count of this V2TopicData.

        hold no count  # noqa: E501

        :param hold_no_count: The hold_no_count of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._hold_no_count = hold_no_count

    @property
    def hold_no_price(self):
        """Gets the hold_no_price of this V2TopicData.  # noqa: E501

        hold no price  # noqa: E501

        :return: The hold_no_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._hold_no_price

    @hold_no_price.setter
    def hold_no_price(self, hold_no_price):
        """Sets the hold_no_price of this V2TopicData.

        hold no price  # noqa: E501

        :param hold_no_price: The hold_no_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._hold_no_price = hold_no_price

    @property
    def hold_yes_count(self):
        """Gets the hold_yes_count of this V2TopicData.  # noqa: E501

        hold yes count  # noqa: E501

        :return: The hold_yes_count of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._hold_yes_count

    @hold_yes_count.setter
    def hold_yes_count(self, hold_yes_count):
        """Sets the hold_yes_count of this V2TopicData.

        hold yes count  # noqa: E501

        :param hold_yes_count: The hold_yes_count of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._hold_yes_count = hold_yes_count

    @property
    def hold_yes_price(self):
        """Gets the hold_yes_price of this V2TopicData.  # noqa: E501

        hold price  # noqa: E501

        :return: The hold_yes_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._hold_yes_price

    @hold_yes_price.setter
    def hold_yes_price(self, hold_yes_price):
        """Sets the hold_yes_price of this V2TopicData.

        hold price  # noqa: E501

        :param hold_yes_price: The hold_yes_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._hold_yes_price = hold_yes_price

    @property
    def inc_rate(self):
        """Gets the inc_rate of this V2TopicData.  # noqa: E501

        Percentage change  # noqa: E501

        :return: The inc_rate of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._inc_rate

    @inc_rate.setter
    def inc_rate(self, inc_rate):
        """Sets the inc_rate of this V2TopicData.

        Percentage change  # noqa: E501

        :param inc_rate: The inc_rate of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._inc_rate = inc_rate

    @property
    def is_show(self):
        """Gets the is_show of this V2TopicData.  # noqa: E501


        :return: The is_show of this V2TopicData.  # noqa: E501
        :rtype: int
        """
        return self._is_show

    @is_show.setter
    def is_show(self, is_show):
        """Sets the is_show of this V2TopicData.


        :param is_show: The is_show of this V2TopicData.  # noqa: E501
        :type: int
        """

        self._is_show = is_show

    @property
    def is_watched(self):
        """Gets the is_watched of this V2TopicData.  # noqa: E501

        Have you paid attention to  # noqa: E501

        :return: The is_watched of this V2TopicData.  # noqa: E501
        :rtype: bool
        """
        return self._is_watched

    @is_watched.setter
    def is_watched(self, is_watched):
        """Sets the is_watched of this V2TopicData.

        Have you paid attention to  # noqa: E501

        :param is_watched: The is_watched of this V2TopicData.  # noqa: E501
        :type: bool
        """

        self._is_watched = is_watched

    @property
    def label_id(self):
        """Gets the label_id of this V2TopicData.  # noqa: E501

        labelId array of this topic  # noqa: E501

        :return: The label_id of this V2TopicData.  # noqa: E501
        :rtype: list[int]
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """Sets the label_id of this V2TopicData.

        labelId array of this topic  # noqa: E501

        :param label_id: The label_id of this V2TopicData.  # noqa: E501
        :type: list[int]
        """

        self._label_id = label_id

    @property
    def label_name(self):
        """Gets the label_name of this V2TopicData.  # noqa: E501

        labelName array of this topic  # noqa: E501

        :return: The label_name of this V2TopicData.  # noqa: E501
        :rtype: list[str]
        """
        return self._label_name

    @label_name.setter
    def label_name(self, label_name):
        """Sets the label_name of this V2TopicData.

        labelName array of this topic  # noqa: E501

        :param label_name: The label_name of this V2TopicData.  # noqa: E501
        :type: list[str]
        """

        self._label_name = label_name

    @property
    def no_buy_price(self):
        """Gets the no_buy_price of this V2TopicData.  # noqa: E501


        :return: The no_buy_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._no_buy_price

    @no_buy_price.setter
    def no_buy_price(self, no_buy_price):
        """Sets the no_buy_price of this V2TopicData.


        :param no_buy_price: The no_buy_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._no_buy_price = no_buy_price

    @property
    def no_label(self):
        """Gets the no_label of this V2TopicData.  # noqa: E501

        display text for no  # noqa: E501

        :return: The no_label of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._no_label

    @no_label.setter
    def no_label(self, no_label):
        """Sets the no_label of this V2TopicData.

        display text for no  # noqa: E501

        :param no_label: The no_label of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._no_label = no_label

    @property
    def no_market_price(self):
        """Gets the no_market_price of this V2TopicData.  # noqa: E501


        :return: The no_market_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._no_market_price

    @no_market_price.setter
    def no_market_price(self, no_market_price):
        """Sets the no_market_price of this V2TopicData.


        :param no_market_price: The no_market_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._no_market_price = no_market_price

    @property
    def no_pos(self):
        """Gets the no_pos of this V2TopicData.  # noqa: E501

        No-Position  # noqa: E501

        :return: The no_pos of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._no_pos

    @no_pos.setter
    def no_pos(self, no_pos):
        """Sets the no_pos of this V2TopicData.

        No-Position  # noqa: E501

        :param no_pos: The no_pos of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._no_pos = no_pos

    @property
    def no_remain_token(self):
        """Gets the no_remain_token of this V2TopicData.  # noqa: E501


        :return: The no_remain_token of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._no_remain_token

    @no_remain_token.setter
    def no_remain_token(self, no_remain_token):
        """Sets the no_remain_token of this V2TopicData.


        :param no_remain_token: The no_remain_token of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._no_remain_token = no_remain_token

    @property
    def no_sell_price(self):
        """Gets the no_sell_price of this V2TopicData.  # noqa: E501


        :return: The no_sell_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._no_sell_price

    @no_sell_price.setter
    def no_sell_price(self, no_sell_price):
        """Sets the no_sell_price of this V2TopicData.


        :param no_sell_price: The no_sell_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._no_sell_price = no_sell_price

    @property
    def result_pos(self):
        """Gets the result_pos of this V2TopicData.  # noqa: E501

        win pos  # noqa: E501

        :return: The result_pos of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._result_pos

    @result_pos.setter
    def result_pos(self, result_pos):
        """Sets the result_pos of this V2TopicData.

        win pos  # noqa: E501

        :param result_pos: The result_pos of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._result_pos = result_pos

    @property
    def rules(self):
        """Gets the rules of this V2TopicData.  # noqa: E501


        :return: The rules of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this V2TopicData.


        :param rules: The rules of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._rules = rules

    @property
    def status(self):
        """Gets the status of this V2TopicData.  # noqa: E501


        :return: The status of this V2TopicData.  # noqa: E501
        :rtype: ModelsTopicStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2TopicData.


        :param status: The status of this V2TopicData.  # noqa: E501
        :type: ModelsTopicStatus
        """

        self._status = status

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this V2TopicData.  # noqa: E501

        thumbnail picture of this topic  # noqa: E501

        :return: The thumbnail_url of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this V2TopicData.

        thumbnail picture of this topic  # noqa: E501

        :param thumbnail_url: The thumbnail_url of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def title(self):
        """Gets the title of this V2TopicData.  # noqa: E501

        topic title  # noqa: E501

        :return: The title of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V2TopicData.

        topic title  # noqa: E501

        :param title: The title of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def topic_id(self):
        """Gets the topic_id of this V2TopicData.  # noqa: E501

        topId  # noqa: E501

        :return: The topic_id of this V2TopicData.  # noqa: E501
        :rtype: int
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """Sets the topic_id of this V2TopicData.

        topId  # noqa: E501

        :param topic_id: The topic_id of this V2TopicData.  # noqa: E501
        :type: int
        """

        self._topic_id = topic_id

    @property
    def total_price(self):
        """Gets the total_price of this V2TopicData.  # noqa: E501

        total bet  # noqa: E501

        :return: The total_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this V2TopicData.

        total bet  # noqa: E501

        :param total_price: The total_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._total_price = total_price

    @property
    def volume(self):
        """Gets the volume of this V2TopicData.  # noqa: E501


        :return: The volume of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this V2TopicData.


        :param volume: The volume of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def yes_buy_price(self):
        """Gets the yes_buy_price of this V2TopicData.  # noqa: E501


        :return: The yes_buy_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._yes_buy_price

    @yes_buy_price.setter
    def yes_buy_price(self, yes_buy_price):
        """Sets the yes_buy_price of this V2TopicData.


        :param yes_buy_price: The yes_buy_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._yes_buy_price = yes_buy_price

    @property
    def yes_label(self):
        """Gets the yes_label of this V2TopicData.  # noqa: E501

        display text for yes  # noqa: E501

        :return: The yes_label of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._yes_label

    @yes_label.setter
    def yes_label(self, yes_label):
        """Sets the yes_label of this V2TopicData.

        display text for yes  # noqa: E501

        :param yes_label: The yes_label of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._yes_label = yes_label

    @property
    def yes_market_price(self):
        """Gets the yes_market_price of this V2TopicData.  # noqa: E501


        :return: The yes_market_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._yes_market_price

    @yes_market_price.setter
    def yes_market_price(self, yes_market_price):
        """Sets the yes_market_price of this V2TopicData.


        :param yes_market_price: The yes_market_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._yes_market_price = yes_market_price

    @property
    def yes_pos(self):
        """Gets the yes_pos of this V2TopicData.  # noqa: E501

        Yes-Position  # noqa: E501

        :return: The yes_pos of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._yes_pos

    @yes_pos.setter
    def yes_pos(self, yes_pos):
        """Sets the yes_pos of this V2TopicData.

        Yes-Position  # noqa: E501

        :param yes_pos: The yes_pos of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._yes_pos = yes_pos

    @property
    def yes_remain_token(self):
        """Gets the yes_remain_token of this V2TopicData.  # noqa: E501


        :return: The yes_remain_token of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._yes_remain_token

    @yes_remain_token.setter
    def yes_remain_token(self, yes_remain_token):
        """Sets the yes_remain_token of this V2TopicData.


        :param yes_remain_token: The yes_remain_token of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._yes_remain_token = yes_remain_token

    @property
    def yes_sell_price(self):
        """Gets the yes_sell_price of this V2TopicData.  # noqa: E501


        :return: The yes_sell_price of this V2TopicData.  # noqa: E501
        :rtype: str
        """
        return self._yes_sell_price

    @yes_sell_price.setter
    def yes_sell_price(self, yes_sell_price):
        """Sets the yes_sell_price of this V2TopicData.


        :param yes_sell_price: The yes_sell_price of this V2TopicData.  # noqa: E501
        :type: str
        """

        self._yes_sell_price = yes_sell_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2TopicData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2TopicData):
            return True

        return self.to_dict() != other.to_dict()
