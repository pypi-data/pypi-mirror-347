# coding: utf-8

"""
    PredictionMarket

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from olab_open_api.configuration import Configuration


class V2GetBalanceResp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balance': 'str',
        'currency_address': 'str',
        'net_worth': 'str'
    }

    attribute_map = {
        'balance': 'balance',
        'currency_address': 'currencyAddress',
        'net_worth': 'netWorth'
    }

    def __init__(self, balance=None, currency_address=None, net_worth=None, local_vars_configuration=None):  # noqa: E501
        """V2GetBalanceResp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._balance = None
        self._currency_address = None
        self._net_worth = None
        self.discriminator = None

        if balance is not None:
            self.balance = balance
        if currency_address is not None:
            self.currency_address = currency_address
        if net_worth is not None:
            self.net_worth = net_worth

    @property
    def balance(self):
        """Gets the balance of this V2GetBalanceResp.  # noqa: E501

        AvatarUrl                string `json:\"avatarUrl\"`  # noqa: E501

        :return: The balance of this V2GetBalanceResp.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this V2GetBalanceResp.

        AvatarUrl                string `json:\"avatarUrl\"`  # noqa: E501

        :param balance: The balance of this V2GetBalanceResp.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def currency_address(self):
        """Gets the currency_address of this V2GetBalanceResp.  # noqa: E501


        :return: The currency_address of this V2GetBalanceResp.  # noqa: E501
        :rtype: str
        """
        return self._currency_address

    @currency_address.setter
    def currency_address(self, currency_address):
        """Sets the currency_address of this V2GetBalanceResp.


        :param currency_address: The currency_address of this V2GetBalanceResp.  # noqa: E501
        :type: str
        """

        self._currency_address = currency_address

    @property
    def net_worth(self):
        """Gets the net_worth of this V2GetBalanceResp.  # noqa: E501


        :return: The net_worth of this V2GetBalanceResp.  # noqa: E501
        :rtype: str
        """
        return self._net_worth

    @net_worth.setter
    def net_worth(self, net_worth):
        """Sets the net_worth of this V2GetBalanceResp.


        :param net_worth: The net_worth of this V2GetBalanceResp.  # noqa: E501
        :type: str
        """

        self._net_worth = net_worth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2GetBalanceResp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2GetBalanceResp):
            return True

        return self.to_dict() != other.to_dict()
