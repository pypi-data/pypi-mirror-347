# coding: utf-8

"""
    PredictionMarket

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from olab_open_api.configuration import Configuration


class ViewCurrencyData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chain_id': 'str',
        'create_time': 'int',
        'ctfexchange_address': 'str',
        'currency_address': 'str',
        'currency_name': 'str',
        'decimal': 'int',
        'display_decimal': 'int',
        'id': 'int',
        'is_stable_coin': 'int',
        'status': 'int',
        'symbol': 'str',
        'withdraw_min_amount': 'float'
    }

    attribute_map = {
        'chain_id': 'chain_id',
        'create_time': 'create_time',
        'ctfexchange_address': 'ctfexchange_address',
        'currency_address': 'currency_address',
        'currency_name': 'currency_name',
        'decimal': 'decimal',
        'display_decimal': 'display_decimal',
        'id': 'id',
        'is_stable_coin': 'is_stable_coin',
        'status': 'status',
        'symbol': 'symbol',
        'withdraw_min_amount': 'withdraw_min_amount'
    }

    def __init__(self, chain_id=None, create_time=None, ctfexchange_address=None, currency_address=None, currency_name=None, decimal=None, display_decimal=None, id=None, is_stable_coin=None, status=None, symbol=None, withdraw_min_amount=None, local_vars_configuration=None):  # noqa: E501
        """ViewCurrencyData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._chain_id = None
        self._create_time = None
        self._ctfexchange_address = None
        self._currency_address = None
        self._currency_name = None
        self._decimal = None
        self._display_decimal = None
        self._id = None
        self._is_stable_coin = None
        self._status = None
        self._symbol = None
        self._withdraw_min_amount = None
        self.discriminator = None

        if chain_id is not None:
            self.chain_id = chain_id
        if create_time is not None:
            self.create_time = create_time
        if ctfexchange_address is not None:
            self.ctfexchange_address = ctfexchange_address
        if currency_address is not None:
            self.currency_address = currency_address
        if currency_name is not None:
            self.currency_name = currency_name
        if decimal is not None:
            self.decimal = decimal
        if display_decimal is not None:
            self.display_decimal = display_decimal
        if id is not None:
            self.id = id
        if is_stable_coin is not None:
            self.is_stable_coin = is_stable_coin
        if status is not None:
            self.status = status
        if symbol is not None:
            self.symbol = symbol
        if withdraw_min_amount is not None:
            self.withdraw_min_amount = withdraw_min_amount

    @property
    def chain_id(self):
        """Gets the chain_id of this ViewCurrencyData.  # noqa: E501


        :return: The chain_id of this ViewCurrencyData.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this ViewCurrencyData.


        :param chain_id: The chain_id of this ViewCurrencyData.  # noqa: E501
        :type: str
        """

        self._chain_id = chain_id

    @property
    def create_time(self):
        """Gets the create_time of this ViewCurrencyData.  # noqa: E501


        :return: The create_time of this ViewCurrencyData.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ViewCurrencyData.


        :param create_time: The create_time of this ViewCurrencyData.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def ctfexchange_address(self):
        """Gets the ctfexchange_address of this ViewCurrencyData.  # noqa: E501


        :return: The ctfexchange_address of this ViewCurrencyData.  # noqa: E501
        :rtype: str
        """
        return self._ctfexchange_address

    @ctfexchange_address.setter
    def ctfexchange_address(self, ctfexchange_address):
        """Sets the ctfexchange_address of this ViewCurrencyData.


        :param ctfexchange_address: The ctfexchange_address of this ViewCurrencyData.  # noqa: E501
        :type: str
        """

        self._ctfexchange_address = ctfexchange_address

    @property
    def currency_address(self):
        """Gets the currency_address of this ViewCurrencyData.  # noqa: E501


        :return: The currency_address of this ViewCurrencyData.  # noqa: E501
        :rtype: str
        """
        return self._currency_address

    @currency_address.setter
    def currency_address(self, currency_address):
        """Sets the currency_address of this ViewCurrencyData.


        :param currency_address: The currency_address of this ViewCurrencyData.  # noqa: E501
        :type: str
        """

        self._currency_address = currency_address

    @property
    def currency_name(self):
        """Gets the currency_name of this ViewCurrencyData.  # noqa: E501


        :return: The currency_name of this ViewCurrencyData.  # noqa: E501
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name):
        """Sets the currency_name of this ViewCurrencyData.


        :param currency_name: The currency_name of this ViewCurrencyData.  # noqa: E501
        :type: str
        """

        self._currency_name = currency_name

    @property
    def decimal(self):
        """Gets the decimal of this ViewCurrencyData.  # noqa: E501


        :return: The decimal of this ViewCurrencyData.  # noqa: E501
        :rtype: int
        """
        return self._decimal

    @decimal.setter
    def decimal(self, decimal):
        """Sets the decimal of this ViewCurrencyData.


        :param decimal: The decimal of this ViewCurrencyData.  # noqa: E501
        :type: int
        """

        self._decimal = decimal

    @property
    def display_decimal(self):
        """Gets the display_decimal of this ViewCurrencyData.  # noqa: E501


        :return: The display_decimal of this ViewCurrencyData.  # noqa: E501
        :rtype: int
        """
        return self._display_decimal

    @display_decimal.setter
    def display_decimal(self, display_decimal):
        """Sets the display_decimal of this ViewCurrencyData.


        :param display_decimal: The display_decimal of this ViewCurrencyData.  # noqa: E501
        :type: int
        """

        self._display_decimal = display_decimal

    @property
    def id(self):
        """Gets the id of this ViewCurrencyData.  # noqa: E501


        :return: The id of this ViewCurrencyData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ViewCurrencyData.


        :param id: The id of this ViewCurrencyData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_stable_coin(self):
        """Gets the is_stable_coin of this ViewCurrencyData.  # noqa: E501


        :return: The is_stable_coin of this ViewCurrencyData.  # noqa: E501
        :rtype: int
        """
        return self._is_stable_coin

    @is_stable_coin.setter
    def is_stable_coin(self, is_stable_coin):
        """Sets the is_stable_coin of this ViewCurrencyData.


        :param is_stable_coin: The is_stable_coin of this ViewCurrencyData.  # noqa: E501
        :type: int
        """

        self._is_stable_coin = is_stable_coin

    @property
    def status(self):
        """Gets the status of this ViewCurrencyData.  # noqa: E501


        :return: The status of this ViewCurrencyData.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ViewCurrencyData.


        :param status: The status of this ViewCurrencyData.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def symbol(self):
        """Gets the symbol of this ViewCurrencyData.  # noqa: E501


        :return: The symbol of this ViewCurrencyData.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ViewCurrencyData.


        :param symbol: The symbol of this ViewCurrencyData.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def withdraw_min_amount(self):
        """Gets the withdraw_min_amount of this ViewCurrencyData.  # noqa: E501


        :return: The withdraw_min_amount of this ViewCurrencyData.  # noqa: E501
        :rtype: float
        """
        return self._withdraw_min_amount

    @withdraw_min_amount.setter
    def withdraw_min_amount(self, withdraw_min_amount):
        """Sets the withdraw_min_amount of this ViewCurrencyData.


        :param withdraw_min_amount: The withdraw_min_amount of this ViewCurrencyData.  # noqa: E501
        :type: float
        """

        self._withdraw_min_amount = withdraw_min_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewCurrencyData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ViewCurrencyData):
            return True

        return self.to_dict() != other.to_dict()
