# coding: utf-8

"""
    PredictionMarket

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from olab_open_api.configuration import Configuration


class V2TradeData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'str',
        'currency_address': 'str',
        'currency_amount': 'str',
        'currency_price': 'str',
        'is_self_trade': 'int',
        'mutil_title': 'str',
        'mutil_topic_id': 'int',
        'outcome': 'str',
        'outcome_side': 'int',
        'price': 'str',
        'profit': 'str',
        'shares': 'str',
        'side': 'str',
        'status': 'int',
        'title': 'str',
        'topic_id': 'int',
        'trade_no': 'str',
        'trans_no': 'str',
        'tx_hash': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'currency_address': 'currencyAddress',
        'currency_amount': 'currencyAmount',
        'currency_price': 'currencyPrice',
        'is_self_trade': 'isSelfTrade',
        'mutil_title': 'mutilTitle',
        'mutil_topic_id': 'mutilTopicId',
        'outcome': 'outcome',
        'outcome_side': 'outcomeSide',
        'price': 'price',
        'profit': 'profit',
        'shares': 'shares',
        'side': 'side',
        'status': 'status',
        'title': 'title',
        'topic_id': 'topicId',
        'trade_no': 'tradeNo',
        'trans_no': 'transNo',
        'tx_hash': 'txHash'
    }

    def __init__(self, amount=None, currency_address=None, currency_amount=None, currency_price=None, is_self_trade=None, mutil_title=None, mutil_topic_id=None, outcome=None, outcome_side=None, price=None, profit=None, shares=None, side=None, status=None, title=None, topic_id=None, trade_no=None, trans_no=None, tx_hash=None, local_vars_configuration=None):  # noqa: E501
        """V2TradeData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._currency_address = None
        self._currency_amount = None
        self._currency_price = None
        self._is_self_trade = None
        self._mutil_title = None
        self._mutil_topic_id = None
        self._outcome = None
        self._outcome_side = None
        self._price = None
        self._profit = None
        self._shares = None
        self._side = None
        self._status = None
        self._title = None
        self._topic_id = None
        self._trade_no = None
        self._trans_no = None
        self._tx_hash = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if currency_address is not None:
            self.currency_address = currency_address
        if currency_amount is not None:
            self.currency_amount = currency_amount
        if currency_price is not None:
            self.currency_price = currency_price
        if is_self_trade is not None:
            self.is_self_trade = is_self_trade
        if mutil_title is not None:
            self.mutil_title = mutil_title
        if mutil_topic_id is not None:
            self.mutil_topic_id = mutil_topic_id
        if outcome is not None:
            self.outcome = outcome
        if outcome_side is not None:
            self.outcome_side = outcome_side
        if price is not None:
            self.price = price
        if profit is not None:
            self.profit = profit
        if shares is not None:
            self.shares = shares
        if side is not None:
            self.side = side
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title
        if topic_id is not None:
            self.topic_id = topic_id
        if trade_no is not None:
            self.trade_no = trade_no
        if trans_no is not None:
            self.trans_no = trans_no
        if tx_hash is not None:
            self.tx_hash = tx_hash

    @property
    def amount(self):
        """Gets the amount of this V2TradeData.  # noqa: E501


        :return: The amount of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this V2TradeData.


        :param amount: The amount of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency_address(self):
        """Gets the currency_address of this V2TradeData.  # noqa: E501


        :return: The currency_address of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._currency_address

    @currency_address.setter
    def currency_address(self, currency_address):
        """Sets the currency_address of this V2TradeData.


        :param currency_address: The currency_address of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._currency_address = currency_address

    @property
    def currency_amount(self):
        """Gets the currency_amount of this V2TradeData.  # noqa: E501


        :return: The currency_amount of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._currency_amount

    @currency_amount.setter
    def currency_amount(self, currency_amount):
        """Sets the currency_amount of this V2TradeData.


        :param currency_amount: The currency_amount of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._currency_amount = currency_amount

    @property
    def currency_price(self):
        """Gets the currency_price of this V2TradeData.  # noqa: E501


        :return: The currency_price of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._currency_price

    @currency_price.setter
    def currency_price(self, currency_price):
        """Sets the currency_price of this V2TradeData.


        :param currency_price: The currency_price of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._currency_price = currency_price

    @property
    def is_self_trade(self):
        """Gets the is_self_trade of this V2TradeData.  # noqa: E501


        :return: The is_self_trade of this V2TradeData.  # noqa: E501
        :rtype: int
        """
        return self._is_self_trade

    @is_self_trade.setter
    def is_self_trade(self, is_self_trade):
        """Sets the is_self_trade of this V2TradeData.


        :param is_self_trade: The is_self_trade of this V2TradeData.  # noqa: E501
        :type: int
        """

        self._is_self_trade = is_self_trade

    @property
    def mutil_title(self):
        """Gets the mutil_title of this V2TradeData.  # noqa: E501


        :return: The mutil_title of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._mutil_title

    @mutil_title.setter
    def mutil_title(self, mutil_title):
        """Sets the mutil_title of this V2TradeData.


        :param mutil_title: The mutil_title of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._mutil_title = mutil_title

    @property
    def mutil_topic_id(self):
        """Gets the mutil_topic_id of this V2TradeData.  # noqa: E501


        :return: The mutil_topic_id of this V2TradeData.  # noqa: E501
        :rtype: int
        """
        return self._mutil_topic_id

    @mutil_topic_id.setter
    def mutil_topic_id(self, mutil_topic_id):
        """Sets the mutil_topic_id of this V2TradeData.


        :param mutil_topic_id: The mutil_topic_id of this V2TradeData.  # noqa: E501
        :type: int
        """

        self._mutil_topic_id = mutil_topic_id

    @property
    def outcome(self):
        """Gets the outcome of this V2TradeData.  # noqa: E501


        :return: The outcome of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this V2TradeData.


        :param outcome: The outcome of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._outcome = outcome

    @property
    def outcome_side(self):
        """Gets the outcome_side of this V2TradeData.  # noqa: E501

        1 - yes, 2 - no  # noqa: E501

        :return: The outcome_side of this V2TradeData.  # noqa: E501
        :rtype: int
        """
        return self._outcome_side

    @outcome_side.setter
    def outcome_side(self, outcome_side):
        """Sets the outcome_side of this V2TradeData.

        1 - yes, 2 - no  # noqa: E501

        :param outcome_side: The outcome_side of this V2TradeData.  # noqa: E501
        :type: int
        """

        self._outcome_side = outcome_side

    @property
    def price(self):
        """Gets the price of this V2TradeData.  # noqa: E501


        :return: The price of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this V2TradeData.


        :param price: The price of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def profit(self):
        """Gets the profit of this V2TradeData.  # noqa: E501


        :return: The profit of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._profit

    @profit.setter
    def profit(self, profit):
        """Sets the profit of this V2TradeData.


        :param profit: The profit of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._profit = profit

    @property
    def shares(self):
        """Gets the shares of this V2TradeData.  # noqa: E501


        :return: The shares of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this V2TradeData.


        :param shares: The shares of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._shares = shares

    @property
    def side(self):
        """Gets the side of this V2TradeData.  # noqa: E501


        :return: The side of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this V2TradeData.


        :param side: The side of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._side = side

    @property
    def status(self):
        """Gets the status of this V2TradeData.  # noqa: E501

        1-pending, 2-finished, 3-canceled, 4-expired  # noqa: E501

        :return: The status of this V2TradeData.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2TradeData.

        1-pending, 2-finished, 3-canceled, 4-expired  # noqa: E501

        :param status: The status of this V2TradeData.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this V2TradeData.  # noqa: E501


        :return: The title of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V2TradeData.


        :param title: The title of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def topic_id(self):
        """Gets the topic_id of this V2TradeData.  # noqa: E501


        :return: The topic_id of this V2TradeData.  # noqa: E501
        :rtype: int
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """Sets the topic_id of this V2TradeData.


        :param topic_id: The topic_id of this V2TradeData.  # noqa: E501
        :type: int
        """

        self._topic_id = topic_id

    @property
    def trade_no(self):
        """Gets the trade_no of this V2TradeData.  # noqa: E501


        :return: The trade_no of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._trade_no

    @trade_no.setter
    def trade_no(self, trade_no):
        """Sets the trade_no of this V2TradeData.


        :param trade_no: The trade_no of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._trade_no = trade_no

    @property
    def trans_no(self):
        """Gets the trans_no of this V2TradeData.  # noqa: E501


        :return: The trans_no of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._trans_no

    @trans_no.setter
    def trans_no(self, trans_no):
        """Sets the trans_no of this V2TradeData.


        :param trans_no: The trans_no of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._trans_no = trans_no

    @property
    def tx_hash(self):
        """Gets the tx_hash of this V2TradeData.  # noqa: E501


        :return: The tx_hash of this V2TradeData.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this V2TradeData.


        :param tx_hash: The tx_hash of this V2TradeData.  # noqa: E501
        :type: str
        """

        self._tx_hash = tx_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2TradeData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2TradeData):
            return True

        return self.to_dict() != other.to_dict()
