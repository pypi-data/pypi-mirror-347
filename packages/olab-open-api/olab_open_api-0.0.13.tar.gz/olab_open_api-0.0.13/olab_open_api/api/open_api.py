# coding: utf-8

"""
    PredictionMarket

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from olab_open_api.api_client import ApiClient
from olab_open_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class OlabOpenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def openapi_currency_get(self, apikey, **kwargs):  # noqa: E501
        """Get currency list  # noqa: E501

        Retrieve a list of currencies based on pagination parameters and filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_currency_get(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param str chain_id: Chain ID
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_currency_get_with_http_info(apikey, **kwargs)  # noqa: E501

    def openapi_currency_get_with_http_info(self, apikey, **kwargs):  # noqa: E501
        """Get currency list  # noqa: E501

        Retrieve a list of currencies based on pagination parameters and filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_currency_get_with_http_info(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param str chain_id: Chain ID
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'apikey',
            'page',
            'limit',
            'chain_id',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_currency_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_currency_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'chain_id' in local_var_params and local_var_params['chain_id'] is not None:  # noqa: E501
            query_params.append(('chain_id', local_var_params['chain_id']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/currency', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_order_cancel_order_post(self, apikey, **kwargs):  # noqa: E501
        """Cancel an order  # noqa: E501

        Cancel an Order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_cancel_order_post(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param str authorization:
        :param ViewCancelOrderRequest view_cancel_order_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_order_cancel_order_post_with_http_info(apikey, **kwargs)  # noqa: E501

    def openapi_order_cancel_order_post_with_http_info(self, apikey, **kwargs):  # noqa: E501
        """Cancel an order  # noqa: E501

        Cancel an Order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_cancel_order_post_with_http_info(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param str authorization:
        :param ViewCancelOrderRequest view_cancel_order_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'apikey',
            'authorization',
            'view_cancel_order_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_order_cancel_order_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_order_cancel_order_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'view_cancel_order_request' in local_var_params:
            body_params = local_var_params['view_cancel_order_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/order/cancel/order', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_order_get(self, apikey, **kwargs):  # noqa: E501
        """Get orders  # noqa: E501

        Get orders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_get(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param int topic_id: Topic ID
        :param int chain_id: Chain ID
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_order_get_with_http_info(apikey, **kwargs)  # noqa: E501

    def openapi_order_get_with_http_info(self, apikey, **kwargs):  # noqa: E501
        """Get orders  # noqa: E501

        Get orders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_get_with_http_info(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param int topic_id: Topic ID
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'apikey',
            'page',
            'limit',
            'topic_id',
            'status',
            'authorization',
            'chain_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_order_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_order_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'topic_id' in local_var_params and local_var_params['topic_id'] is not None:  # noqa: E501
            query_params.append(('topicId', local_var_params['topic_id']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'chain_id' in local_var_params and local_var_params['chain_id'] is not None:  # noqa: E501
            query_params.append(('chainId', local_var_params['chain_id']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/order', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_order_get_by_id_get(self, order_id, apikey, **kwargs):  # noqa: E501
        """Get order by id  # noqa: E501

        Get order by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True   
        >>> thread = api.openapi_order_get_by_id_get(order_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str order_id: Order Id (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_order_get_by_id_get_with_http_info(order_id, apikey, **kwargs)  # noqa: E501    

    def openapi_order_get_by_id_get_with_http_info(self, order_id, apikey, **kwargs):  # noqa: E501
        """Get order by id  # noqa: E501

        Get order by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_get_by_id_get_with_http_info(order_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str order_id: Order Id (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'order_id',
            'apikey',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):  
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_order_get_by_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'order_id' is set
        if self.api_client.client_side_validation and ('order_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['order_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `order_id` when calling `openapi_order_get_by_id_get`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501  
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_order_get_by_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in local_var_params:
            path_params['order_id'] = local_var_params['order_id']

        query_params = []
        if 'apikey' in local_var_params:
            query_params.append(('apikey', local_var_params['apikey'])) 

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/order/{order_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)


    def openapi_order_kline_get(self, token_id, period, start_time, size, apikey, **kwargs):  # noqa: E501
        """Get kline data of a market  # noqa: E501
        Get kline data of a market  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_kline_get(token_id, period, start_time, size, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token_id: Token Id(Id of Yes/No) (required)
        :param str period: 1min, 5min, 15min, 30min, 1hour, 4hour, 1day, 1week (required)
        :param str start_time: Start time in unix timestamp (seconds) (required)
        :param int size: Size: 1 to 1000 (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_order_kline_get_with_http_info(token_id, period, start_time, size, apikey, **kwargs)  # noqa: E501

    def openapi_order_kline_get_with_http_info(self, token_id, period, start_time, size, apikey, **kwargs):  # noqa: E501
        """Get kline data of a market  # noqa: E501

        Get kline data of a market  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_kline_get_with_http_info(token_id, period, start_time, size, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token_id: Token Id(Id of Yes/No) (required)
        :param str period: 1min, 5min, 15min, 30min, 1hour, 4hour, 1day, 1week (required)
        :param str start_time: Start time in unix timestamp (seconds) (required)
        :param int size: Size: 1 to 1000 (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token_id',
            'period',
            'start_time',
            'size',
            'apikey',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_order_kline_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token_id' is set
        if self.api_client.client_side_validation and ('token_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['token_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token_id` when calling `openapi_order_kline_get`")  # noqa: E501
        # verify the required parameter 'period' is set
        if self.api_client.client_side_validation and ('period' not in local_var_params or  # noqa: E501
                                                        local_var_params['period'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `period` when calling `openapi_order_kline_get`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if self.api_client.client_side_validation and ('start_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_time` when calling `openapi_order_kline_get`")  # noqa: E501
        # verify the required parameter 'size' is set
        if self.api_client.client_side_validation and ('size' not in local_var_params or  # noqa: E501
                                                        local_var_params['size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `size` when calling `openapi_order_kline_get`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_order_kline_get`")  # noqa: E501

        if self.api_client.client_side_validation and 'size' in local_var_params and local_var_params['size'] > 1000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `size` when calling `openapi_order_kline_get`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and 'size' in local_var_params and local_var_params['size'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `size` when calling `openapi_order_kline_get`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token_id' in local_var_params and local_var_params['token_id'] is not None:  # noqa: E501
            query_params.append(('token_id', local_var_params['token_id']))  # noqa: E501
        if 'period' in local_var_params and local_var_params['period'] is not None:  # noqa: E501
            query_params.append(('period', local_var_params['period']))  # noqa: E501
        if 'start_time' in local_var_params and local_var_params['start_time'] is not None:  # noqa: E501
            query_params.append(('start_time', local_var_params['start_time']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/order/kline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_order_market_depth_get(self, token_id, apikey, **kwargs):  # noqa: E501
        """Get orderbook depth of a market  # noqa: E501

        Get orderbook depth of a market  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_market_depth_get(token_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token_id: Token Id(Id of Yes/No) (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_order_market_depth_get_with_http_info(token_id, apikey, **kwargs)  # noqa: E501

    def openapi_order_market_depth_get_with_http_info(self, token_id, apikey, **kwargs):  # noqa: E501
        """Get orderbook depth of a market  # noqa: E501

        Get orderbook depth of a market  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_market_depth_get_with_http_info(token_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token_id: Token Id(Id of Yes/No) (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token_id',
            'apikey',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_order_market_depth_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token_id' is set
        if self.api_client.client_side_validation and ('token_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['token_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token_id` when calling `openapi_order_market_depth_get`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_order_market_depth_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token_id' in local_var_params and local_var_params['token_id'] is not None:  # noqa: E501
            query_params.append(('token_id', local_var_params['token_id']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/order/market/depth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_order_orderbook_get(self, token_id, apikey, **kwargs):  # noqa: E501
        """Get orderbook of a market  # noqa: E501

        Get orderbook of a market  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_orderbook_get(token_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token_id: Token Id(Id of Yes/No) (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_order_orderbook_get_with_http_info(token_id, apikey, **kwargs)  # noqa: E501

    def openapi_order_orderbook_get_with_http_info(self, token_id, apikey, **kwargs):  # noqa: E501
        """Get orderbook of a market  # noqa: E501

        Get orderbook of a market  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_orderbook_get_with_http_info(token_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token_id: Token Id(Id of Yes/No) (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token_id',
            'apikey',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_order_orderbook_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token_id' is set
        if self.api_client.client_side_validation and ('token_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['token_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token_id` when calling `openapi_order_orderbook_get`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_order_orderbook_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token_id' in local_var_params and local_var_params['token_id'] is not None:  # noqa: E501
            query_params.append(('token_id', local_var_params['token_id']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/order/orderbook', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_order_post(self, apikey, **kwargs):  # noqa: E501
        """Create an order  # noqa: E501

        Create an Order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_post(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param str authorization:
        :param V2AddOrderReq v2_add_order_req:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_order_post_with_http_info(apikey, **kwargs)  # noqa: E501

    def openapi_order_post_with_http_info(self, apikey, **kwargs):  # noqa: E501
        """Create an order  # noqa: E501

        Create an Order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_order_post_with_http_info(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param str authorization:
        :param V2AddOrderReq v2_add_order_req:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'apikey',
            'authorization',
            'v2_add_order_req'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_order_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_order_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'v2_add_order_req' in local_var_params:
            body_params = local_var_params['v2_add_order_req']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/order', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_portfolio_get(self, apikey, **kwargs):  # noqa: E501
        """Get portfolio data of user  # noqa: E501

        Get portfolio data of user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_portfolio_get(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param int topic_id: Topic ID
        :param str authorization:
        :param int chain_id: Chain ID
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_portfolio_get_with_http_info(apikey, **kwargs)  # noqa: E501

    def openapi_portfolio_get_with_http_info(self, apikey, **kwargs):  # noqa: E501
        """Get portfolio data of user  # noqa: E501

        Get portfolio data of user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_portfolio_get_with_http_info(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param int topic_id: Topic ID
        :param str authorization:
        :param int chain_id: Chain ID
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'apikey',
            'page',
            'limit',
            'topic_id',
            'chain_id',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_portfolio_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_portfolio_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'topic_id' in local_var_params and local_var_params['topic_id'] is not None:  # noqa: E501
            query_params.append(('topicId', local_var_params['topic_id']))  # noqa: E501
        if 'chain_id' in local_var_params and local_var_params['chain_id'] is not None:  # noqa: E501
            query_params.append(('chainId', local_var_params['chain_id']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/portfolio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_topic_get(self, apikey, **kwargs):  # noqa: E501
        """Get Topic List  # noqa: E501

        Get Topic List(All Topics)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_topic_get(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param str keywords: Keywords for search (title or content)
        :param int topic_type: 0: All Topics, 1: Categorical Topic, 2: Binary Topic
        :param str chain_id: Chain ID
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_topic_get_with_http_info(apikey, **kwargs)  # noqa: E501

    def openapi_topic_get_with_http_info(self, apikey, **kwargs):  # noqa: E501
        """Get Topic List  # noqa: E501

        Get Topic List(All Topics)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_topic_get_with_http_info(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param str keywords: Keywords for search (title or content)
        :param str chain_id: Chain ID
        :param int topic_type: 0: All Topics, 1: Categorical Topic, 2: Binary Topic
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'apikey',
            'page',
            'limit',
            'keywords',
            'topic_type',
            'status',
            'chain_id',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_topic_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_topic_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'keywords' in local_var_params and local_var_params['keywords'] is not None:  # noqa: E501
            query_params.append(('keywords', local_var_params['keywords']))  # noqa: E501
        if 'topic_type' in local_var_params and local_var_params['topic_type'] is not None:  # noqa: E501
            query_params.append(('topicType', local_var_params['topic_type']))  # noqa: E501
        if 'chain_id' in local_var_params and local_var_params['chain_id'] is not None:  # noqa: E501
            query_params.append(('chainId', local_var_params['chain_id']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/topic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_topic_multi_topic_id_get(self, topic_id, apikey, **kwargs):  # noqa: E501
        """Get Detail of a Categorical Topic  # noqa: E501

        Get Detail of a Categorical Topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_topic_multi_topic_id_get(topic_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int topic_id: Topic ID (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_topic_multi_topic_id_get_with_http_info(topic_id, apikey, **kwargs)  # noqa: E501

    def openapi_topic_multi_topic_id_get_with_http_info(self, topic_id, apikey, **kwargs):  # noqa: E501
        """Get Detail of a Categorical Topic  # noqa: E501

        Get Detail of a Categorical Topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_topic_multi_topic_id_get_with_http_info(topic_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int topic_id: Topic ID (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'topic_id',
            'apikey',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_topic_multi_topic_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `openapi_topic_multi_topic_id_get`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_topic_multi_topic_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/topic/multi/{topicId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_topic_topic_id_get(self, topic_id, apikey, **kwargs):  # noqa: E501
        """Get Detail of a Binary Topic  # noqa: E501

        Get Detail of a Binary Topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_topic_topic_id_get(topic_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int topic_id: Topic ID (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_topic_topic_id_get_with_http_info(topic_id, apikey, **kwargs)  # noqa: E501

    def openapi_topic_topic_id_get_with_http_info(self, topic_id, apikey, **kwargs):  # noqa: E501
        """Get Detail of a Binary Topic  # noqa: E501

        Get Detail of a Binary Topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_topic_topic_id_get_with_http_info(topic_id, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int topic_id: Topic ID (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'topic_id',
            'apikey',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_topic_topic_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `openapi_topic_topic_id_get`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_topic_topic_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/topic/{topicId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_trade_get(self, apikey, **kwargs):  # noqa: E501
        """Get user's trades  # noqa: E501

        Get user's trades based on pagination parameters and filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_trade_get(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param int topic_id: Topic ID
        :param str chain_id: Chain ID
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_trade_get_with_http_info(apikey, **kwargs)  # noqa: E501

    def openapi_trade_get_with_http_info(self, apikey, **kwargs):  # noqa: E501
        """Get user's trades  # noqa: E501

        Get user's trades based on pagination parameters and filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_trade_get_with_http_info(apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: apikey (required)
        :param int page: Page number
        :param int limit: Number of items per page
        :param int topic_id: Topic ID
        :param str chain_id: Chain ID
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'apikey',
            'page',
            'limit',
            'topic_id',
            'chain_id',
            'authorization'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_trade_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_trade_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'topic_id' in local_var_params and local_var_params['topic_id'] is not None:  # noqa: E501
            query_params.append(('topicId', local_var_params['topic_id']))  # noqa: E501
        if 'chain_id' in local_var_params and local_var_params['chain_id'] is not None:  # noqa: E501
            query_params.append(('chainId', local_var_params['chain_id']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/trade', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def openapi_user_wallet_address_balance_get(self, wallet_address, apikey, **kwargs):  # noqa: E501
        """Get ERC20 Balances of a user (apikey account)  # noqa: E501

        Get ERC20 Balances of a user (apikey account)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_user_wallet_address_balance_get(wallet_address, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str wallet_address: (required)
        :param str apikey: apikey (required)
        :param int chain_id: Chain ID
        :param str authorization:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.openapi_user_wallet_address_balance_get_with_http_info(wallet_address, apikey, **kwargs)  # noqa: E501

    def openapi_user_wallet_address_balance_get_with_http_info(self, wallet_address, apikey, **kwargs):  # noqa: E501
        """Get ERC20 Balances of a user (apikey account)  # noqa: E501

        Get ERC20 Balances of a user (apikey account)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.openapi_user_wallet_address_balance_get_with_http_info(wallet_address, apikey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str wallet_address: (required)
        :param str apikey: apikey (required)
        :param str authorization:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'wallet_address',
            'apikey',
            'authorization',
            'chain_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method openapi_user_wallet_address_balance_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wallet_address' is set
        if self.api_client.client_side_validation and ('wallet_address' not in local_var_params or  # noqa: E501
                                                        local_var_params['wallet_address'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wallet_address` when calling `openapi_user_wallet_address_balance_get`")  # noqa: E501
        # verify the required parameter 'apikey' is set
        if self.api_client.client_side_validation and ('apikey' not in local_var_params or  # noqa: E501
                                                        local_var_params['apikey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `apikey` when calling `openapi_user_wallet_address_balance_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wallet_address' in local_var_params:
            path_params['walletAddress'] = local_var_params['wallet_address']  # noqa: E501

        query_params = []
        if 'chain_id' in local_var_params and local_var_params['chain_id'] is not None:  # noqa: E501
            query_params.append(('chainId', local_var_params['chain_id']))  # noqa: E501
        if 'wallet_address' in local_var_params and local_var_params['wallet_address'] is not None:  # noqa: E501
            query_params.append(('walletAddress', local_var_params['wallet_address']))  # noqa: E501

        header_params = {}
        if 'apikey' in local_var_params:
            header_params['apikey'] = local_var_params['apikey']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['Authorization'] = local_var_params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/openapi/user/{walletAddress}/balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
