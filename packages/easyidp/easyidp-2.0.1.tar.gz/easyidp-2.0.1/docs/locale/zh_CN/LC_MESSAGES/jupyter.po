# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Haozhou Wang
# This file is distributed under the same license as the EasyIDP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: EasyIDP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-20 13:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../jupyter/backward_projection.ipynb:9
#, fuzzy
msgid "Backward Projection"
msgstr "逆向投影"

#: ../../jupyter/backward_projection.ipynb:11
msgid ""
"The example explains how to use EasyIDP to find the corresponding "
"position of ROI on the origial UAV images."
msgstr "这个例子解释了如何使用 EasyIDP 在原始无人机图像上找到 ROI 的对应位置。"

#: ../../jupyter/backward_projection.ipynb:17
msgid "|ab4b88df68534ecbae55217f7ae8d503|"
msgstr ""

#: ../../jupyter/backward_projection.ipynb:23
#: ../../jupyter/backward_projection.ipynb:96
#: ../../jupyter/backward_projection.ipynb:635
#: ../../jupyter/backward_projection.ipynb:1064
#: ../../jupyter/crop_outputs.ipynb:23 ../../jupyter/crop_outputs.ipynb:96
#: ../../jupyter/get_z_from_dsm.ipynb:23 ../../jupyter/load_roi.ipynb:23
msgid "lotus plot"
msgstr "荷花池"

#: ../../jupyter/backward_projection.ipynb:36 ../../jupyter/load_roi.ipynb:36
msgid "Package and data prepare"
msgstr "包和数据准备"

#: ../../jupyter/backward_projection.ipynb:38
msgid "The most common way to import easyidp package is:"
msgstr "导入 easyidp 包的最常见方式是："

#: ../../jupyter/backward_projection.ipynb:61
#: ../../jupyter/crop_outputs.ipynb:61
msgid ""
"If you run for the first time, it will download 3.3GB dataset "
"automatically from Google Drive, please refer to `Data "
"<../python_api/data.rst>`__ for more details."
msgstr ""
"如果您是第一次运行，它将自动从 Google Drive 下载 3.3GB 的数据集，请参考 `Data "
"<../python_api/data.rst>`__ 了解更多详情。"

#: ../../jupyter/backward_projection.ipynb:73
msgid "Read ROI from Shapefile"
msgstr "从 Shapefile 读取 ROI"

#: ../../jupyter/backward_projection.ipynb:75
msgid ""
"Then open the shapefile ``plot.shp``, the shp file looks like (red "
"polygons):"
msgstr "然后打开 shapefile ``plot.shp``，shp 文件看起来像这样（红色多边形）："

#: ../../jupyter/backward_projection.ipynb:90
msgid "|eb7d116f9684456799a13d7648778630|"
msgstr ""

#: ../../jupyter/backward_projection.ipynb:168
msgid "Then check if it loads as expected:"
msgstr "然后检查它是否按预期加载："

#: ../../jupyter/backward_projection.ipynb:290
msgid "Get height (z) values from DSM"
msgstr "从 DSM 获取高度（z）值"

#: ../../jupyter/backward_projection.ipynb:292
msgid ""
"The ROI from shapefile is only 2D coordinate, however, to do backward "
"projection, the ROI should be 3D coordainte, the missing height values "
"can be obtianed from DSM"
msgstr "shapefile 中的 ROI 只有 2D 坐标，然而，要进行逆向投影，ROI 应该是 3D 坐标，缺失的高度值可以从 DSM 获取。"

#: ../../jupyter/backward_projection.ipynb:298
#: ../../jupyter/crop_outputs.ipynb:571
msgid "Future work"
msgstr "未来工作"

#: ../../jupyter/backward_projection.ipynb:300
msgid ""
"Getting Z values from point cloud will be supported in the future, in "
"this case, if only need backward projection (do image analyze on origial "
"images instead of low quality geotiff), the 3D reconstuction can stop at "
"making dense point cloud, no need to run the later DOM and DSM step."
msgstr ""
"未来将支持从点云获取 Z 值，在这种情况下，如果只需要逆向投影（在原始图像上进行图像分析而不是低质量的 geotiff），3D "
"重建可以在制作密集点云时停止，无需运行后续的 DOM 和 DSM 步骤。"

#: ../../jupyter/backward_projection.ipynb:350
msgid "And check the values of ROI"
msgstr "并检查 ROI 的值"

#: ../../jupyter/backward_projection.ipynb:471
msgid ""
"We can notice, the roi x and y values also changed. Because the ROI shp "
"geo-coord is EPSG::4326 while the DSM is EPSG::32654."
msgstr ""
"我们可以注意到，roi 的 x 和 y 值也发生了变化。因为 ROI shp 地理坐标是 EPSG::4326，而 DSM 是 "
"EPSG::32654。"

#: ../../jupyter/backward_projection.ipynb:477
#: ../../jupyter/crop_outputs.ipynb:282 ../../jupyter/crop_outputs.ipynb:362
#: ../../jupyter/crop_outputs.ipynb:608
msgid "See also"
msgstr "另见"

#: ../../jupyter/backward_projection.ipynb:479
msgid ""
"For more details about the controls to this function, please refer to "
"`Get Height(z) Values from DSM <get_z_from_dsm.ipynb>`__"
msgstr "有关此功能控制的更多详细信息，请参考 `从 DSM 获取高度（z）值 <get_z_from_dsm.ipynb>`__"

#: ../../jupyter/backward_projection.ipynb:495
#, fuzzy
msgid "Read 3D reconstuction project and backward projection"
msgstr "读取 3D 重建项目和逆向投影"

#: ../../jupyter/backward_projection.ipynb:497
msgid "For metashape project:"
msgstr "对于 metashape 项目："

#: ../../jupyter/backward_projection.ipynb:518
msgid "For pix4d project:"
msgstr "对于 pix4d 项目："

#: ../../jupyter/backward_projection.ipynb:541
#, fuzzy
msgid "And then do the backward projection by:"
msgstr "然后通过以下方式进行逆向投影："

#: ../../jupyter/backward_projection.ipynb:591
msgid "or"
msgstr "或"

#: ../../jupyter/backward_projection.ipynb:611
#: ../../jupyter/backward_projection.ipynb:1040
msgid "Note"
msgstr "注意"

#: ../../jupyter/backward_projection.ipynb:613
#: ../../jupyter/backward_projection.ipynb:1042
msgid "You can save the results (json and cropped png) to given folder by:"
msgstr "您可以通过以下方式将结果（json 和裁剪的 png）保存到指定文件夹："

#: ../../jupyter/backward_projection.ipynb:619
#: ../../jupyter/backward_projection.ipynb:1048
msgid "And will get the following results in the folder:"
msgstr "并将在文件夹中获得以下结果："

#: ../../jupyter/backward_projection.ipynb:625
msgid "|2ae8c77ac462495c8c24fe86c5bb0e82|"
msgstr ""

#: ../../jupyter/backward_projection.ipynb:647
msgid ""
"The structure of output ``img_dict`` is 2 layers dictionary. The first "
"layer is roi id, the second layer is image name "
"(``out_dict['roi_id']['image_name']``)."
msgstr ""
"输出 ``img_dict`` 的结构是两层字典。第一层是 roi id，第二层是图像名称 "
"(``out_dict['roi_id']['image_name']``)。"

#: ../../jupyter/backward_projection.ipynb:649
#, fuzzy
msgid ""
"You can find all available images with specified roi (plot) (e.g. roi "
"named ‘N1W1’) by:"
msgstr "您可以通过以下方式找到所有具有指定 roi（图）的可用图像（例如，名为 ‘N1W1’ 的 roi）："

#: ../../jupyter/backward_projection.ipynb:676
msgid "For example, find the roi named ‘N1W1’ on image ‘IMG_3457’ by:"
msgstr "例如，通过以下方式在图像 ‘IMG_3457’ 上找到名为 ‘N1W1’ 的 roi："

#: ../../jupyter/backward_projection.ipynb:734
msgid "This is the 2D coordinates that roi on the image pixels"
msgstr "这是图像像素上 roi 的 2D 坐标"

#: ../../jupyter/backward_projection.ipynb:736
msgid "The recommended ‘for loops’ for itering items:"
msgstr "推荐的用于迭代项目的 ‘for 循环’："

#: ../../jupyter/backward_projection.ipynb:764
msgid "Preview the results:"
msgstr "预览结果："

#: ../../jupyter/backward_projection.ipynb:818
#: ../../jupyter/backward_projection.ipynb:1209
msgid "Or check all results:"
msgstr "或检查所有结果："

#: ../../jupyter/backward_projection.ipynb:923
#: ../../jupyter/backward_projection.ipynb:1314
msgid ""
"Recommend using ``ms.show_roi_on_img(..., save_as=\"preview_all.png\")`` "
"to saving to local disk and checking the clear figure."
msgstr ""
"推荐使用 ``ms.show_roi_on_img(..., save_as=\"preview_all.png\")`` "
"保存到本地磁盘并检查清晰图像。"

#: ../../jupyter/backward_projection.ipynb:935
msgid "Find the best backward image"
msgstr "找到最佳逆向图像"

#: ../../jupyter/backward_projection.ipynb:937
msgid ""
"You can notice that for each ROI, it will backword projected to several "
"raw images:"
msgstr "您可以注意到，对于每个 ROI，它将逆向投影到几个原始图像："

#: ../../jupyter/backward_projection.ipynb:983
msgid ""
"How to find the best 3 or 5 images? Here you can calculate the distance "
"from the image to the ROI, here we assume the shorter the better (idealy,"
" UAV image just above the ROI region, the ROI is in the image center)."
msgstr ""
"如何找到最佳的 3 或 5 张图像？在这里您可以计算图像到 ROI 的距离，这里我们假设距离越短越好（理想情况下，无人机图像刚好在 ROI "
"区域上方，ROI 位于图像中心）。"

#: ../../jupyter/backward_projection.ipynb:1054
msgid "|6ca31a9fcc4d496293e850a048ff7422|"
msgstr ""

#: ../../jupyter/backward_projection.ipynb:1153
msgid ""
"Here is the best 3 image that match “distance from ROI to image” < 10m, "
"and the first one is the closest."
msgstr "这是与 “ROI 到图像的距离” < 10m 匹配的最佳 3 张图像，第一张是最近的。"

#: ../../jupyter/backward_projection.ipynb:1155
msgid "Check the result:"
msgstr "检查结果："

#: ../../jupyter/crop_outputs.ipynb:9
msgid "Crop DOM/DSM/PCD by ROI"
msgstr "按 ROI 裁剪 DOM/DSM/PCD"

#: ../../jupyter/crop_outputs.ipynb:11
#, fuzzy
msgid ""
"Using region of interest (ROI, e.g. plot boundary), cropping each of them"
" from large digital orthomosaic (DOM), digital surface model (DSM), and "
"point cloud of whole field, without using any GIS or point cloud "
"processing software."
msgstr ""
"使用感兴趣区域（ROI，例如地块边界），从大型数字正射影像（DOM）、数字表面模型（DSM）和整个田地的点云中裁剪每一个，而无需使用任何 GIS "
"或点云处理软件。"

#: ../../jupyter/crop_outputs.ipynb:17
msgid "|ab4ac817c101442987d00d4e7e66b56e|"
msgstr ""

#: ../../jupyter/crop_outputs.ipynb:36
msgid "Package and data prepare."
msgstr "包和数据准备。"

#: ../../jupyter/crop_outputs.ipynb:38
msgid "The easiest way to import easyidp package and using the demo exmaple is:"
msgstr "导入 easyidp 包并使用示例的最简单方法是："

#: ../../jupyter/crop_outputs.ipynb:73
msgid "Read ROI from shapefile"
msgstr "从 Shapefile 读取 ROI"

#: ../../jupyter/crop_outputs.ipynb:75
msgid ""
"The following code will load and open the plot boundary shapefile in the "
"Lotus Dataset, the shp file looks like (red polygons):"
msgstr "以下代码将加载并打开 Lotus 数据集中的地块边界 shapefile，shp 文件看起来像这样（红色多边形）："

#: ../../jupyter/crop_outputs.ipynb:90
msgid "|a7351b371efc48f8a2787d7353f88b95|"
msgstr ""

#: ../../jupyter/crop_outputs.ipynb:284
msgid ""
"For more details about the parameter when loading shapefile, please refer"
" to `Load ROI from shapefile <load_roi.ipynb>`__, or python API "
"`easyidp.ROI <../python_api/manualdoc/easyidp.roi.ROI.rst>`__, and "
"`easyidp.shp.read_shp "
"<../python_api/autodoc/easyidp.shp.read_shp.rst>`__."
msgstr ""
"有关加载 shapefile 时参数的更多详细信息，请参考 `从 shapefile 加载 ROI <load_roi.ipynb>`__，或 "
"python API `easyidp.ROI "
"<../python_api/manualdoc/easyidp.roi.ROI.rst>`__，和 `easyidp.shp.read_shp "
"<../python_api/autodoc/easyidp.shp.read_shp.rst>`__。"

#: ../../jupyter/crop_outputs.ipynb:300
msgid "Read and crop geotiff (DOM/DSM)"
msgstr "读取和裁剪 geotiff (DOM/DSM)"

#: ../../jupyter/crop_outputs.ipynb:302
msgid "First, open the DOM geotiff file by:"
msgstr "首先，通过以下方式打开 DOM geotiff 文件："

#: ../../jupyter/crop_outputs.ipynb:364
msgid ""
"The GeoTiff is easyidp defined class contains several required "
"information. Please check python API `easyidp.GeoTiff "
"<../python_api/autodoc/easyidp.geotiff.GeoTiff.rst>`__ for more "
"information"
msgstr ""
"GeoTiff 是 easyidp 定义的类，包含几个必需的信息。请查看 python API `easyidp.GeoTiff "
"<../python_api/autodoc/easyidp.geotiff.GeoTiff.rst>`__ 了解更多信息"

#: ../../jupyter/crop_outputs.ipynb:379
msgid ""
"However, in this case, the ROI and GeoTiff do not share the same geo-"
"coordinate:"
msgstr "然而，在这种情况下，ROI 和 GeoTiff 不共享相同的地理坐标："

#: ../../jupyter/crop_outputs.ipynb:427
msgid ""
"Hence need to transform the ROI to the same CRS as GeoTiff, for more "
"details please refer `Load ROI from shapefile <load_roi.ipynb#Transform-"
"between-CRS>`__"
msgstr ""
"因此需要将 ROI 转换为与 GeoTiff 相同的 CRS，更多详细信息请参考 `从 shapefile 加载 ROI "
"<load_roi.ipynb#Transform-between-CRS>`__"

#: ../../jupyter/crop_outputs.ipynb:448
msgid ""
"Then using the following function to crop each ROI (plot) from whole "
"field GeoTIff:"
msgstr "然后使用以下函数从整个区域 GeoTIff 中裁剪每个 ROI（图）："

#: ../../jupyter/crop_outputs.ipynb:494
msgid ""
"The output ``dom_parts`` is a dictionary, using plot label as keys and "
"cropped imarray as values:"
msgstr "输出的 ``dom_parts`` 是一个字典，使用地块标签作为键，裁剪的 imarray 作为值："

#: ../../jupyter/crop_outputs.ipynb:559
msgid ""
"It you want to save the cropped GeoTiff, please pass the ``save_folder`` "
"parameter when cropping"
msgstr "如果您想保存裁剪的 GeoTiff，请在裁剪时传递 ``save_folder`` 参数"

#: ../../jupyter/crop_outputs.ipynb:565
msgid ""
"It will save all cropped sections to GeoTiff files with geo-offset (you "
"can overlap the cropped DOM almost perfectly on the original DOM)"
msgstr "它会将所有裁剪的部分保存到带有地理偏移的 GeoTiff 文件中（您可以几乎完美地将裁剪的 DOM 与原始 DOM 重叠）"

#: ../../jupyter/crop_outputs.ipynb:573
msgid ""
"Currently can not just save the single output ``dom_parts[\"N1W1\"]`` to "
"standard GeoTiff file with correct geo-position without previoud "
"``save_folder`` batch saving, but in the future will support save such "
"file directly via "
"``dom_part[\"N1W1\"].save(\"path\\to\\save\\N1W1.tif\")``"
msgstr ""
"目前不能仅将单个输出 ``dom_parts[\"N1W1\"]`` 保存为具有正确地理位置的标准 GeoTiff 文件，而无需之前的 "
"``save_folder`` 批量保存，但未来将支持通过 "
"``dom_part[\"N1W1\"].save(\"path\\to\\save\\N1W1.tif\")`` 直接保存此类文件"

#: ../../jupyter/crop_outputs.ipynb:588
msgid "The step to crop DSM is the same as DOM, ignored here."
msgstr "裁剪 DSM 的步骤与 DOM 相同，这里忽略。"

#: ../../jupyter/crop_outputs.ipynb:600
msgid "Read and crop point cloud"
msgstr "读取和裁剪点云"

#: ../../jupyter/crop_outputs.ipynb:602
msgid "The point cloud also use the same process like GeoTIff"
msgstr "点云也使用与 GeoTiff 相同的过程"

#: ../../jupyter/crop_outputs.ipynb:610
msgid ""
"The PointCloud is easyidp defined class contains several required "
"information. Please check python API `easyidp.PointCloud "
"<../python_api/autodoc/easyidp.pointcloud.PointCloud.rst>`__ for more "
"information"
msgstr ""
"PointCloud 是 easyidp 定义的类，包含几个必需的信息。请查看 python API `easyidp.PointCloud "
"<../python_api/autodoc/easyidp.pointcloud.PointCloud.rst>`__ 了解更多信息"

#: ../../jupyter/crop_outputs.ipynb:635
msgid "Check the point cloud values:"
msgstr "检查点云值："

#: ../../jupyter/crop_outputs.ipynb:702
msgid "And cropping:"
msgstr "并裁剪："

#: ../../jupyter/crop_outputs.ipynb:708 ../../jupyter/load_roi.ipynb:390
#: ../../jupyter/load_roi.ipynb:713 ../../jupyter/load_roi.ipynb:2244
msgid "Caution"
msgstr "注意"

#: ../../jupyter/crop_outputs.ipynb:710
msgid "Please ensure the same CRS between ROI and PointCloud."
msgstr "请确保 ROI 和点云之间的 CRS 相同。"

#: ../../jupyter/crop_outputs.ipynb:760
msgid ""
"The output ``pcd_parts`` is a dictionary, using plot label as keys and "
"cropped point cloud as values:"
msgstr "输出的 ``pcd_parts`` 是一个字典，使用地块标签作为键，裁剪的点云作为值："

#: ../../jupyter/crop_outputs.ipynb:827
msgid ""
"Similarly, you can pass the ``save_folder`` parameter to save the cropped"
" point cloud"
msgstr "同样，您可以传递 ``save_folder`` 参数来保存裁剪的点云"

#: ../../jupyter/crop_outputs.ipynb:833
msgid "Or your can save just one point cloud by:"
msgstr "或者您可以通过以下方式仅保存一个点云："

#: ../../jupyter/forward_projection.ipynb:9
msgid "Forward Projection (simple draft demo)"
msgstr "正向投影（简单草稿演示）"

#: ../../jupyter/forward_projection.ipynb:130
msgid "Then check the shp columns, name using [id] as the key of ROI"
msgstr "然后检查 shp 列，使用 [id] 作为 ROI 的键"

#: ../../jupyter/forward_projection.ipynb:385
msgid "Check the results of DOM grid"
msgstr "检查 DOM 网格的结果"

#: ../../jupyter/forward_projection.ipynb:502
msgid "Check by QGIS:"
msgstr "通过 QGIS 检查："

#: ../../jupyter/forward_projection.ipynb:504
msgid "|4174f44172bf46ddafc22017afe8d957|"
msgstr ""

#: ../../jupyter/forward_projection.ipynb:506
msgid "Snipaste_2022-09-10_13-01-25"
msgstr ""

#: ../../jupyter/forward_projection.ipynb:518
#, fuzzy
msgid "backward projection to raw images"
msgstr "逆向投影到原始图像"

#: ../../jupyter/forward_projection.ipynb:740
msgid "Then find the closest raw image"
msgstr "然后找到最近的原始图像"

#: ../../jupyter/forward_projection.ipynb:863
msgid "Check the ROI on the DOM and on the raw respectively."
msgstr "分别检查 DOM 和原始图像上的 ROI。"

#: ../../jupyter/forward_projection.ipynb:928
msgid "For example, you detect the results on DJI_0500 is"
msgstr "例如，您在 DJI_0500 上检测到的结果是"

#: ../../jupyter/forward_projection.ipynb:952
msgid "Then check the bbox on the raw:"
msgstr "然后检查原始图像上的 bbox："

#: ../../jupyter/forward_projection.ipynb:1016
msgid "Then calculate the inverse transform matrix from raw to DOM:"
msgstr "然后计算从原始图像到 DOM 的逆变换矩阵："

#: ../../jupyter/forward_projection.ipynb:1253
msgid "Preview the results on DOM:"
msgstr "预览 DOM 上的结果："

#: ../../jupyter/get_z_from_dsm.ipynb:9
msgid "Get Height (Z) Values from DSM"
msgstr "从 DSM 获取高度（Z）值"

#: ../../jupyter/get_z_from_dsm.ipynb:11
msgid ""
"This part introduces the parameters and controls to get height (or z) "
"values for ROI from Digital Surface Model (DSM) GeoTiff."
msgstr "本部分介绍了从数字表面模型 (DSM) GeoTiff 获取 ROI 高度（或 z）值的参数和控制。"

#: ../../jupyter/get_z_from_dsm.ipynb:17
msgid "|f326b319b71b4b0e8638aead8fffcac5|"
msgstr ""

#: ../../jupyter/get_z_from_dsm.ipynb:35
msgid "To be continued"
msgstr "待续"

#: ../../jupyter/get_z_from_dsm.ipynb:46
msgid "keep_crs and warnings"
msgstr "保持 CRS 和警告"

#: ../../jupyter/get_z_from_dsm.ipynb:57
msgid ""
"We can notice, the roi x and y values also changed. Because the ROI shp "
"geo-coord is EPSG::4326 while the DSM is EPSG::32654"
msgstr ""
"我们可以注意到，roi 的 x 和 y 值也发生了变化。因为 ROI shp 地理坐标是 EPSG::4326，而 DSM 是 "
"EPSG::32654"

#: ../../jupyter/get_z_from_dsm.ipynb:59
msgid "if you want keep the x and y value, you can:"
msgstr "如果你想保持 x 和 y 值，你可以："

#: ../../jupyter/get_z_from_dsm.ipynb:71
msgid ""
"But it is highly recommended to use the same CRS with the DOM/DSM, "
"otherwise will raise ValueErrors in the later use."
msgstr "但强烈建议使用与 DOM/DSM 相同的 CRS，否则在以后的使用中会引发 ValueErrors。"

#: ../../jupyter/load_roi.ipynb:9
msgid "Load ROI from shapefile"
msgstr "从 shapefile 加载 ROI"

#: ../../jupyter/load_roi.ipynb:11
msgid ""
"This example shows how to open the shapefile ( ``*.shp`` ) as the "
"``easyidp.ROI`` objects."
msgstr "本示例展示了如何将 shapefile ( ``*.shp`` ) 作为 ``easyidp.ROI`` 对象打开。"

#: ../../jupyter/load_roi.ipynb:17
msgid "|772ba40e65734dde83745cd26045ccca|"
msgstr ""

#: ../../jupyter/load_roi.ipynb:38
msgid "Using the following code to load easyidp package and demo dataset"
msgstr "使用以下代码加载 easyidp 包和示例数据集"

#: ../../jupyter/load_roi.ipynb:61
msgid ""
"If you run for the first time, it will download around 400MB dataset "
"automatically from Google Drive, please refer to `Data "
"<../python_api/data.rst>`__ for more details."
msgstr ""
"如果您是第一次运行，它将自动从 Google Drive 下载大约 400MB 的数据集，请参考 `Data "
"<../python_api/data.rst>`__ 了解更多详情。"

#: ../../jupyter/load_roi.ipynb:63
msgid "Here are thee demo shapefiles used in this documents are:"
msgstr "这里是本文件中使用的三个示例 shapefiles："

#: ../../jupyter/load_roi.ipynb:65
msgid "``test_data.shp.lotus_shp``"
msgstr ""

#: ../../jupyter/load_roi.ipynb:66
msgid "``test_data.shp.utm53n_shp``"
msgstr ""

#: ../../jupyter/load_roi.ipynb:67
msgid "``test_data.shp.complex_shp``"
msgstr ""

#: ../../jupyter/load_roi.ipynb:69
msgid "Each variable provides the path to the ``*.shp`` file:"
msgstr "每个变量提供 ``*.shp`` 文件的路径："

#: ../../jupyter/load_roi.ipynb:116
msgid "Deal with ESPG:4326 (longitude, latitude)"
msgstr "处理 ESPG:4326（经度、纬度）"

#: ../../jupyter/load_roi.ipynb:118
msgid "The ``lotus_shp`` used the EPGS:4326 as the Geo-projection coordinates"
msgstr "``lotus_shp`` 使用 EPGS:4326 作为地理投影坐标"

#: ../../jupyter/load_roi.ipynb:189
msgid ""
"Using this method to check the CRS (geo-projection coordinate) for that "
"shapefile:"
msgstr "使用此方法检查该 shapefile 的 CRS（地理投影坐标）："

#: ../../jupyter/load_roi.ipynb:265
msgid "And we can check the plot polygon boundary values by:"
msgstr "我们可以通过以下方式检查地块多边形边界值："

#: ../../jupyter/load_roi.ipynb:392
msgid ""
"In the easyidp package, the ROI order is ``(longitude, latitude)``, while"
" for some other packages like ``pyproj``, ``shapely``, may using the "
"``(latitude, longitude)`` order, please pay attention to it when "
"transfering between packages"
msgstr ""
"在 easyidp 包中，ROI 的顺序是 ``(经度，纬度)``, 而对于一些其他包如 ``pyproj``, ``shapely``, "
"可能使用 ``(纬度，经度)`` 顺序，在包之间转换时请注意这一点"

#: ../../jupyter/load_roi.ipynb:408
msgid "Deal with UTM/Zone geo coordainte"
msgstr "处理 UTM/Zone 地理坐标"

#: ../../jupyter/load_roi.ipynb:410
msgid ""
"The ``utm53_shp`` using another geo coordinate other than ``(longitude, "
"latitude)``"
msgstr "``utm53_shp`` 使用另一种地理坐标，而不是 ``(经度, 纬度)``"

#: ../../jupyter/load_roi.ipynb:481
msgid "Then we can check the CRS (geo-coordinate) of this file:"
msgstr "然后我们可以检查此文件的 CRS（地理坐标）："

#: ../../jupyter/load_roi.ipynb:563
msgid "And the plot polygon coordinate values:"
msgstr "以及地块多边形坐标值："

#: ../../jupyter/load_roi.ipynb:684
msgid ""
"Under this coordinate, the unit is meter, and the X (the first column) is"
" the East-West (horizontal) direction, while the Y (the second column) is"
" the North-Sourth (vertical) direction. The axis order is the same with "
"``(longitude, latitude)``"
msgstr "在这种坐标下，单位是米，X（第一列）是东西（水平）方向，而 Y（第二列）是南北（垂直）方向。轴顺序与 ``(经度，纬度)`` 相同"

#: ../../jupyter/load_roi.ipynb:696
msgid "Transform between CRS"
msgstr "在 CRS 之间转换"

#: ../../jupyter/load_roi.ipynb:698
msgid ""
"In some cases, for example, not the same person who prepare the DOM and "
"shapefile, they do not share the same coordinate and have very different "
"polygon boundary values. So they can not put together directly and need "
"convertion."
msgstr ""
"在某些情况下，例如，不是同一个人准备 DOM 和 "
"shapefile，它们不共享相同的坐标并且多边形边界值非常不同。因此它们不能直接放在一起，需要转换。"

#: ../../jupyter/load_roi.ipynb:715
msgid ""
"Although the EasyIDP support the transformation between different CRS, it"
" may have precision loss and require some computation time if the roi "
"number is huge."
msgstr "虽然 EasyIDP 支持不同 CRS 之间的转换，但如果 roi 数量庞大，可能会有精度损失并需要一些计算时间。"

#: ../../jupyter/load_roi.ipynb:717
msgid ""
"It is recommended to ensure the shp and DOM/DSM/PCD share the same CRS "
"when preparing them."
msgstr "建议在准备 shp 和 DOM/DSM/PCD 时确保它们共享相同的 CRS。"

#: ../../jupyter/load_roi.ipynb:732
msgid ""
"For example, in the lotus case, it uses the EPSG:4326, while the DOM/DSM "
"uses the UTM/Zone."
msgstr "例如，在莲花案例中，它使用 EPSG:4326，而 DOM/DSM 使用 UTM/Zone。"

#: ../../jupyter/load_roi.ipynb:883
msgid ""
"Hence need to do the CRS transformation to match them. It is more "
"recommended to transfer ROI because it is only the coordinate numbers, "
"much easier to transfer than the GeoTiff are pixel matrix."
msgstr "因此需要进行 CRS 转换以匹配它们。更推荐转移 ROI，因为它只是坐标数字，比 GeoTiff 的像素矩阵更容易转换。"

#: ../../jupyter/load_roi.ipynb:885
msgid "Before transfer, the plot coordinate looks like this:"
msgstr "在转换之前，地块坐标看起来像这样："

#: ../../jupyter/load_roi.ipynb:1006
msgid "And apply the transfer:"
msgstr "并应用转换："

#: ../../jupyter/load_roi.ipynb:1027
msgid "Now the CRS of ROI has been changed:"
msgstr "现在 ROI 的 CRS 已经改变："

#: ../../jupyter/load_roi.ipynb:1112
msgid "And also the coordinate values:"
msgstr "以及坐标值："

#: ../../jupyter/load_roi.ipynb:1234
msgid "Change the ROI labels"
msgstr "更改 ROI 标签"

#: ../../jupyter/load_roi.ipynb:1236
msgid "You have must notice the ``name_field`` value when opening the shapefile"
msgstr "您必须注意在打开 shapefile 时的 ``name_field`` 值"

#: ../../jupyter/load_roi.ipynb:1242
msgid ""
"In this section, more details about this parameter and other controls "
"will be introduced."
msgstr "在本节中，将介绍有关此参数和其他控制的更多详细信息。"

#: ../../jupyter/load_roi.ipynb:1253
msgid ""
"For some shapefile, it is not encoded in ``utf-8``, and the default "
"loading may fail:"
msgstr "对于某些 shapefile，它不是用 ``utf-8`` 编码的，默认加载可能会失败："

#: ../../jupyter/load_roi.ipynb:1357
msgid ""
"By default, if ``name_field`` not given, it will using the first number "
"id as label"
msgstr "默认情况下，如果未给出 ``name_field``，将使用第一个编号 id 作为标签"

#: ../../jupyter/load_roi.ipynb:1591
msgid "We can specify the ‘MASSIFID’ as the label instead"
msgstr "我们可以指定 ‘MASSIFID’ 作为标签"

#: ../../jupyter/load_roi.ipynb:1662
msgid "Or the equal effects by colume id:"
msgstr "或者通过列 id 达到相同效果："

#: ../../jupyter/load_roi.ipynb:1668 ../../jupyter/load_roi.ipynb:1890
msgid "Now the label has been changed:"
msgstr "现在标签已经改变："

#: ../../jupyter/load_roi.ipynb:1813
msgid ""
"Or you can combine several columns together by giving a list "
"``name_field=['CROPTYPE', 'MASSIFID']``"
msgstr "或者您可以通过提供列表 ``name_field=['CROPTYPE', 'MASSIFID']`` 将几列组合在一起"

#: ../../jupyter/load_roi.ipynb:1884
msgid "Or the equal effects by a list of colume id ``name_field=[2, 1]``"
msgstr "或者通过列 id 列表 ``name_field=[2, 1]`` 达到相同效果"

#: ../../jupyter/load_roi.ipynb:2035
msgid "Or even add the colume title into it by giving ``include_title=True``"
msgstr "或者通过提供 ``include_title=True`` 将列标题也添加到其中"

#: ../../jupyter/load_roi.ipynb:2246
msgid ""
"Only the colume with unique values should be used as the ROI label, "
"otherwise has the risk that later duplicated label overwrites previous "
"label. The easyidp could handle such case and raise an Error."
msgstr "只有具有唯一值的列应作为 ROI 标签使用，否则存在后续重复标签覆盖之前标签的风险。easyidp 可以处理这种情况并抛出错误。"