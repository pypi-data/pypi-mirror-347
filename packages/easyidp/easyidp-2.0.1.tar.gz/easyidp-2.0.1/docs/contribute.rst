.. contribute:

==========
Contribute
==========

Bug reports
===========

1. Go to our GitHub repository's Issues page
2. Click "New Issue" button
3. Select "Bug Report" template
4. Fill in the following details:
   - Clear title describing the issue
   - Detailed steps to reproduce the bug
   - Expected behavior
   - Actual behavior
   - Relevant code snippets or test data
   - Environment information (OS, Python version, etc.)
5. Attach screenshots if applicable
6. Click "Submit new issue"

Code contribution
=================

To contribute, you first need to fork the EasyIDP to your repo, and git clone your repo to your local computer.

For example, the git repo folder is located at: ``C:\path\to\source\code\EasyIDP`` with the following folder structure:

.. code-block:: text

    C:\path\to\source\code\EasyIDP
    ├─ docs/
    ├─ src/
    |  |─ easyidp/
    ├─ tests/
    readme.md
    pyproject.toml
    ...

Prerequisites
-------------

We recommend to using `uv <https://docs.astral.sh/uv/getting-started/installation/>`_ to setup and manage your developing environments. Please ensure the command uv is accessable to your command line

.. code-block:: bash

    > uv --version
    uv 0.6.14 

Using the following command to setup the virtual environment for code development:

.. code-block:: bash

    > cd "C:/path/to/source/code/EasyIDP"
    ...EasyIDP > uv venv   # create virtual env
    ...EasyIDP > uv sync --all-groups  # install all dependencies

Then activate the virtual environment through the command line:

.. tab:: Windows

    .. code-block:: bash

        ...EasyIDP > .venv/Scripts/activate
        (EasyIDP) ...EasyIDP > 

.. tab:: Linux/macOS

    .. code-block:: bash

        ...EasyIDP > source .venv/bin/activate
        (EasyIDP) ...EasyIDP > 

If you need adding extra dependencies, please follow the `uv instructions <https://docs.astral.sh/uv/guides/projects/#managing-dependencies>`_. As a summaries, the following command are most commonly used:

install to default dependencies.

.. code-block:: bash

    ...EasyIDP > uv add some-package

install to group dependencies (we have ``docs``, ``test`` two groups):

.. code-block:: bash
        ...EasyIDP > uv add --group docs some-packages

Code Testing
-------------

Then you can edit the source code by any IDE you preferred (for EasyIDP, it is developped under vscode). And writting the corresponding test samples for your added or modified functions.

Run all tests:

.. code-block:: bash

    (EasyIDP) ...EasyIDP > pytest tests/

Run specific test file:

.. code-block:: bash

    (EasyIDP) ...EasyIDP > pytest tests/test_module.py

Run single test case:

.. code-block:: bash

    (EasyIDP) ...EasyIDP > pytest tests/test_module.py::TestClass::test_method

After ensuring all testing cases can be executed successfully, you can pull request your modification to the EasyIDP repo.

Documentation
=============

The main documentation documentation is written in
`reStructuredText <http://www.sphinx-doc.org/en/stable/rest.html>`_ and
generated by `sphinx <http://www.sphinx-doc.org/>`_. Hosted publishing by `ReadTheDocs <https://readthedocs.org/>`_ platform.

Documentation has been built on Windows 11 (developing) and Linux (ReadTheDocs platform). Building documentation on macOS may also be possible due to the python cross-platform features but it is not officially tested.

.. note::

    If you find any typo errors in the official documentation, it is very welcome that you make a pull request to fix it (Fork -> clone -> search in your code editor -> fix -> preview generated html -> pull request).

Prerequisites
-------------

You need to install python dependices by the following code (please activate your virtual environment first):

.. code-block:: bash

    ...EasyIDP > uv sync --group docs

In order to deal with jupyter notebook extensions, you will also need to install `pandoc <https://pandoc.org/installing.html>`_ into your computer.

Check by below to ensure successfully installed:

.. code-block:: bash

    (easyidp) % pandoc --version
    pandoc 2.18
    Compiled with pandoc-types 1.22.2, texmath 0.12.5, skylighting 0.12.3,
    citeproc 0.7, ipynb 0.2, hslua 2.2.0
    Scripting engine: Lua 5.4
    ...

Then please download all datasets, this may take a long time.

.. code-block:: python

    >>> import easyidp as idp
    >>> idp.data.dowload_all()

Build
-----

After cloning the EasyIDP repository, activate the virtual environment, first enter the ``docs`` folder:


.. code-block:: bash

    (venv) EasyIDP> cd docs
    (venv) EasyIDP/docs> 

Then you can build the documentation by:

.. code-block:: bash

    (venv) EasyIDP/docs> make html  # or .\make html

You can open the ``_build\html\index.html`` to see the generated documentations


Translation
-----------

Here we using the ``sphinx-intl`` to provide services for multi-language documentation. If you want to contribute to your native lanuage translation, please following the instruction or the `offical document <https://sphinx-intl.readthedocs.io/en/master/quickstart.html>`_

1\. extract translatable messages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

First, extract document’s translatable messages into pot files:

.. code-block:: bash

    (venv) EasyIDP/docs> make gettext # or .\make gettext

This invokes the sphinx gettext builder that generates ``*.pot`` files under ``_build/gettext`` directory.

.. caution::

    Please check the outputs carefully, to see if any warnings or errors exists. Do not run the following code until they are fixed and disappared.

2\. prepare translation files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Then, using the following code to convert previous broken sentencs to correspoinding lanuage folder ( ``_locale\<your-lang>``)

.. code-block::

    (venv) EasyIDP/docs> sphinx-intl update -p _build/gettext -l zh_CN -l ja

    2.0.0.dev2
    Not Changed: locale/zh_CN\LC_MESSAGES\backgrounds.po
    Not Changed: locale/ja\LC_MESSAGES\backgrounds.po
    ...
    Not Changed: locale/zh_CN\LC_MESSAGES\python_api.po
    Not Changed: locale/ja\LC_MESSAGES\python_api.po


.. note::

    The last part ``-l zh_CN -l ja`` means translate to Chinese (zh_CN) and Japanese (ja), if you need add another translation languages. Feel tree to add ``-l xxx`` in the end, and you can refer your lanuage code ``xxx`` from `here <https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-language>`_


.. tip::
    
    If you want to add the lanuage document published on the ``readthedocs`` , please translate at your local first, then make a pull request to our repo (just ``docs\locale\<your-lang>\LC_MESSAGES`` folder), when it pass our review, we will open the link for that lanuage as soon as possible.

3\. translate
^^^^^^^^^^^^^

This is the most time-consuming step. Please pay attention carefully about which files are changed. Then check the folder ``_locale\<your-lang>\LC_MESSAGES``, and edit those changed files.

.. tip::

    The ``*.po`` files have the following formats:

    .. code-block:: text

        #: ../../contribute.rst:5
        msgid "Contribute"
        msgstr ""

    The first line is where it appears, the second line is the original sentence, while the last line is the translation you need to type in.

    Sometims, it will appear with line of ``#, fuzzy``:

    .. code-block:: text

        #: ../../contribute.rst:5
        #, fuzzy
        msgid "Contribute"
        msgstr ""

    It means the origianl sentence have been changed, please edit the translation again.

Please do the following things:

1. Check which files have changed in the previous outputs. And for each file
#. Press ``Ctrl`` + ``F`` in your text editor to find out if any ``#, fuzzy`` exists, change these sentences first.
#. Find if any ``msgstr ""`` exists. You don't have to translate everything, for those words/sentence don't need to translate (e.g. EasyIDP, Python), just leave them blank.


.. note::

    If the sentence is too long, feel free to connect the sentence by adding "" in an new line:

    .. code-block:: text

        msgstr "This sentence is too long"
        "But it is okay to continue like this"
        "and this ..."

    But should not have a blank line!

.. caution::

    For the inline code and links, please ensure they are wrapped by spaces:

    .. code-block:: text

        OK  -> Press ``Ctrl`` + `url <url>`_ in your 
        ERR -> Press``Ctrl``+ `url <url>`_in your 

    Otherwise this sentences will get error without notification, and the translation will not appear.


4\. render and preview
^^^^^^^^^^^^^^^^^^^^^^

Lastly, change the language of local preview ( ``-Dlanguage='your_lang'`` ), and render the document pages:


.. tab:: Windows

    .. code-block:: bash

        (venv) EasyIDP/docs> set SPHINXOPTS=-Dlanguage=zh_CN
        (venv) EasyIDP/docs> make html

.. tab:: Linux/BSD

    .. code-block:: bash

        (venv) EasyIDP/docs> make -e SPHINXOPTS="-Dlanguage='zh_CN'" html

You can open the ``_build\html\index.html`` to see the generated documentations.

Todo lists
==========

.. todolist::