from unittest.mock import patch

import requests

import cartography.intel.{{ entity._module.name|lower }}.{{ entity.name|lower }}s
import tests.data.{{ entity._module.name|lower }}.{{ entity.name|lower }}s
from tests.integration.util import check_nodes
from tests.integration.util import check_rels

TEST_UPDATE_TAG = 123456789


@patch.object(cartography.{{ entity._module.name|lower }}.{{ entity.name|lower }}s, 'get', return_value=tests.data.{{ entity._module.name|lower }}.{{ entity.name|lower }}s.{{ entity._module.name|upper }}_{{ entity._module.name|upper }}S)
def test_load_{{ entity._module.name|lower }}_{{ entity.name|lower }}s(mock_api, neo4j_session):
    """
    Ensure that {{ entity.name|lower }}s actually get loaded
    """

    # Arrange
    api_session = requests.Session()
    common_job_parameters = {
        "UPDATE_TAG": TEST_UPDATE_TAG,
        "BASE_URL": "https://fake.{{ entity._module.name | lower }}.com",
    }
    {% for param in entity.needed_params.values() %}
    {{ param.var_name }} = 'CHANGEME'  # CHANGEME: Add here expected parent id node
    {% endfor %}

    # Act
{{ entity.export_sync_call(param_style='var') }}

    # Assert {{ entity.name }}s exist
    expected_nodes = {
        # CHANGEME: Add here expected node from data
        # (123456, 'john.doe@domain.tld'),
    }
    assert check_nodes(
        neo4j_session,
        '{{ entity.node_name }}',
        ['id', 'email']
    ) == expected_nodes

    {% if entity.parent_entity %}
    # Assert {{ entity.name }}s are connected with {{ entity.parent_entity.name }}
    expected_rels = {
        ('CHANGE_ME', {{ entity.parent_entity.name|lower }}_id),  # CHANGEME: Add here one of {{ entity.name}}s id
    }
    assert check_rels(
        neo4j_session,
        '{{ entity.node_name }}', 'id',
        '{{ entity.parent_entity.node_name }}', 'id',
        'RESOURCE',
        rel_direction_right=True,
    ) == expected_rels
    {% endif %}
