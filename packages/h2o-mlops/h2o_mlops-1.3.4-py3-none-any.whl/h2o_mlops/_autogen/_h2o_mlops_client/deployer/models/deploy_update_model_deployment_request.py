# coding: utf-8

"""
    ai/h2o/mlops/deployer/v1/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.configuration import Configuration


class DeployUpdateModelDeploymentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deployment': 'DeployDeployment',
        'update_mask': 'str'
    }

    attribute_map = {
        'deployment': 'deployment',
        'update_mask': 'updateMask'
    }

    def __init__(self, deployment=None, update_mask=None, local_vars_configuration=None):  # noqa: E501
        """DeployUpdateModelDeploymentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deployment = None
        self._update_mask = None
        self.discriminator = None

        if deployment is not None:
            self.deployment = deployment
        if update_mask is not None:
            self.update_mask = update_mask

    @property
    def deployment(self):
        """Gets the deployment of this DeployUpdateModelDeploymentRequest.  # noqa: E501


        :return: The deployment of this DeployUpdateModelDeploymentRequest.  # noqa: E501
        :rtype: DeployDeployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this DeployUpdateModelDeploymentRequest.


        :param deployment: The deployment of this DeployUpdateModelDeploymentRequest.  # noqa: E501
        :type deployment: DeployDeployment
        """

        self._deployment = deployment

    @property
    def update_mask(self):
        """Gets the update_mask of this DeployUpdateModelDeploymentRequest.  # noqa: E501

        The fields to update.  An empty value, or value of `*`, implies all updatable fields should apply.  The following fields are supported: `deployment.kubernetes_resource_spec` `deployment.kubernetes_configuration_shortcut` `deployment.security` `deployment.monitor` `deployment.customCors` `deployment.single_deployment.deployment_environment_variables` `deployment.shadow_deployment.primary_element.deployment_environment_variables` `deployment.shadow_deployment.secondary_element.deployment_environment_variables` `deployment.split_deployment.split_elements.deployment_environment_variables` `deployment.single_deployment.vpa_spec.cpu` `deployment.single_deployment.vpa_spec.memory` `deployment.shadow_deployment.primary_element.vpa_spec.cpu` `deployment.shadow_deployment.primary_element.vpa_spec.memory` `deployment.shadow_deployment.secondary_element.vpa_spec.cpu` `deployment.shadow_deployment.secondary_element.vpa_spec.memory` `deployment.split_deployment.split_elements.vpa_spec.cpu` `deployment.split_deployment.split_elements.vpa_spec.memory` Allowed security updates are: - no security -> plain_text/hash/token_auth - plain_text -> hash - hash -> plain_text - old plain_text -> new plain_text - old hash -> new hash - plain_text -> token_auth - hash -> token_auth - token_auth -> plain_text - token_auth -> hash All other cases would be ignored and updated passphrase hash must not be blank.  # noqa: E501

        :return: The update_mask of this DeployUpdateModelDeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this DeployUpdateModelDeploymentRequest.

        The fields to update.  An empty value, or value of `*`, implies all updatable fields should apply.  The following fields are supported: `deployment.kubernetes_resource_spec` `deployment.kubernetes_configuration_shortcut` `deployment.security` `deployment.monitor` `deployment.customCors` `deployment.single_deployment.deployment_environment_variables` `deployment.shadow_deployment.primary_element.deployment_environment_variables` `deployment.shadow_deployment.secondary_element.deployment_environment_variables` `deployment.split_deployment.split_elements.deployment_environment_variables` `deployment.single_deployment.vpa_spec.cpu` `deployment.single_deployment.vpa_spec.memory` `deployment.shadow_deployment.primary_element.vpa_spec.cpu` `deployment.shadow_deployment.primary_element.vpa_spec.memory` `deployment.shadow_deployment.secondary_element.vpa_spec.cpu` `deployment.shadow_deployment.secondary_element.vpa_spec.memory` `deployment.split_deployment.split_elements.vpa_spec.cpu` `deployment.split_deployment.split_elements.vpa_spec.memory` Allowed security updates are: - no security -> plain_text/hash/token_auth - plain_text -> hash - hash -> plain_text - old plain_text -> new plain_text - old hash -> new hash - plain_text -> token_auth - hash -> token_auth - token_auth -> plain_text - token_auth -> hash All other cases would be ignored and updated passphrase hash must not be blank.  # noqa: E501

        :param update_mask: The update_mask of this DeployUpdateModelDeploymentRequest.  # noqa: E501
        :type update_mask: str
        """

        self._update_mask = update_mask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployUpdateModelDeploymentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeployUpdateModelDeploymentRequest):
            return True

        return self.to_dict() != other.to_dict()
