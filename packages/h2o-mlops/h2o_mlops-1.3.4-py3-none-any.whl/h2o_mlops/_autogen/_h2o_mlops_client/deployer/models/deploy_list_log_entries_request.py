# coding: utf-8

"""
    ai/h2o/mlops/deployer/v1/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.configuration import Configuration


class DeployListLogEntriesRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parent': 'str',
        'max_lines': 'int',
        'page_size': 'int',
        'page_token': 'str',
        'filter': 'str'
    }

    attribute_map = {
        'parent': 'parent',
        'max_lines': 'maxLines',
        'page_size': 'pageSize',
        'page_token': 'pageToken',
        'filter': 'filter'
    }

    def __init__(self, parent=None, max_lines=None, page_size=None, page_token=None, filter=None, local_vars_configuration=None):  # noqa: E501
        """DeployListLogEntriesRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parent = None
        self._max_lines = None
        self._page_size = None
        self._page_token = None
        self._filter = None
        self.discriminator = None

        if parent is not None:
            self.parent = parent
        if max_lines is not None:
            self.max_lines = max_lines
        if page_size is not None:
            self.page_size = page_size
        if page_token is not None:
            self.page_token = page_token
        if filter is not None:
            self.filter = filter

    @property
    def parent(self):
        """Gets the parent of this DeployListLogEntriesRequest.  # noqa: E501


        :return: The parent of this DeployListLogEntriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this DeployListLogEntriesRequest.


        :param parent: The parent of this DeployListLogEntriesRequest.  # noqa: E501
        :type parent: str
        """

        self._parent = parent

    @property
    def max_lines(self):
        """Gets the max_lines of this DeployListLogEntriesRequest.  # noqa: E501

        Optional. Maximum number of lines, per log entry, to return. Actual number of lines returned by the server may be less than this value.  # noqa: E501

        :return: The max_lines of this DeployListLogEntriesRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_lines

    @max_lines.setter
    def max_lines(self, max_lines):
        """Sets the max_lines of this DeployListLogEntriesRequest.

        Optional. Maximum number of lines, per log entry, to return. Actual number of lines returned by the server may be less than this value.  # noqa: E501

        :param max_lines: The max_lines of this DeployListLogEntriesRequest.  # noqa: E501
        :type max_lines: int
        """

        self._max_lines = max_lines

    @property
    def page_size(self):
        """Gets the page_size of this DeployListLogEntriesRequest.  # noqa: E501

        Optional. The maximum number of results to return. A response's page size may differ at the discretion of the server, especially for the purpose of capping response size.  # noqa: E501

        :return: The page_size of this DeployListLogEntriesRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DeployListLogEntriesRequest.

        Optional. The maximum number of results to return. A response's page size may differ at the discretion of the server, especially for the purpose of capping response size.  # noqa: E501

        :param page_size: The page_size of this DeployListLogEntriesRequest.  # noqa: E501
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this DeployListLogEntriesRequest.  # noqa: E501

        Optional. The `next_page_token` value returned from a previous call, used to get the next set of results. If the token is invalid or expired, the server behaves as if the token was never specified.  # noqa: E501

        :return: The page_token of this DeployListLogEntriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this DeployListLogEntriesRequest.

        Optional. The `next_page_token` value returned from a previous call, used to get the next set of results. If the token is invalid or expired, the server behaves as if the token was never specified.  # noqa: E501

        :param page_token: The page_token of this DeployListLogEntriesRequest.  # noqa: E501
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def filter(self):
        """Gets the filter of this DeployListLogEntriesRequest.  # noqa: E501


        :return: The filter of this DeployListLogEntriesRequest.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this DeployListLogEntriesRequest.


        :param filter: The filter of this DeployListLogEntriesRequest.  # noqa: E501
        :type filter: str
        """

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployListLogEntriesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeployListLogEntriesRequest):
            return True

        return self.to_dict() != other.to_dict()
