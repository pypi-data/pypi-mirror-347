# coding: utf-8

"""
    ai/h2o/mlops/deployer/v1/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.configuration import Configuration


class DeployMonitor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable': 'bool',
        'store_scoring_transaction_enable': 'bool'
    }

    attribute_map = {
        'enable': 'enable',
        'store_scoring_transaction_enable': 'storeScoringTransactionEnable'
    }

    def __init__(self, enable=None, store_scoring_transaction_enable=None, local_vars_configuration=None):  # noqa: E501
        """DeployMonitor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enable = None
        self._store_scoring_transaction_enable = None
        self.discriminator = None

        if enable is not None:
            self.enable = enable
        if store_scoring_transaction_enable is not None:
            self.store_scoring_transaction_enable = store_scoring_transaction_enable

    @property
    def enable(self):
        """Gets the enable of this DeployMonitor.  # noqa: E501

        Enable monitor proxy or not. If not set, default is false.  # noqa: E501

        :return: The enable of this DeployMonitor.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this DeployMonitor.

        Enable monitor proxy or not. If not set, default is false.  # noqa: E501

        :param enable: The enable of this DeployMonitor.  # noqa: E501
        :type enable: bool
        """

        self._enable = enable

    @property
    def store_scoring_transaction_enable(self):
        """Gets the store_scoring_transaction_enable of this DeployMonitor.  # noqa: E501

        Enable monitor proxy to store scoring transaction or not. If not set, default is false. If enable is false, this field will be ignored.  # noqa: E501

        :return: The store_scoring_transaction_enable of this DeployMonitor.  # noqa: E501
        :rtype: bool
        """
        return self._store_scoring_transaction_enable

    @store_scoring_transaction_enable.setter
    def store_scoring_transaction_enable(self, store_scoring_transaction_enable):
        """Sets the store_scoring_transaction_enable of this DeployMonitor.

        Enable monitor proxy to store scoring transaction or not. If not set, default is false. If enable is false, this field will be ignored.  # noqa: E501

        :param store_scoring_transaction_enable: The store_scoring_transaction_enable of this DeployMonitor.  # noqa: E501
        :type store_scoring_transaction_enable: bool
        """

        self._store_scoring_transaction_enable = store_scoring_transaction_enable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployMonitor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeployMonitor):
            return True

        return self.to_dict() != other.to_dict()
