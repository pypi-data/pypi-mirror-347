# coding: utf-8

"""
    ai/h2o/mlops/deployer/v1/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.configuration import Configuration


class DeployDeploymentProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'is_default': 'bool',
        'kubernetes_option': 'DeployConfigurableKubernetesOption'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'description': 'description',
        'is_default': 'isDefault',
        'kubernetes_option': 'kubernetesOption'
    }

    def __init__(self, name=None, display_name=None, description=None, is_default=None, kubernetes_option=None, local_vars_configuration=None):  # noqa: E501
        """DeployDeploymentProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._description = None
        self._is_default = None
        self._kubernetes_option = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if is_default is not None:
            self.is_default = is_default
        if kubernetes_option is not None:
            self.kubernetes_option = kubernetes_option

    @property
    def name(self):
        """Gets the name of this DeployDeploymentProfile.  # noqa: E501

        Unique name of this deployment profile within its parent deployment environment.  # noqa: E501

        :return: The name of this DeployDeploymentProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeployDeploymentProfile.

        Unique name of this deployment profile within its parent deployment environment.  # noqa: E501

        :param name: The name of this DeployDeploymentProfile.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this DeployDeploymentProfile.  # noqa: E501

        The human readable name of this deployment profile.  # noqa: E501

        :return: The display_name of this DeployDeploymentProfile.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeployDeploymentProfile.

        The human readable name of this deployment profile.  # noqa: E501

        :param display_name: The display_name of this DeployDeploymentProfile.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this DeployDeploymentProfile.  # noqa: E501

        The description of this deployment profile.  # noqa: E501

        :return: The description of this DeployDeploymentProfile.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeployDeploymentProfile.

        The description of this deployment profile.  # noqa: E501

        :param description: The description of this DeployDeploymentProfile.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def is_default(self):
        """Gets the is_default of this DeployDeploymentProfile.  # noqa: E501

        Whether the profile is the default profile within its parent deployment environment. Notice: true does not mean this profile will be applied automatically when create a new deployment.  # noqa: E501

        :return: The is_default of this DeployDeploymentProfile.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this DeployDeploymentProfile.

        Whether the profile is the default profile within its parent deployment environment. Notice: true does not mean this profile will be applied automatically when create a new deployment.  # noqa: E501

        :param is_default: The is_default of this DeployDeploymentProfile.  # noqa: E501
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def kubernetes_option(self):
        """Gets the kubernetes_option of this DeployDeploymentProfile.  # noqa: E501


        :return: The kubernetes_option of this DeployDeploymentProfile.  # noqa: E501
        :rtype: DeployConfigurableKubernetesOption
        """
        return self._kubernetes_option

    @kubernetes_option.setter
    def kubernetes_option(self, kubernetes_option):
        """Sets the kubernetes_option of this DeployDeploymentProfile.


        :param kubernetes_option: The kubernetes_option of this DeployDeploymentProfile.  # noqa: E501
        :type kubernetes_option: DeployConfigurableKubernetesOption
        """

        self._kubernetes_option = kubernetes_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployDeploymentProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeployDeploymentProfile):
            return True

        return self.to_dict() != other.to_dict()
