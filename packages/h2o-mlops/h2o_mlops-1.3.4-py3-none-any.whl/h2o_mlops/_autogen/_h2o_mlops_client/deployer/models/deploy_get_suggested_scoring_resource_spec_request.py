# coding: utf-8

"""
    ai/h2o/mlops/deployer/v1/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.configuration import Configuration


class DeployGetSuggestedScoringResourceSpecRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deployment_composition': 'DeployDeploymentComposition',
        'workers': 'int'
    }

    attribute_map = {
        'deployment_composition': 'deploymentComposition',
        'workers': 'workers'
    }

    def __init__(self, deployment_composition=None, workers=None, local_vars_configuration=None):  # noqa: E501
        """DeployGetSuggestedScoringResourceSpecRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deployment_composition = None
        self._workers = None
        self.discriminator = None

        if deployment_composition is not None:
            self.deployment_composition = deployment_composition
        if workers is not None:
            self.workers = workers

    @property
    def deployment_composition(self):
        """Gets the deployment_composition of this DeployGetSuggestedScoringResourceSpecRequest.  # noqa: E501


        :return: The deployment_composition of this DeployGetSuggestedScoringResourceSpecRequest.  # noqa: E501
        :rtype: DeployDeploymentComposition
        """
        return self._deployment_composition

    @deployment_composition.setter
    def deployment_composition(self, deployment_composition):
        """Sets the deployment_composition of this DeployGetSuggestedScoringResourceSpecRequest.


        :param deployment_composition: The deployment_composition of this DeployGetSuggestedScoringResourceSpecRequest.  # noqa: E501
        :type deployment_composition: DeployDeploymentComposition
        """

        self._deployment_composition = deployment_composition

    @property
    def workers(self):
        """Gets the workers of this DeployGetSuggestedScoringResourceSpecRequest.  # noqa: E501

        Optional additional field The number of runtime worker processes (degree of parallelization), only applicable to python based scorers. If omit the value then it will fallback to 1.  # noqa: E501

        :return: The workers of this DeployGetSuggestedScoringResourceSpecRequest.  # noqa: E501
        :rtype: int
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this DeployGetSuggestedScoringResourceSpecRequest.

        Optional additional field The number of runtime worker processes (degree of parallelization), only applicable to python based scorers. If omit the value then it will fallback to 1.  # noqa: E501

        :param workers: The workers of this DeployGetSuggestedScoringResourceSpecRequest.  # noqa: E501
        :type workers: int
        """

        self._workers = workers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployGetSuggestedScoringResourceSpecRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeployGetSuggestedScoringResourceSpecRequest):
            return True

        return self.to_dict() != other.to_dict()
