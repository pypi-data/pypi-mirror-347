# coding: utf-8

"""
    ai/h2o/mlops/deployer/v1/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.configuration import Configuration


class DeployDeployment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'project_id': 'str',
        'deployment_environment_id': 'str',
        'created_time': 'datetime',
        'last_modified_time': 'datetime',
        'single_deployment': 'DeploySingleDeployment',
        'shadow_deployment': 'DeployShadowDeployment',
        'split_deployment': 'DeploySplitDeployment',
        'security': 'DeploySecurity',
        'display_name': 'str',
        'description': 'str',
        'revision_id': 'str',
        'revision_create_time': 'datetime',
        'user_info': 'DeployUser',
        'custom_cors': 'DeployCors',
        'monitor': 'DeployMonitor',
        'monitoring_options': 'V2MonitoringOptions'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'projectId',
        'deployment_environment_id': 'deploymentEnvironmentId',
        'created_time': 'createdTime',
        'last_modified_time': 'lastModifiedTime',
        'single_deployment': 'singleDeployment',
        'shadow_deployment': 'shadowDeployment',
        'split_deployment': 'splitDeployment',
        'security': 'security',
        'display_name': 'displayName',
        'description': 'description',
        'revision_id': 'revisionId',
        'revision_create_time': 'revisionCreateTime',
        'user_info': 'userInfo',
        'custom_cors': 'customCors',
        'monitor': 'monitor',
        'monitoring_options': 'monitoringOptions'
    }

    def __init__(self, id=None, project_id=None, deployment_environment_id=None, created_time=None, last_modified_time=None, single_deployment=None, shadow_deployment=None, split_deployment=None, security=None, display_name=None, description=None, revision_id=None, revision_create_time=None, user_info=None, custom_cors=None, monitor=None, monitoring_options=None, local_vars_configuration=None):  # noqa: E501
        """DeployDeployment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._project_id = None
        self._deployment_environment_id = None
        self._created_time = None
        self._last_modified_time = None
        self._single_deployment = None
        self._shadow_deployment = None
        self._split_deployment = None
        self._security = None
        self._display_name = None
        self._description = None
        self._revision_id = None
        self._revision_create_time = None
        self._user_info = None
        self._custom_cors = None
        self._monitor = None
        self._monitoring_options = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if deployment_environment_id is not None:
            self.deployment_environment_id = deployment_environment_id
        if created_time is not None:
            self.created_time = created_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if single_deployment is not None:
            self.single_deployment = single_deployment
        if shadow_deployment is not None:
            self.shadow_deployment = shadow_deployment
        if split_deployment is not None:
            self.split_deployment = split_deployment
        if security is not None:
            self.security = security
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if revision_id is not None:
            self.revision_id = revision_id
        if revision_create_time is not None:
            self.revision_create_time = revision_create_time
        if user_info is not None:
            self.user_info = user_info
        if custom_cors is not None:
            self.custom_cors = custom_cors
        if monitor is not None:
            self.monitor = monitor
        if monitoring_options is not None:
            self.monitoring_options = monitoring_options

    @property
    def id(self):
        """Gets the id of this DeployDeployment.  # noqa: E501

        ID of the entity.  # noqa: E501

        :return: The id of this DeployDeployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeployDeployment.

        ID of the entity.  # noqa: E501

        :param id: The id of this DeployDeployment.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this DeployDeployment.  # noqa: E501

        ID of the project the deployment is part of.  # noqa: E501

        :return: The project_id of this DeployDeployment.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DeployDeployment.

        ID of the project the deployment is part of.  # noqa: E501

        :param project_id: The project_id of this DeployDeployment.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def deployment_environment_id(self):
        """Gets the deployment_environment_id of this DeployDeployment.  # noqa: E501

        ID of the deployment environment in which to create this deployment.  # noqa: E501

        :return: The deployment_environment_id of this DeployDeployment.  # noqa: E501
        :rtype: str
        """
        return self._deployment_environment_id

    @deployment_environment_id.setter
    def deployment_environment_id(self, deployment_environment_id):
        """Sets the deployment_environment_id of this DeployDeployment.

        ID of the deployment environment in which to create this deployment.  # noqa: E501

        :param deployment_environment_id: The deployment_environment_id of this DeployDeployment.  # noqa: E501
        :type deployment_environment_id: str
        """

        self._deployment_environment_id = deployment_environment_id

    @property
    def created_time(self):
        """Gets the created_time of this DeployDeployment.  # noqa: E501

        Creation timestamp.  # noqa: E501

        :return: The created_time of this DeployDeployment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this DeployDeployment.

        Creation timestamp.  # noqa: E501

        :param created_time: The created_time of this DeployDeployment.  # noqa: E501
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DeployDeployment.  # noqa: E501

        Last modification timestamp.  # noqa: E501

        :return: The last_modified_time of this DeployDeployment.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DeployDeployment.

        Last modification timestamp.  # noqa: E501

        :param last_modified_time: The last_modified_time of this DeployDeployment.  # noqa: E501
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def single_deployment(self):
        """Gets the single_deployment of this DeployDeployment.  # noqa: E501


        :return: The single_deployment of this DeployDeployment.  # noqa: E501
        :rtype: DeploySingleDeployment
        """
        return self._single_deployment

    @single_deployment.setter
    def single_deployment(self, single_deployment):
        """Sets the single_deployment of this DeployDeployment.


        :param single_deployment: The single_deployment of this DeployDeployment.  # noqa: E501
        :type single_deployment: DeploySingleDeployment
        """

        self._single_deployment = single_deployment

    @property
    def shadow_deployment(self):
        """Gets the shadow_deployment of this DeployDeployment.  # noqa: E501


        :return: The shadow_deployment of this DeployDeployment.  # noqa: E501
        :rtype: DeployShadowDeployment
        """
        return self._shadow_deployment

    @shadow_deployment.setter
    def shadow_deployment(self, shadow_deployment):
        """Sets the shadow_deployment of this DeployDeployment.


        :param shadow_deployment: The shadow_deployment of this DeployDeployment.  # noqa: E501
        :type shadow_deployment: DeployShadowDeployment
        """

        self._shadow_deployment = shadow_deployment

    @property
    def split_deployment(self):
        """Gets the split_deployment of this DeployDeployment.  # noqa: E501


        :return: The split_deployment of this DeployDeployment.  # noqa: E501
        :rtype: DeploySplitDeployment
        """
        return self._split_deployment

    @split_deployment.setter
    def split_deployment(self, split_deployment):
        """Sets the split_deployment of this DeployDeployment.


        :param split_deployment: The split_deployment of this DeployDeployment.  # noqa: E501
        :type split_deployment: DeploySplitDeployment
        """

        self._split_deployment = split_deployment

    @property
    def security(self):
        """Gets the security of this DeployDeployment.  # noqa: E501


        :return: The security of this DeployDeployment.  # noqa: E501
        :rtype: DeploySecurity
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this DeployDeployment.


        :param security: The security of this DeployDeployment.  # noqa: E501
        :type security: DeploySecurity
        """

        self._security = security

    @property
    def display_name(self):
        """Gets the display_name of this DeployDeployment.  # noqa: E501

        Name of the deployment.  # noqa: E501

        :return: The display_name of this DeployDeployment.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeployDeployment.

        Name of the deployment.  # noqa: E501

        :param display_name: The display_name of this DeployDeployment.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this DeployDeployment.  # noqa: E501

        Description of the deployment.  # noqa: E501

        :return: The description of this DeployDeployment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeployDeployment.

        Description of the deployment.  # noqa: E501

        :param description: The description of this DeployDeployment.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def revision_id(self):
        """Gets the revision_id of this DeployDeployment.  # noqa: E501

        Output only. The revision ID of the deployment.  The format is an 8-character hexadecimal string. For compatibility reasons, this field is currently unset for Deployments created before this field was introduced.  # noqa: E501

        :return: The revision_id of this DeployDeployment.  # noqa: E501
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this DeployDeployment.

        Output only. The revision ID of the deployment.  The format is an 8-character hexadecimal string. For compatibility reasons, this field is currently unset for Deployments created before this field was introduced.  # noqa: E501

        :param revision_id: The revision_id of this DeployDeployment.  # noqa: E501
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def revision_create_time(self):
        """Gets the revision_create_time of this DeployDeployment.  # noqa: E501

        Output only. The timestamp for when the revision was created.  # noqa: E501

        :return: The revision_create_time of this DeployDeployment.  # noqa: E501
        :rtype: datetime
        """
        return self._revision_create_time

    @revision_create_time.setter
    def revision_create_time(self, revision_create_time):
        """Sets the revision_create_time of this DeployDeployment.

        Output only. The timestamp for when the revision was created.  # noqa: E501

        :param revision_create_time: The revision_create_time of this DeployDeployment.  # noqa: E501
        :type revision_create_time: datetime
        """

        self._revision_create_time = revision_create_time

    @property
    def user_info(self):
        """Gets the user_info of this DeployDeployment.  # noqa: E501


        :return: The user_info of this DeployDeployment.  # noqa: E501
        :rtype: DeployUser
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this DeployDeployment.


        :param user_info: The user_info of this DeployDeployment.  # noqa: E501
        :type user_info: DeployUser
        """

        self._user_info = user_info

    @property
    def custom_cors(self):
        """Gets the custom_cors of this DeployDeployment.  # noqa: E501


        :return: The custom_cors of this DeployDeployment.  # noqa: E501
        :rtype: DeployCors
        """
        return self._custom_cors

    @custom_cors.setter
    def custom_cors(self, custom_cors):
        """Sets the custom_cors of this DeployDeployment.


        :param custom_cors: The custom_cors of this DeployDeployment.  # noqa: E501
        :type custom_cors: DeployCors
        """

        self._custom_cors = custom_cors

    @property
    def monitor(self):
        """Gets the monitor of this DeployDeployment.  # noqa: E501


        :return: The monitor of this DeployDeployment.  # noqa: E501
        :rtype: DeployMonitor
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this DeployDeployment.


        :param monitor: The monitor of this DeployDeployment.  # noqa: E501
        :type monitor: DeployMonitor
        """

        self._monitor = monitor

    @property
    def monitoring_options(self):
        """Gets the monitoring_options of this DeployDeployment.  # noqa: E501


        :return: The monitoring_options of this DeployDeployment.  # noqa: E501
        :rtype: V2MonitoringOptions
        """
        return self._monitoring_options

    @monitoring_options.setter
    def monitoring_options(self, monitoring_options):
        """Sets the monitoring_options of this DeployDeployment.


        :param monitoring_options: The monitoring_options of this DeployDeployment.  # noqa: E501
        :type monitoring_options: V2MonitoringOptions
        """

        self._monitoring_options = monitoring_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployDeployment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeployDeployment):
            return True

        return self.to_dict() != other.to_dict()
