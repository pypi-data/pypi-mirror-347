# coding: utf-8

"""
    ai/h2o/mlops/deployer/v1/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.configuration import Configuration


class DeployDeploymentComposition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'experiment_id': 'str',
        'artifact_id': 'str',
        'deployable_artifact_type_name': 'str',
        'artifact_processor_name': 'str',
        'runtime_name': 'str',
        'runtime_image': 'str'
    }

    attribute_map = {
        'experiment_id': 'experimentId',
        'artifact_id': 'artifactId',
        'deployable_artifact_type_name': 'deployableArtifactTypeName',
        'artifact_processor_name': 'artifactProcessorName',
        'runtime_name': 'runtimeName',
        'runtime_image': 'runtimeImage'
    }

    def __init__(self, experiment_id=None, artifact_id=None, deployable_artifact_type_name=None, artifact_processor_name=None, runtime_name=None, runtime_image=None, local_vars_configuration=None):  # noqa: E501
        """DeployDeploymentComposition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._experiment_id = None
        self._artifact_id = None
        self._deployable_artifact_type_name = None
        self._artifact_processor_name = None
        self._runtime_name = None
        self._runtime_image = None
        self.discriminator = None

        if experiment_id is not None:
            self.experiment_id = experiment_id
        if artifact_id is not None:
            self.artifact_id = artifact_id
        if deployable_artifact_type_name is not None:
            self.deployable_artifact_type_name = deployable_artifact_type_name
        if artifact_processor_name is not None:
            self.artifact_processor_name = artifact_processor_name
        if runtime_name is not None:
            self.runtime_name = runtime_name
        if runtime_image is not None:
            self.runtime_image = runtime_image

    @property
    def experiment_id(self):
        """Gets the experiment_id of this DeployDeploymentComposition.  # noqa: E501

        ID of the experiment hosting the model to be deployed.  # noqa: E501

        :return: The experiment_id of this DeployDeploymentComposition.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this DeployDeploymentComposition.

        ID of the experiment hosting the model to be deployed.  # noqa: E501

        :param experiment_id: The experiment_id of this DeployDeploymentComposition.  # noqa: E501
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def artifact_id(self):
        """Gets the artifact_id of this DeployDeploymentComposition.  # noqa: E501

        Obsolete. Do not use. Kept here as a workaround for a specific compatibility concern.  # noqa: E501

        :return: The artifact_id of this DeployDeploymentComposition.  # noqa: E501
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this DeployDeploymentComposition.

        Obsolete. Do not use. Kept here as a workaround for a specific compatibility concern.  # noqa: E501

        :param artifact_id: The artifact_id of this DeployDeploymentComposition.  # noqa: E501
        :type artifact_id: str
        """

        self._artifact_id = artifact_id

    @property
    def deployable_artifact_type_name(self):
        """Gets the deployable_artifact_type_name of this DeployDeploymentComposition.  # noqa: E501

        Identifying name of the deployable artifact type.  # noqa: E501

        :return: The deployable_artifact_type_name of this DeployDeploymentComposition.  # noqa: E501
        :rtype: str
        """
        return self._deployable_artifact_type_name

    @deployable_artifact_type_name.setter
    def deployable_artifact_type_name(self, deployable_artifact_type_name):
        """Sets the deployable_artifact_type_name of this DeployDeploymentComposition.

        Identifying name of the deployable artifact type.  # noqa: E501

        :param deployable_artifact_type_name: The deployable_artifact_type_name of this DeployDeploymentComposition.  # noqa: E501
        :type deployable_artifact_type_name: str
        """

        self._deployable_artifact_type_name = deployable_artifact_type_name

    @property
    def artifact_processor_name(self):
        """Gets the artifact_processor_name of this DeployDeploymentComposition.  # noqa: E501

        Identifying name of the artifact processor.  # noqa: E501

        :return: The artifact_processor_name of this DeployDeploymentComposition.  # noqa: E501
        :rtype: str
        """
        return self._artifact_processor_name

    @artifact_processor_name.setter
    def artifact_processor_name(self, artifact_processor_name):
        """Sets the artifact_processor_name of this DeployDeploymentComposition.

        Identifying name of the artifact processor.  # noqa: E501

        :param artifact_processor_name: The artifact_processor_name of this DeployDeploymentComposition.  # noqa: E501
        :type artifact_processor_name: str
        """

        self._artifact_processor_name = artifact_processor_name

    @property
    def runtime_name(self):
        """Gets the runtime_name of this DeployDeploymentComposition.  # noqa: E501

        Identifying name of the runtime.  # noqa: E501

        :return: The runtime_name of this DeployDeploymentComposition.  # noqa: E501
        :rtype: str
        """
        return self._runtime_name

    @runtime_name.setter
    def runtime_name(self, runtime_name):
        """Sets the runtime_name of this DeployDeploymentComposition.

        Identifying name of the runtime.  # noqa: E501

        :param runtime_name: The runtime_name of this DeployDeploymentComposition.  # noqa: E501
        :type runtime_name: str
        """

        self._runtime_name = runtime_name

    @property
    def runtime_image(self):
        """Gets the runtime_image of this DeployDeploymentComposition.  # noqa: E501

        Optional. If specified, runtime image will be overwritten with this value if allowed.  # noqa: E501

        :return: The runtime_image of this DeployDeploymentComposition.  # noqa: E501
        :rtype: str
        """
        return self._runtime_image

    @runtime_image.setter
    def runtime_image(self, runtime_image):
        """Sets the runtime_image of this DeployDeploymentComposition.

        Optional. If specified, runtime image will be overwritten with this value if allowed.  # noqa: E501

        :param runtime_image: The runtime_image of this DeployDeploymentComposition.  # noqa: E501
        :type runtime_image: str
        """

        self._runtime_image = runtime_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployDeploymentComposition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeployDeploymentComposition):
            return True

        return self.to_dict() != other.to_dict()
