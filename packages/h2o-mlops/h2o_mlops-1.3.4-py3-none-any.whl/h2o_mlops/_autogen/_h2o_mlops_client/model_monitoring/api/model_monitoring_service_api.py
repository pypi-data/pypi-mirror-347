# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from _h2o_mlops_client.model_monitoring.api_client import ApiClient
from _h2o_mlops_client.model_monitoring.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ModelMonitoringServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def export_metric(self, body, **kwargs):  # noqa: E501
        """Export a metric.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_metric(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: ApiExportMetricRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StreamResultOfApiExportMetricResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.export_metric_with_http_info(body, **kwargs)  # noqa: E501

    def export_metric_with_http_info(self, body, **kwargs):  # noqa: E501
        """Export a metric.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_metric_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: ApiExportMetricRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StreamResultOfApiExportMetricResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_metric" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `export_metric`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ai.h2o.mlops.monitoring.api.ModelMonitoringService/ExportMetric', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StreamResultOfApiExportMetricResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_model_drift_metrics(self, deployment_id, model_id, **kwargs):  # noqa: E501
        """Given the deployment_id and the selected model_id, the service provides the drift metrics of the model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_drift_metrics(deployment_id, model_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: (required)
        :type deployment_id: str
        :param model_id: (required)
        :type model_id: str
        :param start_date_time: Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type start_date_time: datetime
        :param end_date_time: End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type end_date_time: datetime
        :param feature_importance_selected_feature:
        :type feature_importance_selected_feature: str
        :param feature_frequency_selected_feature:
        :type feature_frequency_selected_feature: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiGetModelDriftMetricsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_model_drift_metrics_with_http_info(deployment_id, model_id, **kwargs)  # noqa: E501

    def get_model_drift_metrics_with_http_info(self, deployment_id, model_id, **kwargs):  # noqa: E501
        """Given the deployment_id and the selected model_id, the service provides the drift metrics of the model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_drift_metrics_with_http_info(deployment_id, model_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: (required)
        :type deployment_id: str
        :param model_id: (required)
        :type model_id: str
        :param start_date_time: Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type start_date_time: datetime
        :param end_date_time: End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type end_date_time: datetime
        :param feature_importance_selected_feature:
        :type feature_importance_selected_feature: str
        :param feature_frequency_selected_feature:
        :type feature_frequency_selected_feature: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiGetModelDriftMetricsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'deployment_id',
            'model_id',
            'start_date_time',
            'end_date_time',
            'feature_importance_selected_feature',
            'feature_frequency_selected_feature'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_drift_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if self.api_client.client_side_validation and ('deployment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['deployment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deployment_id` when calling `get_model_drift_metrics`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and ('model_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `get_model_drift_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_id' in local_var_params:
            path_params['deploymentId'] = local_var_params['deployment_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['modelId'] = local_var_params['model_id']  # noqa: E501

        query_params = []
        if 'start_date_time' in local_var_params and local_var_params['start_date_time'] is not None:  # noqa: E501
            query_params.append(('startDateTime', local_var_params['start_date_time']))  # noqa: E501
        if 'end_date_time' in local_var_params and local_var_params['end_date_time'] is not None:  # noqa: E501
            query_params.append(('endDateTime', local_var_params['end_date_time']))  # noqa: E501
        if 'feature_importance_selected_feature' in local_var_params and local_var_params['feature_importance_selected_feature'] is not None:  # noqa: E501
            query_params.append(('featureImportanceSelectedFeature', local_var_params['feature_importance_selected_feature']))  # noqa: E501
        if 'feature_frequency_selected_feature' in local_var_params and local_var_params['feature_frequency_selected_feature'] is not None:  # noqa: E501
            query_params.append(('featureFrequencySelectedFeature', local_var_params['feature_frequency_selected_feature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/deployment/{deploymentId}/metrics/{modelId}/drift', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetModelDriftMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_model_health_metrics(self, deployment_id, model_id, **kwargs):  # noqa: E501
        """Given the deployment_id and the selected model_id, the service provides the health metrics of the model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_health_metrics(deployment_id, model_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: The Deployment ID (required)
        :type deployment_id: str
        :param model_id: The model ID for which the health metrics is to be obtained. (required)
        :type model_id: str
        :param start_date_time: Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type start_date_time: datetime
        :param end_date_time: End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type end_date_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiGetModelHealthMetricsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_model_health_metrics_with_http_info(deployment_id, model_id, **kwargs)  # noqa: E501

    def get_model_health_metrics_with_http_info(self, deployment_id, model_id, **kwargs):  # noqa: E501
        """Given the deployment_id and the selected model_id, the service provides the health metrics of the model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_health_metrics_with_http_info(deployment_id, model_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: The Deployment ID (required)
        :type deployment_id: str
        :param model_id: The model ID for which the health metrics is to be obtained. (required)
        :type model_id: str
        :param start_date_time: Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type start_date_time: datetime
        :param end_date_time: End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type end_date_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiGetModelHealthMetricsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'deployment_id',
            'model_id',
            'start_date_time',
            'end_date_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_health_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if self.api_client.client_side_validation and ('deployment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['deployment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deployment_id` when calling `get_model_health_metrics`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and ('model_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `get_model_health_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_id' in local_var_params:
            path_params['deploymentId'] = local_var_params['deployment_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['modelId'] = local_var_params['model_id']  # noqa: E501

        query_params = []
        if 'start_date_time' in local_var_params and local_var_params['start_date_time'] is not None:  # noqa: E501
            query_params.append(('startDateTime', local_var_params['start_date_time']))  # noqa: E501
        if 'end_date_time' in local_var_params and local_var_params['end_date_time'] is not None:  # noqa: E501
            query_params.append(('endDateTime', local_var_params['end_date_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/deployment/{deploymentId}/metrics/{modelId}/health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetModelHealthMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_model_operational_summary_metrics(self, deployment_id, model_id, **kwargs):  # noqa: E501
        """Given the deployment_id and the selected model_id, the service provides the operational metrics of the model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_operational_summary_metrics(deployment_id, model_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: (required)
        :type deployment_id: str
        :param model_id: (required)
        :type model_id: str
        :param start_date_time: Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type start_date_time: datetime
        :param end_date_time: End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type end_date_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiGetModelOperationalSummaryMetricsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_model_operational_summary_metrics_with_http_info(deployment_id, model_id, **kwargs)  # noqa: E501

    def get_model_operational_summary_metrics_with_http_info(self, deployment_id, model_id, **kwargs):  # noqa: E501
        """Given the deployment_id and the selected model_id, the service provides the operational metrics of the model.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_operational_summary_metrics_with_http_info(deployment_id, model_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: (required)
        :type deployment_id: str
        :param model_id: (required)
        :type model_id: str
        :param start_date_time: Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type start_date_time: datetime
        :param end_date_time: End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type end_date_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiGetModelOperationalSummaryMetricsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'deployment_id',
            'model_id',
            'start_date_time',
            'end_date_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_operational_summary_metrics" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if self.api_client.client_side_validation and ('deployment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['deployment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deployment_id` when calling `get_model_operational_summary_metrics`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and ('model_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['model_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `get_model_operational_summary_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_id' in local_var_params:
            path_params['deploymentId'] = local_var_params['deployment_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['modelId'] = local_var_params['model_id']  # noqa: E501

        query_params = []
        if 'start_date_time' in local_var_params and local_var_params['start_date_time'] is not None:  # noqa: E501
            query_params.append(('startDateTime', local_var_params['start_date_time']))  # noqa: E501
        if 'end_date_time' in local_var_params and local_var_params['end_date_time'] is not None:  # noqa: E501
            query_params.append(('endDateTime', local_var_params['end_date_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/deployment/{deploymentId}/metrics/{modelId}/operational', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetModelOperationalSummaryMetricsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_monitored_deployment(self, deployment_id, **kwargs):  # noqa: E501
        """Get the monitored deployment for a given deployment id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_monitored_deployment(deployment_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: (required)
        :type deployment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiGetMonitoredDeploymentResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_monitored_deployment_with_http_info(deployment_id, **kwargs)  # noqa: E501

    def get_monitored_deployment_with_http_info(self, deployment_id, **kwargs):  # noqa: E501
        """Get the monitored deployment for a given deployment id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_monitored_deployment_with_http_info(deployment_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: (required)
        :type deployment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiGetMonitoredDeploymentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'deployment_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_monitored_deployment" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if self.api_client.client_side_validation and ('deployment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['deployment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deployment_id` when calling `get_monitored_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_id' in local_var_params:
            path_params['deploymentId'] = local_var_params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/deployment/{deploymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetMonitoredDeploymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_monitored_models(self, deployment_id, **kwargs):  # noqa: E501
        """Given a deployment ID, provide additional details of the models deployed. Depending on the mode of deployment,we could have more than one model deployed. Each model would provide summarised statistical information about it's deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_monitored_models(deployment_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: (required)
        :type deployment_id: str
        :param page_size: Maximum number of items server should return in the response. When set to 0 server will decide how many items to return. Server can decide to return more or less items then specified.
        :type page_size: int
        :param page_token: Use value returned in next_page_token to retrieve next page of results.
        :type page_token: str
        :param order_by: Comma separated field names. Valid values - 1. modelName -- Sort by model name. Example: name, modelName. Default is ASC. If DESC is required, a suffix \"desc\" to the field name i.e.  name DESC, description
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiGetMonitoredModelsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_monitored_models_with_http_info(deployment_id, **kwargs)  # noqa: E501

    def get_monitored_models_with_http_info(self, deployment_id, **kwargs):  # noqa: E501
        """Given a deployment ID, provide additional details of the models deployed. Depending on the mode of deployment,we could have more than one model deployed. Each model would provide summarised statistical information about it's deployment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_monitored_models_with_http_info(deployment_id, async_req=True)
        >>> result = thread.get()

        :param deployment_id: (required)
        :type deployment_id: str
        :param page_size: Maximum number of items server should return in the response. When set to 0 server will decide how many items to return. Server can decide to return more or less items then specified.
        :type page_size: int
        :param page_token: Use value returned in next_page_token to retrieve next page of results.
        :type page_token: str
        :param order_by: Comma separated field names. Valid values - 1. modelName -- Sort by model name. Example: name, modelName. Default is ASC. If DESC is required, a suffix \"desc\" to the field name i.e.  name DESC, description
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiGetMonitoredModelsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'deployment_id',
            'page_size',
            'page_token',
            'order_by'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_monitored_models" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if self.api_client.client_side_validation and ('deployment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['deployment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deployment_id` when calling `get_monitored_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_id' in local_var_params:
            path_params['deploymentId'] = local_var_params['deployment_id']  # noqa: E501

        query_params = []
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('pageToken', local_var_params['page_token']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('orderBy', local_var_params['order_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/deployment/{deploymentId}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetMonitoredModelsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_monitored_deployments(self, **kwargs):  # noqa: E501
        """List all the monitored deployments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_monitored_deployments(async_req=True)
        >>> result = thread.get()

        :param page_size: Maximum number of items server should return in the response. When set to 0 server will decide how many items to return. Server can decide to return more or less items then specified.
        :type page_size: int
        :param page_token: Use value returned in next_page_token to retrieve next page of results.
        :type page_token: str
        :param order_by: Comma separated field names. Valid values - 1. name -- Sort by name of deployment. 2. modelName -- Sort by model name. 3. env -- Sort by environment name. Example: name, modelName. Default is ASC. If DESC is required, a suffix \"desc\" to the field name i.e.  name DESC, description
        :type order_by: str
        :param start_date_time: Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type start_date_time: datetime
        :param end_date_time: End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type end_date_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiListMonitoredDeploymentsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.list_monitored_deployments_with_http_info(**kwargs)  # noqa: E501

    def list_monitored_deployments_with_http_info(self, **kwargs):  # noqa: E501
        """List all the monitored deployments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_monitored_deployments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param page_size: Maximum number of items server should return in the response. When set to 0 server will decide how many items to return. Server can decide to return more or less items then specified.
        :type page_size: int
        :param page_token: Use value returned in next_page_token to retrieve next page of results.
        :type page_token: str
        :param order_by: Comma separated field names. Valid values - 1. name -- Sort by name of deployment. 2. modelName -- Sort by model name. 3. env -- Sort by environment name. Example: name, modelName. Default is ASC. If DESC is required, a suffix \"desc\" to the field name i.e.  name DESC, description
        :type order_by: str
        :param start_date_time: Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type start_date_time: datetime
        :param end_date_time: End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.
        :type end_date_time: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiListMonitoredDeploymentsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'page_size',
            'page_token',
            'order_by',
            'start_date_time',
            'end_date_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_monitored_deployments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('pageToken', local_var_params['page_token']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('orderBy', local_var_params['order_by']))  # noqa: E501
        if 'start_date_time' in local_var_params and local_var_params['start_date_time'] is not None:  # noqa: E501
            query_params.append(('startDateTime', local_var_params['start_date_time']))  # noqa: E501
        if 'end_date_time' in local_var_params and local_var_params['end_date_time'] is not None:  # noqa: E501
            query_params.append(('endDateTime', local_var_params['end_date_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/deployment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListMonitoredDeploymentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
