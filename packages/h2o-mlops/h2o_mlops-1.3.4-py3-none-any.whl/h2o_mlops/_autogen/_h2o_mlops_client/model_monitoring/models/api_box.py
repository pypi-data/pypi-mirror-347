# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiBox(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'x': 'str',
        'x_min': 'str',
        'x_max': 'str',
        'y0': 'str',
        'y1': 'str',
        'y2': 'str',
        'y3': 'str',
        'y4': 'str'
    }

    attribute_map = {
        'x': 'x',
        'x_min': 'xMin',
        'x_max': 'xMax',
        'y0': 'y0',
        'y1': 'y1',
        'y2': 'y2',
        'y3': 'y3',
        'y4': 'y4'
    }

    def __init__(self, x=None, x_min=None, x_max=None, y0=None, y1=None, y2=None, y3=None, y4=None, local_vars_configuration=None):  # noqa: E501
        """ApiBox - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._x = None
        self._x_min = None
        self._x_max = None
        self._y0 = None
        self._y1 = None
        self._y2 = None
        self._y3 = None
        self._y4 = None
        self.discriminator = None

        if x is not None:
            self.x = x
        if x_min is not None:
            self.x_min = x_min
        if x_max is not None:
            self.x_max = x_max
        if y0 is not None:
            self.y0 = y0
        if y1 is not None:
            self.y1 = y1
        if y2 is not None:
            self.y2 = y2
        if y3 is not None:
            self.y3 = y3
        if y4 is not None:
            self.y4 = y4

    @property
    def x(self):
        """Gets the x of this ApiBox.  # noqa: E501


        :return: The x of this ApiBox.  # noqa: E501
        :rtype: str
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this ApiBox.


        :param x: The x of this ApiBox.  # noqa: E501
        :type x: str
        """

        self._x = x

    @property
    def x_min(self):
        """Gets the x_min of this ApiBox.  # noqa: E501


        :return: The x_min of this ApiBox.  # noqa: E501
        :rtype: str
        """
        return self._x_min

    @x_min.setter
    def x_min(self, x_min):
        """Sets the x_min of this ApiBox.


        :param x_min: The x_min of this ApiBox.  # noqa: E501
        :type x_min: str
        """

        self._x_min = x_min

    @property
    def x_max(self):
        """Gets the x_max of this ApiBox.  # noqa: E501


        :return: The x_max of this ApiBox.  # noqa: E501
        :rtype: str
        """
        return self._x_max

    @x_max.setter
    def x_max(self, x_max):
        """Sets the x_max of this ApiBox.


        :param x_max: The x_max of this ApiBox.  # noqa: E501
        :type x_max: str
        """

        self._x_max = x_max

    @property
    def y0(self):
        """Gets the y0 of this ApiBox.  # noqa: E501


        :return: The y0 of this ApiBox.  # noqa: E501
        :rtype: str
        """
        return self._y0

    @y0.setter
    def y0(self, y0):
        """Sets the y0 of this ApiBox.


        :param y0: The y0 of this ApiBox.  # noqa: E501
        :type y0: str
        """

        self._y0 = y0

    @property
    def y1(self):
        """Gets the y1 of this ApiBox.  # noqa: E501


        :return: The y1 of this ApiBox.  # noqa: E501
        :rtype: str
        """
        return self._y1

    @y1.setter
    def y1(self, y1):
        """Sets the y1 of this ApiBox.


        :param y1: The y1 of this ApiBox.  # noqa: E501
        :type y1: str
        """

        self._y1 = y1

    @property
    def y2(self):
        """Gets the y2 of this ApiBox.  # noqa: E501


        :return: The y2 of this ApiBox.  # noqa: E501
        :rtype: str
        """
        return self._y2

    @y2.setter
    def y2(self, y2):
        """Sets the y2 of this ApiBox.


        :param y2: The y2 of this ApiBox.  # noqa: E501
        :type y2: str
        """

        self._y2 = y2

    @property
    def y3(self):
        """Gets the y3 of this ApiBox.  # noqa: E501


        :return: The y3 of this ApiBox.  # noqa: E501
        :rtype: str
        """
        return self._y3

    @y3.setter
    def y3(self, y3):
        """Sets the y3 of this ApiBox.


        :param y3: The y3 of this ApiBox.  # noqa: E501
        :type y3: str
        """

        self._y3 = y3

    @property
    def y4(self):
        """Gets the y4 of this ApiBox.  # noqa: E501


        :return: The y4 of this ApiBox.  # noqa: E501
        :rtype: str
        """
        return self._y4

    @y4.setter
    def y4(self, y4):
        """Sets the y4 of this ApiBox.


        :param y4: The y4 of this ApiBox.  # noqa: E501
        :type y4: str
        """

        self._y4 = y4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiBox):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiBox):
            return True

        return self.to_dict() != other.to_dict()
