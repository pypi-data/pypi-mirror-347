# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiDeployment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'mode': 'str',
        'environment': 'str',
        'type': 'str',
        'problem_type': 'str',
        'models': 'list[ApiModel]',
        'deployment_date': 'datetime',
        'project_id': 'str',
        'monitoring_enabled': 'bool',
        'store_scoring_data': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'mode': 'mode',
        'environment': 'environment',
        'type': 'type',
        'problem_type': 'problemType',
        'models': 'models',
        'deployment_date': 'deploymentDate',
        'project_id': 'projectId',
        'monitoring_enabled': 'monitoringEnabled',
        'store_scoring_data': 'storeScoringData'
    }

    def __init__(self, id=None, name=None, description=None, mode=None, environment=None, type=None, problem_type=None, models=None, deployment_date=None, project_id=None, monitoring_enabled=None, store_scoring_data=None, local_vars_configuration=None):  # noqa: E501
        """ApiDeployment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._mode = None
        self._environment = None
        self._type = None
        self._problem_type = None
        self._models = None
        self._deployment_date = None
        self._project_id = None
        self._monitoring_enabled = None
        self._store_scoring_data = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if mode is not None:
            self.mode = mode
        if environment is not None:
            self.environment = environment
        if type is not None:
            self.type = type
        if problem_type is not None:
            self.problem_type = problem_type
        if models is not None:
            self.models = models
        if deployment_date is not None:
            self.deployment_date = deployment_date
        if project_id is not None:
            self.project_id = project_id
        if monitoring_enabled is not None:
            self.monitoring_enabled = monitoring_enabled
        if store_scoring_data is not None:
            self.store_scoring_data = store_scoring_data

    @property
    def id(self):
        """Gets the id of this ApiDeployment.  # noqa: E501

        Deployment ID.  # noqa: E501

        :return: The id of this ApiDeployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiDeployment.

        Deployment ID.  # noqa: E501

        :param id: The id of this ApiDeployment.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiDeployment.  # noqa: E501

        Name provided to the Deployment. Default value is '-' when no name is found for the Deployment.  # noqa: E501

        :return: The name of this ApiDeployment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiDeployment.

        Name provided to the Deployment. Default value is '-' when no name is found for the Deployment.  # noqa: E501

        :param name: The name of this ApiDeployment.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ApiDeployment.  # noqa: E501

        Deployment Description.  # noqa: E501

        :return: The description of this ApiDeployment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiDeployment.

        Deployment Description.  # noqa: E501

        :param description: The description of this ApiDeployment.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def mode(self):
        """Gets the mode of this ApiDeployment.  # noqa: E501

        Deployment Mode. Valid Values currently as Real Time or Batch.  # noqa: E501

        :return: The mode of this ApiDeployment.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ApiDeployment.

        Deployment Mode. Valid Values currently as Real Time or Batch.  # noqa: E501

        :param mode: The mode of this ApiDeployment.  # noqa: E501
        :type mode: str
        """

        self._mode = mode

    @property
    def environment(self):
        """Gets the environment of this ApiDeployment.  # noqa: E501

        Deployed Environment.  # noqa: E501

        :return: The environment of this ApiDeployment.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ApiDeployment.

        Deployed Environment.  # noqa: E501

        :param environment: The environment of this ApiDeployment.  # noqa: E501
        :type environment: str
        """

        self._environment = environment

    @property
    def type(self):
        """Gets the type of this ApiDeployment.  # noqa: E501

        The Type of Deployment. Valid Values are - singleDeployment, shadowDeployment and splitDeployment.  # noqa: E501

        :return: The type of this ApiDeployment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiDeployment.

        The Type of Deployment. Valid Values are - singleDeployment, shadowDeployment and splitDeployment.  # noqa: E501

        :param type: The type of this ApiDeployment.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def problem_type(self):
        """Gets the problem_type of this ApiDeployment.  # noqa: E501


        :return: The problem_type of this ApiDeployment.  # noqa: E501
        :rtype: str
        """
        return self._problem_type

    @problem_type.setter
    def problem_type(self, problem_type):
        """Sets the problem_type of this ApiDeployment.


        :param problem_type: The problem_type of this ApiDeployment.  # noqa: E501
        :type problem_type: str
        """

        self._problem_type = problem_type

    @property
    def models(self):
        """Gets the models of this ApiDeployment.  # noqa: E501

        The models that are part of the deployment.  # noqa: E501

        :return: The models of this ApiDeployment.  # noqa: E501
        :rtype: list[ApiModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this ApiDeployment.

        The models that are part of the deployment.  # noqa: E501

        :param models: The models of this ApiDeployment.  # noqa: E501
        :type models: list[ApiModel]
        """

        self._models = models

    @property
    def deployment_date(self):
        """Gets the deployment_date of this ApiDeployment.  # noqa: E501

        The date when the deployment was initiated.  # noqa: E501

        :return: The deployment_date of this ApiDeployment.  # noqa: E501
        :rtype: datetime
        """
        return self._deployment_date

    @deployment_date.setter
    def deployment_date(self, deployment_date):
        """Sets the deployment_date of this ApiDeployment.

        The date when the deployment was initiated.  # noqa: E501

        :param deployment_date: The deployment_date of this ApiDeployment.  # noqa: E501
        :type deployment_date: datetime
        """

        self._deployment_date = deployment_date

    @property
    def project_id(self):
        """Gets the project_id of this ApiDeployment.  # noqa: E501

        Project ID.  # noqa: E501

        :return: The project_id of this ApiDeployment.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ApiDeployment.

        Project ID.  # noqa: E501

        :param project_id: The project_id of this ApiDeployment.  # noqa: E501
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def monitoring_enabled(self):
        """Gets the monitoring_enabled of this ApiDeployment.  # noqa: E501

        Is monitoring enabled for the deployment.  # noqa: E501

        :return: The monitoring_enabled of this ApiDeployment.  # noqa: E501
        :rtype: bool
        """
        return self._monitoring_enabled

    @monitoring_enabled.setter
    def monitoring_enabled(self, monitoring_enabled):
        """Sets the monitoring_enabled of this ApiDeployment.

        Is monitoring enabled for the deployment.  # noqa: E501

        :param monitoring_enabled: The monitoring_enabled of this ApiDeployment.  # noqa: E501
        :type monitoring_enabled: bool
        """

        self._monitoring_enabled = monitoring_enabled

    @property
    def store_scoring_data(self):
        """Gets the store_scoring_data of this ApiDeployment.  # noqa: E501

        Is Storing of scoring data enabled.  # noqa: E501

        :return: The store_scoring_data of this ApiDeployment.  # noqa: E501
        :rtype: bool
        """
        return self._store_scoring_data

    @store_scoring_data.setter
    def store_scoring_data(self, store_scoring_data):
        """Sets the store_scoring_data of this ApiDeployment.

        Is Storing of scoring data enabled.  # noqa: E501

        :param store_scoring_data: The store_scoring_data of this ApiDeployment.  # noqa: E501
        :type store_scoring_data: bool
        """

        self._store_scoring_data = store_scoring_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDeployment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiDeployment):
            return True

        return self.to_dict() != other.to_dict()
