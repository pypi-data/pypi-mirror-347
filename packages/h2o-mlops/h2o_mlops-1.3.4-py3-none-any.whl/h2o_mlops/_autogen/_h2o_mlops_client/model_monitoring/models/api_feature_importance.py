# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiFeatureImportance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_drift': 'list[ApiFeatureDrift]',
        'drift_threshold': 'float',
        'importance_threshold': 'float',
        'description': 'str'
    }

    attribute_map = {
        'feature_drift': 'featureDrift',
        'drift_threshold': 'driftThreshold',
        'importance_threshold': 'importanceThreshold',
        'description': 'description'
    }

    def __init__(self, feature_drift=None, drift_threshold=None, importance_threshold=None, description=None, local_vars_configuration=None):  # noqa: E501
        """ApiFeatureImportance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._feature_drift = None
        self._drift_threshold = None
        self._importance_threshold = None
        self._description = None
        self.discriminator = None

        if feature_drift is not None:
            self.feature_drift = feature_drift
        if drift_threshold is not None:
            self.drift_threshold = drift_threshold
        if importance_threshold is not None:
            self.importance_threshold = importance_threshold
        if description is not None:
            self.description = description

    @property
    def feature_drift(self):
        """Gets the feature_drift of this ApiFeatureImportance.  # noqa: E501


        :return: The feature_drift of this ApiFeatureImportance.  # noqa: E501
        :rtype: list[ApiFeatureDrift]
        """
        return self._feature_drift

    @feature_drift.setter
    def feature_drift(self, feature_drift):
        """Sets the feature_drift of this ApiFeatureImportance.


        :param feature_drift: The feature_drift of this ApiFeatureImportance.  # noqa: E501
        :type feature_drift: list[ApiFeatureDrift]
        """

        self._feature_drift = feature_drift

    @property
    def drift_threshold(self):
        """Gets the drift_threshold of this ApiFeatureImportance.  # noqa: E501


        :return: The drift_threshold of this ApiFeatureImportance.  # noqa: E501
        :rtype: float
        """
        return self._drift_threshold

    @drift_threshold.setter
    def drift_threshold(self, drift_threshold):
        """Sets the drift_threshold of this ApiFeatureImportance.


        :param drift_threshold: The drift_threshold of this ApiFeatureImportance.  # noqa: E501
        :type drift_threshold: float
        """

        self._drift_threshold = drift_threshold

    @property
    def importance_threshold(self):
        """Gets the importance_threshold of this ApiFeatureImportance.  # noqa: E501


        :return: The importance_threshold of this ApiFeatureImportance.  # noqa: E501
        :rtype: float
        """
        return self._importance_threshold

    @importance_threshold.setter
    def importance_threshold(self, importance_threshold):
        """Sets the importance_threshold of this ApiFeatureImportance.


        :param importance_threshold: The importance_threshold of this ApiFeatureImportance.  # noqa: E501
        :type importance_threshold: float
        """

        self._importance_threshold = importance_threshold

    @property
    def description(self):
        """Gets the description of this ApiFeatureImportance.  # noqa: E501


        :return: The description of this ApiFeatureImportance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiFeatureImportance.


        :param description: The description of this ApiFeatureImportance.  # noqa: E501
        :type description: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiFeatureImportance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiFeatureImportance):
            return True

        return self.to_dict() != other.to_dict()
