# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiGetModelDriftMetricsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count_feature_drift': 'int',
        'high_feature_drift': 'int',
        'medium_feature_drift': 'int',
        'low_feature_drift': 'int',
        'feature_importance': 'ApiFeatureImportance',
        'feature_summary': 'ApiFeatureSummary',
        'feature_frequency': 'ApiFeatureFrequency'
    }

    attribute_map = {
        'count_feature_drift': 'countFeatureDrift',
        'high_feature_drift': 'highFeatureDrift',
        'medium_feature_drift': 'mediumFeatureDrift',
        'low_feature_drift': 'lowFeatureDrift',
        'feature_importance': 'featureImportance',
        'feature_summary': 'featureSummary',
        'feature_frequency': 'featureFrequency'
    }

    def __init__(self, count_feature_drift=None, high_feature_drift=None, medium_feature_drift=None, low_feature_drift=None, feature_importance=None, feature_summary=None, feature_frequency=None, local_vars_configuration=None):  # noqa: E501
        """ApiGetModelDriftMetricsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._count_feature_drift = None
        self._high_feature_drift = None
        self._medium_feature_drift = None
        self._low_feature_drift = None
        self._feature_importance = None
        self._feature_summary = None
        self._feature_frequency = None
        self.discriminator = None

        if count_feature_drift is not None:
            self.count_feature_drift = count_feature_drift
        if high_feature_drift is not None:
            self.high_feature_drift = high_feature_drift
        if medium_feature_drift is not None:
            self.medium_feature_drift = medium_feature_drift
        if low_feature_drift is not None:
            self.low_feature_drift = low_feature_drift
        if feature_importance is not None:
            self.feature_importance = feature_importance
        if feature_summary is not None:
            self.feature_summary = feature_summary
        if feature_frequency is not None:
            self.feature_frequency = feature_frequency

    @property
    def count_feature_drift(self):
        """Gets the count_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501


        :return: The count_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._count_feature_drift

    @count_feature_drift.setter
    def count_feature_drift(self, count_feature_drift):
        """Sets the count_feature_drift of this ApiGetModelDriftMetricsResponse.


        :param count_feature_drift: The count_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :type count_feature_drift: int
        """

        self._count_feature_drift = count_feature_drift

    @property
    def high_feature_drift(self):
        """Gets the high_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501


        :return: The high_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._high_feature_drift

    @high_feature_drift.setter
    def high_feature_drift(self, high_feature_drift):
        """Sets the high_feature_drift of this ApiGetModelDriftMetricsResponse.


        :param high_feature_drift: The high_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :type high_feature_drift: int
        """

        self._high_feature_drift = high_feature_drift

    @property
    def medium_feature_drift(self):
        """Gets the medium_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501


        :return: The medium_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._medium_feature_drift

    @medium_feature_drift.setter
    def medium_feature_drift(self, medium_feature_drift):
        """Sets the medium_feature_drift of this ApiGetModelDriftMetricsResponse.


        :param medium_feature_drift: The medium_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :type medium_feature_drift: int
        """

        self._medium_feature_drift = medium_feature_drift

    @property
    def low_feature_drift(self):
        """Gets the low_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501


        :return: The low_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._low_feature_drift

    @low_feature_drift.setter
    def low_feature_drift(self, low_feature_drift):
        """Sets the low_feature_drift of this ApiGetModelDriftMetricsResponse.


        :param low_feature_drift: The low_feature_drift of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :type low_feature_drift: int
        """

        self._low_feature_drift = low_feature_drift

    @property
    def feature_importance(self):
        """Gets the feature_importance of this ApiGetModelDriftMetricsResponse.  # noqa: E501


        :return: The feature_importance of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :rtype: ApiFeatureImportance
        """
        return self._feature_importance

    @feature_importance.setter
    def feature_importance(self, feature_importance):
        """Sets the feature_importance of this ApiGetModelDriftMetricsResponse.


        :param feature_importance: The feature_importance of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :type feature_importance: ApiFeatureImportance
        """

        self._feature_importance = feature_importance

    @property
    def feature_summary(self):
        """Gets the feature_summary of this ApiGetModelDriftMetricsResponse.  # noqa: E501


        :return: The feature_summary of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :rtype: ApiFeatureSummary
        """
        return self._feature_summary

    @feature_summary.setter
    def feature_summary(self, feature_summary):
        """Sets the feature_summary of this ApiGetModelDriftMetricsResponse.


        :param feature_summary: The feature_summary of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :type feature_summary: ApiFeatureSummary
        """

        self._feature_summary = feature_summary

    @property
    def feature_frequency(self):
        """Gets the feature_frequency of this ApiGetModelDriftMetricsResponse.  # noqa: E501


        :return: The feature_frequency of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :rtype: ApiFeatureFrequency
        """
        return self._feature_frequency

    @feature_frequency.setter
    def feature_frequency(self, feature_frequency):
        """Sets the feature_frequency of this ApiGetModelDriftMetricsResponse.


        :param feature_frequency: The feature_frequency of this ApiGetModelDriftMetricsResponse.  # noqa: E501
        :type feature_frequency: ApiFeatureFrequency
        """

        self._feature_frequency = feature_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiGetModelDriftMetricsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiGetModelDriftMetricsResponse):
            return True

        return self.to_dict() != other.to_dict()
