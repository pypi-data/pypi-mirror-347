# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiGetModelOperationalSummaryMetricsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uptime': 'float',
        'avg_scoring_latency': 'float',
        'scoring_latency': 'ApiSimpleGraph',
        'memory_usage': 'ApiSimpleGraph',
        'cpu_usage': 'ApiSimpleGraph',
        'availability': 'ApiSimpleGraph',
        'success_prediction': 'ApiSimpleGraph',
        'failed_prediction': 'ApiSimpleGraph'
    }

    attribute_map = {
        'uptime': 'uptime',
        'avg_scoring_latency': 'avgScoringLatency',
        'scoring_latency': 'scoringLatency',
        'memory_usage': 'memoryUsage',
        'cpu_usage': 'cpuUsage',
        'availability': 'availability',
        'success_prediction': 'successPrediction',
        'failed_prediction': 'failedPrediction'
    }

    def __init__(self, uptime=None, avg_scoring_latency=None, scoring_latency=None, memory_usage=None, cpu_usage=None, availability=None, success_prediction=None, failed_prediction=None, local_vars_configuration=None):  # noqa: E501
        """ApiGetModelOperationalSummaryMetricsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uptime = None
        self._avg_scoring_latency = None
        self._scoring_latency = None
        self._memory_usage = None
        self._cpu_usage = None
        self._availability = None
        self._success_prediction = None
        self._failed_prediction = None
        self.discriminator = None

        if uptime is not None:
            self.uptime = uptime
        if avg_scoring_latency is not None:
            self.avg_scoring_latency = avg_scoring_latency
        if scoring_latency is not None:
            self.scoring_latency = scoring_latency
        if memory_usage is not None:
            self.memory_usage = memory_usage
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if availability is not None:
            self.availability = availability
        if success_prediction is not None:
            self.success_prediction = success_prediction
        if failed_prediction is not None:
            self.failed_prediction = failed_prediction

    @property
    def uptime(self):
        """Gets the uptime of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501


        :return: The uptime of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :rtype: float
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this ApiGetModelOperationalSummaryMetricsResponse.


        :param uptime: The uptime of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :type uptime: float
        """

        self._uptime = uptime

    @property
    def avg_scoring_latency(self):
        """Gets the avg_scoring_latency of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501


        :return: The avg_scoring_latency of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :rtype: float
        """
        return self._avg_scoring_latency

    @avg_scoring_latency.setter
    def avg_scoring_latency(self, avg_scoring_latency):
        """Sets the avg_scoring_latency of this ApiGetModelOperationalSummaryMetricsResponse.


        :param avg_scoring_latency: The avg_scoring_latency of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :type avg_scoring_latency: float
        """

        self._avg_scoring_latency = avg_scoring_latency

    @property
    def scoring_latency(self):
        """Gets the scoring_latency of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501


        :return: The scoring_latency of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :rtype: ApiSimpleGraph
        """
        return self._scoring_latency

    @scoring_latency.setter
    def scoring_latency(self, scoring_latency):
        """Sets the scoring_latency of this ApiGetModelOperationalSummaryMetricsResponse.


        :param scoring_latency: The scoring_latency of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :type scoring_latency: ApiSimpleGraph
        """

        self._scoring_latency = scoring_latency

    @property
    def memory_usage(self):
        """Gets the memory_usage of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501


        :return: The memory_usage of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :rtype: ApiSimpleGraph
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this ApiGetModelOperationalSummaryMetricsResponse.


        :param memory_usage: The memory_usage of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :type memory_usage: ApiSimpleGraph
        """

        self._memory_usage = memory_usage

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501


        :return: The cpu_usage of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :rtype: ApiSimpleGraph
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this ApiGetModelOperationalSummaryMetricsResponse.


        :param cpu_usage: The cpu_usage of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :type cpu_usage: ApiSimpleGraph
        """

        self._cpu_usage = cpu_usage

    @property
    def availability(self):
        """Gets the availability of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501


        :return: The availability of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :rtype: ApiSimpleGraph
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ApiGetModelOperationalSummaryMetricsResponse.


        :param availability: The availability of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :type availability: ApiSimpleGraph
        """

        self._availability = availability

    @property
    def success_prediction(self):
        """Gets the success_prediction of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501


        :return: The success_prediction of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :rtype: ApiSimpleGraph
        """
        return self._success_prediction

    @success_prediction.setter
    def success_prediction(self, success_prediction):
        """Sets the success_prediction of this ApiGetModelOperationalSummaryMetricsResponse.


        :param success_prediction: The success_prediction of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :type success_prediction: ApiSimpleGraph
        """

        self._success_prediction = success_prediction

    @property
    def failed_prediction(self):
        """Gets the failed_prediction of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501


        :return: The failed_prediction of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :rtype: ApiSimpleGraph
        """
        return self._failed_prediction

    @failed_prediction.setter
    def failed_prediction(self, failed_prediction):
        """Sets the failed_prediction of this ApiGetModelOperationalSummaryMetricsResponse.


        :param failed_prediction: The failed_prediction of this ApiGetModelOperationalSummaryMetricsResponse.  # noqa: E501
        :type failed_prediction: ApiSimpleGraph
        """

        self._failed_prediction = failed_prediction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiGetModelOperationalSummaryMetricsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiGetModelOperationalSummaryMetricsResponse):
            return True

        return self.to_dict() != other.to_dict()
