# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiFeatureDrift(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'drift': 'list[ApiPoint]',
        'feature': 'ApiFeature'
    }

    attribute_map = {
        'drift': 'drift',
        'feature': 'Feature'
    }

    def __init__(self, drift=None, feature=None, local_vars_configuration=None):  # noqa: E501
        """ApiFeatureDrift - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._drift = None
        self._feature = None
        self.discriminator = None

        if drift is not None:
            self.drift = drift
        if feature is not None:
            self.feature = feature

    @property
    def drift(self):
        """Gets the drift of this ApiFeatureDrift.  # noqa: E501


        :return: The drift of this ApiFeatureDrift.  # noqa: E501
        :rtype: list[ApiPoint]
        """
        return self._drift

    @drift.setter
    def drift(self, drift):
        """Sets the drift of this ApiFeatureDrift.


        :param drift: The drift of this ApiFeatureDrift.  # noqa: E501
        :type drift: list[ApiPoint]
        """

        self._drift = drift

    @property
    def feature(self):
        """Gets the feature of this ApiFeatureDrift.  # noqa: E501


        :return: The feature of this ApiFeatureDrift.  # noqa: E501
        :rtype: ApiFeature
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this ApiFeatureDrift.


        :param feature: The feature of this ApiFeatureDrift.  # noqa: E501
        :type feature: ApiFeature
        """

        self._feature = feature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiFeatureDrift):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiFeatureDrift):
            return True

        return self.to_dict() != other.to_dict()
