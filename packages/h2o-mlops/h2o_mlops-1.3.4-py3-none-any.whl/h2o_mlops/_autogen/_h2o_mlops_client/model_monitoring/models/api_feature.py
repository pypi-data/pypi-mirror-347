# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiFeature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'data_type': 'str',
        'drift': 'float',
        'importance': 'float',
        'impact': 'float',
        'missing_values': 'int',
        'drift_calculated': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'data_type': 'dataType',
        'drift': 'drift',
        'importance': 'importance',
        'impact': 'impact',
        'missing_values': 'missingValues',
        'drift_calculated': 'driftCalculated'
    }

    def __init__(self, name=None, data_type=None, drift=None, importance=None, impact=None, missing_values=None, drift_calculated=None, local_vars_configuration=None):  # noqa: E501
        """ApiFeature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._data_type = None
        self._drift = None
        self._importance = None
        self._impact = None
        self._missing_values = None
        self._drift_calculated = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if data_type is not None:
            self.data_type = data_type
        if drift is not None:
            self.drift = drift
        if importance is not None:
            self.importance = importance
        if impact is not None:
            self.impact = impact
        if missing_values is not None:
            self.missing_values = missing_values
        if drift_calculated is not None:
            self.drift_calculated = drift_calculated

    @property
    def name(self):
        """Gets the name of this ApiFeature.  # noqa: E501


        :return: The name of this ApiFeature.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiFeature.


        :param name: The name of this ApiFeature.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this ApiFeature.  # noqa: E501


        :return: The data_type of this ApiFeature.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ApiFeature.


        :param data_type: The data_type of this ApiFeature.  # noqa: E501
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def drift(self):
        """Gets the drift of this ApiFeature.  # noqa: E501


        :return: The drift of this ApiFeature.  # noqa: E501
        :rtype: float
        """
        return self._drift

    @drift.setter
    def drift(self, drift):
        """Sets the drift of this ApiFeature.


        :param drift: The drift of this ApiFeature.  # noqa: E501
        :type drift: float
        """

        self._drift = drift

    @property
    def importance(self):
        """Gets the importance of this ApiFeature.  # noqa: E501


        :return: The importance of this ApiFeature.  # noqa: E501
        :rtype: float
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this ApiFeature.


        :param importance: The importance of this ApiFeature.  # noqa: E501
        :type importance: float
        """

        self._importance = importance

    @property
    def impact(self):
        """Gets the impact of this ApiFeature.  # noqa: E501


        :return: The impact of this ApiFeature.  # noqa: E501
        :rtype: float
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this ApiFeature.


        :param impact: The impact of this ApiFeature.  # noqa: E501
        :type impact: float
        """

        self._impact = impact

    @property
    def missing_values(self):
        """Gets the missing_values of this ApiFeature.  # noqa: E501


        :return: The missing_values of this ApiFeature.  # noqa: E501
        :rtype: int
        """
        return self._missing_values

    @missing_values.setter
    def missing_values(self, missing_values):
        """Sets the missing_values of this ApiFeature.


        :param missing_values: The missing_values of this ApiFeature.  # noqa: E501
        :type missing_values: int
        """

        self._missing_values = missing_values

    @property
    def drift_calculated(self):
        """Gets the drift_calculated of this ApiFeature.  # noqa: E501

        If drift_calculated is false other drift related fields should not be used because they will hold only the defaults.  # noqa: E501

        :return: The drift_calculated of this ApiFeature.  # noqa: E501
        :rtype: bool
        """
        return self._drift_calculated

    @drift_calculated.setter
    def drift_calculated(self, drift_calculated):
        """Sets the drift_calculated of this ApiFeature.

        If drift_calculated is false other drift related fields should not be used because they will hold only the defaults.  # noqa: E501

        :param drift_calculated: The drift_calculated of this ApiFeature.  # noqa: E501
        :type drift_calculated: bool
        """

        self._drift_calculated = drift_calculated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiFeature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiFeature):
            return True

        return self.to_dict() != other.to_dict()
