# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiExportMetricRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_id': 'str',
        'deployment_id': 'str',
        'metric_name': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime'
    }

    attribute_map = {
        'model_id': 'modelId',
        'deployment_id': 'deploymentId',
        'metric_name': 'metricName',
        'start_date_time': 'startDateTime',
        'end_date_time': 'endDateTime'
    }

    def __init__(self, model_id=None, deployment_id=None, metric_name=None, start_date_time=None, end_date_time=None, local_vars_configuration=None):  # noqa: E501
        """ApiExportMetricRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model_id = None
        self._deployment_id = None
        self._metric_name = None
        self._start_date_time = None
        self._end_date_time = None
        self.discriminator = None

        if model_id is not None:
            self.model_id = model_id
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if metric_name is not None:
            self.metric_name = metric_name
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time

    @property
    def model_id(self):
        """Gets the model_id of this ApiExportMetricRequest.  # noqa: E501


        :return: The model_id of this ApiExportMetricRequest.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ApiExportMetricRequest.


        :param model_id: The model_id of this ApiExportMetricRequest.  # noqa: E501
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def deployment_id(self):
        """Gets the deployment_id of this ApiExportMetricRequest.  # noqa: E501


        :return: The deployment_id of this ApiExportMetricRequest.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this ApiExportMetricRequest.


        :param deployment_id: The deployment_id of this ApiExportMetricRequest.  # noqa: E501
        :type deployment_id: str
        """

        self._deployment_id = deployment_id

    @property
    def metric_name(self):
        """Gets the metric_name of this ApiExportMetricRequest.  # noqa: E501


        :return: The metric_name of this ApiExportMetricRequest.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this ApiExportMetricRequest.


        :param metric_name: The metric_name of this ApiExportMetricRequest.  # noqa: E501
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ApiExportMetricRequest.  # noqa: E501

        Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.  # noqa: E501

        :return: The start_date_time of this ApiExportMetricRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ApiExportMetricRequest.

        Start Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.  # noqa: E501

        :param start_date_time: The start_date_time of this ApiExportMetricRequest.  # noqa: E501
        :type start_date_time: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ApiExportMetricRequest.  # noqa: E501

        End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.  # noqa: E501

        :return: The end_date_time of this ApiExportMetricRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ApiExportMetricRequest.

        End Datetime for the range. The datetime must adhere to RFC3399 and must be URL encoded.  # noqa: E501

        :param end_date_time: The end_date_time of this ApiExportMetricRequest.  # noqa: E501
        :type end_date_time: datetime
        """

        self._end_date_time = end_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiExportMetricRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiExportMetricRequest):
            return True

        return self.to_dict() != other.to_dict()
