# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiGetModelHealthMetricsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_predictions': 'int',
        'scoring_latency': 'float',
        'predictions': 'ApiHistogram',
        'prediction_values': 'ApiBoxPlot'
    }

    attribute_map = {
        'total_predictions': 'totalPredictions',
        'scoring_latency': 'scoringLatency',
        'predictions': 'predictions',
        'prediction_values': 'predictionValues'
    }

    def __init__(self, total_predictions=None, scoring_latency=None, predictions=None, prediction_values=None, local_vars_configuration=None):  # noqa: E501
        """ApiGetModelHealthMetricsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_predictions = None
        self._scoring_latency = None
        self._predictions = None
        self._prediction_values = None
        self.discriminator = None

        if total_predictions is not None:
            self.total_predictions = total_predictions
        if scoring_latency is not None:
            self.scoring_latency = scoring_latency
        if predictions is not None:
            self.predictions = predictions
        if prediction_values is not None:
            self.prediction_values = prediction_values

    @property
    def total_predictions(self):
        """Gets the total_predictions of this ApiGetModelHealthMetricsResponse.  # noqa: E501


        :return: The total_predictions of this ApiGetModelHealthMetricsResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_predictions

    @total_predictions.setter
    def total_predictions(self, total_predictions):
        """Sets the total_predictions of this ApiGetModelHealthMetricsResponse.


        :param total_predictions: The total_predictions of this ApiGetModelHealthMetricsResponse.  # noqa: E501
        :type total_predictions: int
        """

        self._total_predictions = total_predictions

    @property
    def scoring_latency(self):
        """Gets the scoring_latency of this ApiGetModelHealthMetricsResponse.  # noqa: E501


        :return: The scoring_latency of this ApiGetModelHealthMetricsResponse.  # noqa: E501
        :rtype: float
        """
        return self._scoring_latency

    @scoring_latency.setter
    def scoring_latency(self, scoring_latency):
        """Sets the scoring_latency of this ApiGetModelHealthMetricsResponse.


        :param scoring_latency: The scoring_latency of this ApiGetModelHealthMetricsResponse.  # noqa: E501
        :type scoring_latency: float
        """

        self._scoring_latency = scoring_latency

    @property
    def predictions(self):
        """Gets the predictions of this ApiGetModelHealthMetricsResponse.  # noqa: E501


        :return: The predictions of this ApiGetModelHealthMetricsResponse.  # noqa: E501
        :rtype: ApiHistogram
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this ApiGetModelHealthMetricsResponse.


        :param predictions: The predictions of this ApiGetModelHealthMetricsResponse.  # noqa: E501
        :type predictions: ApiHistogram
        """

        self._predictions = predictions

    @property
    def prediction_values(self):
        """Gets the prediction_values of this ApiGetModelHealthMetricsResponse.  # noqa: E501


        :return: The prediction_values of this ApiGetModelHealthMetricsResponse.  # noqa: E501
        :rtype: ApiBoxPlot
        """
        return self._prediction_values

    @prediction_values.setter
    def prediction_values(self, prediction_values):
        """Sets the prediction_values of this ApiGetModelHealthMetricsResponse.


        :param prediction_values: The prediction_values of this ApiGetModelHealthMetricsResponse.  # noqa: E501
        :type prediction_values: ApiBoxPlot
        """

        self._prediction_values = prediction_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiGetModelHealthMetricsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiGetModelHealthMetricsResponse):
            return True

        return self.to_dict() != other.to_dict()
