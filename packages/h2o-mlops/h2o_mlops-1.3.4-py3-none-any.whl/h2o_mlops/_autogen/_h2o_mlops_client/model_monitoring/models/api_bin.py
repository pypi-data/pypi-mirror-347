# coding: utf-8

"""
    ai/h2o/mlops/monitoring/v1/monitoring.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.model_monitoring.configuration import Configuration


class ApiBin(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'x_min': 'str',
        'x_max': 'str',
        'y': 'str'
    }

    attribute_map = {
        'x_min': 'xMin',
        'x_max': 'xMax',
        'y': 'y'
    }

    def __init__(self, x_min=None, x_max=None, y=None, local_vars_configuration=None):  # noqa: E501
        """ApiBin - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._x_min = None
        self._x_max = None
        self._y = None
        self.discriminator = None

        if x_min is not None:
            self.x_min = x_min
        if x_max is not None:
            self.x_max = x_max
        if y is not None:
            self.y = y

    @property
    def x_min(self):
        """Gets the x_min of this ApiBin.  # noqa: E501


        :return: The x_min of this ApiBin.  # noqa: E501
        :rtype: str
        """
        return self._x_min

    @x_min.setter
    def x_min(self, x_min):
        """Sets the x_min of this ApiBin.


        :param x_min: The x_min of this ApiBin.  # noqa: E501
        :type x_min: str
        """

        self._x_min = x_min

    @property
    def x_max(self):
        """Gets the x_max of this ApiBin.  # noqa: E501


        :return: The x_max of this ApiBin.  # noqa: E501
        :rtype: str
        """
        return self._x_max

    @x_max.setter
    def x_max(self, x_max):
        """Sets the x_max of this ApiBin.


        :param x_max: The x_max of this ApiBin.  # noqa: E501
        :type x_max: str
        """

        self._x_max = x_max

    @property
    def y(self):
        """Gets the y of this ApiBin.  # noqa: E501


        :return: The y of this ApiBin.  # noqa: E501
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this ApiBin.


        :param y: The y of this ApiBin.  # noqa: E501
        :type y: str
        """

        self._y = y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiBin):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiBin):
            return True

        return self.to_dict() != other.to_dict()
