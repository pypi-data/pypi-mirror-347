[project]
authors = [{ name = "Alex Glushko", email = "alextvrus@gmail.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
]
name = "litestar-psycopg"
keywords = ["litestar", "psycopg"]
license = { text = "Apache-2.0" }
version = "0.1.0"
description = "Psycopg plugin for Litestar"
readme = "README.md"
requires-python = ">=3.9"
dependencies = ["litestar>=2.16.0", "psycopg[binary,pool]>=3.2.7"]

[project.urls]
Issue = "https://github.com/kumokage/litestar-psycopg/issues/"
Source = "https://github.com/kumokage/litestar-psycopg"

[dependency-groups]
dev = [
    "anyio>=4.9.0",
    "coverage>=7.8.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-databases[postgres]>=0.12.3",
    "pytest-mock>=3.14.0",
    "pytest-sugar>=1.0.0",
    "pytest-xdist>=3.6.1",
    "ruff>=0.11.9",
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pytest.ini_options]
addopts = "-ra"
filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources",
    "ignore::DeprecationWarning:google.*",
    "ignore::DeprecationWarning:passlib.*",
    "ignore::DeprecationWarning:aiosql.*",
    "ignore::DeprecationWarning:litestar.constants.*",
    "ignore::DeprecationWarning:litestar.utils.*",
]
testpaths = ["tests"]

[tool.coverage.run]
concurrency = ["multiprocessing"]
omit = ["*/tests/*"]
parallel = true

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'except ImportError as e:',
    'except ImportError:',
    '\.\.\.',
    'raise NotImplementedError',
    'if VERSION.startswith("1"):',
    'if pydantic.VERSION.startswith("1"):',
]
omit = ["*/tests/*"]
show_missing = true

[tool.ruff]
exclude = [".venv"]
line-length = 120
src = ["litestar_psycopg", "tests"]
target-version = "py39"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 60

[tool.ruff.lint]
extend-safe-fixes = ["TC"]
fixable = ["ALL"]
ignore = [
    "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
    "D100",    # pydocstyle - missing docstring in public module
    "D101",    # pydocstyle - missing docstring in public class
    "D102",    # pydocstyle - missing docstring in public method
    "D103",    # pydocstyle - missing docstring in public function
    "D104",    # pydocstyle - missing docstring in public package
    "D105",    # pydocstyle - missing docstring in magic method
    "D106",    # pydocstyle - missing docstring in public nested class
    "D107",    # pydocstyle - missing docstring in __init__
    "D202",    # pydocstyle - no blank lines allowed after function docstring
    "D205",    # pydocstyle - 1 blank line required between summary line and description
    "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501",    # pycodestyle line too long, handled by ruff format
    "PLW2901", # pylint - for loop variable overwritten by assignment target
    "RUF012",  # Ruff-specific rule - annotated with classvar
    "ISC001",  # Ruff formatter incompatible
    "A005",    # flake8 - Module `x` shadows a Python standard-library module
    "PLC0415", # pylint - `import` should be at the top of the file
    "FA100",   # Add `from __future__ import annotations` to simplify
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "PLR0913", # pylint - Too many arguments in function definition
    "ARG002",  # Unused method argument
    "ARG001",  # Unused function argument
    "CPY001",  # pycodestyle - Missing Copywrite notice at the top of the file
    "RUF029",  # Ruff - function is declared as async but has no awaitable calls
    "COM812",  # flake8-comma - Missing trailing comma
    "PGH003",  # Use Specific ignore for pyright
    "UP007",
    "UP035",
    "UP006",

]
select = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.isort]
known-first-party = ["litestar_psycopg", "tests"]

[tool.ruff.lint.per-file-ignores]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TC", "ERA", "D", "RET", "PLW0127"]
"docs/examples/**" = ["T201"]
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TC",
    "TRY",
    "PT012",
    "INP001",
    "DOC",
    "PLC",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
