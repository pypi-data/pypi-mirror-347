from typing import Optional, List, Dict, Any, Union
from pydantic import BaseModel, HttpUrl, Field, field_validator
import datetime
from enum import Enum
from .utils import parse_datetime_string
from .target import SeverityCounts, Link # Or from a common models file

class VulnStatusEnum(str, Enum):
    FIXED = "fixed"
    IGNORED = "ignored"
    OPEN = "open"
    FALSE_POSITIVE = "false_positive"

class VulnerabilityStatus(BaseModel):
    """
    Corresponds to #/definitions/VulnerabilityStatus in API spec.
    Used for updating vulnerability status.
    """
    status: VulnStatusEnum = Field(..., description="漏洞状态 (Fixed, Ignored, Open, False Positive)")
    comment: Optional[str] = Field(None, max_length=256, description="评论")

class VulnerabilityRecheck(BaseModel):
    """
    Corresponds to #/definitions/VulnerabilityRecheck in API spec.
    """
    ui_session_id: Optional[str] = Field(None, description="仅供内部使用", pattern=r"^[0-9a-fA-F]{32}$") # MD5

class VulnerabilitiesRecheck(BaseModel):
    """
    Corresponds to #/definitions/VulnerabilitiesRecheck in API spec.
    """
    vuln_id_list: Optional[List[str]] = Field(default_factory=list, description="漏洞ID列表，每个ID最大长度64") # API spec shows vuln_id_list: array, items: string, maxLength: 64
    ui_session_id: Optional[str] = Field(None, description="仅供内部使用", pattern=r"^[0-9a-fA-F]{32}$")


class Vulnerability(VulnerabilityStatus): # API's Vulnerability definition inherits from VulnerabilityStatus
    """
    Corresponds to #/definitions/Vulnerability in API spec.
    """
    target_description: Optional[str] = Field(None, description="受影响目标的描述")
    vuln_id: str = Field(..., description="漏洞唯一标识符")
    target_vuln_id: Optional[str] = Field(None, description="目标漏洞唯一标识符 (仅用于扫描会话漏洞视图)")
    issue_id: Optional[str] = Field(None, description="问题跟踪器中的问题ID")
    issue_tracker_id: Optional[str] = Field(None, description="问题跟踪器ID")
    issue_url: Optional[HttpUrl] = Field(None, description="在配置的问题跟踪器中创建的漏洞链接")
    vt_name: Optional[str] = Field(None, description="漏洞类型名称")
    criticality: Optional[int] = Field(None, description="漏洞重要性")
    vt_id: Optional[str] = Field(None, pattern=r"^[0-9a-fA-F-]{36}$", description="漏洞类型唯一标识符 (UUID)")
    affects_detail: Optional[str] = Field(None, description="漏洞影响的输入详情")
    affects_url: Optional[HttpUrl] = Field(None, description="漏洞影响的URL") # API spec says string, HttpUrl if URL
    source: Optional[str] = Field(None, description="检测到漏洞的来源")
    loc_id: Optional[int] = Field(None, description="位置ID")
    target_id: Optional[str] = Field(None, pattern=r"^[0-9a-fA-F-]{36}$", description="目标唯一标识符 (UUID)")
    first_seen: Optional[datetime.datetime] = Field(None, description="首次发现漏洞的日期")
    last_seen: Optional[datetime.datetime] = Field(None, description="最后一次发现漏洞的日期")
    severity: Optional[int] = Field(None, description="漏洞类型严重性") # Matches VulnerabilityType.severity
    tags: Optional[List[str]] = Field(default_factory=list, description="漏洞类型标签")
    continuous: Optional[bool] = Field(None, description="是否为持续扫描发现")
    confidence: Optional[int] = Field(None, description="置信度")
    vt_created: Optional[datetime.datetime] = Field(None, description="漏洞类型创建时间")
    vt_updated: Optional[datetime.datetime] = Field(None, description="漏洞类型更新时间")
    app: Optional[str] = Field(None, description="扫描器标识符 (例如 wvs, ovas)") 
    archived: Optional[bool] = Field(None, description="是否已归档")

    @field_validator("first_seen", "last_seen", "vt_created", "vt_updated", mode="before")
    @classmethod
    def _validate_dates(cls, value: Any) -> Optional[datetime.datetime]:
        return parse_datetime_string(value)

class VulnerabilityTypeDetails(BaseModel): 
    """Corresponds to #/definitions/VulnerabilityTypeDetails in API spec."""
    description: Optional[str] = Field(None, description="漏洞类型描述")
    cvss2: Optional[str] = Field(None, description="漏洞类型 CVSS v2.0 向量字符串")
    cvss3: Optional[str] = Field(None, description="漏洞类型 CVSS v3.0 向量字符串")
    cvss4: Optional[str] = Field(None, description="漏洞类型 CVSS v4.0 向量字符串")
    cvss_score: Optional[float] = Field(None, description="基于已知最高 CVSS 版本 (2.0-3.1) 的分数")
    cvss4_score: Optional[float] = Field(None, description="CVSS 4.0 分数")
    impact: Optional[str] = Field(None, description="漏洞类型安全影响")
    recommendation: Optional[str] = Field(None, description="漏洞类型修复建议")
    long_description: Optional[str] = Field(None, description="漏洞类型长描述")
    references: Optional[List[Link]] = Field(default_factory=list, description="漏洞类型参考和资源")

class HighlightItem(BaseModel):
    index: int
    length: int
    in_where: str = Field(..., alias="in", max_length=16, description="高亮所在位置 (例如 request.body, response.headers)")

class VulnerabilityDetails(Vulnerability, VulnerabilityTypeDetails): 
    """
    Corresponds to #/definitions/VulnerabilityDetails in API spec.
    """
    details: Optional[str] = Field(None, description="关于如何发现警报的详细信息字典 (可能是JSON字符串)") 
    request: Optional[bytes] = Field(None, description="HTTP 请求 (二进制)") 
    response_info: Optional[Union[str, bool]] = Field(None, description="HTTP 响应信息") # 允许布尔类型以处理API可能返回False的情况
    highlights: Optional[List[HighlightItem]] = Field(default_factory=list, description="请求/响应中的高亮部分")
    
    model_config = {"populate_by_name": True} # To allow alias 'in' for 'in_where'

    @field_validator("response_info", mode="before")
    @classmethod
    def _validate_response_info(cls, value: Any) -> Optional[str]:
        if isinstance(value, bool):
            # 如果API返回布尔值False，我们将其视为空或None
            # 如果是True，也暂时处理为None，因为模型期望字符串
            return None 
        if value is None:
            return None
        return str(value) # 确保最终是字符串或None

# --- Models for Issue Tracker Integration ---
class IntegrationsVulnerabilityIdList(BaseModel):
    """
    Corresponds to #/definitions/IntegrationsVulnerabilityIdList in API spec.
    """
    vuln_ids: List[str] = Field(..., description="漏洞 ID 数组，每个ID长度1-20") # API spec: minLength: 1, maxLength: 20

class CreateIssuesViaIntegrationsReportLine(BaseModel):
    """
    Corresponds to #/definitions/CreateIssuesViaIntegrationsReportLine in API spec.
    """
    vuln_id: str = Field(..., description="漏洞唯一标识符")
    target_id: Optional[str] = Field(None, description="目标唯一标识符 (UUID 或 null)")
    integration_id: Optional[str] = Field(None, description="集成唯一标识符 (UUID 或 null)")
    error_msg: Optional[str] = Field(None, description="如果为此漏洞创建问题时出错，则显示错误消息，否则为 null。")

class CreateIssuesViaIntegrationsResponse(BaseModel):
    """
    Corresponds to #/definitions/CreateIssuesViaIntegrationsResponse in API spec.
    """
    result: List[CreateIssuesViaIntegrationsReportLine] = Field(..., description="报告行数组。")

# --- Vulnerability Group Models ---
class VulnerabilityGroupItem(BaseModel):
    """Corresponds to #/definitions/VulnerabilityGroupItem"""
    id: Optional[str] = None
    name: Optional[str] = None
    data: Optional[Dict[str, Any]] = Field(None, description="通用对象") 
    count: Optional[int] = None
    last_seen: Optional[datetime.datetime] = None

    @field_validator("last_seen", mode="before")
    @classmethod
    def _validate_last_seen(cls, value: Any) -> Optional[datetime.datetime]:
        return parse_datetime_string(value)

class VulnerabilityGroupsResponse(BaseModel):
    """Corresponds to #/definitions/VulnerabilityGroupsResponse"""
    items: Optional[List[VulnerabilityGroupItem]] = Field(default_factory=list)

# --- Vulnerability Type Models ---
class VulnerabilityType(BaseModel):
    """Corresponds to #/definitions/VulnerabilityType"""
    vt_id: str = Field(..., description="漏洞类型唯一标识符 (UUID)")
    name: Optional[str] = None
    severity: Optional[int] = None
    tags: Optional[List[str]] = Field(default_factory=list)
    cvss2: Optional[str] = None
    cvss3: Optional[str] = None
    cvss4: Optional[str] = Field(None, description="漏洞类型 CVSS v4.0 向量字符串 (基于VulnerabilityTypeDetails)") # Added based on VulnerabilityTypeDetails
    app: Optional[str] = Field(None, description="扫描器标识符 (例如 wvs, ovas)")

class VulnerabilityTypeTargetsCountResponseItem(VulnerabilityType):
    """Corresponds to items in #/definitions/VulnerabilityTypeTargetsCountResponse"""
    count: Optional[int] = None
    criticality: Optional[int] = Field(None, description="漏洞类型重要性分数")

class VulnerabilityTypeSessionsCountResponseItem(VulnerabilityType):
    """Corresponds to items in #/definitions/VulnerabilityTypeSessionsCountResponse"""
    count: Optional[int] = None
