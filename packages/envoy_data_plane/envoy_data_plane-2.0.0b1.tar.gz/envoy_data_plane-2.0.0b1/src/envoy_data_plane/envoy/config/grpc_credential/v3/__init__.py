# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/grpc_credential/v3/aws_iam.proto, envoy/config/grpc_credential/v3/file_based_metadata.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AwsIamConfig",
    "FileBasedMetadataConfig",
)

import warnings
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class AwsIamConfig(betterproto2.Message):
    """
    [#protodoc-title: Grpc Credentials AWS IAM]
    Configuration for AWS IAM Grpc Credentials Plugin
    .. warning::

       This extension is deprecated and will be deleted in a future Envoy release, no
       later than Envoy 1.35, but possibly sooner.

    [#extension: envoy.grpc_credentials.aws_iam]
    """

    service_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The `service namespace
    <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces>`_
    of the Grpc endpoint.

    Example: appmesh
    """

    region: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The `region <https://docs.aws.amazon.com/general/latest/gr/rande.html>`_ hosting the Grpc
    endpoint. If unspecified, the extension will use the value in the ``AWS_REGION`` environment
    variable.

    Example: us-west-2
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("service_name"):
            warnings.warn("AwsIamConfig.service_name is deprecated", DeprecationWarning)
        if self.is_set("region"):
            warnings.warn("AwsIamConfig.region is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.config.grpc_credential.v3", "AwsIamConfig", AwsIamConfig
)


@dataclass(eq=False, repr=False)
class FileBasedMetadataConfig(betterproto2.Message):
    """
    [#protodoc-title: Grpc Credentials File Based Metadata]
    Configuration for File Based Metadata Grpc Credentials Plugin
    [#extension: envoy.grpc_credentials.file_based_metadata]
    """

    secret_data: "__core__v3__.DataSource | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Location or inline data of secret to use for authentication of the Google gRPC connection
    this secret will be attached to a header of the gRPC connection
    """

    header_key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Metadata header key to use for sending the secret data
    if no header key is set, "authorization" header will be used
    """

    header_prefix: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Prefix to prepend to the secret in the metadata header
    if no prefix is set, the default is to use no prefix
    """


default_message_pool.register_message(
    "envoy.config.grpc_credential.v3",
    "FileBasedMetadataConfig",
    FileBasedMetadataConfig,
)


from ...core import v3 as __core__v3__
