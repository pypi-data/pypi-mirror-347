# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/tracers/opentelemetry/samplers/v3/always_on_sampler.proto, envoy/extensions/tracers/opentelemetry/samplers/v3/cel_sampler.proto, envoy/extensions/tracers/opentelemetry/samplers/v3/dynatrace_sampler.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AlwaysOnSamplerConfig",
    "CelSamplerConfig",
    "DynatraceSamplerConfig",
)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class AlwaysOnSamplerConfig(betterproto2.Message):
    """
    [#protodoc-title: Always On Sampler config]
    Configuration for the "AlwaysOn" Sampler extension.
    The sampler follows the "AlwaysOn" implementation from the OpenTelemetry
    SDK specification.

    See:
    `AlwaysOn sampler specification <https://opentelemetry.io/docs/specs/otel/trace/sdk/#alwayson>`_
    [#extension: envoy.tracers.opentelemetry.samplers.always_on]
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.tracers.opentelemetry.samplers.v3",
    "AlwaysOnSamplerConfig",
    AlwaysOnSamplerConfig,
)


@dataclass(eq=False, repr=False)
class CelSamplerConfig(betterproto2.Message):
    """
    [#protodoc-title: "CEL" Sampler config]
    Configuration for the "CEL" Sampler extension.

    [#extension: envoy.tracers.opentelemetry.samplers.cel]
    """

    expression: "______xds__type__v3__.CelExpression | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Expression that, when evaluated, will be used to make sample decision.
    """


default_message_pool.register_message(
    "envoy.extensions.tracers.opentelemetry.samplers.v3",
    "CELSamplerConfig",
    CelSamplerConfig,
)


@dataclass(eq=False, repr=False)
class DynatraceSamplerConfig(betterproto2.Message):
    """
    [#protodoc-title: Dynatrace Sampler config]

    Configuration for the Dynatrace Sampler extension.
    [#extension: envoy.tracers.opentelemetry.samplers.dynatrace]
    """

    tenant: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The Dynatrace tenant.

    The value can be obtained from the Envoy deployment page in Dynatrace.
    """

    cluster_id: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    The id of the Dynatrace cluster id.

    The value can be obtained from the Envoy deployment page in Dynatrace.
    """

    http_service: "_____config__core__v3__.HttpService | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The HTTP service to fetch the sampler configuration from the Dynatrace API (root spans per minute). For example:

    .. code-block:: yaml

       http_service:
         http_uri:
           cluster: dynatrace
           uri: <tenant>.dev.dynatracelabs.com/api/v2/samplingConfiguration
           timeout: 10s
         request_headers_to_add:
         - header:
             key : "authorization"
             value: "Api-Token dt..."
    """

    root_spans_per_minute: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)
    """
    Default number of root spans per minute, used when the value can't be obtained from the Dynatrace API.

    A default value of ``1000`` is used when:

    - ``root_spans_per_minute`` is unset
    - ``root_spans_per_minute`` is set to 0
    """


default_message_pool.register_message(
    "envoy.extensions.tracers.opentelemetry.samplers.v3",
    "DynatraceSamplerConfig",
    DynatraceSamplerConfig,
)


from .......xds.type import v3 as ______xds__type__v3__
from ......config.core import v3 as _____config__core__v3__
