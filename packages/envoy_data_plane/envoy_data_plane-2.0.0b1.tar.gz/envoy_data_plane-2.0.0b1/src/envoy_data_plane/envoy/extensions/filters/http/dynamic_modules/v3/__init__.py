# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/dynamic_modules/v3/dynamic_modules.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("DynamicModuleFilter",)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class DynamicModuleFilter(betterproto2.Message):
    """
    [#protodoc-title: HTTP filter for dynamic modules]
    [#extension: envoy.filters.http.dynamic_modules]

    Configuration of the HTTP filter for dynamic modules. This filter allows loading shared object files
    that can be loaded via dlopen by the HTTP filter.

    A module can be loaded by multiple HTTP filters, hence the program can be structured in a way that
    the module is loaded only once and shared across multiple filters providing multiple functionalities.
    """

    dynamic_module_config: "____dynamic_modules__v3__.DynamicModuleConfig | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies the shared-object level configuration.
    """

    filter_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name for this filter configuration. This can be used to distinguish between different filter implementations
    inside a dynamic module. For example, a module can have completely different filter implementations.
    When Envoy receives this configuration, it passes the filter_name to the dynamic module's HTTP filter config init function
    together with the filter_config.
    That way a module can decide which in-module filter implementation to use based on the name at load time.
    """

    filter_config: "______google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The configuration for the filter chosen by filter_name. This is passed to the module's HTTP filter initialization function.
    Together with the filter_name, the module can decide which in-module filter implementation to use and
    fine-tune the behavior of the filter.

    For example, if a module has two filter implementations, one for logging and one for header manipulation,
    filter_name is used to choose either logging or header manipulation. The filter_config can be used to
    configure the logging level or the header manipulation behavior.

    ``google.protobuf.Struct`` is serialized as JSON before
    passing it to the plugin. ``google.protobuf.BytesValue`` and
    ``google.protobuf.StringValue`` are passed directly without the wrapper.

    .. code-block:: yaml

     # Passing in a string
     filter_config:
       "@type": "type.googleapis.com/google.protobuf.StringValue"
       value: hello

     # Passing in raw bytes
     filter_config:
       "@type": "type.googleapis.com/google.protobuf.BytesValue"
       value: aGVsbG8= # echo -n "hello" | base64
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.dynamic_modules.v3",
    "DynamicModuleFilter",
    DynamicModuleFilter,
)


from .......google import protobuf as ______google__protobuf__
from .....dynamic_modules import v3 as ____dynamic_modules__v3__
