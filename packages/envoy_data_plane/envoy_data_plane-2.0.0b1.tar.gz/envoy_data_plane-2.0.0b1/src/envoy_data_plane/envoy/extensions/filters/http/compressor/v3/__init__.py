# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/compressor/v3/compressor.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Compressor",
    "CompressorCommonDirectionConfig",
    "CompressorRequestDirectionConfig",
    "CompressorResponseDirectionConfig",
    "CompressorOverrides",
    "CompressorPerRoute",
    "ResponseDirectionOverrides",
)

import warnings
from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class Compressor(betterproto2.Message):
    """
    [#protodoc-title: Compressor]
    Compressor :ref:`configuration overview <config_http_filters_compressor>`.
    [#extension: envoy.filters.http.compressor]

    [#next-free-field: 10]
    """

    content_length: "int | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Minimum response length, in bytes, which will trigger compression. The default value is 30.
    """

    content_type: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Set of strings that allows specifying which mime-types yield compression; e.g.,
    application/json, text/html, etc. When this field is not defined, compression will be applied
    to the following mime-types: "application/javascript", "application/json",
    "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
    and their synonyms.
    """

    disable_on_etag_header: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    If true, disables compression when the response contains an etag header. When it is false, the
    filter will preserve weak etags and remove the ones that require strong validation.
    """

    remove_accept_encoding_header: "bool" = betterproto2.field(
        4, betterproto2.TYPE_BOOL
    )
    """
    If true, removes accept-encoding from the request headers before dispatching it to the upstream
    so that responses do not get compressed before reaching the filter.

    .. attention::

       To avoid interfering with other compression filters in the same chain use this option in
       the filter closest to the upstream.
    """

    runtime_enabled: "_____config__core__v3__.RuntimeFeatureFlag | None" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Runtime flag that controls whether the filter is enabled or not. If set to false, the
    filter will operate as a pass-through filter, unless overridden by
    CompressorPerRoute. If not specified, defaults to enabled.
    """

    compressor_library: "_____config__core__v3__.TypedExtensionConfig | None" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    A compressor library to use for compression. Currently only
    :ref:`envoy.compression.gzip.compressor<envoy_v3_api_msg_extensions.compression.gzip.compressor.v3.Gzip>`
    is included in Envoy.
    [#extension-category: envoy.compression.compressor]
    """

    request_direction_config: "CompressorRequestDirectionConfig | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration for request compression. Compression is disabled by default if left empty.
    """

    response_direction_config: "CompressorResponseDirectionConfig | None" = (
        betterproto2.field(8, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration for response compression. Compression is enabled by default if left empty.

    .. attention::

       If the field is not empty then the duplicate deprecated fields of the ``Compressor`` message,
       such as ``content_length``, ``content_type``, ``disable_on_etag_header``,
       ``remove_accept_encoding_header`` and ``runtime_enabled``, are ignored.

       Also all the statistics related to response compression will be rooted in
       ``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.response.*``
       instead of
       ``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.*``.
    """

    choose_first: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    If true, chooses this compressor first to do compression when the q-values in ``Accept-Encoding`` are same.
    The last compressor which enables choose_first will be chosen if multiple compressor filters in the chain have choose_first as true.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("content_length"):
            warnings.warn("Compressor.content_length is deprecated", DeprecationWarning)
        if self.is_set("content_type"):
            warnings.warn("Compressor.content_type is deprecated", DeprecationWarning)
        if self.is_set("disable_on_etag_header"):
            warnings.warn(
                "Compressor.disable_on_etag_header is deprecated", DeprecationWarning
            )
        if self.is_set("remove_accept_encoding_header"):
            warnings.warn(
                "Compressor.remove_accept_encoding_header is deprecated",
                DeprecationWarning,
            )
        if self.is_set("runtime_enabled"):
            warnings.warn(
                "Compressor.runtime_enabled is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3", "Compressor", Compressor
)


@dataclass(eq=False, repr=False)
class CompressorCommonDirectionConfig(betterproto2.Message):
    enabled: "_____config__core__v3__.RuntimeFeatureFlag | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Runtime flag that controls whether compression is enabled or not for the direction this
    common config is put in. If set to false, the filter will operate as a pass-through filter
    in the chosen direction, unless overridden by CompressorPerRoute.
    If the field is omitted, the filter will be enabled.
    """

    min_content_length: "int | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Minimum value of Content-Length header of request or response messages (depending on the direction
    this common config is put in), in bytes, which will trigger compression. The default value is 30.
    """

    content_type: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Set of strings that allows specifying which mime-types yield compression; e.g.,
    application/json, text/html, etc. When this field is not defined, compression will be applied
    to the following mime-types: "application/javascript", "application/json",
    "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
    and their synonyms.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "Compressor.CommonDirectionConfig",
    CompressorCommonDirectionConfig,
)


@dataclass(eq=False, repr=False)
class CompressorRequestDirectionConfig(betterproto2.Message):
    """
    Configuration for filter behavior on the request direction.
    """

    common_config: "CompressorCommonDirectionConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "Compressor.RequestDirectionConfig",
    CompressorRequestDirectionConfig,
)


@dataclass(eq=False, repr=False)
class CompressorResponseDirectionConfig(betterproto2.Message):
    """
    Configuration for filter behavior on the response direction.
    """

    common_config: "CompressorCommonDirectionConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    disable_on_etag_header: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, disables compression when the response contains an etag header. When it is false, the
    filter will preserve weak etags and remove the ones that require strong validation.
    """

    remove_accept_encoding_header: "bool" = betterproto2.field(
        3, betterproto2.TYPE_BOOL
    )
    """
    If true, removes accept-encoding from the request headers before dispatching it to the upstream
    so that responses do not get compressed before reaching the filter.

    .. attention::

       To avoid interfering with other compression filters in the same chain use this option in
       the filter closest to the upstream.
    """

    uncompressible_response_codes: "list[int]" = betterproto2.field(
        4, betterproto2.TYPE_UINT32, repeated=True
    )
    """
    Set of response codes for which compression is disabled, e.g. 206 Partial Content should not
    be compressed.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "Compressor.ResponseDirectionConfig",
    CompressorResponseDirectionConfig,
)


@dataclass(eq=False, repr=False)
class CompressorOverrides(betterproto2.Message):
    """
    Per-route overrides. As per-route overrides are needed, they should be
    added here, mirroring the structure of ``Compressor``. All fields should be
    optional, to allow overriding arbitrary subsets of configuration.
    """

    response_direction_config: "ResponseDirectionOverrides | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If present, response compression is enabled.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "CompressorOverrides",
    CompressorOverrides,
)


@dataclass(eq=False, repr=False)
class CompressorPerRoute(betterproto2.Message):
    """


    Oneofs:
        - override:
    """

    disabled: "bool | None" = betterproto2.field(
        1, betterproto2.TYPE_BOOL, optional=True, group="override"
    )
    """
    If set, the filter will operate as a pass-through filter.
    Overrides Compressor.runtime_enabled and CommonDirectionConfig.enabled.
    """

    overrides: "CompressorOverrides | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="override"
    )
    """
    Per-route overrides. Fields set here will override corresponding fields in ``Compressor``.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "CompressorPerRoute",
    CompressorPerRoute,
)


@dataclass(eq=False, repr=False)
class ResponseDirectionOverrides(betterproto2.Message):
    """
    Per-route overrides of ``ResponseDirectionConfig``. Anything added here should be optional,
    to allow overriding arbitrary subsets of configuration. Omitted fields must have no effect.
    """

    remove_accept_encoding_header: "bool | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    If set, overrides the filter-level
    :ref:`remove_accept_encoding_header<envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.remove_accept_encoding_header>`.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "ResponseDirectionOverrides",
    ResponseDirectionOverrides,
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
