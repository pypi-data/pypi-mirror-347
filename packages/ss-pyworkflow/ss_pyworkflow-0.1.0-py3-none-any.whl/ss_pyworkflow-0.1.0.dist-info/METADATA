Metadata-Version: 2.4
Name: ss-pyworkflow
Version: 0.1.0
Summary: This is for workflow tracing on python environment.
Author-email: Kenny Chow <kennychow@setsailsoftware.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
        TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
        Copyright 2025 Set Sail Venture Limited
        
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        
            http://www.apache.org/licenses/LICENSE-2.0
        
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        
Project-URL: Homepage, https://github.com/Kenny-Setsail/setsail_workflow_py
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp
Requires-Dist: loguru
Requires-Dist: pydantic
Dynamic: license-file

## My Dear Colleagues
This repository is for QA tools(workflows), you can use this on your python projects.

# SS-PyWorkflow

This project is designed to simplify and standardize workflow execution using decorators to automate task execution and result tracking. It is primarily used for `llm-graph`, but it can be extended to other projects as well.

---

## üöÄ Installation

```bash
pip install ss-pyworkflow
```

## üìñ Usage
`SS-PyWorkflow` provides two main modes for managing workflows:

### 1Ô∏è‚É£ Single Function Mode
When you only need to track a single function, you can use the `@workflow_entry` decorator:

```python
from ss_pyworkflow import workflow_entry

@workflow_entry(name="llm-graph")
async def _run_multigraph(**kwargs):
    # Your logic here...
    ...
```

After the function execution is completed, the result of this node will automatically be sent to the specified workflow backend and trigger the workflow end signal.

### 2Ô∏è‚É£ Chained Function Mode
If your workflow consists of multiple functions that execute sequentially, and each function's output is the next function's input, use the `@workflow_lifecycle` decorator:

```python
from ss_pyworkflow import workflow_lifecycle

@workflow_lifecycle()
async def aexecute(self, state: AgentStateT) -> AgentStateT:
    # Each function's output will be passed to the next function
    ...
```

In this mode, after each function execution, data is automatically sent to the workflow and visualized as step-by-step nodes in the backend.

## ‚öôÔ∏è Kwargs Explanation
Both `@workflow_entry` and `@workflow_lifecycle` require workflow_trace_data to be passed in kwargs for proper tracking and data transmission:

```json
"workflow_trace_data": {
    "enable": true,
    "traceId": "592225192fb1ac17022e80c85fb8a749",
    "prevSpanId": "3f7decc34dc8d03a",
    "userId": "202505125600020250512145500563QSLVDGS96F",
    "projectId": "mtr-kiosk-pquzibd",
    "componentName": "llm-graph",
    "post_url": "https://dev.setsailapi.com/workflow/v1/event",
    "log_enabled": true
}
```
## Parameter Description:
| Parameter Name  | Type   | Description                                                                              |
| --------------- | ------ | ---------------------------------------------------------------------------------------- |
| `enable`        | `bool` | Whether to enable the workflow. If `False`, no operations will be performed.             |
| `traceId`       | `str`  | A unique identifier for the entire workflow execution (32-character hexadecimal format). |
| `prevSpanId`    | `str`  | The parent span ID (16-character hexadecimal format). Can be `null` for root spans.      |
| `userId`        | `str`  | The user ID that triggers this workflow.                                                 |
| `projectId`     | `str`  | The project ID associated with this workflow.                                            |
| `componentName` | `str`  | Specifies the name of the workflow (e.g., `llm-graph`).                                  |
| `post_url`      | `str`  | The backend API URL to send workflow data.                                               |
| `log_enabled`   | `bool` | Whether to enable logging.                                                               |

## üìå Examples
### Single Function Mode
```python
from ss_pyworkflow import workflow_entry

@workflow_entry(name="llm-graph")
async def run_task(**kwargs):
    print("Executing task...")
```

### Chained Function Mode
```python
from ss_pyworkflow import workflow_lifecycle

@workflow_lifecycle()
async def task_one(state):
    print("Task One")
    return state

@workflow_lifecycle()
async def task_two(state):
    print("Task Two")
    return state
```

## üåê Extension Support
Currently, it is mainly focused on `llm-graph`, but it can be extended to other workflow scenarios by modifying the decorators or adding new ones.

## License

This project is licensed under the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0).  
Copyright ¬© 2025 Set Sail Venture Limited
