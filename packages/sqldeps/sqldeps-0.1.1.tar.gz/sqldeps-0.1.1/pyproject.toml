[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sqldeps"
version = "0.1.1"
description = "SQL Dependency Extractor"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]
authors = [
    {name = "CainÃ£ Silva", email = "coutodasilva@wisc.edu"},
    {name = "Matt Christie", email = "mjchristie@wisc.edu"}
]
readme = "README.md"
keywords = ["sql", "dependency", "parser", "extractor", "llm"]
dependencies = [
    "groq>=0.17.0",
    "litellm>=1.67.6",
    "loguru>=0.7.3",
    "openai>=1.59.5",
    "pandas>=2.2.3",
    "python-dotenv>=1.0.1",
    "pyyaml>=6.0.2",
    "sqlalchemy>=2.0.37",
    "sqlparse>=0.5.3",
    "tenacity>=9.0.0",
    "typer>=0.15.1",
]

[project.optional-dependencies]
app = [
    "streamlit>=1.42.1",
]
postgres = [
    "psycopg2>=2.9.10",
]
dataviz = [
    "nbformat>=5.10.4",
    "networkx>=3.4.2",
    "plotly>=6.0.0",
    "scipy>=1.15.2",
]

[project.urls]
Repository = "https://github.com/glue-lab/sqldeps"
Documentation = "https://sqldeps.readthedocs.io"
Questions = "https://github.com/glue-lab/sqldeps/discussions/categories/questions"
Issues = "https://github.com/glue-lab/sqldeps/issues"

[project.scripts]
sqldeps = "sqldeps.cli:app"

[tool.pytest.ini_options]
pythonpath = "."
testpaths = ["tests"]
markers = [
    "llm: marks tests that require LLM API calls (skipped by default)",
    "slow: marks tests that are slow to execute",
]
addopts = "-m 'not llm and not integration and not slow' --ignore=sqldeps/app"

[tool.hatch.metadata]
allow-direct-references = false

[tool.hatch.build]
packages = ["sqldeps"]

[dependency-groups]
dev = [
    "pytest-cov>=6.0.0",
    "pytest>=8.3.4",
    "ruff>=0.9.7",
    "pre-commit>=4.2.0",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.9",
    "mkdocstrings[python]>=0.29.1",
    "pymdown-extensions>=10.14.3",
]
analysis = [
    "ipykernel>=6.29.5",
    "seaborn>=0.13.2",
    "tabulate>=0.9.0",
]

[tool.uv]
default-groups = ["dev", "docs", "analysis"]

[tool.ruff]
line-length = 88   # Like Black, use 88 characters per line.
indent-width = 4   # Like Black, use 4 spaces per indentation level.
exclude = ["*.ipynb"] # Exclude Jupyter notebooks from linting.

[tool.ruff.lint]
select = [
    "F",      # Pyflakes
    "E", "W", # pycodestyle
    "I",      # isort
    "N",      # pep8-naming
    "Q",      # flake8-quotes
    "UP",     # pyupgrade
    "D",      # pydocstyle
    "RUF",    # Ruff-specific rules
    "B",      # flake8-bugbear
    "T20",    # flake8-print
    "C90",    # mccabe (complex structures)
    "SIM",    # flake8-simplify
    "ANN",    # flake8-annotations
    "TID",    # flake8-tidy-imports
]
ignore = [] # ignore specific rules here

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
force-single-line = false

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
