Metadata-Version: 2.4
Name: oxylabs-mcp
Version: 0.2.0
Summary: Oxylabs MCP server
Project-URL: Homepage, https://github.com/oxylabs/oxylabs-mcp
Project-URL: Repository, https://github.com/oxylabs/oxylabs-mcp
Author-email: Augis Braziunas <augis.braziunas@oxylabs.io>, Rostyslav Borovyk <rostyslav.borovyk@oxylabs.io>
License-Expression: MIT
License-File: LICENSE
Classifier: Development Status :: 4 - Beta
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.12
Requires-Dist: httpx>=0.28.1
Requires-Dist: lxml-html-clean>=0.4.1
Requires-Dist: lxml>=5.3.0
Requires-Dist: markdownify>=0.14.1
Requires-Dist: mcp[cli]>=1.8.0
Requires-Dist: pydantic-settings>=2.8.1
Requires-Dist: pydantic>=2.10.5
Description-Content-Type: text/markdown

<p align="center">
  <img src="img/oxylabs_mcp.svg" alt="Oxylabs + MCP">
</p>
<h1 align="center" style="border-bottom: none;">
  Oxylabs MCP Server
</h1>
<p align="center">
  <p align="center">Access web data seamlessly with Oxylabs via the Model Context Protocol</p>
</p>

<div align="center">

[![smithery badge](https://smithery.ai/badge/@oxylabs/oxylabs-mcp)](https://smithery.ai/server/@oxylabs/oxylabs-mcp)
[![pypi package](https://img.shields.io/pypi/v/oxylabs-mcp?color=%2334D058&label=pypi%20package)](https://pypi.org/project/oxylabs-mcp/)
[![](https://dcbadge.vercel.app/api/server/eWsVUJrnG5?style=flat)](https://discord.gg/Pds3gBmKMH)
<br/>
<a href="https://glama.ai/mcp/servers/@oxylabs/oxylabs-mcp">
  <img width="380" height="200" src="https://glama.ai/mcp/servers/@oxylabs/oxylabs-mcp/badge" alt="Oxylabs Server MCP server" />
</a>

</div>

## üìñ Overview

The Oxylabs MCP server provides a bridge between AI models and the web. It enables them to scrape any URL, render JavaScript-heavy pages, extract and format content for AI use, bypass anti-scraping measures, and access geo-restricted web data from 195+ countries.

This implementation leverages the Model Context Protocol (MCP) to create a secure, standardized way for AI assistants to interact with web content.

## ‚ú® Key Features

<details>
<summary><strong> Scrape content from any site</strong></summary>
<br>

- Extract data from any URL, including complex single-page applications
- Fully render dynamic websites using headless browser support
- Choose full JavaScript rendering, HTML-only, or none
- Emulate Mobile and Desktop viewports for realistic rendering

</details>

<details>
<summary><strong> Automatically get AI-ready data</strong></summary>
<br>

- Automatically clean and convert HTML to Markdown for improved readability
- Use automated parsers for popular targets like Google, Amazon, and etc.

</details>

<details>
<summary><strong> Bypass blocks & geo-restrictions</strong></summary>
<br>

- Bypass sophisticated bot protection systems with high success rate
- Reliably scrape even the most complex websites
- Get automatically rotating IPs from a proxy pool covering 195+ countries

</details>

<details>
<summary><strong> Flexible setup & cross-platform support</strong></summary>
<br>

- Set rendering and parsing options if needed
- Feed data directly into AI models or analytics tools
- Works on macOS, Windows, and Linux

</details>

<details>
<summary><strong> Built-in error handling and request management</strong></summary>
<br>

- Comprehensive error handling and reporting
- Smart rate limiting and request management

</details>

## üí° Example Queries
When you've set up the MCP server with **Claude**, you can make requests like:

- Could you scrape `https://www.google.com/search?q=ai` page?
- Scrape `https://www.amazon.de/-/en/Smartphone-Contract-Function-Manufacturer-Exclusive/dp/B0CNKD651V` with **parse** enabled
- Scrape `https://www.amazon.de/-/en/gp/bestsellers/beauty/ref=zg_bs_nav_beauty_0` with **parse** and **render** enabled
- Use web unblocker with **render** to scrape `https://www.bestbuy.com/site/top-deals/all-electronics-on-sale/pcmcat1674241939957.c`

## ‚úÖ Prerequisites

Before you begin, make sure you have:

- **Oxylabs Account**: Obtain your username and password from [Oxylabs](https://dashboard.oxylabs.io/) (1-week free trial available)

### Basic Usage
Via Smithery CLI:
- **Node.js** (v16+)
- `npx` command-line tool

Via uv:
- `uv` package manager ‚Äì install it using [this guide](https://docs.astral.sh/uv/getting-started/installation/)

### Local/Dev Setup
- **Python 3.12+**
- `uv` package manager ‚Äì install it using [this guide](https://docs.astral.sh/uv/getting-started/installation/)

## üß© API Parameters

The Oxylabs MCP server supports these parameters:

| Parameter | Description | Values |
|-----------|-------------|--------|
| `url` | The URL to scrape | Any valid URL |
| `parse` | Enable structured data extraction | `True` or `False` |
| `render` | Use headless browser rendering | `html` or `None` |

## ‚öôÔ∏è Basic Setup Instructions

### Install via Smithery

Automatically install Oxylabs MCP server via [Smithery](https://smithery.ai/server/@oxylabs/oxylabs-mcp):

```bash
npx -y @smithery/cli install @oxylabs/oxylabs-mcp --client <client>
```

List of clients supported by Oxylabs at the moment:
  - claude
  - cursor

### Manual MCP configuration options

1. Config with `uvx`. Will install the CLI client and Oxylabs MCP server that performs calls directly to the Oxylabs API. Recommended and the most stable option at the moment.
    ```json
    {
      "mcpServers": {
        "oxylabs_scraper_uvx": {
          "command": "uvx",
          "args": [
            "oxylabs-mcp"
          ],
          "env": {
            "OXYLABS_USERNAME": "OXYLABS_USERNAME",
            "OXYLABS_PASSWORD": "OXYLABS_PASSWORD"
          }
        }
      }
    }
    ```

2. Config with `npx`. Will install the Smithery CLI client that performs calls to the Oxylabs MCP server hosted in Smithery.
    ```json
    {
      "mcpServers": {
        "oxylabs-mcp": {
          "command": "npx",
          "args": [
            "-y",
            "@smithery/cli@latest",
            "run",
            "@oxylabs/oxylabs-mcp",
            "--config",
            "\"{\\\"oxylabsUsername\\\":\\\"OXYLABS_USERNAME\\\",\\\"oxylabsPassword\\\":\\\"OXYLABS_PASSWORD\\\"}\""
          ]
        }
      }
    }
    ```

3. Config with `uv`. Will install CLI client and Oxylabs MCP server that references the local code. For the local development.
    ```json
    {
      "mcpServers": {
        "oxylabs_scraper": {
          "command": "uv",
          "args": [
            "--directory",
            "/<Absolute-path-to-folder>/oxylabs-mcp",
            "run",
            "oxylabs-mcp"
          ],
          "env": {
            "OXYLABS_USERNAME": "OXYLABS_USERNAME",
            "OXYLABS_PASSWORD": "OXYLABS_PASSWORD"
          }
        }
      }
    }
    ```

> [!NOTE]
> If you don't have `uvx` utility you need to install it first with `brew install uv`

> [!TIP]
> If you run into errors with `uvx`, try using the full path to `uvx` in the `command` field. For example, `/Users/my-user/.local/bin/uvx`.
> If you are using Windows and experiencing issues with Cursor, refer to the guidelines described [here](https://smithery.ai/docs/faq/users).


### Manual Setup with Claude Desktop

Navigate to **Claude ‚Üí Settings ‚Üí Developer ‚Üí Edit Config** and add one of the configurations above to the `claude_desktop_config.json` file.

### Manual Setup with Cursor AI

Navigate to **Cursor ‚Üí Settings ‚Üí Cursor Settings ‚Üí MCP**. Click **Add new global MCP server** and add one of the configurations above.

---

## üíª Local/Dev Setup Instructions

### Clone repository

```
git clone <git:url>
```

### Install dependencies

Install MCP server dependencies:

```bash
cd mcp-server-oxylabs

# Create virtual environment and activate it
uv venv

source .venv/bin/activate # MacOS/Linux
# OR
.venv/Scripts/activate # Windows

# Install dependencies
uv sync
```

---
### üêû Debugging

```bash
make run
```
Then access MCP Inspector at `http://localhost:5173`. You may need to add your username and password as environment variables in the inspector under `OXYLABS_USERNAME` and `OXYLABS_PASSWORD`.

---

## License

This project is licensed under the [MIT License](LICENSE).

## About Oxylabs

Established in 2015, Oxylabs is a market-leading web intelligence collection
platform, driven by the highest business, ethics, and compliance standards,
enabling companies worldwide to unlock data-driven insights.

[![image](https://oxylabs.io/images/og-image.png)](https://oxylabs.io/)
