Metadata-Version: 2.4
Name: pyargon2
Version: 1.1.2
Summary: Simultaneously the simplest and most powerful Argon2 implemenation in Python
Author-email: James Webb <james@ultra-horizon.com>
License-Expression: Apache-2.0
Project-URL: Homepage, https://github.com/ultrahorizon/pyargon2
Project-URL: Bug Tracker, https://github.com/ultrahorizon/pyargon2/issues
Keywords: password,hash,hashing,security,argon2
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Security
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: cffi>=1.0.0
Dynamic: license-file

<p align="center">
	<picture align="center">
	    <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/jwsi/pyargon2/master/docs/static/logo.png">
	    <source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/jwsi/pyargon2/master/docs/static/logo.png">
	    <img alt="pyargon2" src="https://raw.githubusercontent.com/jwsi/pyargon2/master/docs/static/logo.png" height="250px">
	</picture>
</p>

<p align="center">
    <strong>Simultaneously the simplest and most powerful implementation of Argon2 in Python</strong><br>
    Proudly serving the community since 2020
</p>

## Installation 

```bash
pip install pyargon2
```

Please note that for security reasons, pyargon2 does not ship with pre-compiled binaries (Wheels) available on PyPi. This is to ensure that what is shown in this repository is what is installed on target machines. Therefore, during the installation process, the underlying Argon2 C implementation will be compiled from source automatically for your OS and architecture. This will add a short delay to the installation process, but is worthwhile in order to maintain guarantees and verifiability with respect to what is being installed on target machines.

## Basic Usage

The hash function supports basic password hashing using the Argon2id variant and mandates password and salt strings. The resulting hash returned is hex encoded.

```python
from pyargon2 import hash

password = 'a strong password'
salt = 'a unique salt'
hex_encoded_hash = hash(password, salt)
```

The default parameters aim to generate hashes in around 0.5 seconds and are targeted at a machine housing a CPU with 4 cores and at least 4GB of RAM. If timing differs significantly on your machine, adjust the parameters using the advanced options below.
**Remember password hashing should be slow for security so don't optimise for speed!**

## Advanced Usage

### Function Choices

pyargon2 contains two functions for hashing. Namely, `hash` and `hash_bytes`. These two functions differ in their input types only.
This is explained in detail in the subsequent sections. To minimise input dependent hashing performance, dynamic type checking is not
used in pyargon2. Instead, dedicated functions are exposed to deal with hashing strings or byte arrays separately. As such, one should
ensure that they hash passwords, salts and peppers of the same type and then pick the corresponding function in pyargon2 as
appropriate.

### Function Parameters

The `hash` and `hash_bytes` functions take in the following parameters:

##### Positional

- **password** : A string (or byte array when using `hash_bytes`) representing a password.
- **salt** : A string (or byte array when using `hash_bytes`) representing a unique salt.

##### Keyword (Optional)

- **pepper** : A secret string (or byte array when using `hash_bytes`) to fold into the hash of the password.
- **hash_len** : The length in bytes of the resulting hash.
- **time_cost** : The number of iterations to perform.
- **memory_cost** : The number of kibibytes in memory to utilise.
- **parallelism** : The number of independent computations chains (lanes) to run.
- **flags** : Flags to determine which fields are securely wiped.
- **variant** : Argon2 algorithm variant ('i', 'd', or 'id').
- **version** : Argon2 algorithm version number.
- **encoding** : Encoding for the returned hash type ('raw', 'hex' or 'b64').

For assistance with parameter selection refer to [RFC 9106](https://www.rfc-editor.org/rfc/rfc9106.html), in particular "Chapter 4: Parameter Choice".

### Function Exceptions

Exceptions generated by the underlying Argon2 hashing function are raised under the `Argon2Error` class which can be imported as follows:

```python
from pyargon2 import Argon2Error
```
