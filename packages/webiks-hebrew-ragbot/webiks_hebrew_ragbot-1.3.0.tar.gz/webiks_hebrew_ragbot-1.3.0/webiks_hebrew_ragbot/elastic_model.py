import datetime
import logging
import os
from elasticsearch import Elasticsearch
from .document import document_definition_factory

definitions_singleton = document_definition_factory()
EMBEDDING_INDEX = os.getenv("ES_EMBEDDING_INDEX", "embeddings")
ES_EMBEDDING_INDEX_LENGTH = int(os.getenv("ES_EMBEDDING_INDEX_LENGTH", 1000))


def index_from_doc_id(doc_id: int):
    """
    Generates an Elasticsearch index name based on the provided doc ID.

    Args:
        doc_id (int): The unique identifier for the doc.

    Returns:
        str: The name of the Elasticsearch index, generated by appending the doc ID's rounded value to the base index.
    """
    index_postfix = round(doc_id / ES_EMBEDDING_INDEX_LENGTH)
    return f"{EMBEDDING_INDEX}_{index_postfix}"


class ElasticModel:
    """
    A class representing a model for interacting with Elasticsearch, providing methods for indexing documents,
    creating and updating indices, and performing searches.

    Attributes:
        custom_result_selection_function (callable, optional): A custom function for selecting search results.
        es_client (Elasticsearch): The instance of the Elasticsearch client.

    Methods:
        create_index():
            Creates an index for the model in Elasticsearch if it doesn't already exist.

        create_or_update_documents(paragraphs_dicts: list[dict], update=False):
            Creates or updates documents in the Elasticsearch index.

        search(embedded_search: dict[str, list[float]], size=50) -> dict[str, list[dict]]:
            Searches for similar documents using cosine similarity based on the provided embedded vectors.
    """

    custom_result_selection_function = None


    def __init__(self, es_client : Elasticsearch, custom_result_selection_function=None):
        """
        Initializes a new instance of the Model class.

        Args:
            es_client (Elasticsearch): The Elasticsearch client instance used for interacting with the Elasticsearch cluster.
            custom_result_selection_function (callable, optional): A custom function for selecting search results.
        """
        self.es_client  = es_client
        if custom_result_selection_function is not None:
            self.custom_result_selection_function = custom_result_selection_function


    def create_paragraph(self, paragraph: dict):
        identifier = definitions_singleton.identifier
        doc_id = paragraph[identifier]
        index = index_from_doc_id(int(doc_id))
        doc = {
            "last_update": datetime.datetime.now(),
            **paragraph
        }
        self.es_client.index(index=index, body=doc)


    def create_or_update_documents(self, paragraphs_dicts: list[dict], update=False):
        """
        Creates or updates documents in the Elasticsearch index.

        Args:
            paragraphs_dicts (list[dict]): A list of dictionaries representing the paragraphs to be indexed.
            update (bool, optional): If True, existing documents will be updated. Default is False.
        """
        identifier = definitions_singleton.identifier
        logging.info(f"Creating or updating documents in the index, {len(paragraphs_dicts)} paragraphs\n")
        # Identify the doc from the first paragraph - all paragraphs should have the same doc_id
        doc_id = paragraphs_dicts[0][identifier]
        index = index_from_doc_id(int(doc_id))

        if update:
            hits = []
            try:
                existing_doc = self.es_client.search(
                    index=index,
                    body={
                        "query": {
                            "term": {f"{identifier}": {"value": doc_id}}}
                    })
                hits = existing_doc["hits"]["hits"]

            except Exception as e:
                logging.error(f"Error while searching for existing document: {e}")
            if len(hits) > 0:
                logging.info("delete existing documents")
                for hit in hits:
                    logging.info("delete existing document", hit["_id"])
                    self.es_client.delete(index=index, id=hit["_id"])

        for i, doc_dict in enumerate(paragraphs_dicts):
            logging.info(f"saving paragraph {i}")
            doc = {
                "last_update": datetime.datetime.now(),
                **doc_dict
            }

            self.es_client.index(index=index, body=doc)


    def search(self, embedded_search: list[float], size=50) -> list[dict]:
        """
           Performs a search for similar documents using cosine similarity.

           Args:
               embedded_search (list[float]): A list containing the embedded search vector.
               size (int, optional): The number of search results to return. Default is 50.

           Returns:
               list[dict]: A list of documents that match the search criteria, with each document represented as a dictionary.
           """
        results = []
        body = {
            "script_score": {
                "query": {
                    "exists": {
                        "field": f'{definitions_singleton.field_to_embed}_{definitions_singleton.model_name}_vectors'
                    }
                },
                "script": {
                    "source": f"cosineSimilarity(params.query_vector, '{definitions_singleton.field_to_embed}_{definitions_singleton.model_name}_vectors') + 1.0",
                    "params": {
                        "query_vector": embedded_search
                    }
                }
            }
        }
        logging.info(f"Searching for {definitions_singleton.field_to_embed} using {definitions_singleton.model_name} on index {EMBEDDING_INDEX}\n")
        field_results = self.es_client.search(
            index=EMBEDDING_INDEX + "*",
            body={
                "size": size,
                "query": body
            })
        results += field_results["hits"]["hits"]  # This ensures you're appending, not overwriting
        return results


es_model = None


def es_model_factory(es_client):
    """
    Factory function to create or retrieve an existing instance of the Model class.

    Args:
        es_client (Elasticsearch): The Elasticsearch client instance used to initialize the es_model.

    Returns:
        ElasticModel: An instance of the Model class.
    """
    global es_model
    if es_model is None:
        es_model = ElasticModel(es_client)
    return es_model
