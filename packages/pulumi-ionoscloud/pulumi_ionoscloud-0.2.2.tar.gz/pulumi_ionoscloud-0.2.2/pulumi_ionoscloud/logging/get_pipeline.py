# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPipelineResult',
    'AwaitableGetPipelineResult',
    'get_pipeline',
    'get_pipeline_output',
]

@pulumi.output_type
class GetPipelineResult:
    """
    A collection of values returned by getPipeline.
    """
    def __init__(__self__, grafana_address=None, id=None, location=None, logs=None, name=None):
        if grafana_address and not isinstance(grafana_address, str):
            raise TypeError("Expected argument 'grafana_address' to be a str")
        pulumi.set(__self__, "grafana_address", grafana_address)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if logs and not isinstance(logs, list):
            raise TypeError("Expected argument 'logs' to be a list")
        pulumi.set(__self__, "logs", logs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="grafanaAddress")
    def grafana_address(self) -> str:
        """
        The address of the client's grafana instance.
        """
        return pulumi.get(self, "grafana_address")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The UUID of the Logging pipeline.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetPipelineLogResult']:
        """
        [list] Pipeline logs, a list that contains elements with the following structure:
        """
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Logging pipeline.
        """
        return pulumi.get(self, "name")


class AwaitableGetPipelineResult(GetPipelineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPipelineResult(
            grafana_address=self.grafana_address,
            id=self.id,
            location=self.location,
            logs=self.logs,
            name=self.name)


def get_pipeline(id: Optional[str] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPipelineResult:
    """
    The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.

    > ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.logging.get_pipeline(location="de/txl",
        id="pipeline_id")
    ```

    ### By name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.logging.get_pipeline(location="de/txl",
        name="pipeline_name")
    ```


    :param str id: [string] The ID of the Logging pipeline you want to search for.
    :param str location: [string] The location of the Logging pipeline. Default: `de/txl`. One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
    :param str name: [string] The name of the Logging pipeline you want to search for.
           
           Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:logging/getPipeline:getPipeline', __args__, opts=opts, typ=GetPipelineResult).value

    return AwaitableGetPipelineResult(
        grafana_address=pulumi.get(__ret__, 'grafana_address'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        logs=pulumi.get(__ret__, 'logs'),
        name=pulumi.get(__ret__, 'name'))
def get_pipeline_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                        location: Optional[pulumi.Input[Optional[str]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPipelineResult]:
    """
    The **Logging pipeline** datasource can be used to search for and return an existing Logging pipeline.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.

    > ⚠️  Only tokens are accepted for authorization in the **logging_pipeline** data source. Please ensure you are using tokens as other methods will not be valid.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.logging.get_pipeline(location="de/txl",
        id="pipeline_id")
    ```

    ### By name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.logging.get_pipeline(location="de/txl",
        name="pipeline_name")
    ```


    :param str id: [string] The ID of the Logging pipeline you want to search for.
    :param str location: [string] The location of the Logging pipeline. Default: `de/txl`. One of `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `fr/par`.
    :param str name: [string] The name of the Logging pipeline you want to search for.
           
           Either `id` or `name` must be provided. If none, or both are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:logging/getPipeline:getPipeline', __args__, opts=opts, typ=GetPipelineResult)
    return __ret__.apply(lambda __response__: GetPipelineResult(
        grafana_address=pulumi.get(__response__, 'grafana_address'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        logs=pulumi.get(__response__, 'logs'),
        name=pulumi.get(__response__, 'name')))
