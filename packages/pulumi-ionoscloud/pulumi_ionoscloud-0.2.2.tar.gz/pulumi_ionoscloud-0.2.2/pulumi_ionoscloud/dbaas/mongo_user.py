# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MongoUserArgs', 'MongoUser']

@pulumi.input_type
class MongoUserArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['MongoUserRoleArgs']]]] = None):
        """
        The set of arguments for constructing a MongoUser resource.
        :param pulumi.Input[str] cluster_id: [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[str] password: [string] User password. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[str] username: [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[Sequence[pulumi.Input['MongoUserRoleArgs']]] roles: [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        [string] User password. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MongoUserRoleArgs']]]]:
        """
        [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MongoUserRoleArgs']]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class _MongoUserState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['MongoUserRoleArgs']]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MongoUser resources.
        :param pulumi.Input[str] cluster_id: [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[str] password: [string] User password. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[Sequence[pulumi.Input['MongoUserRoleArgs']]] roles: [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[str] username: [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        [string] User password. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MongoUserRoleArgs']]]]:
        """
        [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MongoUserRoleArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class MongoUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MongoUserRoleArgs', 'MongoUserRoleArgsDict']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a **DbaaS Mongo User**. .

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        # Basic example
        datacenter_example = ionoscloud.compute.Datacenter("datacenter_example",
            name="example",
            location="de/txl",
            description="Datacenter for testing dbaas cluster")
        lan_example = ionoscloud.compute.Lan("lan_example",
            datacenter_id=datacenter_example.id,
            public=False,
            name="example")
        example_mongo_cluster = ionoscloud.dbaas.MongoCluster("example_mongo_cluster",
            maintenance_window={
                "day_of_the_week": "Sunday",
                "time": "09:00:00",
            },
            mongodb_version="5.0",
            instances=1,
            display_name="example_mongo_cluster",
            location=datacenter_example.location,
            connections={
                "datacenter_id": datacenter_example.id,
                "lan_id": lan_example.id,
                "cidr_lists": ["192.168.1.108/24"],
            },
            template_id="6b78ea06-ee0e-4689-998c-fc9c46e781f6")
        example_mongo_user = ionoscloud.dbaas.MongoUser("example_mongo_user",
            cluster_id=example_mongo_cluster.id,
            username="myUser",
            password="strongPassword",
            roles=[
                {
                    "role": "read",
                    "database": "db1",
                },
                {
                    "role": "readWrite",
                    "database": "db2",
                },
            ])
        ```

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        # Complete example
        datacenter_example = ionoscloud.compute.Datacenter("datacenter_example",
            name="example",
            location="de/txl",
            description="Datacenter for testing dbaas cluster")
        lan_example = ionoscloud.compute.Lan("lan_example",
            datacenter_id=datacenter_example.id,
            public=False,
            name="example")
        example_mongo_cluster = ionoscloud.dbaas.MongoCluster("example_mongo_cluster",
            maintenance_window={
                "day_of_the_week": "Sunday",
                "time": "09:00:00",
            },
            mongodb_version="5.0",
            instances=1,
            display_name="example_mongo_cluster",
            location=datacenter_example.location,
            connections={
                "datacenter_id": datacenter_example.id,
                "lan_id": lan_example.id,
                "cidr_lists": ["192.168.1.108/24"],
            },
            template_id="6b78ea06-ee0e-4689-998c-fc9c46e781f6")
        cluster_password = random.index.Password("cluster_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        user_password = random.index.Password("user_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        example_mongo_user = ionoscloud.dbaas.MongoUser("example_mongo_user",
            cluster_id=example_mongo_cluster.id,
            username="myUser",
            password=user_password["result"],
            roles=[
                {
                    "role": "read",
                    "database": "db1",
                },
                {
                    "role": "readWrite",
                    "database": "db2",
                },
            ])
        ```

        ## Import

        Resource DBaaS MongoDB User can be imported using the `clusterID` and the `username`.

        First, define an empty resource in the plan:

        hcl

        resource "ionoscloud_mongo_user" "importeduser" {

        }

        Then you can import the user using the following command:

        ```sh
        $ pulumi import ionoscloud:dbaas/mongoUser:MongoUser mycluser clusterid/username
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[str] password: [string] User password. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MongoUserRoleArgs', 'MongoUserRoleArgsDict']]]] roles: [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[str] username: [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MongoUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **DbaaS Mongo User**. .

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        # Basic example
        datacenter_example = ionoscloud.compute.Datacenter("datacenter_example",
            name="example",
            location="de/txl",
            description="Datacenter for testing dbaas cluster")
        lan_example = ionoscloud.compute.Lan("lan_example",
            datacenter_id=datacenter_example.id,
            public=False,
            name="example")
        example_mongo_cluster = ionoscloud.dbaas.MongoCluster("example_mongo_cluster",
            maintenance_window={
                "day_of_the_week": "Sunday",
                "time": "09:00:00",
            },
            mongodb_version="5.0",
            instances=1,
            display_name="example_mongo_cluster",
            location=datacenter_example.location,
            connections={
                "datacenter_id": datacenter_example.id,
                "lan_id": lan_example.id,
                "cidr_lists": ["192.168.1.108/24"],
            },
            template_id="6b78ea06-ee0e-4689-998c-fc9c46e781f6")
        example_mongo_user = ionoscloud.dbaas.MongoUser("example_mongo_user",
            cluster_id=example_mongo_cluster.id,
            username="myUser",
            password="strongPassword",
            roles=[
                {
                    "role": "read",
                    "database": "db1",
                },
                {
                    "role": "readWrite",
                    "database": "db2",
                },
            ])
        ```

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        # Complete example
        datacenter_example = ionoscloud.compute.Datacenter("datacenter_example",
            name="example",
            location="de/txl",
            description="Datacenter for testing dbaas cluster")
        lan_example = ionoscloud.compute.Lan("lan_example",
            datacenter_id=datacenter_example.id,
            public=False,
            name="example")
        example_mongo_cluster = ionoscloud.dbaas.MongoCluster("example_mongo_cluster",
            maintenance_window={
                "day_of_the_week": "Sunday",
                "time": "09:00:00",
            },
            mongodb_version="5.0",
            instances=1,
            display_name="example_mongo_cluster",
            location=datacenter_example.location,
            connections={
                "datacenter_id": datacenter_example.id,
                "lan_id": lan_example.id,
                "cidr_lists": ["192.168.1.108/24"],
            },
            template_id="6b78ea06-ee0e-4689-998c-fc9c46e781f6")
        cluster_password = random.index.Password("cluster_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        user_password = random.index.Password("user_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        example_mongo_user = ionoscloud.dbaas.MongoUser("example_mongo_user",
            cluster_id=example_mongo_cluster.id,
            username="myUser",
            password=user_password["result"],
            roles=[
                {
                    "role": "read",
                    "database": "db1",
                },
                {
                    "role": "readWrite",
                    "database": "db2",
                },
            ])
        ```

        ## Import

        Resource DBaaS MongoDB User can be imported using the `clusterID` and the `username`.

        First, define an empty resource in the plan:

        hcl

        resource "ionoscloud_mongo_user" "importeduser" {

        }

        Then you can import the user using the following command:

        ```sh
        $ pulumi import ionoscloud:dbaas/mongoUser:MongoUser mycluser clusterid/username
        ```

        :param str resource_name: The name of the resource.
        :param MongoUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MongoUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MongoUserRoleArgs', 'MongoUserRoleArgsDict']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MongoUserArgs.__new__(MongoUserArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["roles"] = roles
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(MongoUser, __self__).__init__(
            'ionoscloud:dbaas/mongoUser:MongoUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MongoUserRoleArgs', 'MongoUserRoleArgsDict']]]]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'MongoUser':
        """
        Get an existing MongoUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[str] password: [string] User password. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MongoUserRoleArgs', 'MongoUserRoleArgsDict']]]] roles: [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
        :param pulumi.Input[str] username: [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MongoUserState.__new__(_MongoUserState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["password"] = password
        __props__.__dict__["roles"] = roles
        __props__.__dict__["username"] = username
        return MongoUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        [string] The unique ID of the cluster. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        [string] User password. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence['outputs.MongoUserRole']]]:
        """
        [string] a list of mongodb user roles. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        [string] Used for authentication. Updates to the value of the field force the cluster to be re-created.
        """
        return pulumi.get(self, "username")

