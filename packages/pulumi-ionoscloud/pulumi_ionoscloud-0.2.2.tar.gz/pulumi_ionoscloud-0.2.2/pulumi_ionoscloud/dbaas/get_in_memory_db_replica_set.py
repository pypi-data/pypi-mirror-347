# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInMemoryDBReplicaSetResult',
    'AwaitableGetInMemoryDBReplicaSetResult',
    'get_in_memory_db_replica_set',
    'get_in_memory_db_replica_set_output',
]

@pulumi.output_type
class GetInMemoryDBReplicaSetResult:
    """
    A collection of values returned by getInMemoryDBReplicaSet.
    """
    def __init__(__self__, connections=None, credentials=None, display_name=None, dns_name=None, eviction_policy=None, id=None, location=None, maintenance_windows=None, persistence_mode=None, replicas=None, resources=None, version=None):
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if credentials and not isinstance(credentials, list):
            raise TypeError("Expected argument 'credentials' to be a list")
        pulumi.set(__self__, "credentials", credentials)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if dns_name and not isinstance(dns_name, str):
            raise TypeError("Expected argument 'dns_name' to be a str")
        pulumi.set(__self__, "dns_name", dns_name)
        if eviction_policy and not isinstance(eviction_policy, str):
            raise TypeError("Expected argument 'eviction_policy' to be a str")
        pulumi.set(__self__, "eviction_policy", eviction_policy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if maintenance_windows and not isinstance(maintenance_windows, list):
            raise TypeError("Expected argument 'maintenance_windows' to be a list")
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        if persistence_mode and not isinstance(persistence_mode, str):
            raise TypeError("Expected argument 'persistence_mode' to be a str")
        pulumi.set(__self__, "persistence_mode", persistence_mode)
        if replicas and not isinstance(replicas, int):
            raise TypeError("Expected argument 'replicas' to be a int")
        pulumi.set(__self__, "replicas", replicas)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetInMemoryDBReplicaSetConnectionResult']:
        """
        [object] The network connection for your replica set. Only one connection is allowed. It includes:
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetInMemoryDBReplicaSetCredentialResult']:
        """
        [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. It includes:
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        """
        [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="evictionPolicy")
    def eviction_policy(self) -> str:
        """
        [string] The eviction policy for the replica set, possible values are:
        """
        return pulumi.get(self, "eviction_policy")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetInMemoryDBReplicaSetMaintenanceWindowResult']:
        """
        A weekly 4 hour-long window, during which maintenance might occur. It includes:
        """
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter(name="persistenceMode")
    def persistence_mode(self) -> str:
        """
        [string] Specifies How and If data is persisted, possible values are:
        * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
        * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
        * `RDB` - RDB persistence performs snapshots of the current in memory state.
        * `RDB_AOF` - Both, RDB and AOF persistence are enabled.
        """
        return pulumi.get(self, "persistence_mode")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        """
        [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetInMemoryDBReplicaSetResourceResult']:
        """
        [object] The resources of the individual replicas. It includes:
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        [string] The InMemoryDB version of your replica set.
        """
        return pulumi.get(self, "version")


class AwaitableGetInMemoryDBReplicaSetResult(GetInMemoryDBReplicaSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInMemoryDBReplicaSetResult(
            connections=self.connections,
            credentials=self.credentials,
            display_name=self.display_name,
            dns_name=self.dns_name,
            eviction_policy=self.eviction_policy,
            id=self.id,
            location=self.location,
            maintenance_windows=self.maintenance_windows,
            persistence_mode=self.persistence_mode,
            replicas=self.replicas,
            resources=self.resources,
            version=self.version)


def get_in_memory_db_replica_set(display_name: Optional[str] = None,
                                 id: Optional[str] = None,
                                 location: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInMemoryDBReplicaSetResult:
    """
    The `dbaas.InMemoryDBReplicaSet` data source can be used to retrieve information about an existing InMemoryDB Replica Set.

    ## Example Usage

    ### By id
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.dbaas.get_in_memory_db_replica_set(id="example-id",
        location="es/vit")
    ```

    ### By display_name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.dbaas.get_in_memory_db_replica_set(display_name="example-id",
        location="us/las")
    ```


    :param str display_name: The display name of the InMemoryDB Replica Set.
    :param str id: The ID of the InMemoryDB Replica Set.
    :param str location: The location of the InMemoryDB Replica Set.
           
           > **Note:** Either `id` or `display_name` must be provided. If none, or both are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:dbaas/getInMemoryDBReplicaSet:getInMemoryDBReplicaSet', __args__, opts=opts, typ=GetInMemoryDBReplicaSetResult).value

    return AwaitableGetInMemoryDBReplicaSetResult(
        connections=pulumi.get(__ret__, 'connections'),
        credentials=pulumi.get(__ret__, 'credentials'),
        display_name=pulumi.get(__ret__, 'display_name'),
        dns_name=pulumi.get(__ret__, 'dns_name'),
        eviction_policy=pulumi.get(__ret__, 'eviction_policy'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        maintenance_windows=pulumi.get(__ret__, 'maintenance_windows'),
        persistence_mode=pulumi.get(__ret__, 'persistence_mode'),
        replicas=pulumi.get(__ret__, 'replicas'),
        resources=pulumi.get(__ret__, 'resources'),
        version=pulumi.get(__ret__, 'version'))
def get_in_memory_db_replica_set_output(display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                        id: Optional[pulumi.Input[Optional[str]]] = None,
                                        location: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInMemoryDBReplicaSetResult]:
    """
    The `dbaas.InMemoryDBReplicaSet` data source can be used to retrieve information about an existing InMemoryDB Replica Set.

    ## Example Usage

    ### By id
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.dbaas.get_in_memory_db_replica_set(id="example-id",
        location="es/vit")
    ```

    ### By display_name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.dbaas.get_in_memory_db_replica_set(display_name="example-id",
        location="us/las")
    ```


    :param str display_name: The display name of the InMemoryDB Replica Set.
    :param str id: The ID of the InMemoryDB Replica Set.
    :param str location: The location of the InMemoryDB Replica Set.
           
           > **Note:** Either `id` or `display_name` must be provided. If none, or both are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['displayName'] = display_name
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:dbaas/getInMemoryDBReplicaSet:getInMemoryDBReplicaSet', __args__, opts=opts, typ=GetInMemoryDBReplicaSetResult)
    return __ret__.apply(lambda __response__: GetInMemoryDBReplicaSetResult(
        connections=pulumi.get(__response__, 'connections'),
        credentials=pulumi.get(__response__, 'credentials'),
        display_name=pulumi.get(__response__, 'display_name'),
        dns_name=pulumi.get(__response__, 'dns_name'),
        eviction_policy=pulumi.get(__response__, 'eviction_policy'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        maintenance_windows=pulumi.get(__response__, 'maintenance_windows'),
        persistence_mode=pulumi.get(__response__, 'persistence_mode'),
        replicas=pulumi.get(__response__, 'replicas'),
        resources=pulumi.get(__response__, 'resources'),
        version=pulumi.get(__response__, 'version')))
