# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['BootDeviceSelectionArgs', 'BootDeviceSelection']

@pulumi.input_type
class BootDeviceSelectionArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 server_id: pulumi.Input[str],
                 boot_device_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BootDeviceSelection resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] server_id: [string] The ID of a server.
        :param pulumi.Input[str] boot_device_id: [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
               ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "server_id", server_id)
        if boot_device_id is not None:
            pulumi.set(__self__, "boot_device_id", boot_device_id)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of a server.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="bootDeviceId")
    def boot_device_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
        ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        """
        return pulumi.get(self, "boot_device_id")

    @boot_device_id.setter
    def boot_device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_device_id", value)


@pulumi.input_type
class _BootDeviceSelectionState:
    def __init__(__self__, *,
                 boot_device_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 default_boot_volume_id: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BootDeviceSelection resources.
        :param pulumi.Input[str] boot_device_id: [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
               ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] default_boot_volume_id: ID of the first attached volume of the Server, which will be the default boot volume.
        :param pulumi.Input[str] server_id: [string] The ID of a server.
        """
        if boot_device_id is not None:
            pulumi.set(__self__, "boot_device_id", boot_device_id)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if default_boot_volume_id is not None:
            pulumi.set(__self__, "default_boot_volume_id", default_boot_volume_id)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter(name="bootDeviceId")
    def boot_device_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
        ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        """
        return pulumi.get(self, "boot_device_id")

    @boot_device_id.setter
    def boot_device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_device_id", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="defaultBootVolumeId")
    def default_boot_volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the first attached volume of the Server, which will be the default boot volume.
        """
        return pulumi.get(self, "default_boot_volume_id")

    @default_boot_volume_id.setter
    def default_boot_volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_boot_volume_id", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a server.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)


class BootDeviceSelection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_device_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages the selection of a boot device for IonosCloud Servers.

        ## Example Usage

        The boot device of a `compute.Server`, `compute.VCPUServer` or `compute.CubeServer` can be selected with this resource.
        Deleting this resource will revert the boot device back to the default volume, which is the first inline volume created together with the server.
        This resource also allows switching between a `volume` and a `compute_get_image` CDROM. Note that CDROM images are detached after they are no longer set as boot devices.

        ### Select an external volume
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            availability_zone="ZONE_2",
            image_name="ubuntu:latest",
            cores=2,
            ram=2048,
            image_password=server_image_password["result"],
            datacenter_id=example_ionoscloud_datacenter["id"],
            volume={
                "name": "Inline Updated",
                "size": 20,
                "disk_type": "SSD Standard",
                "bus": "VIRTIO",
                "availability_zone": "AUTO",
            },
            nic={
                "lan": example_ionoscloud_lan["id"],
                "name": "Nic Example",
                "dhcp": True,
                "firewall_active": True,
            })
        example_volume = ionoscloud.compute.Volume("example",
            server_id=example_server.id,
            datacenter_id=example_ionoscloud_datacenter["id"],
            name="External 1",
            size=10,
            disk_type="HDD",
            availability_zone="AUTO",
            image_name="debian:latest",
            image_password=server_image_password["result"])
        example = ionoscloud.compute.BootDeviceSelection("example",
            datacenter_id=example_ionoscloud_datacenter["id"],
            server_id=example_server.id,
            boot_device_id=example_volume.id)
        ```

        ### Select an inline volume again
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            availability_zone="ZONE_2",
            image_name="ubuntu:latest",
            cores=2,
            ram=2048,
            image_password=server_image_password["result"],
            datacenter_id=example_ionoscloud_datacenter["id"],
            volume={
                "name": "Inline Updated",
                "size": 20,
                "disk_type": "SSD Standard",
                "bus": "VIRTIO",
                "availability_zone": "AUTO",
            },
            nic={
                "lan": example_ionoscloud_lan["id"],
                "name": "Nic Example",
                "dhcp": True,
                "firewall_active": True,
            })
        example = ionoscloud.compute.BootDeviceSelection("example",
            datacenter_id=example_ionoscloud_datacenter["id"],
            server_id=example_server.id,
            boot_device_id=example_server.inline_volume_ids[0])
        example_volume = ionoscloud.compute.Volume("example",
            server_id=example_server.id,
            datacenter_id=example_ionoscloud_datacenter["id"],
            name="External 1",
            size=10,
            disk_type="HDD",
            availability_zone="AUTO",
            image_name="debian:latest",
            image_password=server_image_password["result"])
        ```

        ### Select a CDROM image
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            availability_zone="ZONE_2",
            image_name="ubuntu:latest",
            cores=2,
            ram=2048,
            image_password=server_image_password["result"],
            datacenter_id=example_ionoscloud_datacenter["id"],
            volume={
                "name": "Inline Updated",
                "size": 20,
                "disk_type": "SSD Standard",
                "bus": "VIRTIO",
                "availability_zone": "AUTO",
            },
            nic={
                "lan": example_ionoscloud_lan["id"],
                "name": "Nic Example",
                "dhcp": True,
                "firewall_active": True,
            })
        example = ionoscloud.compute.get_image(name="ubuntu-20.04",
            location="de/txl",
            type="CDROM")
        example_boot_device_selection = ionoscloud.compute.BootDeviceSelection("example",
            datacenter_id=example_ionoscloud_datacenter["id"],
            server_id=example_server.inline_volume_ids[0],
            boot_device_id=example.id)
        example_volume = ionoscloud.compute.Volume("example",
            server_id=example_server.id,
            datacenter_id=example_ionoscloud_datacenter["id"],
            name="External 1",
            size=10,
            disk_type="HDD",
            availability_zone="AUTO",
            image_name="debian:latest",
            image_password=server_image_password["result"])
        ```

        ### Perform a network boot
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            availability_zone="ZONE_2",
            image_name="ubuntu:latest",
            cores=2,
            ram=2048,
            image_password=server_image_password["result"],
            datacenter_id=example_ionoscloud_datacenter["id"],
            volume={
                "name": "Inline volume",
                "size": 20,
                "disk_type": "SSD Standard",
                "bus": "VIRTIO",
                "availability_zone": "AUTO",
            },
            nic={
                "lan": example_ionoscloud_lan["id"],
                "name": "Nic Example",
                "dhcp": True,
                "firewall_active": True,
            })
        example_boot_device_selection = ionoscloud.compute.BootDeviceSelection("example",
            datacenter_id=example_ionoscloud_datacenter["id"],
            server_id=example_server.inline_volume_ids[0])
        example_volume = ionoscloud.compute.Volume("example",
            server_id=example_server.id,
            datacenter_id=example_ionoscloud_datacenter["id"],
            name="External 1",
            size=10,
            disk_type="HDD",
            availability_zone="AUTO",
            image_name="debian:latest",
            image_password=server_image_password["result"])
        example = ionoscloud.compute.get_image(name="ubuntu-20.04",
            location="de/txl",
            type="CDROM")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_device_id: [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
               ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] server_id: [string] The ID of a server.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BootDeviceSelectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages the selection of a boot device for IonosCloud Servers.

        ## Example Usage

        The boot device of a `compute.Server`, `compute.VCPUServer` or `compute.CubeServer` can be selected with this resource.
        Deleting this resource will revert the boot device back to the default volume, which is the first inline volume created together with the server.
        This resource also allows switching between a `volume` and a `compute_get_image` CDROM. Note that CDROM images are detached after they are no longer set as boot devices.

        ### Select an external volume
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            availability_zone="ZONE_2",
            image_name="ubuntu:latest",
            cores=2,
            ram=2048,
            image_password=server_image_password["result"],
            datacenter_id=example_ionoscloud_datacenter["id"],
            volume={
                "name": "Inline Updated",
                "size": 20,
                "disk_type": "SSD Standard",
                "bus": "VIRTIO",
                "availability_zone": "AUTO",
            },
            nic={
                "lan": example_ionoscloud_lan["id"],
                "name": "Nic Example",
                "dhcp": True,
                "firewall_active": True,
            })
        example_volume = ionoscloud.compute.Volume("example",
            server_id=example_server.id,
            datacenter_id=example_ionoscloud_datacenter["id"],
            name="External 1",
            size=10,
            disk_type="HDD",
            availability_zone="AUTO",
            image_name="debian:latest",
            image_password=server_image_password["result"])
        example = ionoscloud.compute.BootDeviceSelection("example",
            datacenter_id=example_ionoscloud_datacenter["id"],
            server_id=example_server.id,
            boot_device_id=example_volume.id)
        ```

        ### Select an inline volume again
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            availability_zone="ZONE_2",
            image_name="ubuntu:latest",
            cores=2,
            ram=2048,
            image_password=server_image_password["result"],
            datacenter_id=example_ionoscloud_datacenter["id"],
            volume={
                "name": "Inline Updated",
                "size": 20,
                "disk_type": "SSD Standard",
                "bus": "VIRTIO",
                "availability_zone": "AUTO",
            },
            nic={
                "lan": example_ionoscloud_lan["id"],
                "name": "Nic Example",
                "dhcp": True,
                "firewall_active": True,
            })
        example = ionoscloud.compute.BootDeviceSelection("example",
            datacenter_id=example_ionoscloud_datacenter["id"],
            server_id=example_server.id,
            boot_device_id=example_server.inline_volume_ids[0])
        example_volume = ionoscloud.compute.Volume("example",
            server_id=example_server.id,
            datacenter_id=example_ionoscloud_datacenter["id"],
            name="External 1",
            size=10,
            disk_type="HDD",
            availability_zone="AUTO",
            image_name="debian:latest",
            image_password=server_image_password["result"])
        ```

        ### Select a CDROM image
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            availability_zone="ZONE_2",
            image_name="ubuntu:latest",
            cores=2,
            ram=2048,
            image_password=server_image_password["result"],
            datacenter_id=example_ionoscloud_datacenter["id"],
            volume={
                "name": "Inline Updated",
                "size": 20,
                "disk_type": "SSD Standard",
                "bus": "VIRTIO",
                "availability_zone": "AUTO",
            },
            nic={
                "lan": example_ionoscloud_lan["id"],
                "name": "Nic Example",
                "dhcp": True,
                "firewall_active": True,
            })
        example = ionoscloud.compute.get_image(name="ubuntu-20.04",
            location="de/txl",
            type="CDROM")
        example_boot_device_selection = ionoscloud.compute.BootDeviceSelection("example",
            datacenter_id=example_ionoscloud_datacenter["id"],
            server_id=example_server.inline_volume_ids[0],
            boot_device_id=example.id)
        example_volume = ionoscloud.compute.Volume("example",
            server_id=example_server.id,
            datacenter_id=example_ionoscloud_datacenter["id"],
            name="External 1",
            size=10,
            disk_type="HDD",
            availability_zone="AUTO",
            image_name="debian:latest",
            image_password=server_image_password["result"])
        ```

        ### Perform a network boot
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            availability_zone="ZONE_2",
            image_name="ubuntu:latest",
            cores=2,
            ram=2048,
            image_password=server_image_password["result"],
            datacenter_id=example_ionoscloud_datacenter["id"],
            volume={
                "name": "Inline volume",
                "size": 20,
                "disk_type": "SSD Standard",
                "bus": "VIRTIO",
                "availability_zone": "AUTO",
            },
            nic={
                "lan": example_ionoscloud_lan["id"],
                "name": "Nic Example",
                "dhcp": True,
                "firewall_active": True,
            })
        example_boot_device_selection = ionoscloud.compute.BootDeviceSelection("example",
            datacenter_id=example_ionoscloud_datacenter["id"],
            server_id=example_server.inline_volume_ids[0])
        example_volume = ionoscloud.compute.Volume("example",
            server_id=example_server.id,
            datacenter_id=example_ionoscloud_datacenter["id"],
            name="External 1",
            size=10,
            disk_type="HDD",
            availability_zone="AUTO",
            image_name="debian:latest",
            image_password=server_image_password["result"])
        example = ionoscloud.compute.get_image(name="ubuntu-20.04",
            location="de/txl",
            type="CDROM")
        ```

        :param str resource_name: The name of the resource.
        :param BootDeviceSelectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BootDeviceSelectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_device_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BootDeviceSelectionArgs.__new__(BootDeviceSelectionArgs)

            __props__.__dict__["boot_device_id"] = boot_device_id
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            __props__.__dict__["default_boot_volume_id"] = None
        super(BootDeviceSelection, __self__).__init__(
            'ionoscloud:compute/bootDeviceSelection:BootDeviceSelection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            boot_device_id: Optional[pulumi.Input[str]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            default_boot_volume_id: Optional[pulumi.Input[str]] = None,
            server_id: Optional[pulumi.Input[str]] = None) -> 'BootDeviceSelection':
        """
        Get an existing BootDeviceSelection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] boot_device_id: [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
               ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] default_boot_volume_id: ID of the first attached volume of the Server, which will be the default boot volume.
        :param pulumi.Input[str] server_id: [string] The ID of a server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BootDeviceSelectionState.__new__(_BootDeviceSelectionState)

        __props__.__dict__["boot_device_id"] = boot_device_id
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["default_boot_volume_id"] = default_boot_volume_id
        __props__.__dict__["server_id"] = server_id
        return BootDeviceSelection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bootDeviceId")
    def boot_device_id(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The ID of a bootable device such as a volume or an image data source. If this field is omitted from the configuration, the VM will be restarted with no primary boot device, and it will enter the PXE shell for network booting. 
        ***Note***: If the network booting process started by the PXE shell fails, the VM will still boot into the image of the attached storage as a fallback. This behavior imitates the "Boot from Network" option from [DCD](https://dcd.ionos.com/).
        """
        return pulumi.get(self, "boot_device_id")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="defaultBootVolumeId")
    def default_boot_volume_id(self) -> pulumi.Output[str]:
        """
        ID of the first attached volume of the Server, which will be the default boot volume.
        """
        return pulumi.get(self, "default_boot_volume_id")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of a server.
        """
        return pulumi.get(self, "server_id")

