# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetClustersResult',
    'AwaitableGetClustersResult',
    'get_clusters',
    'get_clusters_output',
]

@pulumi.output_type
class GetClustersResult:
    """
    A collection of values returned by getClusters.
    """
    def __init__(__self__, clusters=None, entries=None, filters=None, id=None):
        if clusters and not isinstance(clusters, list):
            raise TypeError("Expected argument 'clusters' to be a list")
        pulumi.set(__self__, "clusters", clusters)
        if entries and not isinstance(entries, int):
            raise TypeError("Expected argument 'entries' to be a int")
        pulumi.set(__self__, "entries", entries)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetClustersClusterResult']:
        """
        list of Kubernetes clusters that match the provided filters. The elements of this list are structurally identical to the `k8s_cluster` datasource, which is limited to retrieving only 1 cluster in a single query.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter
    def entries(self) -> int:
        """
        indicates the number of clusters found and added to the list after the query has been performed with the specified filters.
        For a full reference of all the attributes returned, check out documentation
        """
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetClustersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetClustersResult(GetClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClustersResult(
            clusters=self.clusters,
            entries=self.entries,
            filters=self.filters,
            id=self.id)


def get_clusters(filters: Optional[Sequence[Union['GetClustersFilterArgs', 'GetClustersFilterArgsDict']]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClustersResult:
    """
    The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.

    ## Example Usage

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.k8s.get_clusters(filters=[{
        "name": "name",
        "value": "k8sClusterExample",
    }])
    ```

    ### By Name and k8s version Family
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example2 = ionoscloud.k8s.get_clusters(filters=[
        {
            "name": "name",
            "value": "k8sClusterExample",
        },
        {
            "name": "k8s_version",
            "value": "1.27",
        },
    ])
    ```

    ### Retrieve private clusters only, by Name and Cluster State
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_servers(filters=[
        {
            "name": "name",
            "value": "k8sClusterExample",
        },
        {
            "name": "state",
            "value": "ACTIVE",
        },
        {
            "name": "public",
            "value": "false",
        },
    ])
    ```


    :param Sequence[Union['GetClustersFilterArgs', 'GetClustersFilterArgsDict']] filters: One or more property name - value pairs to be used in filtering the cluster list by the specified attributes. You can use most of the top level fields from the  k8s_cluster resource **except** those containing other nested structures such as `maintenance_window` or `config`.
           
           **NOTE:** Filtering uses partial matching for all types of values. Searching for a cluster using `name:testCluster` will find all clusters who have the `testCluster` substring in their name. This also applies to values for properties that would normally be boolean or numerical.
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:k8s/getClusters:getClusters', __args__, opts=opts, typ=GetClustersResult).value

    return AwaitableGetClustersResult(
        clusters=pulumi.get(__ret__, 'clusters'),
        entries=pulumi.get(__ret__, 'entries'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'))
def get_clusters_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetClustersFilterArgs', 'GetClustersFilterArgsDict']]]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClustersResult]:
    """
    The **k8s_clusters data source** can be used to search for and return existing kubernetes clusters based on filters used.

    ## Example Usage

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.k8s.get_clusters(filters=[{
        "name": "name",
        "value": "k8sClusterExample",
    }])
    ```

    ### By Name and k8s version Family
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example2 = ionoscloud.k8s.get_clusters(filters=[
        {
            "name": "name",
            "value": "k8sClusterExample",
        },
        {
            "name": "k8s_version",
            "value": "1.27",
        },
    ])
    ```

    ### Retrieve private clusters only, by Name and Cluster State
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_servers(filters=[
        {
            "name": "name",
            "value": "k8sClusterExample",
        },
        {
            "name": "state",
            "value": "ACTIVE",
        },
        {
            "name": "public",
            "value": "false",
        },
    ])
    ```


    :param Sequence[Union['GetClustersFilterArgs', 'GetClustersFilterArgsDict']] filters: One or more property name - value pairs to be used in filtering the cluster list by the specified attributes. You can use most of the top level fields from the  k8s_cluster resource **except** those containing other nested structures such as `maintenance_window` or `config`.
           
           **NOTE:** Filtering uses partial matching for all types of values. Searching for a cluster using `name:testCluster` will find all clusters who have the `testCluster` substring in their name. This also applies to values for properties that would normally be boolean or numerical.
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:k8s/getClusters:getClusters', __args__, opts=opts, typ=GetClustersResult)
    return __ret__.apply(lambda __response__: GetClustersResult(
        clusters=pulumi.get(__response__, 'clusters'),
        entries=pulumi.get(__response__, 'entries'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id')))
