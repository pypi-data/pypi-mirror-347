# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 max_replica_count: pulumi.Input[int],
                 min_replica_count: pulumi.Input[int],
                 policy: pulumi.Input['GroupPolicyArgs'],
                 replica_configuration: pulumi.Input['GroupReplicaConfigurationArgs'],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Group resource.
        :param pulumi.Input[str] datacenter_id: [string] Unique identifier for the resource
        :param pulumi.Input[int] max_replica_count: [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        :param pulumi.Input[int] min_replica_count: [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        :param pulumi.Input['GroupPolicyArgs'] policy: [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        :param pulumi.Input['GroupReplicaConfigurationArgs'] replica_configuration: [List]
        :param pulumi.Input[str] name: [string] User-defined name for the Autoscaling Group.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "max_replica_count", max_replica_count)
        pulumi.set(__self__, "min_replica_count", min_replica_count)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "replica_configuration", replica_configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] Unique identifier for the resource
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> pulumi.Input[int]:
        """
        [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        """
        return pulumi.get(self, "max_replica_count")

    @max_replica_count.setter
    def max_replica_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_replica_count", value)

    @property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> pulumi.Input[int]:
        """
        [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        """
        return pulumi.get(self, "min_replica_count")

    @min_replica_count.setter
    def min_replica_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_replica_count", value)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input['GroupPolicyArgs']:
        """
        [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input['GroupPolicyArgs']):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="replicaConfiguration")
    def replica_configuration(self) -> pulumi.Input['GroupReplicaConfigurationArgs']:
        """
        [List]
        """
        return pulumi.get(self, "replica_configuration")

    @replica_configuration.setter
    def replica_configuration(self, value: pulumi.Input['GroupReplicaConfigurationArgs']):
        pulumi.set(self, "replica_configuration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] User-defined name for the Autoscaling Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_replica_count: Optional[pulumi.Input[int]] = None,
                 min_replica_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input['GroupPolicyArgs']] = None,
                 replica_configuration: Optional[pulumi.Input['GroupReplicaConfigurationArgs']] = None):
        """
        Input properties used for looking up and filtering Group resources.
        :param pulumi.Input[str] datacenter_id: [string] Unique identifier for the resource
        :param pulumi.Input[str] location: Location of the data center.
        :param pulumi.Input[int] max_replica_count: [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        :param pulumi.Input[int] min_replica_count: [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        :param pulumi.Input[str] name: [string] User-defined name for the Autoscaling Group.
        :param pulumi.Input['GroupPolicyArgs'] policy: [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        :param pulumi.Input['GroupReplicaConfigurationArgs'] replica_configuration: [List]
        """
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if max_replica_count is not None:
            pulumi.set(__self__, "max_replica_count", max_replica_count)
        if min_replica_count is not None:
            pulumi.set(__self__, "min_replica_count", min_replica_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if replica_configuration is not None:
            pulumi.set(__self__, "replica_configuration", replica_configuration)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Unique identifier for the resource
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the data center.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        """
        return pulumi.get(self, "max_replica_count")

    @max_replica_count.setter
    def max_replica_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replica_count", value)

    @property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        """
        return pulumi.get(self, "min_replica_count")

    @min_replica_count.setter
    def min_replica_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replica_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] User-defined name for the Autoscaling Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['GroupPolicyArgs']]:
        """
        [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['GroupPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="replicaConfiguration")
    def replica_configuration(self) -> Optional[pulumi.Input['GroupReplicaConfigurationArgs']]:
        """
        [List]
        """
        return pulumi.get(self, "replica_configuration")

    @replica_configuration.setter
    def replica_configuration(self, value: Optional[pulumi.Input['GroupReplicaConfigurationArgs']]):
        pulumi.set(self, "replica_configuration", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 max_replica_count: Optional[pulumi.Input[int]] = None,
                 min_replica_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[Union['GroupPolicyArgs', 'GroupPolicyArgsDict']]] = None,
                 replica_configuration: Optional[pulumi.Input[Union['GroupReplicaConfigurationArgs', 'GroupReplicaConfigurationArgsDict']]] = None,
                 __props__=None):
        """
        Manages an Autoscaling Group on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        datacenter_example = ionoscloud.compute.Datacenter("datacenter_example",
            name="datacenter_example",
            location="de/fra")
        lan_example1 = ionoscloud.compute.Lan("lan_example_1",
            datacenter_id=datacenter_example.id,
            public=False,
            name="lan_example_1")
        lan_example2 = ionoscloud.compute.Lan("lan_example_2",
            datacenter_id=datacenter_example.id,
            public=False,
            name="lan_example_2")
        autoscaling_target_group = ionoscloud.compute.TargetGroup("autoscaling_target_group",
            name="Target Group Example",
            algorithm="ROUND_ROBIN",
            protocol="HTTP")
        server_image_password = random.index.Password("server_image_password",
            length=16,
            special=False)
        autoscaling_group_example = ionoscloud.autoscaling.Group("autoscaling_group_example",
            datacenter_id=datacenter_example.id,
            max_replica_count=2,
            min_replica_count=1,
            name="autoscaling_group_example",
            policy={
                "metric": "INSTANCE_CPU_UTILIZATION_AVERAGE",
                "range": "PT24H",
                "scale_in_action": {
                    "amount": 1,
                    "amount_type": "ABSOLUTE",
                    "termination_policy_type": "OLDEST_SERVER_FIRST",
                    "cooldown_period": "PT5M",
                    "delete_volumes": True,
                },
                "scale_in_threshold": 33,
                "scale_out_action": {
                    "amount": 1,
                    "amount_type": "ABSOLUTE",
                    "cooldown_period": "PT5M",
                },
                "scale_out_threshold": 77,
                "unit": "PER_HOUR",
            },
            replica_configuration={
                "availability_zone": "AUTO",
                "cores": 2,
                "cpu_family": "INTEL_SKYLAKE",
                "ram": 2048,
                "nics": [
                    {
                        "lan": lan_example1.id,
                        "name": "nic_example_1",
                        "dhcp": True,
                    },
                    {
                        "lan": lan_example2.id,
                        "name": "nic_example_2",
                        "dhcp": True,
                        "firewall_active": True,
                        "firewall_type": "INGRESS",
                        "firewall_rules": [{
                            "name": "rule_1",
                            "protocol": "TCP",
                            "port_range_start": 1,
                            "port_range_end": 1000,
                            "type": "INGRESS",
                        }],
                        "flow_logs": [{
                            "name": "flow_log_1",
                            "bucket": "test-de-bucket",
                            "action": "ALL",
                            "direction": "BIDIRECTIONAL",
                        }],
                        "target_group": {
                            "target_group_id": autoscaling_target_group.id,
                            "port": 80,
                            "weight": 50,
                        },
                    },
                ],
                "volumes": [{
                    "image_alias": "ubuntu:latest",
                    "name": "volume_example",
                    "size": 10,
                    "type": "HDD",
                    "user_data": "ZWNobyAiSGVsbG8sIFdvcmxkIgo=",
                    "image_password": server_image_password["result"],
                    "boot_order": "AUTO",
                }],
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] datacenter_id: [string] Unique identifier for the resource
        :param pulumi.Input[int] max_replica_count: [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        :param pulumi.Input[int] min_replica_count: [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        :param pulumi.Input[str] name: [string] User-defined name for the Autoscaling Group.
        :param pulumi.Input[Union['GroupPolicyArgs', 'GroupPolicyArgsDict']] policy: [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        :param pulumi.Input[Union['GroupReplicaConfigurationArgs', 'GroupReplicaConfigurationArgsDict']] replica_configuration: [List]
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an Autoscaling Group on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        datacenter_example = ionoscloud.compute.Datacenter("datacenter_example",
            name="datacenter_example",
            location="de/fra")
        lan_example1 = ionoscloud.compute.Lan("lan_example_1",
            datacenter_id=datacenter_example.id,
            public=False,
            name="lan_example_1")
        lan_example2 = ionoscloud.compute.Lan("lan_example_2",
            datacenter_id=datacenter_example.id,
            public=False,
            name="lan_example_2")
        autoscaling_target_group = ionoscloud.compute.TargetGroup("autoscaling_target_group",
            name="Target Group Example",
            algorithm="ROUND_ROBIN",
            protocol="HTTP")
        server_image_password = random.index.Password("server_image_password",
            length=16,
            special=False)
        autoscaling_group_example = ionoscloud.autoscaling.Group("autoscaling_group_example",
            datacenter_id=datacenter_example.id,
            max_replica_count=2,
            min_replica_count=1,
            name="autoscaling_group_example",
            policy={
                "metric": "INSTANCE_CPU_UTILIZATION_AVERAGE",
                "range": "PT24H",
                "scale_in_action": {
                    "amount": 1,
                    "amount_type": "ABSOLUTE",
                    "termination_policy_type": "OLDEST_SERVER_FIRST",
                    "cooldown_period": "PT5M",
                    "delete_volumes": True,
                },
                "scale_in_threshold": 33,
                "scale_out_action": {
                    "amount": 1,
                    "amount_type": "ABSOLUTE",
                    "cooldown_period": "PT5M",
                },
                "scale_out_threshold": 77,
                "unit": "PER_HOUR",
            },
            replica_configuration={
                "availability_zone": "AUTO",
                "cores": 2,
                "cpu_family": "INTEL_SKYLAKE",
                "ram": 2048,
                "nics": [
                    {
                        "lan": lan_example1.id,
                        "name": "nic_example_1",
                        "dhcp": True,
                    },
                    {
                        "lan": lan_example2.id,
                        "name": "nic_example_2",
                        "dhcp": True,
                        "firewall_active": True,
                        "firewall_type": "INGRESS",
                        "firewall_rules": [{
                            "name": "rule_1",
                            "protocol": "TCP",
                            "port_range_start": 1,
                            "port_range_end": 1000,
                            "type": "INGRESS",
                        }],
                        "flow_logs": [{
                            "name": "flow_log_1",
                            "bucket": "test-de-bucket",
                            "action": "ALL",
                            "direction": "BIDIRECTIONAL",
                        }],
                        "target_group": {
                            "target_group_id": autoscaling_target_group.id,
                            "port": 80,
                            "weight": 50,
                        },
                    },
                ],
                "volumes": [{
                    "image_alias": "ubuntu:latest",
                    "name": "volume_example",
                    "size": 10,
                    "type": "HDD",
                    "user_data": "ZWNobyAiSGVsbG8sIFdvcmxkIgo=",
                    "image_password": server_image_password["result"],
                    "boot_order": "AUTO",
                }],
            })
        ```

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 max_replica_count: Optional[pulumi.Input[int]] = None,
                 min_replica_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[Union['GroupPolicyArgs', 'GroupPolicyArgsDict']]] = None,
                 replica_configuration: Optional[pulumi.Input[Union['GroupReplicaConfigurationArgs', 'GroupReplicaConfigurationArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            if max_replica_count is None and not opts.urn:
                raise TypeError("Missing required property 'max_replica_count'")
            __props__.__dict__["max_replica_count"] = max_replica_count
            if min_replica_count is None and not opts.urn:
                raise TypeError("Missing required property 'min_replica_count'")
            __props__.__dict__["min_replica_count"] = min_replica_count
            __props__.__dict__["name"] = name
            if policy is None and not opts.urn:
                raise TypeError("Missing required property 'policy'")
            __props__.__dict__["policy"] = policy
            if replica_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'replica_configuration'")
            __props__.__dict__["replica_configuration"] = replica_configuration
            __props__.__dict__["location"] = None
        super(Group, __self__).__init__(
            'ionoscloud:autoscaling/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            max_replica_count: Optional[pulumi.Input[int]] = None,
            min_replica_count: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy: Optional[pulumi.Input[Union['GroupPolicyArgs', 'GroupPolicyArgsDict']]] = None,
            replica_configuration: Optional[pulumi.Input[Union['GroupReplicaConfigurationArgs', 'GroupReplicaConfigurationArgsDict']]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] datacenter_id: [string] Unique identifier for the resource
        :param pulumi.Input[str] location: Location of the data center.
        :param pulumi.Input[int] max_replica_count: [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        :param pulumi.Input[int] min_replica_count: [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        :param pulumi.Input[str] name: [string] User-defined name for the Autoscaling Group.
        :param pulumi.Input[Union['GroupPolicyArgs', 'GroupPolicyArgsDict']] policy: [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        :param pulumi.Input[Union['GroupReplicaConfigurationArgs', 'GroupReplicaConfigurationArgsDict']] replica_configuration: [List]
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["location"] = location
        __props__.__dict__["max_replica_count"] = max_replica_count
        __props__.__dict__["min_replica_count"] = min_replica_count
        __props__.__dict__["name"] = name
        __props__.__dict__["policy"] = policy
        __props__.__dict__["replica_configuration"] = replica_configuration
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        [string] Unique identifier for the resource
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Location of the data center.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> pulumi.Output[int]:
        """
        [int] The maximum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        """
        return pulumi.get(self, "max_replica_count")

    @property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> pulumi.Output[int]:
        """
        [int] The minimum value for the number of replicas on a VM Auto Scaling Group. Must be >= 0 and <= 200. Will be enforced for both automatic and manual changes.
        """
        return pulumi.get(self, "min_replica_count")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] User-defined name for the Autoscaling Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output['outputs.GroupPolicy']:
        """
        [List] Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="replicaConfiguration")
    def replica_configuration(self) -> pulumi.Output['outputs.GroupReplicaConfiguration']:
        """
        [List]
        """
        return pulumi.get(self, "replica_configuration")

