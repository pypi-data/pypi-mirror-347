# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetTopicResult',
    'AwaitableGetTopicResult',
    'get_topic',
    'get_topic_output',
]

@pulumi.output_type
class GetTopicResult:
    """
    A collection of values returned by getTopic.
    """
    def __init__(__self__, cluster_id=None, id=None, location=None, name=None, number_of_partitions=None, partial_match=None, replication_factor=None, retention_time=None, segment_bytes=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_partitions and not isinstance(number_of_partitions, int):
            raise TypeError("Expected argument 'number_of_partitions' to be a int")
        pulumi.set(__self__, "number_of_partitions", number_of_partitions)
        if partial_match and not isinstance(partial_match, bool):
            raise TypeError("Expected argument 'partial_match' to be a bool")
        pulumi.set(__self__, "partial_match", partial_match)
        if replication_factor and not isinstance(replication_factor, int):
            raise TypeError("Expected argument 'replication_factor' to be a int")
        pulumi.set(__self__, "replication_factor", replication_factor)
        if retention_time and not isinstance(retention_time, int):
            raise TypeError("Expected argument 'retention_time' to be a int")
        pulumi.set(__self__, "retention_time", retention_time)
        if segment_bytes and not isinstance(segment_bytes, int):
            raise TypeError("Expected argument 'segment_bytes' to be a int")
        pulumi.set(__self__, "segment_bytes", segment_bytes)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The id of the Kafka Cluster that the topic belongs to.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        UUID of the Kafka Cluster Topic.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Kafka Cluster Topic.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfPartitions")
    def number_of_partitions(self) -> int:
        """
        The number of partitions of the topic. Partitions allow for parallel processing of messages.
        """
        return pulumi.get(self, "number_of_partitions")

    @property
    @pulumi.getter(name="partialMatch")
    def partial_match(self) -> Optional[bool]:
        return pulumi.get(self, "partial_match")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> int:
        """
        The number of replicas of the topic. The replication factor determines how many copies of the
        topic are stored on different brokers.
        """
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter(name="retentionTime")
    def retention_time(self) -> int:
        """
        This configuration controls the maximum time we will retain a log before we will discard old log
        segments to free up space. This represents an SLA on how soon consumers must read their data. If set to -1, no time
        limit is applied.
        """
        return pulumi.get(self, "retention_time")

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> int:
        """
        This configuration controls the segment file size for the log. Retention and cleaning is always done a file at a time so a larger segment size means fewer files but less granular control over retention.
        """
        return pulumi.get(self, "segment_bytes")


class AwaitableGetTopicResult(GetTopicResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTopicResult(
            cluster_id=self.cluster_id,
            id=self.id,
            location=self.location,
            name=self.name,
            number_of_partitions=self.number_of_partitions,
            partial_match=self.partial_match,
            replication_factor=self.replication_factor,
            retention_time=self.retention_time,
            segment_bytes=self.segment_bytes)


def get_topic(cluster_id: Optional[str] = None,
              id: Optional[str] = None,
              location: Optional[str] = None,
              name: Optional[str] = None,
              partial_match: Optional[bool] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTopicResult:
    """
    The **Kafka topic data source** can be used to search for and return an existing Kafka Cluster Topic.
    You can provide a string for the name parameter which will be compared with provisioned Kafka Cluster Topics.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.kafka.get_topic(id="your_kafka_cluster_topic_id",
        cluster_id="your_kafka_cluster_id",
        location="your_kafka_cluster_location")
    ```

    ### By Name

    Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
    this data source is called.

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.kafka.get_topic(name="kafka-cluster-topic",
        cluster_id="your_kafka_cluster_id",
        location="location_of_kafka_cluster")
    ```


    :param str cluster_id: ID of the Kafka Cluster that the topic belongs to.
    :param str id: ID of an existing Kafka Cluster Topic that you want to search for.
    :param str location: The location of the Kafka Cluster Topic. Must be the same as the location of the Kafka
           Cluster. Possible values: `de/fra`, `de/txl`
    :param str name: Name of an existing Kafka Cluster Topic that you want to search for.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:kafka/getTopic:getTopic', __args__, opts=opts, typ=GetTopicResult).value

    return AwaitableGetTopicResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        number_of_partitions=pulumi.get(__ret__, 'number_of_partitions'),
        partial_match=pulumi.get(__ret__, 'partial_match'),
        replication_factor=pulumi.get(__ret__, 'replication_factor'),
        retention_time=pulumi.get(__ret__, 'retention_time'),
        segment_bytes=pulumi.get(__ret__, 'segment_bytes'))
def get_topic_output(cluster_id: Optional[pulumi.Input[str]] = None,
                     id: Optional[pulumi.Input[Optional[str]]] = None,
                     location: Optional[pulumi.Input[str]] = None,
                     name: Optional[pulumi.Input[Optional[str]]] = None,
                     partial_match: Optional[pulumi.Input[Optional[bool]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTopicResult]:
    """
    The **Kafka topic data source** can be used to search for and return an existing Kafka Cluster Topic.
    You can provide a string for the name parameter which will be compared with provisioned Kafka Cluster Topics.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.kafka.get_topic(id="your_kafka_cluster_topic_id",
        cluster_id="your_kafka_cluster_id",
        location="your_kafka_cluster_location")
    ```

    ### By Name

    Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
    this data source is called.

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.kafka.get_topic(name="kafka-cluster-topic",
        cluster_id="your_kafka_cluster_id",
        location="location_of_kafka_cluster")
    ```


    :param str cluster_id: ID of the Kafka Cluster that the topic belongs to.
    :param str id: ID of an existing Kafka Cluster Topic that you want to search for.
    :param str location: The location of the Kafka Cluster Topic. Must be the same as the location of the Kafka
           Cluster. Possible values: `de/fra`, `de/txl`
    :param str name: Name of an existing Kafka Cluster Topic that you want to search for.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:kafka/getTopic:getTopic', __args__, opts=opts, typ=GetTopicResult)
    return __ret__.apply(lambda __response__: GetTopicResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        number_of_partitions=pulumi.get(__response__, 'number_of_partitions'),
        partial_match=pulumi.get(__response__, 'partial_match'),
        replication_factor=pulumi.get(__response__, 'replication_factor'),
        retention_time=pulumi.get(__response__, 'retention_time'),
        segment_bytes=pulumi.get(__response__, 'segment_bytes')))
