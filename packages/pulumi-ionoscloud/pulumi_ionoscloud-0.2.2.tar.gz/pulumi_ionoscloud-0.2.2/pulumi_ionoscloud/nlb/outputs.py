# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'BalancerFlowlog',
    'ForwardingRuleHealthCheck',
    'ForwardingRuleTarget',
    'ForwardingRuleTargetHealthCheck',
    'GetBalancerFlowlogResult',
    'GetForwardingRuleHealthCheckResult',
    'GetForwardingRuleTargetResult',
    'GetForwardingRuleTargetHealthCheckResult',
]

@pulumi.output_type
class BalancerFlowlog(dict):
    def __init__(__self__, *,
                 action: str,
                 bucket: str,
                 direction: str,
                 name: str,
                 id: Optional[str] = None):
        """
        :param str action: [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        :param str bucket: [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        :param str direction: [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        :param str name: [string] Specifies the name of the flow log.
               
               ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the network load balancer resource.
        :param str id: The resource's unique identifier.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        [string] Specifies the name of the flow log.

        ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the network load balancer resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The resource's unique identifier.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ForwardingRuleHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientTimeout":
            suggest = "client_timeout"
        elif key == "connectTimeout":
            suggest = "connect_timeout"
        elif key == "targetTimeout":
            suggest = "target_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingRuleHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingRuleHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingRuleHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_timeout: Optional[int] = None,
                 connect_timeout: Optional[int] = None,
                 retries: Optional[int] = None,
                 target_timeout: Optional[int] = None):
        """
        :param int client_timeout: [int] ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
        :param int connect_timeout: [int] It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
        :param int retries: [int] Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
        :param int target_timeout: [int] TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
        """
        if client_timeout is not None:
            pulumi.set(__self__, "client_timeout", client_timeout)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if target_timeout is not None:
            pulumi.set(__self__, "target_timeout", target_timeout)

    @property
    @pulumi.getter(name="clientTimeout")
    def client_timeout(self) -> Optional[int]:
        """
        [int] ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
        """
        return pulumi.get(self, "client_timeout")

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[int]:
        """
        [int] It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter
    def retries(self) -> Optional[int]:
        """
        [int] Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
        """
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="targetTimeout")
    def target_timeout(self) -> Optional[int]:
        """
        [int] TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
        """
        return pulumi.get(self, "target_timeout")


@pulumi.output_type
class ForwardingRuleTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"
        elif key == "proxyProtocol":
            suggest = "proxy_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingRuleTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingRuleTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingRuleTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 port: int,
                 weight: int,
                 health_check: Optional['outputs.ForwardingRuleTargetHealthCheck'] = None,
                 proxy_protocol: Optional[str] = None):
        """
        :param str ip: [string] IP of a balanced target VM.
        :param int port: [int] Port of the balanced target service. (range: 1 to 65535).
        :param int weight: [int] Weight parameter is used to adjust the target VM's weight relative to other target VMs.
        :param 'ForwardingRuleTargetHealthCheckArgs' health_check: Health check attributes for Network Load Balancer forwarding rule target.
        :param str proxy_protocol: [string] The proxy protocol version. Accepted values are `none`, `v1`, `v2`, `v2ssl`. If unspecified, the default value of `none` is used.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if proxy_protocol is not None:
            pulumi.set(__self__, "proxy_protocol", proxy_protocol)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        [string] IP of a balanced target VM.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        [int] Port of the balanced target service. (range: 1 to 65535).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        [int] Weight parameter is used to adjust the target VM's weight relative to other target VMs.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional['outputs.ForwardingRuleTargetHealthCheck']:
        """
        Health check attributes for Network Load Balancer forwarding rule target.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> Optional[str]:
        """
        [string] The proxy protocol version. Accepted values are `none`, `v1`, `v2`, `v2ssl`. If unspecified, the default value of `none` is used.
        """
        return pulumi.get(self, "proxy_protocol")


@pulumi.output_type
class ForwardingRuleTargetHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkInterval":
            suggest = "check_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingRuleTargetHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingRuleTargetHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingRuleTargetHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check: Optional[bool] = None,
                 check_interval: Optional[int] = None,
                 maintenance: Optional[bool] = None):
        """
        :param bool check: [boolean] Check specifies whether the target VM's health is checked.
        :param int check_interval: [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
        :param bool maintenance: [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
        """
        if check is not None:
            pulumi.set(__self__, "check", check)
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if maintenance is not None:
            pulumi.set(__self__, "maintenance", maintenance)

    @property
    @pulumi.getter
    def check(self) -> Optional[bool]:
        """
        [boolean] Check specifies whether the target VM's health is checked.
        """
        return pulumi.get(self, "check")

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[int]:
        """
        [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
        """
        return pulumi.get(self, "check_interval")

    @property
    @pulumi.getter
    def maintenance(self) -> Optional[bool]:
        """
        [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
        """
        return pulumi.get(self, "maintenance")


@pulumi.output_type
class GetBalancerFlowlogResult(dict):
    def __init__(__self__, *,
                 action: str,
                 bucket: str,
                 direction: str,
                 id: str,
                 name: str):
        """
        :param str action: Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        :param str bucket: Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        :param str direction: Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        :param str id: ID of the network load balancer you want to search for.
               
               `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
        :param str name: Name of an existing network load balancer that you want to search for.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the network load balancer you want to search for.

        `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an existing network load balancer that you want to search for.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingRuleHealthCheckResult(dict):
    def __init__(__self__, *,
                 client_timeout: int,
                 connect_timeout: int,
                 retries: int,
                 target_timeout: int):
        """
        :param int client_timeout: ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
        :param int connect_timeout: It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
        :param int retries: Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
        :param int target_timeout: TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
        """
        pulumi.set(__self__, "client_timeout", client_timeout)
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "retries", retries)
        pulumi.set(__self__, "target_timeout", target_timeout)

    @property
    @pulumi.getter(name="clientTimeout")
    def client_timeout(self) -> int:
        """
        ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
        """
        return pulumi.get(self, "client_timeout")

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> int:
        """
        It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter
    def retries(self) -> int:
        """
        Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
        """
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="targetTimeout")
    def target_timeout(self) -> int:
        """
        TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
        """
        return pulumi.get(self, "target_timeout")


@pulumi.output_type
class GetForwardingRuleTargetResult(dict):
    def __init__(__self__, *,
                 health_checks: Sequence['outputs.GetForwardingRuleTargetHealthCheckResult'],
                 ip: str,
                 port: int,
                 proxy_protocol: str,
                 weight: int):
        """
        :param Sequence['GetForwardingRuleTargetHealthCheckArgs'] health_checks: Health check attributes for Network Load Balancer forwarding rule target.
        :param str ip: IP of a balanced target VM.
        :param int port: Port of the balanced target service. (range: 1 to 65535).
        :param str proxy_protocol: The proxy protocol version.
        :param int weight: Weight parameter is used to adjust the target VM's weight relative to other target VMs.
        """
        pulumi.set(__self__, "health_checks", health_checks)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "proxy_protocol", proxy_protocol)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetForwardingRuleTargetHealthCheckResult']:
        """
        Health check attributes for Network Load Balancer forwarding rule target.
        """
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP of a balanced target VM.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port of the balanced target service. (range: 1 to 65535).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> str:
        """
        The proxy protocol version.
        """
        return pulumi.get(self, "proxy_protocol")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight parameter is used to adjust the target VM's weight relative to other target VMs.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetForwardingRuleTargetHealthCheckResult(dict):
    def __init__(__self__, *,
                 check: bool,
                 check_interval: int,
                 maintenance: bool):
        """
        :param bool check: Check specifies whether the target VM's health is checked.
        :param int check_interval: CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
        :param bool maintenance: Maintenance specifies if a target VM should be marked as down, even if it is not.
        """
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "maintenance", maintenance)

    @property
    @pulumi.getter
    def check(self) -> bool:
        """
        Check specifies whether the target VM's health is checked.
        """
        return pulumi.get(self, "check")

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> int:
        """
        CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
        """
        return pulumi.get(self, "check_interval")

    @property
    @pulumi.getter
    def maintenance(self) -> bool:
        """
        Maintenance specifies if a target VM should be marked as down, even if it is not.
        """
        return pulumi.get(self, "maintenance")


