# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BalancerFlowlogArgs',
    'BalancerFlowlogArgsDict',
    'ForwardingRuleHealthCheckArgs',
    'ForwardingRuleHealthCheckArgsDict',
    'ForwardingRuleTargetArgs',
    'ForwardingRuleTargetArgsDict',
    'ForwardingRuleTargetHealthCheckArgs',
    'ForwardingRuleTargetHealthCheckArgsDict',
]

MYPY = False

if not MYPY:
    class BalancerFlowlogArgsDict(TypedDict):
        action: pulumi.Input[str]
        """
        [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        """
        bucket: pulumi.Input[str]
        """
        [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        """
        direction: pulumi.Input[str]
        """
        [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        """
        name: pulumi.Input[str]
        """
        [string] Specifies the name of the flow log.

        ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the network load balancer resource.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The resource's unique identifier.
        """
elif False:
    BalancerFlowlogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BalancerFlowlogArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 bucket: pulumi.Input[str],
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        :param pulumi.Input[str] bucket: [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        :param pulumi.Input[str] direction: [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        :param pulumi.Input[str] name: [string] Specifies the name of the flow log.
               
               ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the network load balancer resource.
        :param pulumi.Input[str] id: The resource's unique identifier.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        [string] Specifies the name of the flow log.

        ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the network load balancer resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource's unique identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ForwardingRuleHealthCheckArgsDict(TypedDict):
        client_timeout: NotRequired[pulumi.Input[int]]
        """
        [int] ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
        """
        connect_timeout: NotRequired[pulumi.Input[int]]
        """
        [int] It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
        """
        retries: NotRequired[pulumi.Input[int]]
        """
        [int] Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
        """
        target_timeout: NotRequired[pulumi.Input[int]]
        """
        [int] TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
        """
elif False:
    ForwardingRuleHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ForwardingRuleHealthCheckArgs:
    def __init__(__self__, *,
                 client_timeout: Optional[pulumi.Input[int]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 target_timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] client_timeout: [int] ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
        :param pulumi.Input[int] connect_timeout: [int] It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
        :param pulumi.Input[int] retries: [int] Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
        :param pulumi.Input[int] target_timeout: [int] TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
        """
        if client_timeout is not None:
            pulumi.set(__self__, "client_timeout", client_timeout)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if target_timeout is not None:
            pulumi.set(__self__, "target_timeout", target_timeout)

    @property
    @pulumi.getter(name="clientTimeout")
    def client_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        [int] ClientTimeout is expressed in milliseconds. This inactivity timeout applies when the client is expected to acknowledge or send data. If unset the default of 50 seconds will be used.
        """
        return pulumi.get(self, "client_timeout")

    @client_timeout.setter
    def client_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_timeout", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        [int] It specifies the maximum time (in milliseconds) to wait for a connection attempt to a target VM to succeed. If unset, the default of 5 seconds will be used.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        [int] Retries specifies the number of retries to perform on a target VM after a connection failure. If unset, the default value of 3 will be used.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter(name="targetTimeout")
    def target_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        [int] TargetTimeout specifies the maximum inactivity time (in milliseconds) on the target VM side. If unset, the default of 50 seconds will be used.
        """
        return pulumi.get(self, "target_timeout")

    @target_timeout.setter
    def target_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_timeout", value)


if not MYPY:
    class ForwardingRuleTargetArgsDict(TypedDict):
        ip: pulumi.Input[str]
        """
        [string] IP of a balanced target VM.
        """
        port: pulumi.Input[int]
        """
        [int] Port of the balanced target service. (range: 1 to 65535).
        """
        weight: pulumi.Input[int]
        """
        [int] Weight parameter is used to adjust the target VM's weight relative to other target VMs.
        """
        health_check: NotRequired[pulumi.Input['ForwardingRuleTargetHealthCheckArgsDict']]
        """
        Health check attributes for Network Load Balancer forwarding rule target.
        """
        proxy_protocol: NotRequired[pulumi.Input[str]]
        """
        [string] The proxy protocol version. Accepted values are `none`, `v1`, `v2`, `v2ssl`. If unspecified, the default value of `none` is used.
        """
elif False:
    ForwardingRuleTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ForwardingRuleTargetArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 port: pulumi.Input[int],
                 weight: pulumi.Input[int],
                 health_check: Optional[pulumi.Input['ForwardingRuleTargetHealthCheckArgs']] = None,
                 proxy_protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: [string] IP of a balanced target VM.
        :param pulumi.Input[int] port: [int] Port of the balanced target service. (range: 1 to 65535).
        :param pulumi.Input[int] weight: [int] Weight parameter is used to adjust the target VM's weight relative to other target VMs.
        :param pulumi.Input['ForwardingRuleTargetHealthCheckArgs'] health_check: Health check attributes for Network Load Balancer forwarding rule target.
        :param pulumi.Input[str] proxy_protocol: [string] The proxy protocol version. Accepted values are `none`, `v1`, `v2`, `v2ssl`. If unspecified, the default value of `none` is used.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if proxy_protocol is not None:
            pulumi.set(__self__, "proxy_protocol", proxy_protocol)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        [string] IP of a balanced target VM.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        [int] Port of the balanced target service. (range: 1 to 65535).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        [int] Weight parameter is used to adjust the target VM's weight relative to other target VMs.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['ForwardingRuleTargetHealthCheckArgs']]:
        """
        Health check attributes for Network Load Balancer forwarding rule target.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['ForwardingRuleTargetHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The proxy protocol version. Accepted values are `none`, `v1`, `v2`, `v2ssl`. If unspecified, the default value of `none` is used.
        """
        return pulumi.get(self, "proxy_protocol")

    @proxy_protocol.setter
    def proxy_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_protocol", value)


if not MYPY:
    class ForwardingRuleTargetHealthCheckArgsDict(TypedDict):
        check: NotRequired[pulumi.Input[bool]]
        """
        [boolean] Check specifies whether the target VM's health is checked.
        """
        check_interval: NotRequired[pulumi.Input[int]]
        """
        [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
        """
        maintenance: NotRequired[pulumi.Input[bool]]
        """
        [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
        """
elif False:
    ForwardingRuleTargetHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ForwardingRuleTargetHealthCheckArgs:
    def __init__(__self__, *,
                 check: Optional[pulumi.Input[bool]] = None,
                 check_interval: Optional[pulumi.Input[int]] = None,
                 maintenance: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] check: [boolean] Check specifies whether the target VM's health is checked.
        :param pulumi.Input[int] check_interval: [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
        :param pulumi.Input[bool] maintenance: [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
        """
        if check is not None:
            pulumi.set(__self__, "check", check)
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if maintenance is not None:
            pulumi.set(__self__, "maintenance", maintenance)

    @property
    @pulumi.getter
    def check(self) -> Optional[pulumi.Input[bool]]:
        """
        [boolean] Check specifies whether the target VM's health is checked.
        """
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "check", value)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[pulumi.Input[int]]:
        """
        [int] CheckInterval determines the duration (in milliseconds) between consecutive health checks. If unspecified a default of 2000 ms is used.
        """
        return pulumi.get(self, "check_interval")

    @check_interval.setter
    def check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "check_interval", value)

    @property
    @pulumi.getter
    def maintenance(self) -> Optional[pulumi.Input[bool]]:
        """
        [boolean] Maintenance specifies if a target VM should be marked as down, even if it is not.
        """
        return pulumi.get(self, "maintenance")

    @maintenance.setter
    def maintenance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "maintenance", value)


