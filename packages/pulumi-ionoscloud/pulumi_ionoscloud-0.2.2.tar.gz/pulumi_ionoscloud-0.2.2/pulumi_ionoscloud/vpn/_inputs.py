# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'IpsecGatewayConnectionArgs',
    'IpsecGatewayConnectionArgsDict',
    'IpsecGatewayMaintenanceWindowArgs',
    'IpsecGatewayMaintenanceWindowArgsDict',
    'IpsecTunnelAuthArgs',
    'IpsecTunnelAuthArgsDict',
    'IpsecTunnelEspArgs',
    'IpsecTunnelEspArgsDict',
    'IpsecTunnelIkeArgs',
    'IpsecTunnelIkeArgsDict',
    'WireguardGatewayConnectionArgs',
    'WireguardGatewayConnectionArgsDict',
    'WireguardGatewayMaintenanceWindowArgs',
    'WireguardGatewayMaintenanceWindowArgsDict',
    'WireguardPeerEndpointArgs',
    'WireguardPeerEndpointArgsDict',
]

MYPY = False

if not MYPY:
    class IpsecGatewayConnectionArgsDict(TypedDict):
        datacenter_id: pulumi.Input[str]
        """
        [string] The datacenter to connect your VPN Gateway to.
        """
        ipv4_cidr: pulumi.Input[str]
        """
        [string] Describes the private ipv4 subnet in your LAN that should be accessible by the
        VPN Gateway. Note: this should be the subnet already assigned to the LAN
        """
        lan_id: pulumi.Input[str]
        """
        [string] The numeric LAN ID to connect your VPN Gateway to.
        """
        ipv6_cidr: NotRequired[pulumi.Input[str]]
        """
        [string] Describes the ipv6 subnet in your LAN that should be accessible by the VPN
        Gateway. **Note**: this should be the subnet already assigned to the LAN
        """
elif False:
    IpsecGatewayConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecGatewayConnectionArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 ipv4_cidr: pulumi.Input[str],
                 lan_id: pulumi.Input[str],
                 ipv6_cidr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datacenter_id: [string] The datacenter to connect your VPN Gateway to.
        :param pulumi.Input[str] ipv4_cidr: [string] Describes the private ipv4 subnet in your LAN that should be accessible by the
               VPN Gateway. Note: this should be the subnet already assigned to the LAN
        :param pulumi.Input[str] lan_id: [string] The numeric LAN ID to connect your VPN Gateway to.
        :param pulumi.Input[str] ipv6_cidr: [string] Describes the ipv6 subnet in your LAN that should be accessible by the VPN
               Gateway. **Note**: this should be the subnet already assigned to the LAN
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "ipv4_cidr", ipv4_cidr)
        pulumi.set(__self__, "lan_id", lan_id)
        if ipv6_cidr is not None:
            pulumi.set(__self__, "ipv6_cidr", ipv6_cidr)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] The datacenter to connect your VPN Gateway to.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="ipv4Cidr")
    def ipv4_cidr(self) -> pulumi.Input[str]:
        """
        [string] Describes the private ipv4 subnet in your LAN that should be accessible by the
        VPN Gateway. Note: this should be the subnet already assigned to the LAN
        """
        return pulumi.get(self, "ipv4_cidr")

    @ipv4_cidr.setter
    def ipv4_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv4_cidr", value)

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> pulumi.Input[str]:
        """
        [string] The numeric LAN ID to connect your VPN Gateway to.
        """
        return pulumi.get(self, "lan_id")

    @lan_id.setter
    def lan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "lan_id", value)

    @property
    @pulumi.getter(name="ipv6Cidr")
    def ipv6_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Describes the ipv6 subnet in your LAN that should be accessible by the VPN
        Gateway. **Note**: this should be the subnet already assigned to the LAN
        """
        return pulumi.get(self, "ipv6_cidr")

    @ipv6_cidr.setter
    def ipv6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr", value)


if not MYPY:
    class IpsecGatewayMaintenanceWindowArgsDict(TypedDict):
        day_of_the_week: pulumi.Input[str]
        """
        [string] The name of the week day.
        """
        time: pulumi.Input[str]
        """
        [string] Start of the maintenance window in UTC time.
        """
elif False:
    IpsecGatewayMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecGatewayMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day_of_the_week: pulumi.Input[str],
                 time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] day_of_the_week: [string] The name of the week day.
        :param pulumi.Input[str] time: [string] Start of the maintenance window in UTC time.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> pulumi.Input[str]:
        """
        [string] The name of the week day.
        """
        return pulumi.get(self, "day_of_the_week")

    @day_of_the_week.setter
    def day_of_the_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_the_week", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        [string] Start of the maintenance window in UTC time.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


if not MYPY:
    class IpsecTunnelAuthArgsDict(TypedDict):
        method: NotRequired[pulumi.Input[str]]
        """
        [string] The authentication method to use for IPSec Authentication. Possible values: `PSK`.
        Default value: `PSK`.
        """
        psk_key: NotRequired[pulumi.Input[str]]
        """
        [string] The pre-shared key to use for IPSec Authentication. **Note**: Required if method is
        PSK.
        """
elif False:
    IpsecTunnelAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelAuthArgs:
    def __init__(__self__, *,
                 method: Optional[pulumi.Input[str]] = None,
                 psk_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] method: [string] The authentication method to use for IPSec Authentication. Possible values: `PSK`.
               Default value: `PSK`.
        :param pulumi.Input[str] psk_key: [string] The pre-shared key to use for IPSec Authentication. **Note**: Required if method is
               PSK.
        """
        if method is not None:
            pulumi.set(__self__, "method", method)
        if psk_key is not None:
            pulumi.set(__self__, "psk_key", psk_key)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The authentication method to use for IPSec Authentication. Possible values: `PSK`.
        Default value: `PSK`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="pskKey")
    def psk_key(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The pre-shared key to use for IPSec Authentication. **Note**: Required if method is
        PSK.
        """
        return pulumi.get(self, "psk_key")

    @psk_key.setter
    def psk_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psk_key", value)


if not MYPY:
    class IpsecTunnelEspArgsDict(TypedDict):
        diffie_hellman_group: NotRequired[pulumi.Input[str]]
        """
        [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
        values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
        Default value: `16-MODP4096`.
        """
        encryption_algorithm: NotRequired[pulumi.Input[str]]
        """
        [string] The encryption algorithm to use for IPSec Encryption. Possible
        values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
        `AES256-CCM-12`. Default value: `AES256`.
        """
        integrity_algorithm: NotRequired[pulumi.Input[str]]
        """
        [string] The integrity algorithm to use for IPSec Encryption. Possible
        values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
        """
        lifetime: NotRequired[pulumi.Input[int]]
        """
        [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
        Default value: `86400`.
        """
elif False:
    IpsecTunnelEspArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelEspArgs:
    def __init__(__self__, *,
                 diffie_hellman_group: Optional[pulumi.Input[str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 integrity_algorithm: Optional[pulumi.Input[str]] = None,
                 lifetime: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] diffie_hellman_group: [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
               values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
               Default value: `16-MODP4096`.
        :param pulumi.Input[str] encryption_algorithm: [string] The encryption algorithm to use for IPSec Encryption. Possible
               values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
               `AES256-CCM-12`. Default value: `AES256`.
        :param pulumi.Input[str] integrity_algorithm: [string] The integrity algorithm to use for IPSec Encryption. Possible
               values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
        :param pulumi.Input[int] lifetime: [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
               Default value: `86400`.
        """
        if diffie_hellman_group is not None:
            pulumi.set(__self__, "diffie_hellman_group", diffie_hellman_group)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if integrity_algorithm is not None:
            pulumi.set(__self__, "integrity_algorithm", integrity_algorithm)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)

    @property
    @pulumi.getter(name="diffieHellmanGroup")
    def diffie_hellman_group(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
        values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
        Default value: `16-MODP4096`.
        """
        return pulumi.get(self, "diffie_hellman_group")

    @diffie_hellman_group.setter
    def diffie_hellman_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffie_hellman_group", value)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The encryption algorithm to use for IPSec Encryption. Possible
        values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
        `AES256-CCM-12`. Default value: `AES256`.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @property
    @pulumi.getter(name="integrityAlgorithm")
    def integrity_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The integrity algorithm to use for IPSec Encryption. Possible
        values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
        """
        return pulumi.get(self, "integrity_algorithm")

    @integrity_algorithm.setter
    def integrity_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integrity_algorithm", value)

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
        Default value: `86400`.
        """
        return pulumi.get(self, "lifetime")

    @lifetime.setter
    def lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lifetime", value)


if not MYPY:
    class IpsecTunnelIkeArgsDict(TypedDict):
        diffie_hellman_group: NotRequired[pulumi.Input[str]]
        """
        [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
        values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
        Default value: `16-MODP4096`.
        """
        encryption_algorithm: NotRequired[pulumi.Input[str]]
        """
        [string] The encryption algorithm to use for IPSec Encryption. Possible
        values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
        `AES256-CCM-12`. Default value: `AES256`.
        """
        integrity_algorithm: NotRequired[pulumi.Input[str]]
        """
        [string] The integrity algorithm to use for IPSec Encryption. Possible
        values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
        """
        lifetime: NotRequired[pulumi.Input[int]]
        """
        [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
        Default value: `86400`.
        """
elif False:
    IpsecTunnelIkeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpsecTunnelIkeArgs:
    def __init__(__self__, *,
                 diffie_hellman_group: Optional[pulumi.Input[str]] = None,
                 encryption_algorithm: Optional[pulumi.Input[str]] = None,
                 integrity_algorithm: Optional[pulumi.Input[str]] = None,
                 lifetime: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] diffie_hellman_group: [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
               values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
               Default value: `16-MODP4096`.
        :param pulumi.Input[str] encryption_algorithm: [string] The encryption algorithm to use for IPSec Encryption. Possible
               values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
               `AES256-CCM-12`. Default value: `AES256`.
        :param pulumi.Input[str] integrity_algorithm: [string] The integrity algorithm to use for IPSec Encryption. Possible
               values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
        :param pulumi.Input[int] lifetime: [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
               Default value: `86400`.
        """
        if diffie_hellman_group is not None:
            pulumi.set(__self__, "diffie_hellman_group", diffie_hellman_group)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if integrity_algorithm is not None:
            pulumi.set(__self__, "integrity_algorithm", integrity_algorithm)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)

    @property
    @pulumi.getter(name="diffieHellmanGroup")
    def diffie_hellman_group(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The Diffie-Hellman Group to use for IPSec Encryption. Possible
        values: `15-MODP3072`, `16-MODP4096`, `19-ECP256`, `20-ECP384`, `21-ECP521`, `28-ECP256BP`, `29-ECP384BP`, `30-ECP512BP`.
        Default value: `16-MODP4096`.
        """
        return pulumi.get(self, "diffie_hellman_group")

    @diffie_hellman_group.setter
    def diffie_hellman_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffie_hellman_group", value)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The encryption algorithm to use for IPSec Encryption. Possible
        values: `AES128`, `AES256`, `AES128-CTR`, `AES256-CTR`, `AES128-GCM-16`, `AES256-GCM-16`, `AES128-GCM-12`, `AES256-GCM-12`, `AES128-CCM-12`,
        `AES256-CCM-12`. Default value: `AES256`.
        """
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_algorithm", value)

    @property
    @pulumi.getter(name="integrityAlgorithm")
    def integrity_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The integrity algorithm to use for IPSec Encryption. Possible
        values: `SHA256`, `SHA384`, `SHA512`, `AES-XCBC`. Default value: `SHA256`.
        """
        return pulumi.get(self, "integrity_algorithm")

    @integrity_algorithm.setter
    def integrity_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integrity_algorithm", value)

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        [string] The phase lifetime in seconds. Minimum value: `3600`. Maximum value: `86400`.
        Default value: `86400`.
        """
        return pulumi.get(self, "lifetime")

    @lifetime.setter
    def lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lifetime", value)


if not MYPY:
    class WireguardGatewayConnectionArgsDict(TypedDict):
        datacenter_id: pulumi.Input[str]
        """
        [String] The ID of the datacenter where the WireGuard Gateway is located.
        """
        lan_id: pulumi.Input[str]
        """
        [String] The ID of the LAN where the WireGuard Gateway is connected.
        """
        ipv4_cidr: NotRequired[pulumi.Input[str]]
        """
        [String] The IPv4 CIDR for the WireGuard Gateway connection.
        """
        ipv6_cidr: NotRequired[pulumi.Input[str]]
        """
        [String] The IPv6 CIDR for the WireGuard Gateway connection.
        """
elif False:
    WireguardGatewayConnectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WireguardGatewayConnectionArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 lan_id: pulumi.Input[str],
                 ipv4_cidr: Optional[pulumi.Input[str]] = None,
                 ipv6_cidr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datacenter_id: [String] The ID of the datacenter where the WireGuard Gateway is located.
        :param pulumi.Input[str] lan_id: [String] The ID of the LAN where the WireGuard Gateway is connected.
        :param pulumi.Input[str] ipv4_cidr: [String] The IPv4 CIDR for the WireGuard Gateway connection.
        :param pulumi.Input[str] ipv6_cidr: [String] The IPv6 CIDR for the WireGuard Gateway connection.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)
        if ipv4_cidr is not None:
            pulumi.set(__self__, "ipv4_cidr", ipv4_cidr)
        if ipv6_cidr is not None:
            pulumi.set(__self__, "ipv6_cidr", ipv6_cidr)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [String] The ID of the datacenter where the WireGuard Gateway is located.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> pulumi.Input[str]:
        """
        [String] The ID of the LAN where the WireGuard Gateway is connected.
        """
        return pulumi.get(self, "lan_id")

    @lan_id.setter
    def lan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "lan_id", value)

    @property
    @pulumi.getter(name="ipv4Cidr")
    def ipv4_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        [String] The IPv4 CIDR for the WireGuard Gateway connection.
        """
        return pulumi.get(self, "ipv4_cidr")

    @ipv4_cidr.setter
    def ipv4_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_cidr", value)

    @property
    @pulumi.getter(name="ipv6Cidr")
    def ipv6_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        [String] The IPv6 CIDR for the WireGuard Gateway connection.
        """
        return pulumi.get(self, "ipv6_cidr")

    @ipv6_cidr.setter
    def ipv6_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr", value)


if not MYPY:
    class WireguardGatewayMaintenanceWindowArgsDict(TypedDict):
        day_of_the_week: pulumi.Input[str]
        """
        [string] The name of the week day.
        """
        time: pulumi.Input[str]
        """
        [string] Start of the maintenance window in UTC time.
        """
elif False:
    WireguardGatewayMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WireguardGatewayMaintenanceWindowArgs:
    def __init__(__self__, *,
                 day_of_the_week: pulumi.Input[str],
                 time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] day_of_the_week: [string] The name of the week day.
        :param pulumi.Input[str] time: [string] Start of the maintenance window in UTC time.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> pulumi.Input[str]:
        """
        [string] The name of the week day.
        """
        return pulumi.get(self, "day_of_the_week")

    @day_of_the_week.setter
    def day_of_the_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_the_week", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        [string] Start of the maintenance window in UTC time.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


if not MYPY:
    class WireguardPeerEndpointArgsDict(TypedDict):
        host: pulumi.Input[str]
        """
        [string] The hostname or IPV4 address that the WireGuard Server will connect to.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        [int] The port that the WireGuard Server will connect to. Defaults to `51820`.
        """
elif False:
    WireguardPeerEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WireguardPeerEndpointArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: [string] The hostname or IPV4 address that the WireGuard Server will connect to.
        :param pulumi.Input[int] port: [int] The port that the WireGuard Server will connect to. Defaults to `51820`.
        """
        pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        [string] The hostname or IPV4 address that the WireGuard Server will connect to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The port that the WireGuard Server will connect to. Defaults to `51820`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


