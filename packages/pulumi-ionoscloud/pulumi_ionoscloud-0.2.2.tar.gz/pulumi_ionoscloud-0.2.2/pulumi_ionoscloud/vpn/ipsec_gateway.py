# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IpsecGatewayArgs', 'IpsecGateway']

@pulumi.input_type
class IpsecGatewayArgs:
    def __init__(__self__, *,
                 connections: pulumi.Input[Sequence[pulumi.Input['IpsecGatewayConnectionArgs']]],
                 gateway_ip: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['IpsecGatewayMaintenanceWindowArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IpsecGateway resource.
        :param pulumi.Input[Sequence[pulumi.Input['IpsecGatewayConnectionArgs']]] connections: [list] The network connection for your gateway. **Note**: all connections must belong to the
               same datacenter. Minimum items: 1. Maximum items: 10.
        :param pulumi.Input[str] gateway_ip: [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
               the same datacenter as the connections.
        :param pulumi.Input[str] description: [string] The human-readable description of the IPSec Gateway.
        :param pulumi.Input[str] location: [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
               gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        :param pulumi.Input['IpsecGatewayMaintenanceWindowArgs'] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] name: [string] The name of the IPSec Gateway.
        :param pulumi.Input[str] tier: (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        :param pulumi.Input[str] version: [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
               values: `IKEv2`.
        """
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Input[Sequence[pulumi.Input['IpsecGatewayConnectionArgs']]]:
        """
        [list] The network connection for your gateway. **Note**: all connections must belong to the
        same datacenter. Minimum items: 1. Maximum items: 10.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: pulumi.Input[Sequence[pulumi.Input['IpsecGatewayConnectionArgs']]]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Input[str]:
        """
        [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
        the same datacenter as the connections.
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The human-readable description of the IPSec Gateway.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
        gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['IpsecGatewayMaintenanceWindowArgs']]:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['IpsecGatewayMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the IPSec Gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
        values: `IKEv2`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _IpsecGatewayState:
    def __init__(__self__, *,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input['IpsecGatewayConnectionArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['IpsecGatewayMaintenanceWindowArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IpsecGateway resources.
        :param pulumi.Input[Sequence[pulumi.Input['IpsecGatewayConnectionArgs']]] connections: [list] The network connection for your gateway. **Note**: all connections must belong to the
               same datacenter. Minimum items: 1. Maximum items: 10.
        :param pulumi.Input[str] description: [string] The human-readable description of the IPSec Gateway.
        :param pulumi.Input[str] gateway_ip: [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
               the same datacenter as the connections.
        :param pulumi.Input[str] location: [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
               gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        :param pulumi.Input['IpsecGatewayMaintenanceWindowArgs'] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] name: [string] The name of the IPSec Gateway.
        :param pulumi.Input[str] tier: (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        :param pulumi.Input[str] version: [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
               values: `IKEv2`.
        """
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsecGatewayConnectionArgs']]]]:
        """
        [list] The network connection for your gateway. **Note**: all connections must belong to the
        same datacenter. Minimum items: 1. Maximum items: 10.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsecGatewayConnectionArgs']]]]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The human-readable description of the IPSec Gateway.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
        the same datacenter as the connections.
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
        gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['IpsecGatewayMaintenanceWindowArgs']]:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['IpsecGatewayMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the IPSec Gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
        values: `IKEv2`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class IpsecGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpsecGatewayConnectionArgs', 'IpsecGatewayConnectionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['IpsecGatewayMaintenanceWindowArgs', 'IpsecGatewayMaintenanceWindowArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        An IPSec Gateway resource manages the creation, management, and deletion of VPN IPSec Gateways within the IONOS Cloud
        infrastructure. This resource facilitates the creation of VPN IPSec Gateways, enabling secure connections between your
        network resources.

        ## Usage example

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        # Basic example
        test_datacenter = ionoscloud.compute.Datacenter("test_datacenter",
            name="test_vpn_gateway_basic",
            location="de/fra")
        test_lan = ionoscloud.compute.Lan("test_lan",
            name="test_lan_basic",
            public=False,
            datacenter_id=test_datacenter.id)
        test_ipblock = ionoscloud.compute.IPBlock("test_ipblock",
            name="test_ipblock_basic",
            location="de/fra",
            size=1)
        example = ionoscloud.vpn.IpsecGateway("example",
            name="ipsec_gateway_basic",
            location="de/fra",
            gateway_ip=test_ipblock.ips[0],
            version="IKEv2",
            description="This gateway connects site A to VDC X.",
            connections=[{
                "datacenter_id": test_datacenter.id,
                "lan_id": test_lan.id,
                "ipv4_cidr": "192.168.100.10/24",
            }])
        ```

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        # Complete example
        test_datacenter = ionoscloud.compute.Datacenter("test_datacenter",
            name="vpn_gateway_test",
            location="de/fra")
        test_lan = ionoscloud.compute.Lan("test_lan",
            name="test_lan",
            public=False,
            datacenter_id=test_datacenter.id,
            ipv6_cidr_block=lan_ipv6_cidr_block)
        test_ipblock = ionoscloud.compute.IPBlock("test_ipblock",
            name="test_ipblock",
            location="de/fra",
            size=1)
        server_image_password = random.index.Password("server_image_password",
            length=16,
            special=False)
        test_server = ionoscloud.compute.Server("test_server",
            name="test_server",
            datacenter_id=test_datacenter.id,
            cores=1,
            ram=2048,
            image_name="ubuntu:latest",
            image_password=server_image_password["result"],
            nic={
                "lan": test_lan.id,
                "name": "test_nic",
                "dhcp": True,
                "dhcpv6": False,
                "ipv6_cidr_block": ipv6_cidr_block,
                "firewall_active": False,
            },
            volume={
                "name": "test_volume",
                "disk_type": "HDD",
                "size": 10,
                "licence_type": "OTHER",
            })
        example = ionoscloud.vpn.IpsecGateway("example",
            name="ipsec-gateway",
            location="de/fra",
            gateway_ip=test_ipblock.ips[0],
            version="IKEv2",
            description="This gateway connects site A to VDC X.",
            connections=[{
                "datacenter_id": test_datacenter.id,
                "lan_id": test_lan.id,
                "ipv4_cidr": "ipv4_cidr_block_from_nic",
                "ipv6_cidr": "ipv6_cidr_block_from_dc",
            }],
            maintenance_window={
                "day_of_the_week": "Monday",
                "time": "09:00:00",
            },
            tier="STANDARD")
        ```

        ## Import

        The resource can be imported using the `location` and `gateway_id`, for example:

        ```sh
        $ pulumi import ionoscloud:vpn/ipsecGateway:IpsecGateway example location:gateway_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IpsecGatewayConnectionArgs', 'IpsecGatewayConnectionArgsDict']]]] connections: [list] The network connection for your gateway. **Note**: all connections must belong to the
               same datacenter. Minimum items: 1. Maximum items: 10.
        :param pulumi.Input[str] description: [string] The human-readable description of the IPSec Gateway.
        :param pulumi.Input[str] gateway_ip: [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
               the same datacenter as the connections.
        :param pulumi.Input[str] location: [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
               gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        :param pulumi.Input[Union['IpsecGatewayMaintenanceWindowArgs', 'IpsecGatewayMaintenanceWindowArgsDict']] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] name: [string] The name of the IPSec Gateway.
        :param pulumi.Input[str] tier: (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        :param pulumi.Input[str] version: [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
               values: `IKEv2`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpsecGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An IPSec Gateway resource manages the creation, management, and deletion of VPN IPSec Gateways within the IONOS Cloud
        infrastructure. This resource facilitates the creation of VPN IPSec Gateways, enabling secure connections between your
        network resources.

        ## Usage example

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        # Basic example
        test_datacenter = ionoscloud.compute.Datacenter("test_datacenter",
            name="test_vpn_gateway_basic",
            location="de/fra")
        test_lan = ionoscloud.compute.Lan("test_lan",
            name="test_lan_basic",
            public=False,
            datacenter_id=test_datacenter.id)
        test_ipblock = ionoscloud.compute.IPBlock("test_ipblock",
            name="test_ipblock_basic",
            location="de/fra",
            size=1)
        example = ionoscloud.vpn.IpsecGateway("example",
            name="ipsec_gateway_basic",
            location="de/fra",
            gateway_ip=test_ipblock.ips[0],
            version="IKEv2",
            description="This gateway connects site A to VDC X.",
            connections=[{
                "datacenter_id": test_datacenter.id,
                "lan_id": test_lan.id,
                "ipv4_cidr": "192.168.100.10/24",
            }])
        ```

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        # Complete example
        test_datacenter = ionoscloud.compute.Datacenter("test_datacenter",
            name="vpn_gateway_test",
            location="de/fra")
        test_lan = ionoscloud.compute.Lan("test_lan",
            name="test_lan",
            public=False,
            datacenter_id=test_datacenter.id,
            ipv6_cidr_block=lan_ipv6_cidr_block)
        test_ipblock = ionoscloud.compute.IPBlock("test_ipblock",
            name="test_ipblock",
            location="de/fra",
            size=1)
        server_image_password = random.index.Password("server_image_password",
            length=16,
            special=False)
        test_server = ionoscloud.compute.Server("test_server",
            name="test_server",
            datacenter_id=test_datacenter.id,
            cores=1,
            ram=2048,
            image_name="ubuntu:latest",
            image_password=server_image_password["result"],
            nic={
                "lan": test_lan.id,
                "name": "test_nic",
                "dhcp": True,
                "dhcpv6": False,
                "ipv6_cidr_block": ipv6_cidr_block,
                "firewall_active": False,
            },
            volume={
                "name": "test_volume",
                "disk_type": "HDD",
                "size": 10,
                "licence_type": "OTHER",
            })
        example = ionoscloud.vpn.IpsecGateway("example",
            name="ipsec-gateway",
            location="de/fra",
            gateway_ip=test_ipblock.ips[0],
            version="IKEv2",
            description="This gateway connects site A to VDC X.",
            connections=[{
                "datacenter_id": test_datacenter.id,
                "lan_id": test_lan.id,
                "ipv4_cidr": "ipv4_cidr_block_from_nic",
                "ipv6_cidr": "ipv6_cidr_block_from_dc",
            }],
            maintenance_window={
                "day_of_the_week": "Monday",
                "time": "09:00:00",
            },
            tier="STANDARD")
        ```

        ## Import

        The resource can be imported using the `location` and `gateway_id`, for example:

        ```sh
        $ pulumi import ionoscloud:vpn/ipsecGateway:IpsecGateway example location:gateway_id
        ```

        :param str resource_name: The name of the resource.
        :param IpsecGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpsecGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpsecGatewayConnectionArgs', 'IpsecGatewayConnectionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['IpsecGatewayMaintenanceWindowArgs', 'IpsecGatewayMaintenanceWindowArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpsecGatewayArgs.__new__(IpsecGatewayArgs)

            if connections is None and not opts.urn:
                raise TypeError("Missing required property 'connections'")
            __props__.__dict__["connections"] = connections
            __props__.__dict__["description"] = description
            if gateway_ip is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_ip'")
            __props__.__dict__["gateway_ip"] = gateway_ip
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_window"] = maintenance_window
            __props__.__dict__["name"] = name
            __props__.__dict__["tier"] = tier
            __props__.__dict__["version"] = version
        super(IpsecGateway, __self__).__init__(
            'ionoscloud:vpn/ipsecGateway:IpsecGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IpsecGatewayConnectionArgs', 'IpsecGatewayConnectionArgsDict']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            gateway_ip: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maintenance_window: Optional[pulumi.Input[Union['IpsecGatewayMaintenanceWindowArgs', 'IpsecGatewayMaintenanceWindowArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            tier: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'IpsecGateway':
        """
        Get an existing IpsecGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IpsecGatewayConnectionArgs', 'IpsecGatewayConnectionArgsDict']]]] connections: [list] The network connection for your gateway. **Note**: all connections must belong to the
               same datacenter. Minimum items: 1. Maximum items: 10.
        :param pulumi.Input[str] description: [string] The human-readable description of the IPSec Gateway.
        :param pulumi.Input[str] gateway_ip: [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
               the same datacenter as the connections.
        :param pulumi.Input[str] location: [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
               gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        :param pulumi.Input[Union['IpsecGatewayMaintenanceWindowArgs', 'IpsecGatewayMaintenanceWindowArgsDict']] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] name: [string] The name of the IPSec Gateway.
        :param pulumi.Input[str] tier: (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        :param pulumi.Input[str] version: [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
               values: `IKEv2`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpsecGatewayState.__new__(_IpsecGatewayState)

        __props__.__dict__["connections"] = connections
        __props__.__dict__["description"] = description
        __props__.__dict__["gateway_ip"] = gateway_ip
        __props__.__dict__["location"] = location
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["name"] = name
        __props__.__dict__["tier"] = tier
        __props__.__dict__["version"] = version
        return IpsecGateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output[Sequence['outputs.IpsecGatewayConnection']]:
        """
        [list] The network connection for your gateway. **Note**: all connections must belong to the
        same datacenter. Minimum items: 1. Maximum items: 10.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The human-readable description of the IPSec Gateway.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> pulumi.Output[str]:
        """
        [string] Public IP address to be assigned to the gateway. Note: This must be an IP address in
        the same datacenter as the connections.
        """
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The location of the IPSec Gateway. Supported locations: de/fra, de/txl, es/vit,
        gb/bhx, gb/lhr, us/ewr, us/las, us/mci, fr/par.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.IpsecGatewayMaintenanceWindow']:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the IPSec Gateway.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> pulumi.Output[Optional[str]]:
        """
        (Computed)[string] Gateway performance options.  See product documentation for full details. Options: STANDARD, STANDARD_HA, ENHANCED, ENHANCED_HA, PREMIUM, PREMIUM_HA.
        """
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The IKE version that is permitted for the VPN tunnels. Default: `IKEv2`. Possible
        values: `IKEv2`.
        """
        return pulumi.get(self, "version")

