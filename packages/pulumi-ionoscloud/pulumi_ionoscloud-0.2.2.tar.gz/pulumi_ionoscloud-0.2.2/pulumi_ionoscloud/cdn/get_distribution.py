# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDistributionResult',
    'AwaitableGetDistributionResult',
    'get_distribution',
    'get_distribution_output',
]

@pulumi.output_type
class GetDistributionResult:
    """
    A collection of values returned by getDistribution.
    """
    def __init__(__self__, certificate_id=None, domain=None, id=None, partial_match=None, public_endpoint_v4=None, public_endpoint_v6=None, resource_urn=None, routing_rules=None):
        if certificate_id and not isinstance(certificate_id, str):
            raise TypeError("Expected argument 'certificate_id' to be a str")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if partial_match and not isinstance(partial_match, bool):
            raise TypeError("Expected argument 'partial_match' to be a bool")
        pulumi.set(__self__, "partial_match", partial_match)
        if public_endpoint_v4 and not isinstance(public_endpoint_v4, str):
            raise TypeError("Expected argument 'public_endpoint_v4' to be a str")
        pulumi.set(__self__, "public_endpoint_v4", public_endpoint_v4)
        if public_endpoint_v6 and not isinstance(public_endpoint_v6, str):
            raise TypeError("Expected argument 'public_endpoint_v6' to be a str")
        pulumi.set(__self__, "public_endpoint_v6", public_endpoint_v6)
        if resource_urn and not isinstance(resource_urn, str):
            raise TypeError("Expected argument 'resource_urn' to be a str")
        pulumi.set(__self__, "resource_urn", resource_urn)
        if routing_rules and not isinstance(routing_rules, list):
            raise TypeError("Expected argument 'routing_rules' to be a list")
        pulumi.set(__self__, "routing_rules", routing_rules)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        The ID of the certificate to use for the distribution. You can create certificates with the certificate resource.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The domain of the distribution.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="partialMatch")
    def partial_match(self) -> Optional[bool]:
        return pulumi.get(self, "partial_match")

    @property
    @pulumi.getter(name="publicEndpointV4")
    def public_endpoint_v4(self) -> str:
        """
        IP of the distribution, it has to be included on the domain DNS Zone as A record.
        """
        return pulumi.get(self, "public_endpoint_v4")

    @property
    @pulumi.getter(name="publicEndpointV6")
    def public_endpoint_v6(self) -> str:
        """
        IP of the distribution, it has to be included on the domain DNS Zone as AAAA record.
        """
        return pulumi.get(self, "public_endpoint_v6")

    @property
    @pulumi.getter(name="resourceUrn")
    def resource_urn(self) -> str:
        """
        Unique resource identifier.
        """
        return pulumi.get(self, "resource_urn")

    @property
    @pulumi.getter(name="routingRules")
    def routing_rules(self) -> Sequence['outputs.GetDistributionRoutingRuleResult']:
        """
        The routing rules for the distribution.
        """
        return pulumi.get(self, "routing_rules")


class AwaitableGetDistributionResult(GetDistributionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDistributionResult(
            certificate_id=self.certificate_id,
            domain=self.domain,
            id=self.id,
            partial_match=self.partial_match,
            public_endpoint_v4=self.public_endpoint_v4,
            public_endpoint_v6=self.public_endpoint_v6,
            resource_urn=self.resource_urn,
            routing_rules=self.routing_rules)


def get_distribution(domain: Optional[str] = None,
                     id: Optional[str] = None,
                     partial_match: Optional[bool] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDistributionResult:
    """
    The Distribution data source can be used to search for and return an existing Distributions.
    You can provide a string for the domain parameter which will be compared with provisioned Distributions.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search and make sure that your resources have unique domains.

    ## Example Usage

    ### By Id
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cdn.get_distribution(id="distr_id")
    ```

    ### By Domain
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cdn.get_distribution(domain="example.com")
    ```

    ### By Domain with Partial Match
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cdn.get_distribution(domain="example",
        partial_match=True)
    ```


    :param str domain: Domain of an existing distribution that you want to search for. Search by domain is case-insensitive. The whole resource domain is required if `partial_match` parameter is not set to true.
    :param str id: ID of the distribution you want to search for.
    :param bool partial_match: Whether partial matching is allowed or not when using domain argument. Default value is false.
           
           Either `domain` or `id` must be provided. If none, or both of `domain` and `id` are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['id'] = id
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:cdn/getDistribution:getDistribution', __args__, opts=opts, typ=GetDistributionResult).value

    return AwaitableGetDistributionResult(
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        partial_match=pulumi.get(__ret__, 'partial_match'),
        public_endpoint_v4=pulumi.get(__ret__, 'public_endpoint_v4'),
        public_endpoint_v6=pulumi.get(__ret__, 'public_endpoint_v6'),
        resource_urn=pulumi.get(__ret__, 'resource_urn'),
        routing_rules=pulumi.get(__ret__, 'routing_rules'))
def get_distribution_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                            id: Optional[pulumi.Input[Optional[str]]] = None,
                            partial_match: Optional[pulumi.Input[Optional[bool]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDistributionResult]:
    """
    The Distribution data source can be used to search for and return an existing Distributions.
    You can provide a string for the domain parameter which will be compared with provisioned Distributions.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search and make sure that your resources have unique domains.

    ## Example Usage

    ### By Id
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cdn.get_distribution(id="distr_id")
    ```

    ### By Domain
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cdn.get_distribution(domain="example.com")
    ```

    ### By Domain with Partial Match
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cdn.get_distribution(domain="example",
        partial_match=True)
    ```


    :param str domain: Domain of an existing distribution that you want to search for. Search by domain is case-insensitive. The whole resource domain is required if `partial_match` parameter is not set to true.
    :param str id: ID of the distribution you want to search for.
    :param bool partial_match: Whether partial matching is allowed or not when using domain argument. Default value is false.
           
           Either `domain` or `id` must be provided. If none, or both of `domain` and `id` are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['id'] = id
    __args__['partialMatch'] = partial_match
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:cdn/getDistribution:getDistribution', __args__, opts=opts, typ=GetDistributionResult)
    return __ret__.apply(lambda __response__: GetDistributionResult(
        certificate_id=pulumi.get(__response__, 'certificate_id'),
        domain=pulumi.get(__response__, 'domain'),
        id=pulumi.get(__response__, 'id'),
        partial_match=pulumi.get(__response__, 'partial_match'),
        public_endpoint_v4=pulumi.get(__response__, 'public_endpoint_v4'),
        public_endpoint_v6=pulumi.get(__response__, 'public_endpoint_v6'),
        resource_urn=pulumi.get(__response__, 'resource_urn'),
        routing_rules=pulumi.get(__response__, 'routing_rules')))
