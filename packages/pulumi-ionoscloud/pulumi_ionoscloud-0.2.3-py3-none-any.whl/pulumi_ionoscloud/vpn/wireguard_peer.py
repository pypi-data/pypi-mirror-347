# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WireguardPeerArgs', 'WireguardPeer']

@pulumi.input_type
class WireguardPeerArgs:
    def __init__(__self__, *,
                 allowed_ips: pulumi.Input[Sequence[pulumi.Input[str]]],
                 gateway_id: pulumi.Input[str],
                 public_key: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input['WireguardPeerEndpointArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WireguardPeer resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_ips: [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        :param pulumi.Input[str] gateway_id: [string] The ID of the WireGuard Gateway that the Peer will connect to.
        :param pulumi.Input[str] public_key: [string] The public key for the WireGuard Gateway.
        :param pulumi.Input[str] description: [string] A description of the WireGuard Gateway.
        :param pulumi.Input['WireguardPeerEndpointArgs'] endpoint: [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
        :param pulumi.Input[str] location: [string] The location of the WireGuard Gateway.
        :param pulumi.Input[str] name: [string] The human-readable name of the WireGuard Gateway.
        """
        pulumi.set(__self__, "allowed_ips", allowed_ips)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "public_key", public_key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="allowedIps")
    def allowed_ips(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        """
        return pulumi.get(self, "allowed_ips")

    @allowed_ips.setter
    def allowed_ips(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_ips", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of the WireGuard Gateway that the Peer will connect to.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[str]:
        """
        [string] The public key for the WireGuard Gateway.
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A description of the WireGuard Gateway.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input['WireguardPeerEndpointArgs']]:
        """
        [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input['WireguardPeerEndpointArgs']]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The location of the WireGuard Gateway.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The human-readable name of the WireGuard Gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _WireguardPeerState:
    def __init__(__self__, *,
                 allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input['WireguardPeerEndpointArgs']] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WireguardPeer resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_ips: [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        :param pulumi.Input[str] description: [string] A description of the WireGuard Gateway.
        :param pulumi.Input['WireguardPeerEndpointArgs'] endpoint: [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
        :param pulumi.Input[str] gateway_id: [string] The ID of the WireGuard Gateway that the Peer will connect to.
        :param pulumi.Input[str] location: [string] The location of the WireGuard Gateway.
        :param pulumi.Input[str] name: [string] The human-readable name of the WireGuard Gateway.
        :param pulumi.Input[str] public_key: [string] The public key for the WireGuard Gateway.
        :param pulumi.Input[str] status: The current status of the WireGuard Gateway Peer.
        """
        if allowed_ips is not None:
            pulumi.set(__self__, "allowed_ips", allowed_ips)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="allowedIps")
    def allowed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        """
        return pulumi.get(self, "allowed_ips")

    @allowed_ips.setter
    def allowed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_ips", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A description of the WireGuard Gateway.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input['WireguardPeerEndpointArgs']]:
        """
        [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input['WireguardPeerEndpointArgs']]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of the WireGuard Gateway that the Peer will connect to.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The location of the WireGuard Gateway.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The human-readable name of the WireGuard Gateway.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The public key for the WireGuard Gateway.
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The current status of the WireGuard Gateway Peer.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class WireguardPeer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[Union['WireguardPeerEndpointArgs', 'WireguardPeerEndpointArgsDict']]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This page provides an overview of the `vpn.WireguardPeer` resource, which allows you to manage a WireGuard Peer in your cloud infrastructure.
        This resource enables the creation, management, and deletion of a WireGuard VPN Peer, facilitating secure connections between your network resources.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.vpn.WireguardPeer("example",
            location="de/fra",
            gateway_id="your gateway id here",
            name="example-gateway",
            description="An example WireGuard peer",
            endpoint={
                "host": "1.2.3.4",
                "port": 51820,
            },
            allowed_ips=[
                "10.0.0.0/8",
                "192.168.1.0/24",
            ],
            public_key="examplePublicKey==")
        ```

        ## Import

        WireGuard Peers can be imported using the `gateway_id` and `id`, e.g.,

        ```sh
        $ pulumi import ionoscloud:vpn/wireguardPeer:WireguardPeer example gateway_id:peer_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_ips: [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        :param pulumi.Input[str] description: [string] A description of the WireGuard Gateway.
        :param pulumi.Input[Union['WireguardPeerEndpointArgs', 'WireguardPeerEndpointArgsDict']] endpoint: [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
        :param pulumi.Input[str] gateway_id: [string] The ID of the WireGuard Gateway that the Peer will connect to.
        :param pulumi.Input[str] location: [string] The location of the WireGuard Gateway.
        :param pulumi.Input[str] name: [string] The human-readable name of the WireGuard Gateway.
        :param pulumi.Input[str] public_key: [string] The public key for the WireGuard Gateway.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WireguardPeerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This page provides an overview of the `vpn.WireguardPeer` resource, which allows you to manage a WireGuard Peer in your cloud infrastructure.
        This resource enables the creation, management, and deletion of a WireGuard VPN Peer, facilitating secure connections between your network resources.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.vpn.WireguardPeer("example",
            location="de/fra",
            gateway_id="your gateway id here",
            name="example-gateway",
            description="An example WireGuard peer",
            endpoint={
                "host": "1.2.3.4",
                "port": 51820,
            },
            allowed_ips=[
                "10.0.0.0/8",
                "192.168.1.0/24",
            ],
            public_key="examplePublicKey==")
        ```

        ## Import

        WireGuard Peers can be imported using the `gateway_id` and `id`, e.g.,

        ```sh
        $ pulumi import ionoscloud:vpn/wireguardPeer:WireguardPeer example gateway_id:peer_id
        ```

        :param str resource_name: The name of the resource.
        :param WireguardPeerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WireguardPeerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[Union['WireguardPeerEndpointArgs', 'WireguardPeerEndpointArgsDict']]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WireguardPeerArgs.__new__(WireguardPeerArgs)

            if allowed_ips is None and not opts.urn:
                raise TypeError("Missing required property 'allowed_ips'")
            __props__.__dict__["allowed_ips"] = allowed_ips
            __props__.__dict__["description"] = description
            __props__.__dict__["endpoint"] = endpoint
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if public_key is None and not opts.urn:
                raise TypeError("Missing required property 'public_key'")
            __props__.__dict__["public_key"] = public_key
            __props__.__dict__["status"] = None
        super(WireguardPeer, __self__).__init__(
            'ionoscloud:vpn/wireguardPeer:WireguardPeer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            endpoint: Optional[pulumi.Input[Union['WireguardPeerEndpointArgs', 'WireguardPeerEndpointArgsDict']]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            public_key: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'WireguardPeer':
        """
        Get an existing WireguardPeer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_ips: [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        :param pulumi.Input[str] description: [string] A description of the WireGuard Gateway.
        :param pulumi.Input[Union['WireguardPeerEndpointArgs', 'WireguardPeerEndpointArgsDict']] endpoint: [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
        :param pulumi.Input[str] gateway_id: [string] The ID of the WireGuard Gateway that the Peer will connect to.
        :param pulumi.Input[str] location: [string] The location of the WireGuard Gateway.
        :param pulumi.Input[str] name: [string] The human-readable name of the WireGuard Gateway.
        :param pulumi.Input[str] public_key: [string] The public key for the WireGuard Gateway.
        :param pulumi.Input[str] status: The current status of the WireGuard Gateway Peer.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WireguardPeerState.__new__(_WireguardPeerState)

        __props__.__dict__["allowed_ips"] = allowed_ips
        __props__.__dict__["description"] = description
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["status"] = status
        return WireguardPeer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowedIps")
    def allowed_ips(self) -> pulumi.Output[Sequence[str]]:
        """
        [list, string] A list of subnet CIDRs that are allowed to connect to the WireGuard Gateway.
        """
        return pulumi.get(self, "allowed_ips")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        [string] A description of the WireGuard Gateway.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[Optional['outputs.WireguardPeerEndpoint']]:
        """
        [block] An endpoint configuration block for the WireGuard Gateway. The structure of this block is as follows:
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of the WireGuard Gateway that the Peer will connect to.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The location of the WireGuard Gateway.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The human-readable name of the WireGuard Gateway.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[str]:
        """
        [string] The public key for the WireGuard Gateway.
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The current status of the WireGuard Gateway Peer.
        """
        return pulumi.get(self, "status")

