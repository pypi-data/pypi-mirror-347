# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'PipelineLogArgs',
    'PipelineLogArgsDict',
    'PipelineLogDestinationArgs',
    'PipelineLogDestinationArgsDict',
]

MYPY = False

if not MYPY:
    class PipelineLogArgsDict(TypedDict):
        protocol: pulumi.Input[str]
        """
        [string] "Protocol to use as intake. Possible values are: http, tcp."
        """
        source: pulumi.Input[str]
        """
        [string] The source parser to be used.
        """
        tag: pulumi.Input[str]
        """
        [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
        """
        destinations: NotRequired[pulumi.Input[Sequence[pulumi.Input['PipelineLogDestinationArgsDict']]]]
        """
        [list] The configuration of the logs datastore, a list that contains elements with the following structure:
        """
        public: NotRequired[pulumi.Input[bool]]
        """
        [bool]
        """
elif False:
    PipelineLogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineLogArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 source: pulumi.Input[str],
                 tag: pulumi.Input[str],
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineLogDestinationArgs']]]] = None,
                 public: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] protocol: [string] "Protocol to use as intake. Possible values are: http, tcp."
        :param pulumi.Input[str] source: [string] The source parser to be used.
        :param pulumi.Input[str] tag: [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
        :param pulumi.Input[Sequence[pulumi.Input['PipelineLogDestinationArgs']]] destinations: [list] The configuration of the logs datastore, a list that contains elements with the following structure:
        :param pulumi.Input[bool] public: [bool]
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "tag", tag)
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if public is not None:
            pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        [string] "Protocol to use as intake. Possible values are: http, tcp."
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        [string] The source parser to be used.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Input[str]:
        """
        [string] The tag is used to distinguish different pipelines. Must be unique amongst the pipeline's array items.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipelineLogDestinationArgs']]]]:
        """
        [list] The configuration of the logs datastore, a list that contains elements with the following structure:
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipelineLogDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        [bool]
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)


if not MYPY:
    class PipelineLogDestinationArgsDict(TypedDict):
        retention_in_days: NotRequired[pulumi.Input[int]]
        """
        [int] Defines the number of days a log record should be kept in loki. Works with loki destination type only. Can be one of: 7, 14, 30.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        [string] The internal output stream to send logs to.
        """
elif False:
    PipelineLogDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PipelineLogDestinationArgs:
    def __init__(__self__, *,
                 retention_in_days: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] retention_in_days: [int] Defines the number of days a log record should be kept in loki. Works with loki destination type only. Can be one of: 7, 14, 30.
        :param pulumi.Input[str] type: [string] The internal output stream to send logs to.
        """
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        [int] Defines the number of days a log record should be kept in loki. Works with loki destination type only. Can be one of: 7, 14, 30.
        """
        return pulumi.get(self, "retention_in_days")

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_in_days", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The internal output stream to send logs to.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


