# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetBackupUnitResult',
    'AwaitableGetBackupUnitResult',
    'get_backup_unit',
    'get_backup_unit_output',
]

@pulumi.output_type
class GetBackupUnitResult:
    """
    A collection of values returned by getBackupUnit.
    """
    def __init__(__self__, email=None, id=None, login=None, name=None):
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if login and not isinstance(login, str):
            raise TypeError("Expected argument 'login' to be a str")
        pulumi.set(__self__, "login", login)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The e-mail address you want assigned to the backup unit.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the Backup Unit.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def login(self) -> str:
        """
        The login associated with the backup unit. Derived from the contract number.
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Backup Unit.
        """
        return pulumi.get(self, "name")


class AwaitableGetBackupUnitResult(GetBackupUnitResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupUnitResult(
            email=self.email,
            id=self.id,
            login=self.login,
            name=self.name)


def get_backup_unit(id: Optional[str] = None,
                    name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupUnitResult:
    """
    The **Backup Unit data source** can be used to search for and return an existing Backup Unit.
    You can provide a string for either id or name parameters which will be compared with provisioned Backup Units.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_backup_unit(id="backup_unit_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_backup_unit(name="Backup Unit Example")
    ```


    :param str id: ID of the backup unit you want to search for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str name: Name of an existing backup unit that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:compute/getBackupUnit:getBackupUnit', __args__, opts=opts, typ=GetBackupUnitResult).value

    return AwaitableGetBackupUnitResult(
        email=pulumi.get(__ret__, 'email'),
        id=pulumi.get(__ret__, 'id'),
        login=pulumi.get(__ret__, 'login'),
        name=pulumi.get(__ret__, 'name'))
def get_backup_unit_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupUnitResult]:
    """
    The **Backup Unit data source** can be used to search for and return an existing Backup Unit.
    You can provide a string for either id or name parameters which will be compared with provisioned Backup Units.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_backup_unit(id="backup_unit_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_backup_unit(name="Backup Unit Example")
    ```


    :param str id: ID of the backup unit you want to search for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str name: Name of an existing backup unit that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:compute/getBackupUnit:getBackupUnit', __args__, opts=opts, typ=GetBackupUnitResult)
    return __ret__.apply(lambda __response__: GetBackupUnitResult(
        email=pulumi.get(__response__, 'email'),
        id=pulumi.get(__response__, 'id'),
        login=pulumi.get(__response__, 'login'),
        name=pulumi.get(__response__, 'name')))
