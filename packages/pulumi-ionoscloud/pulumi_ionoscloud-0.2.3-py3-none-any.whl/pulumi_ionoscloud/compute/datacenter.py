# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatacenterArgs', 'Datacenter']

@pulumi.input_type
class DatacenterArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sec_auth_protection: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Datacenter resource.
        :param pulumi.Input[str] location: [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        :param pulumi.Input[str] description: [string] Description for the Virtual Data Center.
        :param pulumi.Input[str] name: [string] The name of the Virtual Data Center.
        :param pulumi.Input[bool] sec_auth_protection: [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        """
        pulumi.set(__self__, "location", location)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sec_auth_protection is not None:
            pulumi.set(__self__, "sec_auth_protection", sec_auth_protection)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Description for the Virtual Data Center.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the Virtual Data Center.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secAuthProtection")
    def sec_auth_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        """
        return pulumi.get(self, "sec_auth_protection")

    @sec_auth_protection.setter
    def sec_auth_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sec_auth_protection", value)


@pulumi.input_type
class _DatacenterState:
    def __init__(__self__, *,
                 cpu_architectures: Optional[pulumi.Input[Sequence[pulumi.Input['DatacenterCpuArchitectureArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sec_auth_protection: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Datacenter resources.
        :param pulumi.Input[Sequence[pulumi.Input['DatacenterCpuArchitectureArgs']]] cpu_architectures: Array of features and CPU families available in a location
        :param pulumi.Input[str] description: [string] Description for the Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: List of features supported by the location this data center is part of
        :param pulumi.Input[str] ipv6_cidr_block: The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
        :param pulumi.Input[str] location: [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        :param pulumi.Input[str] name: [string] The name of the Virtual Data Center.
        :param pulumi.Input[bool] sec_auth_protection: [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        :param pulumi.Input[int] version: The version of that Data Center. Gets incremented with every change
        """
        if cpu_architectures is not None:
            pulumi.set(__self__, "cpu_architectures", cpu_architectures)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sec_auth_protection is not None:
            pulumi.set(__self__, "sec_auth_protection", sec_auth_protection)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="cpuArchitectures")
    def cpu_architectures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatacenterCpuArchitectureArgs']]]]:
        """
        Array of features and CPU families available in a location
        """
        return pulumi.get(self, "cpu_architectures")

    @cpu_architectures.setter
    def cpu_architectures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatacenterCpuArchitectureArgs']]]]):
        pulumi.set(self, "cpu_architectures", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Description for the Virtual Data Center.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of features supported by the location this data center is part of
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_cidr_block", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the Virtual Data Center.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secAuthProtection")
    def sec_auth_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        """
        return pulumi.get(self, "sec_auth_protection")

    @sec_auth_protection.setter
    def sec_auth_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sec_auth_protection", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version of that Data Center. Gets incremented with every change
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class Datacenter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sec_auth_protection: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Manages a Virtual **Data Center** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="datacenter description",
            sec_auth_protection=False)
        ```

        ## Attaching a NSG to a Datacenter

        #### A single Network Security Group can be attached at any time to a Datacenter. To do this, use the `nsg.DatacenterNsgSelection` and provide the IDs of the NSG and Datacenter to link them.
        #### Deleting the resource or setting the empty string for the `nsg_id` field will de-attach any previously linked NSG from the Datacenter.

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter NSG Example",
            location="de/txl")
        example_nsg = ionoscloud.nsg.Nsg("example",
            name="Example NSG",
            description="Example NSG Description",
            datacenter_id=example.id)
        example_datacenter_nsg_selection = ionoscloud.nsg.DatacenterNsgSelection("example",
            datacenter_id=example.id,
            nsg_id=example_nsg.id)
        ```

        ## Import

        Resource Datacenter can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/datacenter:Datacenter mydc datacenter uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: [string] Description for the Virtual Data Center.
        :param pulumi.Input[str] location: [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        :param pulumi.Input[str] name: [string] The name of the Virtual Data Center.
        :param pulumi.Input[bool] sec_auth_protection: [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatacenterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Virtual **Data Center** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="datacenter description",
            sec_auth_protection=False)
        ```

        ## Attaching a NSG to a Datacenter

        #### A single Network Security Group can be attached at any time to a Datacenter. To do this, use the `nsg.DatacenterNsgSelection` and provide the IDs of the NSG and Datacenter to link them.
        #### Deleting the resource or setting the empty string for the `nsg_id` field will de-attach any previously linked NSG from the Datacenter.

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter NSG Example",
            location="de/txl")
        example_nsg = ionoscloud.nsg.Nsg("example",
            name="Example NSG",
            description="Example NSG Description",
            datacenter_id=example.id)
        example_datacenter_nsg_selection = ionoscloud.nsg.DatacenterNsgSelection("example",
            datacenter_id=example.id,
            nsg_id=example_nsg.id)
        ```

        ## Import

        Resource Datacenter can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/datacenter:Datacenter mydc datacenter uuid
        ```

        :param str resource_name: The name of the resource.
        :param DatacenterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatacenterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sec_auth_protection: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatacenterArgs.__new__(DatacenterArgs)

            __props__.__dict__["description"] = description
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["sec_auth_protection"] = sec_auth_protection
            __props__.__dict__["cpu_architectures"] = None
            __props__.__dict__["features"] = None
            __props__.__dict__["ipv6_cidr_block"] = None
            __props__.__dict__["version"] = None
        super(Datacenter, __self__).__init__(
            'ionoscloud:compute/datacenter:Datacenter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu_architectures: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatacenterCpuArchitectureArgs', 'DatacenterCpuArchitectureArgsDict']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ipv6_cidr_block: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sec_auth_protection: Optional[pulumi.Input[bool]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'Datacenter':
        """
        Get an existing Datacenter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DatacenterCpuArchitectureArgs', 'DatacenterCpuArchitectureArgsDict']]]] cpu_architectures: Array of features and CPU families available in a location
        :param pulumi.Input[str] description: [string] Description for the Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] features: List of features supported by the location this data center is part of
        :param pulumi.Input[str] ipv6_cidr_block: The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
        :param pulumi.Input[str] location: [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        :param pulumi.Input[str] name: [string] The name of the Virtual Data Center.
        :param pulumi.Input[bool] sec_auth_protection: [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        :param pulumi.Input[int] version: The version of that Data Center. Gets incremented with every change
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatacenterState.__new__(_DatacenterState)

        __props__.__dict__["cpu_architectures"] = cpu_architectures
        __props__.__dict__["description"] = description
        __props__.__dict__["features"] = features
        __props__.__dict__["ipv6_cidr_block"] = ipv6_cidr_block
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["sec_auth_protection"] = sec_auth_protection
        __props__.__dict__["version"] = version
        return Datacenter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cpuArchitectures")
    def cpu_architectures(self) -> pulumi.Output[Sequence['outputs.DatacenterCpuArchitecture']]:
        """
        Array of features and CPU families available in a location
        """
        return pulumi.get(self, "cpu_architectures")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        [string] Description for the Virtual Data Center.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def features(self) -> pulumi.Output[Sequence[str]]:
        """
        List of features supported by the location this data center is part of
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> pulumi.Output[str]:
        """
        The automatically-assigned /56 IPv6 CIDR block if IPv6 is enabled on this virtual data center
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        [string] The regional location where the Virtual Data Center will be created. This argument is immutable.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the Virtual Data Center.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secAuthProtection")
    def sec_auth_protection(self) -> pulumi.Output[Optional[bool]]:
        """
        [bool] Boolean value representing if the data center requires extra protection e.g. two factor protection
        """
        return pulumi.get(self, "sec_auth_protection")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        """
        The version of that Data Center. Gets incremented with every change
        """
        return pulumi.get(self, "version")

