# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetVolumeResult',
    'AwaitableGetVolumeResult',
    'get_volume',
    'get_volume_output',
]

@pulumi.output_type
class GetVolumeResult:
    """
    A collection of values returned by getVolume.
    """
    def __init__(__self__, availability_zone=None, backup_unit_id=None, boot_server=None, bus=None, cpu_hot_plug=None, datacenter_id=None, device_number=None, disc_virtio_hot_plug=None, disc_virtio_hot_unplug=None, disk_type=None, id=None, image=None, image_password=None, licence_type=None, name=None, nic_hot_plug=None, nic_hot_unplug=None, ram_hot_plug=None, size=None, sshkey=None, user_data=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if backup_unit_id and not isinstance(backup_unit_id, str):
            raise TypeError("Expected argument 'backup_unit_id' to be a str")
        pulumi.set(__self__, "backup_unit_id", backup_unit_id)
        if boot_server and not isinstance(boot_server, str):
            raise TypeError("Expected argument 'boot_server' to be a str")
        pulumi.set(__self__, "boot_server", boot_server)
        if bus and not isinstance(bus, str):
            raise TypeError("Expected argument 'bus' to be a str")
        pulumi.set(__self__, "bus", bus)
        if cpu_hot_plug and not isinstance(cpu_hot_plug, bool):
            raise TypeError("Expected argument 'cpu_hot_plug' to be a bool")
        pulumi.set(__self__, "cpu_hot_plug", cpu_hot_plug)
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if device_number and not isinstance(device_number, int):
            raise TypeError("Expected argument 'device_number' to be a int")
        pulumi.set(__self__, "device_number", device_number)
        if disc_virtio_hot_plug and not isinstance(disc_virtio_hot_plug, bool):
            raise TypeError("Expected argument 'disc_virtio_hot_plug' to be a bool")
        pulumi.set(__self__, "disc_virtio_hot_plug", disc_virtio_hot_plug)
        if disc_virtio_hot_unplug and not isinstance(disc_virtio_hot_unplug, bool):
            raise TypeError("Expected argument 'disc_virtio_hot_unplug' to be a bool")
        pulumi.set(__self__, "disc_virtio_hot_unplug", disc_virtio_hot_unplug)
        if disk_type and not isinstance(disk_type, str):
            raise TypeError("Expected argument 'disk_type' to be a str")
        pulumi.set(__self__, "disk_type", disk_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)
        if image_password and not isinstance(image_password, str):
            raise TypeError("Expected argument 'image_password' to be a str")
        pulumi.set(__self__, "image_password", image_password)
        if licence_type and not isinstance(licence_type, str):
            raise TypeError("Expected argument 'licence_type' to be a str")
        pulumi.set(__self__, "licence_type", licence_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nic_hot_plug and not isinstance(nic_hot_plug, bool):
            raise TypeError("Expected argument 'nic_hot_plug' to be a bool")
        pulumi.set(__self__, "nic_hot_plug", nic_hot_plug)
        if nic_hot_unplug and not isinstance(nic_hot_unplug, bool):
            raise TypeError("Expected argument 'nic_hot_unplug' to be a bool")
        pulumi.set(__self__, "nic_hot_unplug", nic_hot_unplug)
        if ram_hot_plug and not isinstance(ram_hot_plug, bool):
            raise TypeError("Expected argument 'ram_hot_plug' to be a bool")
        pulumi.set(__self__, "ram_hot_plug", ram_hot_plug)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if sshkey and not isinstance(sshkey, str):
            raise TypeError("Expected argument 'sshkey' to be a str")
        pulumi.set(__self__, "sshkey", sshkey)
        if user_data and not isinstance(user_data, str):
            raise TypeError("Expected argument 'user_data' to be a str")
        pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="backupUnitId")
    def backup_unit_id(self) -> str:
        """
        The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        """
        return pulumi.get(self, "backup_unit_id")

    @property
    @pulumi.getter(name="bootServer")
    def boot_server(self) -> str:
        """
        The UUID of the attached server.
        """
        return pulumi.get(self, "boot_server")

    @property
    @pulumi.getter
    def bus(self) -> str:
        """
        The bus type of the volume: VIRTIO or IDE.
        """
        return pulumi.get(self, "bus")

    @property
    @pulumi.getter(name="cpuHotPlug")
    def cpu_hot_plug(self) -> bool:
        """
        Is capable of CPU hot plug (no reboot required)
        """
        return pulumi.get(self, "cpu_hot_plug")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> int:
        """
        The LUN ID of the storage volume. Null for volumes not mounted to any VM
        """
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="discVirtioHotPlug")
    def disc_virtio_hot_plug(self) -> bool:
        """
        Is capable of Virt-IO drive hot plug (no reboot required)
        """
        return pulumi.get(self, "disc_virtio_hot_plug")

    @property
    @pulumi.getter(name="discVirtioHotUnplug")
    def disc_virtio_hot_unplug(self) -> bool:
        """
        Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        """
        return pulumi.get(self, "disc_virtio_hot_unplug")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        The volume type: HDD or SSD.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the volume.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The image or snapshot UUID.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> str:
        """
        Required if `sshkey_path` is not provided.
        """
        return pulumi.get(self, "image_password")

    @property
    @pulumi.getter(name="licenceType")
    def licence_type(self) -> str:
        """
        The type of the licence.
        """
        return pulumi.get(self, "licence_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nicHotPlug")
    def nic_hot_plug(self) -> bool:
        """
        Is capable of nic hot plug (no reboot required)
        """
        return pulumi.get(self, "nic_hot_plug")

    @property
    @pulumi.getter(name="nicHotUnplug")
    def nic_hot_unplug(self) -> bool:
        """
        Is capable of nic hot unplug (no reboot required)
        """
        return pulumi.get(self, "nic_hot_unplug")

    @property
    @pulumi.getter(name="ramHotPlug")
    def ram_hot_plug(self) -> bool:
        """
        Is capable of memory hot plug (no reboot required)
        """
        return pulumi.get(self, "ram_hot_plug")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the volume in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def sshkey(self) -> str:
        """
        The associated public SSH key.
        """
        return pulumi.get(self, "sshkey")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> str:
        """
        The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
        """
        return pulumi.get(self, "user_data")


class AwaitableGetVolumeResult(GetVolumeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVolumeResult(
            availability_zone=self.availability_zone,
            backup_unit_id=self.backup_unit_id,
            boot_server=self.boot_server,
            bus=self.bus,
            cpu_hot_plug=self.cpu_hot_plug,
            datacenter_id=self.datacenter_id,
            device_number=self.device_number,
            disc_virtio_hot_plug=self.disc_virtio_hot_plug,
            disc_virtio_hot_unplug=self.disc_virtio_hot_unplug,
            disk_type=self.disk_type,
            id=self.id,
            image=self.image,
            image_password=self.image_password,
            licence_type=self.licence_type,
            name=self.name,
            nic_hot_plug=self.nic_hot_plug,
            nic_hot_unplug=self.nic_hot_unplug,
            ram_hot_plug=self.ram_hot_plug,
            size=self.size,
            sshkey=self.sshkey,
            user_data=self.user_data)


def get_volume(datacenter_id: Optional[str] = None,
               id: Optional[str] = None,
               name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVolumeResult:
    """
    The volume data source can be used to search for and return existing volumes.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_volume(datacenter_id="datacenter_id",
        id="volume_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_volume(datacenter_id="datacenter_id",
        name="Volume Example")
    ```


    :param str id: ID of the volume you want to search for.
           
           Either `volume` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str name: Name of an existing volume that you want to search for.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:compute/getVolume:getVolume', __args__, opts=opts, typ=GetVolumeResult).value

    return AwaitableGetVolumeResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        backup_unit_id=pulumi.get(__ret__, 'backup_unit_id'),
        boot_server=pulumi.get(__ret__, 'boot_server'),
        bus=pulumi.get(__ret__, 'bus'),
        cpu_hot_plug=pulumi.get(__ret__, 'cpu_hot_plug'),
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        device_number=pulumi.get(__ret__, 'device_number'),
        disc_virtio_hot_plug=pulumi.get(__ret__, 'disc_virtio_hot_plug'),
        disc_virtio_hot_unplug=pulumi.get(__ret__, 'disc_virtio_hot_unplug'),
        disk_type=pulumi.get(__ret__, 'disk_type'),
        id=pulumi.get(__ret__, 'id'),
        image=pulumi.get(__ret__, 'image'),
        image_password=pulumi.get(__ret__, 'image_password'),
        licence_type=pulumi.get(__ret__, 'licence_type'),
        name=pulumi.get(__ret__, 'name'),
        nic_hot_plug=pulumi.get(__ret__, 'nic_hot_plug'),
        nic_hot_unplug=pulumi.get(__ret__, 'nic_hot_unplug'),
        ram_hot_plug=pulumi.get(__ret__, 'ram_hot_plug'),
        size=pulumi.get(__ret__, 'size'),
        sshkey=pulumi.get(__ret__, 'sshkey'),
        user_data=pulumi.get(__ret__, 'user_data'))
def get_volume_output(datacenter_id: Optional[pulumi.Input[str]] = None,
                      id: Optional[pulumi.Input[Optional[str]]] = None,
                      name: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVolumeResult]:
    """
    The volume data source can be used to search for and return existing volumes.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_volume(datacenter_id="datacenter_id",
        id="volume_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_volume(datacenter_id="datacenter_id",
        name="Volume Example")
    ```


    :param str id: ID of the volume you want to search for.
           
           Either `volume` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str name: Name of an existing volume that you want to search for.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:compute/getVolume:getVolume', __args__, opts=opts, typ=GetVolumeResult)
    return __ret__.apply(lambda __response__: GetVolumeResult(
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        backup_unit_id=pulumi.get(__response__, 'backup_unit_id'),
        boot_server=pulumi.get(__response__, 'boot_server'),
        bus=pulumi.get(__response__, 'bus'),
        cpu_hot_plug=pulumi.get(__response__, 'cpu_hot_plug'),
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        device_number=pulumi.get(__response__, 'device_number'),
        disc_virtio_hot_plug=pulumi.get(__response__, 'disc_virtio_hot_plug'),
        disc_virtio_hot_unplug=pulumi.get(__response__, 'disc_virtio_hot_unplug'),
        disk_type=pulumi.get(__response__, 'disk_type'),
        id=pulumi.get(__response__, 'id'),
        image=pulumi.get(__response__, 'image'),
        image_password=pulumi.get(__response__, 'image_password'),
        licence_type=pulumi.get(__response__, 'licence_type'),
        name=pulumi.get(__response__, 'name'),
        nic_hot_plug=pulumi.get(__response__, 'nic_hot_plug'),
        nic_hot_unplug=pulumi.get(__response__, 'nic_hot_unplug'),
        ram_hot_plug=pulumi.get(__response__, 'ram_hot_plug'),
        size=pulumi.get(__response__, 'size'),
        sshkey=pulumi.get(__response__, 'sshkey'),
        user_data=pulumi.get(__response__, 'user_data')))
