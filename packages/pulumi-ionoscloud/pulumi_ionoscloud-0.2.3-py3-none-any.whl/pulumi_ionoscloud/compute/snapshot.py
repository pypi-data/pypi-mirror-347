# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SnapshotArgs', 'Snapshot']

@pulumi.input_type
class SnapshotArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 volume_id: pulumi.Input[str],
                 cpu_hot_plug: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disc_virtio_hot_plug: Optional[pulumi.Input[bool]] = None,
                 disc_virtio_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 licence_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic_hot_plug: Optional[pulumi.Input[bool]] = None,
                 nic_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 ram_hot_plug: Optional[pulumi.Input[bool]] = None,
                 sec_auth_protection: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Snapshot resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of the Virtual Data Center.
        :param pulumi.Input[str] volume_id: [string] The ID of the specific volume to take the snapshot from.
        :param pulumi.Input[bool] cpu_hot_plug: (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[str] description: (Computed)[string] Human readable description
        :param pulumi.Input[bool] disc_virtio_hot_plug: (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] disc_virtio_hot_unplug: (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
        :param pulumi.Input[str] licence_type: (Computed)[string] OS type of this Snapshot
        :param pulumi.Input[str] name: [string] The name of the snapshot.
        :param pulumi.Input[bool] nic_hot_plug: (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] nic_hot_unplug: (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] ram_hot_plug: (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] sec_auth_protection: Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "volume_id", volume_id)
        if cpu_hot_plug is not None:
            pulumi.set(__self__, "cpu_hot_plug", cpu_hot_plug)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disc_virtio_hot_plug is not None:
            pulumi.set(__self__, "disc_virtio_hot_plug", disc_virtio_hot_plug)
        if disc_virtio_hot_unplug is not None:
            pulumi.set(__self__, "disc_virtio_hot_unplug", disc_virtio_hot_unplug)
        if licence_type is not None:
            pulumi.set(__self__, "licence_type", licence_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nic_hot_plug is not None:
            pulumi.set(__self__, "nic_hot_plug", nic_hot_plug)
        if nic_hot_unplug is not None:
            pulumi.set(__self__, "nic_hot_unplug", nic_hot_unplug)
        if ram_hot_plug is not None:
            pulumi.set(__self__, "ram_hot_plug", ram_hot_plug)
        if sec_auth_protection is not None:
            pulumi.set(__self__, "sec_auth_protection", sec_auth_protection)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of the Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of the specific volume to take the snapshot from.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="cpuHotPlug")
    def cpu_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "cpu_hot_plug")

    @cpu_hot_plug.setter
    def cpu_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cpu_hot_plug", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed)[string] Human readable description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discVirtioHotPlug")
    def disc_virtio_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "disc_virtio_hot_plug")

    @disc_virtio_hot_plug.setter
    def disc_virtio_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disc_virtio_hot_plug", value)

    @property
    @pulumi.getter(name="discVirtioHotUnplug")
    def disc_virtio_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
        """
        return pulumi.get(self, "disc_virtio_hot_unplug")

    @disc_virtio_hot_unplug.setter
    def disc_virtio_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disc_virtio_hot_unplug", value)

    @property
    @pulumi.getter(name="licenceType")
    def licence_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed)[string] OS type of this Snapshot
        """
        return pulumi.get(self, "licence_type")

    @licence_type.setter
    def licence_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "licence_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the snapshot.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nicHotPlug")
    def nic_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "nic_hot_plug")

    @nic_hot_plug.setter
    def nic_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nic_hot_plug", value)

    @property
    @pulumi.getter(name="nicHotUnplug")
    def nic_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "nic_hot_unplug")

    @nic_hot_unplug.setter
    def nic_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nic_hot_unplug", value)

    @property
    @pulumi.getter(name="ramHotPlug")
    def ram_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "ram_hot_plug")

    @ram_hot_plug.setter
    def ram_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ram_hot_plug", value)

    @property
    @pulumi.getter(name="secAuthProtection")
    def sec_auth_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        """
        return pulumi.get(self, "sec_auth_protection")

    @sec_auth_protection.setter
    def sec_auth_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sec_auth_protection", value)


@pulumi.input_type
class _SnapshotState:
    def __init__(__self__, *,
                 cpu_hot_plug: Optional[pulumi.Input[bool]] = None,
                 cpu_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disc_scsi_hot_plug: Optional[pulumi.Input[bool]] = None,
                 disc_scsi_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 disc_virtio_hot_plug: Optional[pulumi.Input[bool]] = None,
                 disc_virtio_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 licence_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic_hot_plug: Optional[pulumi.Input[bool]] = None,
                 nic_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 ram_hot_plug: Optional[pulumi.Input[bool]] = None,
                 ram_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 sec_auth_protection: Optional[pulumi.Input[bool]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Snapshot resources.
        :param pulumi.Input[bool] cpu_hot_plug: (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] cpu_hot_unplug: Is capable of CPU hot unplug (no reboot required)
        :param pulumi.Input[str] datacenter_id: [string] The ID of the Virtual Data Center.
        :param pulumi.Input[str] description: (Computed)[string] Human readable description
        :param pulumi.Input[bool] disc_scsi_hot_plug: Is capable of SCSI drive hot plug (no reboot required)
        :param pulumi.Input[bool] disc_scsi_hot_unplug: Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        :param pulumi.Input[bool] disc_virtio_hot_plug: (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] disc_virtio_hot_unplug: (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
        :param pulumi.Input[str] licence_type: (Computed)[string] OS type of this Snapshot
        :param pulumi.Input[str] location: Location of that image/snapshot
        :param pulumi.Input[str] name: [string] The name of the snapshot.
        :param pulumi.Input[bool] nic_hot_plug: (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] nic_hot_unplug: (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] ram_hot_plug: (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] ram_hot_unplug: Is capable of memory hot unplug (no reboot required)
        :param pulumi.Input[bool] sec_auth_protection: Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        :param pulumi.Input[int] size: The size of the image in GB
        :param pulumi.Input[str] volume_id: [string] The ID of the specific volume to take the snapshot from.
        """
        if cpu_hot_plug is not None:
            pulumi.set(__self__, "cpu_hot_plug", cpu_hot_plug)
        if cpu_hot_unplug is not None:
            pulumi.set(__self__, "cpu_hot_unplug", cpu_hot_unplug)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disc_scsi_hot_plug is not None:
            pulumi.set(__self__, "disc_scsi_hot_plug", disc_scsi_hot_plug)
        if disc_scsi_hot_unplug is not None:
            pulumi.set(__self__, "disc_scsi_hot_unplug", disc_scsi_hot_unplug)
        if disc_virtio_hot_plug is not None:
            pulumi.set(__self__, "disc_virtio_hot_plug", disc_virtio_hot_plug)
        if disc_virtio_hot_unplug is not None:
            pulumi.set(__self__, "disc_virtio_hot_unplug", disc_virtio_hot_unplug)
        if licence_type is not None:
            pulumi.set(__self__, "licence_type", licence_type)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nic_hot_plug is not None:
            pulumi.set(__self__, "nic_hot_plug", nic_hot_plug)
        if nic_hot_unplug is not None:
            pulumi.set(__self__, "nic_hot_unplug", nic_hot_unplug)
        if ram_hot_plug is not None:
            pulumi.set(__self__, "ram_hot_plug", ram_hot_plug)
        if ram_hot_unplug is not None:
            pulumi.set(__self__, "ram_hot_unplug", ram_hot_unplug)
        if sec_auth_protection is not None:
            pulumi.set(__self__, "sec_auth_protection", sec_auth_protection)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="cpuHotPlug")
    def cpu_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "cpu_hot_plug")

    @cpu_hot_plug.setter
    def cpu_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cpu_hot_plug", value)

    @property
    @pulumi.getter(name="cpuHotUnplug")
    def cpu_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        Is capable of CPU hot unplug (no reboot required)
        """
        return pulumi.get(self, "cpu_hot_unplug")

    @cpu_hot_unplug.setter
    def cpu_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cpu_hot_unplug", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of the Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed)[string] Human readable description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discScsiHotPlug")
    def disc_scsi_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        Is capable of SCSI drive hot plug (no reboot required)
        """
        return pulumi.get(self, "disc_scsi_hot_plug")

    @disc_scsi_hot_plug.setter
    def disc_scsi_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disc_scsi_hot_plug", value)

    @property
    @pulumi.getter(name="discScsiHotUnplug")
    def disc_scsi_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        """
        return pulumi.get(self, "disc_scsi_hot_unplug")

    @disc_scsi_hot_unplug.setter
    def disc_scsi_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disc_scsi_hot_unplug", value)

    @property
    @pulumi.getter(name="discVirtioHotPlug")
    def disc_virtio_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "disc_virtio_hot_plug")

    @disc_virtio_hot_plug.setter
    def disc_virtio_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disc_virtio_hot_plug", value)

    @property
    @pulumi.getter(name="discVirtioHotUnplug")
    def disc_virtio_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
        """
        return pulumi.get(self, "disc_virtio_hot_unplug")

    @disc_virtio_hot_unplug.setter
    def disc_virtio_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disc_virtio_hot_unplug", value)

    @property
    @pulumi.getter(name="licenceType")
    def licence_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed)[string] OS type of this Snapshot
        """
        return pulumi.get(self, "licence_type")

    @licence_type.setter
    def licence_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "licence_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location of that image/snapshot
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the snapshot.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nicHotPlug")
    def nic_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "nic_hot_plug")

    @nic_hot_plug.setter
    def nic_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nic_hot_plug", value)

    @property
    @pulumi.getter(name="nicHotUnplug")
    def nic_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "nic_hot_unplug")

    @nic_hot_unplug.setter
    def nic_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nic_hot_unplug", value)

    @property
    @pulumi.getter(name="ramHotPlug")
    def ram_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "ram_hot_plug")

    @ram_hot_plug.setter
    def ram_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ram_hot_plug", value)

    @property
    @pulumi.getter(name="ramHotUnplug")
    def ram_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        Is capable of memory hot unplug (no reboot required)
        """
        return pulumi.get(self, "ram_hot_unplug")

    @ram_hot_unplug.setter
    def ram_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ram_hot_unplug", value)

    @property
    @pulumi.getter(name="secAuthProtection")
    def sec_auth_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        """
        return pulumi.get(self, "sec_auth_protection")

    @sec_auth_protection.setter
    def sec_auth_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sec_auth_protection", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the image in GB
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of the specific volume to take the snapshot from.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)


class Snapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_hot_plug: Optional[pulumi.Input[bool]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disc_virtio_hot_plug: Optional[pulumi.Input[bool]] = None,
                 disc_virtio_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 licence_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic_hot_plug: Optional[pulumi.Input[bool]] = None,
                 nic_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 ram_hot_plug: Optional[pulumi.Input[bool]] = None,
                 sec_auth_protection: Optional[pulumi.Input[bool]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages **Snapshots** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        example = ionoscloud.compute.get_image(type="HDD",
            image_alias="ubuntu:latest",
            location="us/las")
        example_datacenter = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="Datacenter Description",
            sec_auth_protection=False)
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example_datacenter.id,
            public=True,
            name="Lan Example")
        server_image_password = random.index.Password("server_image_password",
            length=16,
            special=False)
        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            datacenter_id=example_datacenter.id,
            cores=1,
            ram=1024,
            availability_zone="ZONE_1",
            cpu_family="INTEL_XEON",
            image_name=example.id,
            image_password=server_image_password["result"],
            type="ENTERPRISE",
            volume={
                "name": "system",
                "size": 5,
                "disk_type": "SSD Standard",
                "user_data": "foo",
                "bus": "VIRTIO",
                "availability_zone": "ZONE_1",
            })
        test_snapshot = ionoscloud.compute.Snapshot("test_snapshot",
            datacenter_id=example_datacenter.id,
            volume_id=example_server.boot_volume,
            name="Snapshot Example")
        ```

        ## Import

        Resource Snapshot can be imported using the `snapshot id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/snapshot:Snapshot mysnapshot snapshot uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cpu_hot_plug: (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[str] datacenter_id: [string] The ID of the Virtual Data Center.
        :param pulumi.Input[str] description: (Computed)[string] Human readable description
        :param pulumi.Input[bool] disc_virtio_hot_plug: (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] disc_virtio_hot_unplug: (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
        :param pulumi.Input[str] licence_type: (Computed)[string] OS type of this Snapshot
        :param pulumi.Input[str] name: [string] The name of the snapshot.
        :param pulumi.Input[bool] nic_hot_plug: (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] nic_hot_unplug: (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] ram_hot_plug: (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] sec_auth_protection: Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        :param pulumi.Input[str] volume_id: [string] The ID of the specific volume to take the snapshot from.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages **Snapshots** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        example = ionoscloud.compute.get_image(type="HDD",
            image_alias="ubuntu:latest",
            location="us/las")
        example_datacenter = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="Datacenter Description",
            sec_auth_protection=False)
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example_datacenter.id,
            public=True,
            name="Lan Example")
        server_image_password = random.index.Password("server_image_password",
            length=16,
            special=False)
        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            datacenter_id=example_datacenter.id,
            cores=1,
            ram=1024,
            availability_zone="ZONE_1",
            cpu_family="INTEL_XEON",
            image_name=example.id,
            image_password=server_image_password["result"],
            type="ENTERPRISE",
            volume={
                "name": "system",
                "size": 5,
                "disk_type": "SSD Standard",
                "user_data": "foo",
                "bus": "VIRTIO",
                "availability_zone": "ZONE_1",
            })
        test_snapshot = ionoscloud.compute.Snapshot("test_snapshot",
            datacenter_id=example_datacenter.id,
            volume_id=example_server.boot_volume,
            name="Snapshot Example")
        ```

        ## Import

        Resource Snapshot can be imported using the `snapshot id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/snapshot:Snapshot mysnapshot snapshot uuid
        ```

        :param str resource_name: The name of the resource.
        :param SnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu_hot_plug: Optional[pulumi.Input[bool]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disc_virtio_hot_plug: Optional[pulumi.Input[bool]] = None,
                 disc_virtio_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 licence_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic_hot_plug: Optional[pulumi.Input[bool]] = None,
                 nic_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 ram_hot_plug: Optional[pulumi.Input[bool]] = None,
                 sec_auth_protection: Optional[pulumi.Input[bool]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotArgs.__new__(SnapshotArgs)

            __props__.__dict__["cpu_hot_plug"] = cpu_hot_plug
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            __props__.__dict__["description"] = description
            __props__.__dict__["disc_virtio_hot_plug"] = disc_virtio_hot_plug
            __props__.__dict__["disc_virtio_hot_unplug"] = disc_virtio_hot_unplug
            __props__.__dict__["licence_type"] = licence_type
            __props__.__dict__["name"] = name
            __props__.__dict__["nic_hot_plug"] = nic_hot_plug
            __props__.__dict__["nic_hot_unplug"] = nic_hot_unplug
            __props__.__dict__["ram_hot_plug"] = ram_hot_plug
            __props__.__dict__["sec_auth_protection"] = sec_auth_protection
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["cpu_hot_unplug"] = None
            __props__.__dict__["disc_scsi_hot_plug"] = None
            __props__.__dict__["disc_scsi_hot_unplug"] = None
            __props__.__dict__["location"] = None
            __props__.__dict__["ram_hot_unplug"] = None
            __props__.__dict__["size"] = None
        super(Snapshot, __self__).__init__(
            'ionoscloud:compute/snapshot:Snapshot',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu_hot_plug: Optional[pulumi.Input[bool]] = None,
            cpu_hot_unplug: Optional[pulumi.Input[bool]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disc_scsi_hot_plug: Optional[pulumi.Input[bool]] = None,
            disc_scsi_hot_unplug: Optional[pulumi.Input[bool]] = None,
            disc_virtio_hot_plug: Optional[pulumi.Input[bool]] = None,
            disc_virtio_hot_unplug: Optional[pulumi.Input[bool]] = None,
            licence_type: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nic_hot_plug: Optional[pulumi.Input[bool]] = None,
            nic_hot_unplug: Optional[pulumi.Input[bool]] = None,
            ram_hot_plug: Optional[pulumi.Input[bool]] = None,
            ram_hot_unplug: Optional[pulumi.Input[bool]] = None,
            sec_auth_protection: Optional[pulumi.Input[bool]] = None,
            size: Optional[pulumi.Input[int]] = None,
            volume_id: Optional[pulumi.Input[str]] = None) -> 'Snapshot':
        """
        Get an existing Snapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cpu_hot_plug: (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] cpu_hot_unplug: Is capable of CPU hot unplug (no reboot required)
        :param pulumi.Input[str] datacenter_id: [string] The ID of the Virtual Data Center.
        :param pulumi.Input[str] description: (Computed)[string] Human readable description
        :param pulumi.Input[bool] disc_scsi_hot_plug: Is capable of SCSI drive hot plug (no reboot required)
        :param pulumi.Input[bool] disc_scsi_hot_unplug: Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        :param pulumi.Input[bool] disc_virtio_hot_plug: (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] disc_virtio_hot_unplug: (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
        :param pulumi.Input[str] licence_type: (Computed)[string] OS type of this Snapshot
        :param pulumi.Input[str] location: Location of that image/snapshot
        :param pulumi.Input[str] name: [string] The name of the snapshot.
        :param pulumi.Input[bool] nic_hot_plug: (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] nic_hot_unplug: (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] ram_hot_plug: (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
        :param pulumi.Input[bool] ram_hot_unplug: Is capable of memory hot unplug (no reboot required)
        :param pulumi.Input[bool] sec_auth_protection: Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        :param pulumi.Input[int] size: The size of the image in GB
        :param pulumi.Input[str] volume_id: [string] The ID of the specific volume to take the snapshot from.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotState.__new__(_SnapshotState)

        __props__.__dict__["cpu_hot_plug"] = cpu_hot_plug
        __props__.__dict__["cpu_hot_unplug"] = cpu_hot_unplug
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["description"] = description
        __props__.__dict__["disc_scsi_hot_plug"] = disc_scsi_hot_plug
        __props__.__dict__["disc_scsi_hot_unplug"] = disc_scsi_hot_unplug
        __props__.__dict__["disc_virtio_hot_plug"] = disc_virtio_hot_plug
        __props__.__dict__["disc_virtio_hot_unplug"] = disc_virtio_hot_unplug
        __props__.__dict__["licence_type"] = licence_type
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["nic_hot_plug"] = nic_hot_plug
        __props__.__dict__["nic_hot_unplug"] = nic_hot_unplug
        __props__.__dict__["ram_hot_plug"] = ram_hot_plug
        __props__.__dict__["ram_hot_unplug"] = ram_hot_unplug
        __props__.__dict__["sec_auth_protection"] = sec_auth_protection
        __props__.__dict__["size"] = size
        __props__.__dict__["volume_id"] = volume_id
        return Snapshot(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cpuHotPlug")
    def cpu_hot_plug(self) -> pulumi.Output[bool]:
        """
        (Computed)[string] Is capable of CPU hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "cpu_hot_plug")

    @property
    @pulumi.getter(name="cpuHotUnplug")
    def cpu_hot_unplug(self) -> pulumi.Output[bool]:
        """
        Is capable of CPU hot unplug (no reboot required)
        """
        return pulumi.get(self, "cpu_hot_unplug")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of the Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Computed)[string] Human readable description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discScsiHotPlug")
    def disc_scsi_hot_plug(self) -> pulumi.Output[bool]:
        """
        Is capable of SCSI drive hot plug (no reboot required)
        """
        return pulumi.get(self, "disc_scsi_hot_plug")

    @property
    @pulumi.getter(name="discScsiHotUnplug")
    def disc_scsi_hot_unplug(self) -> pulumi.Output[bool]:
        """
        Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        """
        return pulumi.get(self, "disc_scsi_hot_unplug")

    @property
    @pulumi.getter(name="discVirtioHotPlug")
    def disc_virtio_hot_plug(self) -> pulumi.Output[bool]:
        """
        (Computed)[string] Is capable of Virt-IO drive hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "disc_virtio_hot_plug")

    @property
    @pulumi.getter(name="discVirtioHotUnplug")
    def disc_virtio_hot_unplug(self) -> pulumi.Output[bool]:
        """
        (Computed)[string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines. Can only be updated.
        """
        return pulumi.get(self, "disc_virtio_hot_unplug")

    @property
    @pulumi.getter(name="licenceType")
    def licence_type(self) -> pulumi.Output[str]:
        """
        (Computed)[string] OS type of this Snapshot
        """
        return pulumi.get(self, "licence_type")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Location of that image/snapshot
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the snapshot.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nicHotPlug")
    def nic_hot_plug(self) -> pulumi.Output[bool]:
        """
        (Computed)[string] Is capable of nic hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "nic_hot_plug")

    @property
    @pulumi.getter(name="nicHotUnplug")
    def nic_hot_unplug(self) -> pulumi.Output[bool]:
        """
        (Computed)[string] Is capable of nic hot unplug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "nic_hot_unplug")

    @property
    @pulumi.getter(name="ramHotPlug")
    def ram_hot_plug(self) -> pulumi.Output[bool]:
        """
        (Computed)[string] Is capable of memory hot plug (no reboot required). Can only be updated.
        """
        return pulumi.get(self, "ram_hot_plug")

    @property
    @pulumi.getter(name="ramHotUnplug")
    def ram_hot_unplug(self) -> pulumi.Output[bool]:
        """
        Is capable of memory hot unplug (no reboot required)
        """
        return pulumi.get(self, "ram_hot_unplug")

    @property
    @pulumi.getter(name="secAuthProtection")
    def sec_auth_protection(self) -> pulumi.Output[bool]:
        """
        Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        """
        return pulumi.get(self, "sec_auth_protection")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[int]:
        """
        The size of the image in GB
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of the specific volume to take the snapshot from.
        """
        return pulumi.get(self, "volume_id")

