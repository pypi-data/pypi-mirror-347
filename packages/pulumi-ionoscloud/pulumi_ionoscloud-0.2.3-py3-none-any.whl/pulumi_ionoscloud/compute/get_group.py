# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    """
    A collection of values returned by getGroup.
    """
    def __init__(__self__, access_activity_log=None, access_and_manage_certificates=None, access_and_manage_monitoring=None, create_backup_unit=None, create_datacenter=None, create_flow_log=None, create_internet_access=None, create_k8s_cluster=None, create_pcc=None, create_snapshot=None, id=None, manage_dbaas=None, name=None, reserve_ip=None, s3_privilege=None, users=None):
        if access_activity_log and not isinstance(access_activity_log, bool):
            raise TypeError("Expected argument 'access_activity_log' to be a bool")
        pulumi.set(__self__, "access_activity_log", access_activity_log)
        if access_and_manage_certificates and not isinstance(access_and_manage_certificates, bool):
            raise TypeError("Expected argument 'access_and_manage_certificates' to be a bool")
        pulumi.set(__self__, "access_and_manage_certificates", access_and_manage_certificates)
        if access_and_manage_monitoring and not isinstance(access_and_manage_monitoring, bool):
            raise TypeError("Expected argument 'access_and_manage_monitoring' to be a bool")
        pulumi.set(__self__, "access_and_manage_monitoring", access_and_manage_monitoring)
        if create_backup_unit and not isinstance(create_backup_unit, bool):
            raise TypeError("Expected argument 'create_backup_unit' to be a bool")
        pulumi.set(__self__, "create_backup_unit", create_backup_unit)
        if create_datacenter and not isinstance(create_datacenter, bool):
            raise TypeError("Expected argument 'create_datacenter' to be a bool")
        pulumi.set(__self__, "create_datacenter", create_datacenter)
        if create_flow_log and not isinstance(create_flow_log, bool):
            raise TypeError("Expected argument 'create_flow_log' to be a bool")
        pulumi.set(__self__, "create_flow_log", create_flow_log)
        if create_internet_access and not isinstance(create_internet_access, bool):
            raise TypeError("Expected argument 'create_internet_access' to be a bool")
        pulumi.set(__self__, "create_internet_access", create_internet_access)
        if create_k8s_cluster and not isinstance(create_k8s_cluster, bool):
            raise TypeError("Expected argument 'create_k8s_cluster' to be a bool")
        pulumi.set(__self__, "create_k8s_cluster", create_k8s_cluster)
        if create_pcc and not isinstance(create_pcc, bool):
            raise TypeError("Expected argument 'create_pcc' to be a bool")
        pulumi.set(__self__, "create_pcc", create_pcc)
        if create_snapshot and not isinstance(create_snapshot, bool):
            raise TypeError("Expected argument 'create_snapshot' to be a bool")
        pulumi.set(__self__, "create_snapshot", create_snapshot)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if manage_dbaas and not isinstance(manage_dbaas, bool):
            raise TypeError("Expected argument 'manage_dbaas' to be a bool")
        pulumi.set(__self__, "manage_dbaas", manage_dbaas)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if reserve_ip and not isinstance(reserve_ip, bool):
            raise TypeError("Expected argument 'reserve_ip' to be a bool")
        pulumi.set(__self__, "reserve_ip", reserve_ip)
        if s3_privilege and not isinstance(s3_privilege, bool):
            raise TypeError("Expected argument 's3_privilege' to be a bool")
        pulumi.set(__self__, "s3_privilege", s3_privilege)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accessActivityLog")
    def access_activity_log(self) -> bool:
        """
        The group will be allowed to access the activity log.
        """
        return pulumi.get(self, "access_activity_log")

    @property
    @pulumi.getter(name="accessAndManageCertificates")
    def access_and_manage_certificates(self) -> bool:
        """
        The group will be allowed to access and manage certificates.
        """
        return pulumi.get(self, "access_and_manage_certificates")

    @property
    @pulumi.getter(name="accessAndManageMonitoring")
    def access_and_manage_monitoring(self) -> bool:
        """
        The group will be allowed to access and manage monitoring.
        """
        return pulumi.get(self, "access_and_manage_monitoring")

    @property
    @pulumi.getter(name="createBackupUnit")
    def create_backup_unit(self) -> bool:
        """
        The group will be allowed to create backup unit privilege.
        """
        return pulumi.get(self, "create_backup_unit")

    @property
    @pulumi.getter(name="createDatacenter")
    def create_datacenter(self) -> bool:
        """
        The group will be allowed to create virtual data centers.
        """
        return pulumi.get(self, "create_datacenter")

    @property
    @pulumi.getter(name="createFlowLog")
    def create_flow_log(self) -> bool:
        """
        The group will be allowed to create flow log.
        """
        return pulumi.get(self, "create_flow_log")

    @property
    @pulumi.getter(name="createInternetAccess")
    def create_internet_access(self) -> bool:
        """
        The group will be allowed to create internet access privilege.
        """
        return pulumi.get(self, "create_internet_access")

    @property
    @pulumi.getter(name="createK8sCluster")
    def create_k8s_cluster(self) -> bool:
        """
        The group will be allowed to create kubernetes cluster privilege.
        """
        return pulumi.get(self, "create_k8s_cluster")

    @property
    @pulumi.getter(name="createPcc")
    def create_pcc(self) -> bool:
        """
        The group will be allowed to create Cross Connects privilege.
        """
        return pulumi.get(self, "create_pcc")

    @property
    @pulumi.getter(name="createSnapshot")
    def create_snapshot(self) -> bool:
        """
        The group will be allowed to create snapshots.
        """
        return pulumi.get(self, "create_snapshot")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manageDbaas")
    def manage_dbaas(self) -> bool:
        """
        Privilege for a group to manage DBaaS related functionality.
        """
        return pulumi.get(self, "manage_dbaas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A name for the group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reserveIp")
    def reserve_ip(self) -> bool:
        """
        The group will be allowed to reserve IP addresses.
        """
        return pulumi.get(self, "reserve_ip")

    @property
    @pulumi.getter(name="s3Privilege")
    def s3_privilege(self) -> bool:
        """
        The group will have S3 privilege.
        """
        return pulumi.get(self, "s3_privilege")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetGroupUserResult']:
        """
        List of users in group.
        """
        return pulumi.get(self, "users")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            access_activity_log=self.access_activity_log,
            access_and_manage_certificates=self.access_and_manage_certificates,
            access_and_manage_monitoring=self.access_and_manage_monitoring,
            create_backup_unit=self.create_backup_unit,
            create_datacenter=self.create_datacenter,
            create_flow_log=self.create_flow_log,
            create_internet_access=self.create_internet_access,
            create_k8s_cluster=self.create_k8s_cluster,
            create_pcc=self.create_pcc,
            create_snapshot=self.create_snapshot,
            id=self.id,
            manage_dbaas=self.manage_dbaas,
            name=self.name,
            reserve_ip=self.reserve_ip,
            s3_privilege=self.s3_privilege,
            users=self.users)


def get_group(id: Optional[str] = None,
              name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    The **Group data source** can be used to search for and return existing groups.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_group(id="group_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_group(name="Group Example")
    ```


    :param str id: ID of the group you want to search for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str name: Name of an existing group that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:compute/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        access_activity_log=pulumi.get(__ret__, 'access_activity_log'),
        access_and_manage_certificates=pulumi.get(__ret__, 'access_and_manage_certificates'),
        access_and_manage_monitoring=pulumi.get(__ret__, 'access_and_manage_monitoring'),
        create_backup_unit=pulumi.get(__ret__, 'create_backup_unit'),
        create_datacenter=pulumi.get(__ret__, 'create_datacenter'),
        create_flow_log=pulumi.get(__ret__, 'create_flow_log'),
        create_internet_access=pulumi.get(__ret__, 'create_internet_access'),
        create_k8s_cluster=pulumi.get(__ret__, 'create_k8s_cluster'),
        create_pcc=pulumi.get(__ret__, 'create_pcc'),
        create_snapshot=pulumi.get(__ret__, 'create_snapshot'),
        id=pulumi.get(__ret__, 'id'),
        manage_dbaas=pulumi.get(__ret__, 'manage_dbaas'),
        name=pulumi.get(__ret__, 'name'),
        reserve_ip=pulumi.get(__ret__, 'reserve_ip'),
        s3_privilege=pulumi.get(__ret__, 's3_privilege'),
        users=pulumi.get(__ret__, 'users'))
def get_group_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                     name: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupResult]:
    """
    The **Group data source** can be used to search for and return existing groups.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_group(id="group_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_group(name="Group Example")
    ```


    :param str id: ID of the group you want to search for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str name: Name of an existing group that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:compute/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult)
    return __ret__.apply(lambda __response__: GetGroupResult(
        access_activity_log=pulumi.get(__response__, 'access_activity_log'),
        access_and_manage_certificates=pulumi.get(__response__, 'access_and_manage_certificates'),
        access_and_manage_monitoring=pulumi.get(__response__, 'access_and_manage_monitoring'),
        create_backup_unit=pulumi.get(__response__, 'create_backup_unit'),
        create_datacenter=pulumi.get(__response__, 'create_datacenter'),
        create_flow_log=pulumi.get(__response__, 'create_flow_log'),
        create_internet_access=pulumi.get(__response__, 'create_internet_access'),
        create_k8s_cluster=pulumi.get(__response__, 'create_k8s_cluster'),
        create_pcc=pulumi.get(__response__, 'create_pcc'),
        create_snapshot=pulumi.get(__response__, 'create_snapshot'),
        id=pulumi.get(__response__, 'id'),
        manage_dbaas=pulumi.get(__response__, 'manage_dbaas'),
        name=pulumi.get(__response__, 'name'),
        reserve_ip=pulumi.get(__response__, 'reserve_ip'),
        s3_privilege=pulumi.get(__response__, 's3_privilege'),
        users=pulumi.get(__response__, 'users')))
