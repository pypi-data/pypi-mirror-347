# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRegistryTokenResult',
    'AwaitableGetRegistryTokenResult',
    'get_registry_token',
    'get_registry_token_output',
]

@pulumi.output_type
class GetRegistryTokenResult:
    """
    A collection of values returned by getRegistryToken.
    """
    def __init__(__self__, credentials=None, expiry_date=None, id=None, name=None, partial_match=None, registry_id=None, scopes=None, status=None):
        if credentials and not isinstance(credentials, list):
            raise TypeError("Expected argument 'credentials' to be a list")
        pulumi.set(__self__, "credentials", credentials)
        if expiry_date and not isinstance(expiry_date, str):
            raise TypeError("Expected argument 'expiry_date' to be a str")
        pulumi.set(__self__, "expiry_date", expiry_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partial_match and not isinstance(partial_match, bool):
            raise TypeError("Expected argument 'partial_match' to be a bool")
        pulumi.set(__self__, "partial_match", partial_match)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetRegistryTokenCredentialResult']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        return pulumi.get(self, "expiry_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the container registry token.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partialMatch")
    def partial_match(self) -> Optional[bool]:
        return pulumi.get(self, "partial_match")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetRegistryTokenScopeResult']:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


class AwaitableGetRegistryTokenResult(GetRegistryTokenResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryTokenResult(
            credentials=self.credentials,
            expiry_date=self.expiry_date,
            id=self.id,
            name=self.name,
            partial_match=self.partial_match,
            registry_id=self.registry_id,
            scopes=self.scopes,
            status=self.status)


def get_registry_token(id: Optional[str] = None,
                       name: Optional[str] = None,
                       partial_match: Optional[bool] = None,
                       registry_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistryTokenResult:
    """
    The **Container Registry Token data source** can be used to search for and return an existing Container Registry Token.
    You can provide a string for the name parameter which will be compared with provisioned Container Registry Token.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search and make sure that your resources have unique names.

    ## Example Usage

    ### By Id
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.creg.get_registry_token(registry_id=example_ionoscloud_container_registry["id"],
        id="token_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.creg.get_registry_token(registry_id=example_ionoscloud_container_registry["id"],
        name="container-registry-token-example")
    ```

    ### By Name with Partial Match
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.creg.get_registry_token(registry_id=example_ionoscloud_container_registry["id"],
        name="-example",
        partial_match=True)
    ```


    :param str id: ID of the container registry token you want to search for.
    :param str name: Name of an existing container registry token that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
    :param bool partial_match: Whether partial matching is allowed or not when using name argument. Default value is false.
           
           `registry_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str registry_id: Registry's UUID.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    __args__['registryId'] = registry_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:creg/getRegistryToken:getRegistryToken', __args__, opts=opts, typ=GetRegistryTokenResult).value

    return AwaitableGetRegistryTokenResult(
        credentials=pulumi.get(__ret__, 'credentials'),
        expiry_date=pulumi.get(__ret__, 'expiry_date'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        partial_match=pulumi.get(__ret__, 'partial_match'),
        registry_id=pulumi.get(__ret__, 'registry_id'),
        scopes=pulumi.get(__ret__, 'scopes'),
        status=pulumi.get(__ret__, 'status'))
def get_registry_token_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                              name: Optional[pulumi.Input[Optional[str]]] = None,
                              partial_match: Optional[pulumi.Input[Optional[bool]]] = None,
                              registry_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRegistryTokenResult]:
    """
    The **Container Registry Token data source** can be used to search for and return an existing Container Registry Token.
    You can provide a string for the name parameter which will be compared with provisioned Container Registry Token.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search and make sure that your resources have unique names.

    ## Example Usage

    ### By Id
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.creg.get_registry_token(registry_id=example_ionoscloud_container_registry["id"],
        id="token_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.creg.get_registry_token(registry_id=example_ionoscloud_container_registry["id"],
        name="container-registry-token-example")
    ```

    ### By Name with Partial Match
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.creg.get_registry_token(registry_id=example_ionoscloud_container_registry["id"],
        name="-example",
        partial_match=True)
    ```


    :param str id: ID of the container registry token you want to search for.
    :param str name: Name of an existing container registry token that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
    :param bool partial_match: Whether partial matching is allowed or not when using name argument. Default value is false.
           
           `registry_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str registry_id: Registry's UUID.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['partialMatch'] = partial_match
    __args__['registryId'] = registry_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:creg/getRegistryToken:getRegistryToken', __args__, opts=opts, typ=GetRegistryTokenResult)
    return __ret__.apply(lambda __response__: GetRegistryTokenResult(
        credentials=pulumi.get(__response__, 'credentials'),
        expiry_date=pulumi.get(__response__, 'expiry_date'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        partial_match=pulumi.get(__response__, 'partial_match'),
        registry_id=pulumi.get(__response__, 'registry_id'),
        scopes=pulumi.get(__response__, 'scopes'),
        status=pulumi.get(__response__, 'status')))
