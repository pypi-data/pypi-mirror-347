# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InMemoryDBReplicaSetArgs', 'InMemoryDBReplicaSet']

@pulumi.input_type
class InMemoryDBReplicaSetArgs:
    def __init__(__self__, *,
                 connections: pulumi.Input['InMemoryDBReplicaSetConnectionsArgs'],
                 credentials: pulumi.Input['InMemoryDBReplicaSetCredentialsArgs'],
                 display_name: pulumi.Input[str],
                 eviction_policy: pulumi.Input[str],
                 persistence_mode: pulumi.Input[str],
                 replicas: pulumi.Input[int],
                 resources: pulumi.Input['InMemoryDBReplicaSetResourcesArgs'],
                 version: pulumi.Input[str],
                 initial_snapshot_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']] = None):
        """
        The set of arguments for constructing a InMemoryDBReplicaSet resource.
        :param pulumi.Input['InMemoryDBReplicaSetConnectionsArgs'] connections: [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
        :param pulumi.Input['InMemoryDBReplicaSetCredentialsArgs'] credentials: [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
        :param pulumi.Input[str] display_name: [string] The human-readable name of your replica set.
        :param pulumi.Input[str] eviction_policy: [string] The eviction policy for the replica set, possible values are:
        :param pulumi.Input[str] persistence_mode: [string] Specifies How and If data is persisted, possible values are:
               * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
               * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
               * `RDB` - RDB persistence performs snapshots of the current in memory state.
               * `RDB_AOF` - Both RDB and AOF persistence are enabled.
        :param pulumi.Input[int] replicas: [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
        :param pulumi.Input['InMemoryDBReplicaSetResourcesArgs'] resources: [object] The resources of the individual replicas.
        :param pulumi.Input[str] version: [string] The InMemoryDB version of your replica set.
        :param pulumi.Input[str] initial_snapshot_id: [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        :param pulumi.Input[str] location: [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
        :param pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs'] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        """
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "eviction_policy", eviction_policy)
        pulumi.set(__self__, "persistence_mode", persistence_mode)
        pulumi.set(__self__, "replicas", replicas)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "version", version)
        if initial_snapshot_id is not None:
            pulumi.set(__self__, "initial_snapshot_id", initial_snapshot_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']:
        """
        [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']:
        """
        [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        [string] The human-readable name of your replica set.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="evictionPolicy")
    def eviction_policy(self) -> pulumi.Input[str]:
        """
        [string] The eviction policy for the replica set, possible values are:
        """
        return pulumi.get(self, "eviction_policy")

    @eviction_policy.setter
    def eviction_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "eviction_policy", value)

    @property
    @pulumi.getter(name="persistenceMode")
    def persistence_mode(self) -> pulumi.Input[str]:
        """
        [string] Specifies How and If data is persisted, possible values are:
        * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
        * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
        * `RDB` - RDB persistence performs snapshots of the current in memory state.
        * `RDB_AOF` - Both RDB and AOF persistence are enabled.
        """
        return pulumi.get(self, "persistence_mode")

    @persistence_mode.setter
    def persistence_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "persistence_mode", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        """
        [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['InMemoryDBReplicaSetResourcesArgs']:
        """
        [object] The resources of the individual replicas.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['InMemoryDBReplicaSetResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        [string] The InMemoryDB version of your replica set.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="initialSnapshotId")
    def initial_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        """
        return pulumi.get(self, "initial_snapshot_id")

    @initial_snapshot_id.setter
    def initial_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_snapshot_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']]:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)


@pulumi.input_type
class _InMemoryDBReplicaSetState:
    def __init__(__self__, *,
                 connections: Optional[pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']] = None,
                 credentials: Optional[pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 eviction_policy: Optional[pulumi.Input[str]] = None,
                 initial_snapshot_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']] = None,
                 persistence_mode: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['InMemoryDBReplicaSetResourcesArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InMemoryDBReplicaSet resources.
        :param pulumi.Input['InMemoryDBReplicaSetConnectionsArgs'] connections: [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
        :param pulumi.Input['InMemoryDBReplicaSetCredentialsArgs'] credentials: [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
        :param pulumi.Input[str] display_name: [string] The human-readable name of your replica set.
        :param pulumi.Input[str] dns_name: [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
               
               > **⚠ NOTE:** `IONOS_API_URL_INMEMORYDB` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
        :param pulumi.Input[str] eviction_policy: [string] The eviction policy for the replica set, possible values are:
        :param pulumi.Input[str] initial_snapshot_id: [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        :param pulumi.Input[str] location: [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
        :param pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs'] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] persistence_mode: [string] Specifies How and If data is persisted, possible values are:
               * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
               * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
               * `RDB` - RDB persistence performs snapshots of the current in memory state.
               * `RDB_AOF` - Both RDB and AOF persistence are enabled.
        :param pulumi.Input[int] replicas: [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
        :param pulumi.Input['InMemoryDBReplicaSetResourcesArgs'] resources: [object] The resources of the individual replicas.
        :param pulumi.Input[str] version: [string] The InMemoryDB version of your replica set.
        """
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if eviction_policy is not None:
            pulumi.set(__self__, "eviction_policy", eviction_policy)
        if initial_snapshot_id is not None:
            pulumi.set(__self__, "initial_snapshot_id", initial_snapshot_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if persistence_mode is not None:
            pulumi.set(__self__, "persistence_mode", persistence_mode)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']]:
        """
        [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']]:
        """
        [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The human-readable name of your replica set.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.

        > **⚠ NOTE:** `IONOS_API_URL_INMEMORYDB` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="evictionPolicy")
    def eviction_policy(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The eviction policy for the replica set, possible values are:
        """
        return pulumi.get(self, "eviction_policy")

    @eviction_policy.setter
    def eviction_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eviction_policy", value)

    @property
    @pulumi.getter(name="initialSnapshotId")
    def initial_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        """
        return pulumi.get(self, "initial_snapshot_id")

    @initial_snapshot_id.setter
    def initial_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_snapshot_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']]:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="persistenceMode")
    def persistence_mode(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Specifies How and If data is persisted, possible values are:
        * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
        * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
        * `RDB` - RDB persistence performs snapshots of the current in memory state.
        * `RDB_AOF` - Both RDB and AOF persistence are enabled.
        """
        return pulumi.get(self, "persistence_mode")

    @persistence_mode.setter
    def persistence_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence_mode", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['InMemoryDBReplicaSetResourcesArgs']]:
        """
        [object] The resources of the individual replicas.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['InMemoryDBReplicaSetResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The InMemoryDB version of your replica set.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class InMemoryDBReplicaSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']]] = None,
                 credentials: Optional[pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 eviction_policy: Optional[pulumi.Input[str]] = None,
                 initial_snapshot_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']]] = None,
                 persistence_mode: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a **DBaaS InMemoryDB Replica Set**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="example",
            location="de/txl",
            description="Datacenter for DBaaS InMemoryDB replica sets")
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example.id,
            public=False,
            name="example")
        example_server = ionoscloud.compute.Server("example",
            name="example",
            datacenter_id=example.id,
            cores=2,
            ram=2048,
            availability_zone="ZONE_1",
            cpu_family="INTEL_SKYLAKE",
            image_name="rockylinux-8-GenericCloud-20230518",
            image_password="password",
            volume={
                "name": "example",
                "size": 10,
                "disk_type": "SSD Standard",
            },
            nic={
                "lan": example_lan.id,
                "name": "example",
                "dhcp": True,
            })
        example_in_memory_db_replica_set = ionoscloud.dbaas.InMemoryDBReplicaSet("example",
            location=example.location,
            display_name="ExampleReplicaSet",
            version="7.2",
            replicas=4,
            resources={
                "cores": 1,
                "ram": 6,
            },
            persistence_mode="RDB",
            eviction_policy="noeviction",
            connections={
                "datacenter_id": example.id,
                "lan_id": example_lan.id,
                "cidr": "database_ip_cidr_from_nic",
            },
            maintenance_window={
                "day_of_the_week": "Monday",
                "time": "10:00:00",
            },
            credentials={
                "username": "myuser",
                "plain_text_password": "testpassword",
            })
        ```

        ## Import

        Resource DBaaS InMemoryDB Replica Set can be imported using the `replicaset_id` and the `location`, separated by `:`, e.g:

        ```sh
        $ pulumi import ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet example location:replicaSet uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']] connections: [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
        :param pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']] credentials: [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
        :param pulumi.Input[str] display_name: [string] The human-readable name of your replica set.
        :param pulumi.Input[str] eviction_policy: [string] The eviction policy for the replica set, possible values are:
        :param pulumi.Input[str] initial_snapshot_id: [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        :param pulumi.Input[str] location: [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
        :param pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] persistence_mode: [string] Specifies How and If data is persisted, possible values are:
               * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
               * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
               * `RDB` - RDB persistence performs snapshots of the current in memory state.
               * `RDB_AOF` - Both RDB and AOF persistence are enabled.
        :param pulumi.Input[int] replicas: [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
        :param pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']] resources: [object] The resources of the individual replicas.
        :param pulumi.Input[str] version: [string] The InMemoryDB version of your replica set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InMemoryDBReplicaSetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **DBaaS InMemoryDB Replica Set**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="example",
            location="de/txl",
            description="Datacenter for DBaaS InMemoryDB replica sets")
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example.id,
            public=False,
            name="example")
        example_server = ionoscloud.compute.Server("example",
            name="example",
            datacenter_id=example.id,
            cores=2,
            ram=2048,
            availability_zone="ZONE_1",
            cpu_family="INTEL_SKYLAKE",
            image_name="rockylinux-8-GenericCloud-20230518",
            image_password="password",
            volume={
                "name": "example",
                "size": 10,
                "disk_type": "SSD Standard",
            },
            nic={
                "lan": example_lan.id,
                "name": "example",
                "dhcp": True,
            })
        example_in_memory_db_replica_set = ionoscloud.dbaas.InMemoryDBReplicaSet("example",
            location=example.location,
            display_name="ExampleReplicaSet",
            version="7.2",
            replicas=4,
            resources={
                "cores": 1,
                "ram": 6,
            },
            persistence_mode="RDB",
            eviction_policy="noeviction",
            connections={
                "datacenter_id": example.id,
                "lan_id": example_lan.id,
                "cidr": "database_ip_cidr_from_nic",
            },
            maintenance_window={
                "day_of_the_week": "Monday",
                "time": "10:00:00",
            },
            credentials={
                "username": "myuser",
                "plain_text_password": "testpassword",
            })
        ```

        ## Import

        Resource DBaaS InMemoryDB Replica Set can be imported using the `replicaset_id` and the `location`, separated by `:`, e.g:

        ```sh
        $ pulumi import ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet example location:replicaSet uuid
        ```

        :param str resource_name: The name of the resource.
        :param InMemoryDBReplicaSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InMemoryDBReplicaSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']]] = None,
                 credentials: Optional[pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 eviction_policy: Optional[pulumi.Input[str]] = None,
                 initial_snapshot_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']]] = None,
                 persistence_mode: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InMemoryDBReplicaSetArgs.__new__(InMemoryDBReplicaSetArgs)

            if connections is None and not opts.urn:
                raise TypeError("Missing required property 'connections'")
            __props__.__dict__["connections"] = connections
            if credentials is None and not opts.urn:
                raise TypeError("Missing required property 'credentials'")
            __props__.__dict__["credentials"] = credentials
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if eviction_policy is None and not opts.urn:
                raise TypeError("Missing required property 'eviction_policy'")
            __props__.__dict__["eviction_policy"] = eviction_policy
            __props__.__dict__["initial_snapshot_id"] = initial_snapshot_id
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_window"] = maintenance_window
            if persistence_mode is None and not opts.urn:
                raise TypeError("Missing required property 'persistence_mode'")
            __props__.__dict__["persistence_mode"] = persistence_mode
            if replicas is None and not opts.urn:
                raise TypeError("Missing required property 'replicas'")
            __props__.__dict__["replicas"] = replicas
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["dns_name"] = None
        super(InMemoryDBReplicaSet, __self__).__init__(
            'ionoscloud:dbaas/inMemoryDBReplicaSet:InMemoryDBReplicaSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connections: Optional[pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']]] = None,
            credentials: Optional[pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            eviction_policy: Optional[pulumi.Input[str]] = None,
            initial_snapshot_id: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maintenance_window: Optional[pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']]] = None,
            persistence_mode: Optional[pulumi.Input[str]] = None,
            replicas: Optional[pulumi.Input[int]] = None,
            resources: Optional[pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'InMemoryDBReplicaSet':
        """
        Get an existing InMemoryDBReplicaSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['InMemoryDBReplicaSetConnectionsArgs', 'InMemoryDBReplicaSetConnectionsArgsDict']] connections: [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
        :param pulumi.Input[Union['InMemoryDBReplicaSetCredentialsArgs', 'InMemoryDBReplicaSetCredentialsArgsDict']] credentials: [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
        :param pulumi.Input[str] display_name: [string] The human-readable name of your replica set.
        :param pulumi.Input[str] dns_name: [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.
               
               > **⚠ NOTE:** `IONOS_API_URL_INMEMORYDB` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
        :param pulumi.Input[str] eviction_policy: [string] The eviction policy for the replica set, possible values are:
        :param pulumi.Input[str] initial_snapshot_id: [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        :param pulumi.Input[str] location: [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
        :param pulumi.Input[Union['InMemoryDBReplicaSetMaintenanceWindowArgs', 'InMemoryDBReplicaSetMaintenanceWindowArgsDict']] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        :param pulumi.Input[str] persistence_mode: [string] Specifies How and If data is persisted, possible values are:
               * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
               * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
               * `RDB` - RDB persistence performs snapshots of the current in memory state.
               * `RDB_AOF` - Both RDB and AOF persistence are enabled.
        :param pulumi.Input[int] replicas: [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
        :param pulumi.Input[Union['InMemoryDBReplicaSetResourcesArgs', 'InMemoryDBReplicaSetResourcesArgsDict']] resources: [object] The resources of the individual replicas.
        :param pulumi.Input[str] version: [string] The InMemoryDB version of your replica set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InMemoryDBReplicaSetState.__new__(_InMemoryDBReplicaSetState)

        __props__.__dict__["connections"] = connections
        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["eviction_policy"] = eviction_policy
        __props__.__dict__["initial_snapshot_id"] = initial_snapshot_id
        __props__.__dict__["location"] = location
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["persistence_mode"] = persistence_mode
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["resources"] = resources
        __props__.__dict__["version"] = version
        return InMemoryDBReplicaSet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output['outputs.InMemoryDBReplicaSetConnections']:
        """
        [object] The network connection for your replica set. Only one connection is allowed. Updates to the value of the fields force the replica set to be re-created.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output['outputs.InMemoryDBReplicaSetCredentials']:
        """
        [object] Credentials for the InMemoryDB replicaset, only one type of password can be used since they are mutually exclusive. These values are used to create the initial InMemoryDB user, updating any of these will force recreation of the replica set resource.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        [string] The human-readable name of your replica set.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        """
        [string] The DNS name pointing to your replica set. Will be used to connect to the active/standalone instance.

        > **⚠ NOTE:** `IONOS_API_URL_INMEMORYDB` can be used to set a custom API URL for the resource. `location` field needs to be empty, otherwise it will override the custom API URL. Setting `endpoint` or `IONOS_API_URL` does not have any effect.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="evictionPolicy")
    def eviction_policy(self) -> pulumi.Output[str]:
        """
        [string] The eviction policy for the replica set, possible values are:
        """
        return pulumi.get(self, "eviction_policy")

    @property
    @pulumi.getter(name="initialSnapshotId")
    def initial_snapshot_id(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The ID of a snapshot to restore the replica set from. If set, the replica set will be created from the snapshot.
        """
        return pulumi.get(self, "initial_snapshot_id")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The location of your replica set. Updates to the value of the field force the replica set to be re-created. If this is not set and if no value is provided for the `IONOS_API_URL` env var, the default `location` will be: `de/fra`.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.InMemoryDBReplicaSetMaintenanceWindow']:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="persistenceMode")
    def persistence_mode(self) -> pulumi.Output[str]:
        """
        [string] Specifies How and If data is persisted, possible values are:
        * `None` - Data is inMemory only and will not be persisted. Useful for cache only applications.
        * `AOF` - (Append Only File) AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the InMemoryDB protocol itself.
        * `RDB` - RDB persistence performs snapshots of the current in memory state.
        * `RDB_AOF` - Both RDB and AOF persistence are enabled.
        """
        return pulumi.get(self, "persistence_mode")

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[int]:
        """
        [int] The total number of replicas in the replica set (one active and n-1 passive). In case of a standalone instance, the value is 1. In all other cases, the value is > 1. The replicas will not be available as read replicas, they are only standby for a failure of the active instance.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output['outputs.InMemoryDBReplicaSetResources']:
        """
        [object] The resources of the individual replicas.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        [string] The InMemoryDB version of your replica set.
        """
        return pulumi.get(self, "version")

