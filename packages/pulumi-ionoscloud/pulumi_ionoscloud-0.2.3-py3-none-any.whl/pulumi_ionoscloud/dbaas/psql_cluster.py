# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PSQLClusterArgs', 'PSQLCluster']

@pulumi.input_type
class PSQLClusterArgs:
    def __init__(__self__, *,
                 cores: pulumi.Input[int],
                 credentials: pulumi.Input['PSQLClusterCredentialsArgs'],
                 display_name: pulumi.Input[str],
                 instances: pulumi.Input[int],
                 location: pulumi.Input[str],
                 postgres_version: pulumi.Input[str],
                 ram: pulumi.Input[int],
                 storage_size: pulumi.Input[int],
                 storage_type: pulumi.Input[str],
                 synchronization_mode: pulumi.Input[str],
                 backup_location: Optional[pulumi.Input[str]] = None,
                 connection_pooler: Optional[pulumi.Input['PSQLClusterConnectionPoolerArgs']] = None,
                 connections: Optional[pulumi.Input['PSQLClusterConnectionsArgs']] = None,
                 from_backup: Optional[pulumi.Input['PSQLClusterFromBackupArgs']] = None,
                 maintenance_window: Optional[pulumi.Input['PSQLClusterMaintenanceWindowArgs']] = None):
        """
        The set of arguments for constructing a PSQLCluster resource.
        :param pulumi.Input[int] cores: [int] The number of CPU cores per replica.
        :param pulumi.Input['PSQLClusterCredentialsArgs'] credentials: [string] Credentials for the database user to be created. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] display_name: [string] The friendly name of your cluster.
        :param pulumi.Input[int] instances: [int] The total number of instances in the cluster (one master and n-1 standbys)
        :param pulumi.Input[str] location: [string] The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. Possible values are: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] postgres_version: [string] The PostgreSQL version of your cluster.
        :param pulumi.Input[int] ram: [int] The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        :param pulumi.Input[int] storage_size: [int] The amount of storage per instance in MB. Has to be a multiple of 2048.
        :param pulumi.Input[str] storage_type: [string] SSD, SSD Standard, SSD Premium, or HDD. Value "SSD" is deprecated, use the equivalent "SSD Premium" instead. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] synchronization_mode: [string] Represents different modes of replication. Can have one of the following values: ASYNCHRONOUS, SYNCHRONOUS, STRICTLY_SYNCHRONOUS. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] backup_location: (Computed)[string] The IONOS Object Storage location where the backups will be stored. Possible values are: `de`, `eu-south-2`, `eu-central-2`. This attribute is immutable (disallowed in update requests).
        :param pulumi.Input['PSQLClusterConnectionPoolerArgs'] connection_pooler: [object]
        :param pulumi.Input['PSQLClusterConnectionsArgs'] connections: [string] Details about the network connection for your cluster.
        :param pulumi.Input['PSQLClusterFromBackupArgs'] from_backup: [string] The unique ID of the backup you want to restore. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input['PSQLClusterMaintenanceWindowArgs'] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "postgres_version", postgres_version)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "synchronization_mode", synchronization_mode)
        if backup_location is not None:
            pulumi.set(__self__, "backup_location", backup_location)
        if connection_pooler is not None:
            pulumi.set(__self__, "connection_pooler", connection_pooler)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if from_backup is not None:
            pulumi.set(__self__, "from_backup", from_backup)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Input[int]:
        """
        [int] The number of CPU cores per replica.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: pulumi.Input[int]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['PSQLClusterCredentialsArgs']:
        """
        [string] Credentials for the database user to be created. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['PSQLClusterCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        [string] The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Input[int]:
        """
        [int] The total number of instances in the cluster (one master and n-1 standbys)
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        [string] The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. Possible values are: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="postgresVersion")
    def postgres_version(self) -> pulumi.Input[str]:
        """
        [string] The PostgreSQL version of your cluster.
        """
        return pulumi.get(self, "postgres_version")

    @postgres_version.setter
    def postgres_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "postgres_version", value)

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Input[int]:
        """
        [int] The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: pulumi.Input[int]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Input[int]:
        """
        [int] The amount of storage per instance in MB. Has to be a multiple of 2048.
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input[str]:
        """
        [string] SSD, SSD Standard, SSD Premium, or HDD. Value "SSD" is deprecated, use the equivalent "SSD Premium" instead. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="synchronizationMode")
    def synchronization_mode(self) -> pulumi.Input[str]:
        """
        [string] Represents different modes of replication. Can have one of the following values: ASYNCHRONOUS, SYNCHRONOUS, STRICTLY_SYNCHRONOUS. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "synchronization_mode")

    @synchronization_mode.setter
    def synchronization_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "synchronization_mode", value)

    @property
    @pulumi.getter(name="backupLocation")
    def backup_location(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed)[string] The IONOS Object Storage location where the backups will be stored. Possible values are: `de`, `eu-south-2`, `eu-central-2`. This attribute is immutable (disallowed in update requests).
        """
        return pulumi.get(self, "backup_location")

    @backup_location.setter
    def backup_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_location", value)

    @property
    @pulumi.getter(name="connectionPooler")
    def connection_pooler(self) -> Optional[pulumi.Input['PSQLClusterConnectionPoolerArgs']]:
        """
        [object]
        """
        return pulumi.get(self, "connection_pooler")

    @connection_pooler.setter
    def connection_pooler(self, value: Optional[pulumi.Input['PSQLClusterConnectionPoolerArgs']]):
        pulumi.set(self, "connection_pooler", value)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['PSQLClusterConnectionsArgs']]:
        """
        [string] Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['PSQLClusterConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter(name="fromBackup")
    def from_backup(self) -> Optional[pulumi.Input['PSQLClusterFromBackupArgs']]:
        """
        [string] The unique ID of the backup you want to restore. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "from_backup")

    @from_backup.setter
    def from_backup(self, value: Optional[pulumi.Input['PSQLClusterFromBackupArgs']]):
        pulumi.set(self, "from_backup", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['PSQLClusterMaintenanceWindowArgs']]:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['PSQLClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)


@pulumi.input_type
class _PSQLClusterState:
    def __init__(__self__, *,
                 backup_location: Optional[pulumi.Input[str]] = None,
                 connection_pooler: Optional[pulumi.Input['PSQLClusterConnectionPoolerArgs']] = None,
                 connections: Optional[pulumi.Input['PSQLClusterConnectionsArgs']] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input['PSQLClusterCredentialsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 from_backup: Optional[pulumi.Input['PSQLClusterFromBackupArgs']] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['PSQLClusterMaintenanceWindowArgs']] = None,
                 postgres_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 synchronization_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PSQLCluster resources.
        :param pulumi.Input[str] backup_location: (Computed)[string] The IONOS Object Storage location where the backups will be stored. Possible values are: `de`, `eu-south-2`, `eu-central-2`. This attribute is immutable (disallowed in update requests).
        :param pulumi.Input['PSQLClusterConnectionPoolerArgs'] connection_pooler: [object]
        :param pulumi.Input['PSQLClusterConnectionsArgs'] connections: [string] Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: [int] The number of CPU cores per replica.
        :param pulumi.Input['PSQLClusterCredentialsArgs'] credentials: [string] Credentials for the database user to be created. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] display_name: [string] The friendly name of your cluster.
        :param pulumi.Input[str] dns_name: [string] The DNS name pointing to your cluster.
        :param pulumi.Input['PSQLClusterFromBackupArgs'] from_backup: [string] The unique ID of the backup you want to restore. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[int] instances: [int] The total number of instances in the cluster (one master and n-1 standbys)
        :param pulumi.Input[str] location: [string] The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. Possible values are: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input['PSQLClusterMaintenanceWindowArgs'] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] postgres_version: [string] The PostgreSQL version of your cluster.
        :param pulumi.Input[int] ram: [int] The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        :param pulumi.Input[int] storage_size: [int] The amount of storage per instance in MB. Has to be a multiple of 2048.
        :param pulumi.Input[str] storage_type: [string] SSD, SSD Standard, SSD Premium, or HDD. Value "SSD" is deprecated, use the equivalent "SSD Premium" instead. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] synchronization_mode: [string] Represents different modes of replication. Can have one of the following values: ASYNCHRONOUS, SYNCHRONOUS, STRICTLY_SYNCHRONOUS. This attribute is immutable(disallowed in update requests).
        """
        if backup_location is not None:
            pulumi.set(__self__, "backup_location", backup_location)
        if connection_pooler is not None:
            pulumi.set(__self__, "connection_pooler", connection_pooler)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if from_backup is not None:
            pulumi.set(__self__, "from_backup", from_backup)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if postgres_version is not None:
            pulumi.set(__self__, "postgres_version", postgres_version)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if synchronization_mode is not None:
            pulumi.set(__self__, "synchronization_mode", synchronization_mode)

    @property
    @pulumi.getter(name="backupLocation")
    def backup_location(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed)[string] The IONOS Object Storage location where the backups will be stored. Possible values are: `de`, `eu-south-2`, `eu-central-2`. This attribute is immutable (disallowed in update requests).
        """
        return pulumi.get(self, "backup_location")

    @backup_location.setter
    def backup_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_location", value)

    @property
    @pulumi.getter(name="connectionPooler")
    def connection_pooler(self) -> Optional[pulumi.Input['PSQLClusterConnectionPoolerArgs']]:
        """
        [object]
        """
        return pulumi.get(self, "connection_pooler")

    @connection_pooler.setter
    def connection_pooler(self, value: Optional[pulumi.Input['PSQLClusterConnectionPoolerArgs']]):
        pulumi.set(self, "connection_pooler", value)

    @property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input['PSQLClusterConnectionsArgs']]:
        """
        [string] Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input['PSQLClusterConnectionsArgs']]):
        pulumi.set(self, "connections", value)

    @property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The number of CPU cores per replica.
        """
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['PSQLClusterCredentialsArgs']]:
        """
        [string] Credentials for the database user to be created. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['PSQLClusterCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The DNS name pointing to your cluster.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="fromBackup")
    def from_backup(self) -> Optional[pulumi.Input['PSQLClusterFromBackupArgs']]:
        """
        [string] The unique ID of the backup you want to restore. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "from_backup")

    @from_backup.setter
    def from_backup(self, value: Optional[pulumi.Input['PSQLClusterFromBackupArgs']]):
        pulumi.set(self, "from_backup", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The total number of instances in the cluster (one master and n-1 standbys)
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. Possible values are: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['PSQLClusterMaintenanceWindowArgs']]:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['PSQLClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="postgresVersion")
    def postgres_version(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The PostgreSQL version of your cluster.
        """
        return pulumi.get(self, "postgres_version")

    @postgres_version.setter
    def postgres_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postgres_version", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The amount of storage per instance in MB. Has to be a multiple of 2048.
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        [string] SSD, SSD Standard, SSD Premium, or HDD. Value "SSD" is deprecated, use the equivalent "SSD Premium" instead. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="synchronizationMode")
    def synchronization_mode(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Represents different modes of replication. Can have one of the following values: ASYNCHRONOUS, SYNCHRONOUS, STRICTLY_SYNCHRONOUS. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "synchronization_mode")

    @synchronization_mode.setter
    def synchronization_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronization_mode", value)


class PSQLCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_location: Optional[pulumi.Input[str]] = None,
                 connection_pooler: Optional[pulumi.Input[Union['PSQLClusterConnectionPoolerArgs', 'PSQLClusterConnectionPoolerArgsDict']]] = None,
                 connections: Optional[pulumi.Input[Union['PSQLClusterConnectionsArgs', 'PSQLClusterConnectionsArgsDict']]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input[Union['PSQLClusterCredentialsArgs', 'PSQLClusterCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 from_backup: Optional[pulumi.Input[Union['PSQLClusterFromBackupArgs', 'PSQLClusterFromBackupArgsDict']]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['PSQLClusterMaintenanceWindowArgs', 'PSQLClusterMaintenanceWindowArgsDict']]] = None,
                 postgres_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 synchronization_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a **DbaaS PgSql Cluster**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        # Basic example
        example = ionoscloud.compute.Datacenter("example",
            name="example",
            location="de/txl",
            description="Datacenter for testing dbaas cluster")
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example.id,
            public=False,
            name="example")
        example_psql_cluster = ionoscloud.dbaas.PSQLCluster("example",
            postgres_version="12",
            instances=1,
            cores=4,
            ram=2048,
            storage_size=2048,
            storage_type="HDD",
            connection_pooler={
                "enabled": True,
                "pool_mode": "session",
            },
            connections={
                "datacenter_id": example.id,
                "lan_id": example_lan.id,
                "cidr": "192.168.100.1/24",
            },
            location=example.location,
            display_name="PostgreSQL_cluster",
            maintenance_window={
                "day_of_the_week": "Sunday",
                "time": "09:00:00",
            },
            credentials={
                "username": "username",
                "password": "strongPassword",
            },
            synchronization_mode="ASYNCHRONOUS")
        ```

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        # Complete example
        example = ionoscloud.compute.Datacenter("example",
            name="example",
            location="de/txl",
            description="Datacenter for testing dbaas cluster")
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example.id,
            public=False,
            name="example")
        example_server = ionoscloud.compute.Server("example",
            name="example",
            datacenter_id=example.id,
            cores=2,
            ram=2048,
            availability_zone="ZONE_1",
            cpu_family="INTEL_SKYLAKE",
            image_name="rockylinux-8-GenericCloud-20230518",
            image_password="password",
            volume={
                "name": "example",
                "size": 6,
                "disk_type": "SSD Standard",
            },
            nic={
                "lan": example_lan.id,
                "name": "example",
                "dhcp": True,
            })
        cluster_password = random.index.Password("cluster_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        example_psql_cluster = ionoscloud.dbaas.PSQLCluster("example",
            postgres_version="12",
            instances=1,
            cores=4,
            ram=2048,
            storage_size=2048,
            storage_type="HDD",
            connection_pooler={
                "enabled": True,
                "pool_mode": "session",
            },
            connections={
                "datacenter_id": example.id,
                "lan_id": example_lan.id,
                "cidr": "database_ip_cidr_from_nic",
            },
            location=example.location,
            display_name="PostgreSQL_cluster",
            maintenance_window={
                "day_of_the_week": "Sunday",
                "time": "09:00:00",
            },
            credentials={
                "username": "username",
                "password": cluster_password["result"],
            },
            synchronization_mode="ASYNCHRONOUS",
            from_backup={
                "backup_id": "backup_uuid",
                "recovery_target_time": "2021-12-06T13:54:08Z",
            })
        ```

        ## Import

        Resource DbaaS Postgres Cluster can be imported using the `cluster_id`, e.g.

        ```sh
        $ pulumi import ionoscloud:dbaas/pSQLCluster:PSQLCluster mycluser cluster uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_location: (Computed)[string] The IONOS Object Storage location where the backups will be stored. Possible values are: `de`, `eu-south-2`, `eu-central-2`. This attribute is immutable (disallowed in update requests).
        :param pulumi.Input[Union['PSQLClusterConnectionPoolerArgs', 'PSQLClusterConnectionPoolerArgsDict']] connection_pooler: [object]
        :param pulumi.Input[Union['PSQLClusterConnectionsArgs', 'PSQLClusterConnectionsArgsDict']] connections: [string] Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: [int] The number of CPU cores per replica.
        :param pulumi.Input[Union['PSQLClusterCredentialsArgs', 'PSQLClusterCredentialsArgsDict']] credentials: [string] Credentials for the database user to be created. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] display_name: [string] The friendly name of your cluster.
        :param pulumi.Input[Union['PSQLClusterFromBackupArgs', 'PSQLClusterFromBackupArgsDict']] from_backup: [string] The unique ID of the backup you want to restore. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[int] instances: [int] The total number of instances in the cluster (one master and n-1 standbys)
        :param pulumi.Input[str] location: [string] The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. Possible values are: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[Union['PSQLClusterMaintenanceWindowArgs', 'PSQLClusterMaintenanceWindowArgsDict']] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] postgres_version: [string] The PostgreSQL version of your cluster.
        :param pulumi.Input[int] ram: [int] The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        :param pulumi.Input[int] storage_size: [int] The amount of storage per instance in MB. Has to be a multiple of 2048.
        :param pulumi.Input[str] storage_type: [string] SSD, SSD Standard, SSD Premium, or HDD. Value "SSD" is deprecated, use the equivalent "SSD Premium" instead. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] synchronization_mode: [string] Represents different modes of replication. Can have one of the following values: ASYNCHRONOUS, SYNCHRONOUS, STRICTLY_SYNCHRONOUS. This attribute is immutable(disallowed in update requests).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PSQLClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **DbaaS PgSql Cluster**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        # Basic example
        example = ionoscloud.compute.Datacenter("example",
            name="example",
            location="de/txl",
            description="Datacenter for testing dbaas cluster")
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example.id,
            public=False,
            name="example")
        example_psql_cluster = ionoscloud.dbaas.PSQLCluster("example",
            postgres_version="12",
            instances=1,
            cores=4,
            ram=2048,
            storage_size=2048,
            storage_type="HDD",
            connection_pooler={
                "enabled": True,
                "pool_mode": "session",
            },
            connections={
                "datacenter_id": example.id,
                "lan_id": example_lan.id,
                "cidr": "192.168.100.1/24",
            },
            location=example.location,
            display_name="PostgreSQL_cluster",
            maintenance_window={
                "day_of_the_week": "Sunday",
                "time": "09:00:00",
            },
            credentials={
                "username": "username",
                "password": "strongPassword",
            },
            synchronization_mode="ASYNCHRONOUS")
        ```

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        # Complete example
        example = ionoscloud.compute.Datacenter("example",
            name="example",
            location="de/txl",
            description="Datacenter for testing dbaas cluster")
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example.id,
            public=False,
            name="example")
        example_server = ionoscloud.compute.Server("example",
            name="example",
            datacenter_id=example.id,
            cores=2,
            ram=2048,
            availability_zone="ZONE_1",
            cpu_family="INTEL_SKYLAKE",
            image_name="rockylinux-8-GenericCloud-20230518",
            image_password="password",
            volume={
                "name": "example",
                "size": 6,
                "disk_type": "SSD Standard",
            },
            nic={
                "lan": example_lan.id,
                "name": "example",
                "dhcp": True,
            })
        cluster_password = random.index.Password("cluster_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        example_psql_cluster = ionoscloud.dbaas.PSQLCluster("example",
            postgres_version="12",
            instances=1,
            cores=4,
            ram=2048,
            storage_size=2048,
            storage_type="HDD",
            connection_pooler={
                "enabled": True,
                "pool_mode": "session",
            },
            connections={
                "datacenter_id": example.id,
                "lan_id": example_lan.id,
                "cidr": "database_ip_cidr_from_nic",
            },
            location=example.location,
            display_name="PostgreSQL_cluster",
            maintenance_window={
                "day_of_the_week": "Sunday",
                "time": "09:00:00",
            },
            credentials={
                "username": "username",
                "password": cluster_password["result"],
            },
            synchronization_mode="ASYNCHRONOUS",
            from_backup={
                "backup_id": "backup_uuid",
                "recovery_target_time": "2021-12-06T13:54:08Z",
            })
        ```

        ## Import

        Resource DbaaS Postgres Cluster can be imported using the `cluster_id`, e.g.

        ```sh
        $ pulumi import ionoscloud:dbaas/pSQLCluster:PSQLCluster mycluser cluster uuid
        ```

        :param str resource_name: The name of the resource.
        :param PSQLClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PSQLClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_location: Optional[pulumi.Input[str]] = None,
                 connection_pooler: Optional[pulumi.Input[Union['PSQLClusterConnectionPoolerArgs', 'PSQLClusterConnectionPoolerArgsDict']]] = None,
                 connections: Optional[pulumi.Input[Union['PSQLClusterConnectionsArgs', 'PSQLClusterConnectionsArgsDict']]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input[Union['PSQLClusterCredentialsArgs', 'PSQLClusterCredentialsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 from_backup: Optional[pulumi.Input[Union['PSQLClusterFromBackupArgs', 'PSQLClusterFromBackupArgsDict']]] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[Union['PSQLClusterMaintenanceWindowArgs', 'PSQLClusterMaintenanceWindowArgsDict']]] = None,
                 postgres_version: Optional[pulumi.Input[str]] = None,
                 ram: Optional[pulumi.Input[int]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 synchronization_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PSQLClusterArgs.__new__(PSQLClusterArgs)

            __props__.__dict__["backup_location"] = backup_location
            __props__.__dict__["connection_pooler"] = connection_pooler
            __props__.__dict__["connections"] = connections
            if cores is None and not opts.urn:
                raise TypeError("Missing required property 'cores'")
            __props__.__dict__["cores"] = cores
            if credentials is None and not opts.urn:
                raise TypeError("Missing required property 'credentials'")
            __props__.__dict__["credentials"] = credentials
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["from_backup"] = from_backup
            if instances is None and not opts.urn:
                raise TypeError("Missing required property 'instances'")
            __props__.__dict__["instances"] = instances
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["maintenance_window"] = maintenance_window
            if postgres_version is None and not opts.urn:
                raise TypeError("Missing required property 'postgres_version'")
            __props__.__dict__["postgres_version"] = postgres_version
            if ram is None and not opts.urn:
                raise TypeError("Missing required property 'ram'")
            __props__.__dict__["ram"] = ram
            if storage_size is None and not opts.urn:
                raise TypeError("Missing required property 'storage_size'")
            __props__.__dict__["storage_size"] = storage_size
            if storage_type is None and not opts.urn:
                raise TypeError("Missing required property 'storage_type'")
            __props__.__dict__["storage_type"] = storage_type
            if synchronization_mode is None and not opts.urn:
                raise TypeError("Missing required property 'synchronization_mode'")
            __props__.__dict__["synchronization_mode"] = synchronization_mode
            __props__.__dict__["dns_name"] = None
        super(PSQLCluster, __self__).__init__(
            'ionoscloud:dbaas/pSQLCluster:PSQLCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_location: Optional[pulumi.Input[str]] = None,
            connection_pooler: Optional[pulumi.Input[Union['PSQLClusterConnectionPoolerArgs', 'PSQLClusterConnectionPoolerArgsDict']]] = None,
            connections: Optional[pulumi.Input[Union['PSQLClusterConnectionsArgs', 'PSQLClusterConnectionsArgsDict']]] = None,
            cores: Optional[pulumi.Input[int]] = None,
            credentials: Optional[pulumi.Input[Union['PSQLClusterCredentialsArgs', 'PSQLClusterCredentialsArgsDict']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            from_backup: Optional[pulumi.Input[Union['PSQLClusterFromBackupArgs', 'PSQLClusterFromBackupArgsDict']]] = None,
            instances: Optional[pulumi.Input[int]] = None,
            location: Optional[pulumi.Input[str]] = None,
            maintenance_window: Optional[pulumi.Input[Union['PSQLClusterMaintenanceWindowArgs', 'PSQLClusterMaintenanceWindowArgsDict']]] = None,
            postgres_version: Optional[pulumi.Input[str]] = None,
            ram: Optional[pulumi.Input[int]] = None,
            storage_size: Optional[pulumi.Input[int]] = None,
            storage_type: Optional[pulumi.Input[str]] = None,
            synchronization_mode: Optional[pulumi.Input[str]] = None) -> 'PSQLCluster':
        """
        Get an existing PSQLCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_location: (Computed)[string] The IONOS Object Storage location where the backups will be stored. Possible values are: `de`, `eu-south-2`, `eu-central-2`. This attribute is immutable (disallowed in update requests).
        :param pulumi.Input[Union['PSQLClusterConnectionPoolerArgs', 'PSQLClusterConnectionPoolerArgsDict']] connection_pooler: [object]
        :param pulumi.Input[Union['PSQLClusterConnectionsArgs', 'PSQLClusterConnectionsArgsDict']] connections: [string] Details about the network connection for your cluster.
        :param pulumi.Input[int] cores: [int] The number of CPU cores per replica.
        :param pulumi.Input[Union['PSQLClusterCredentialsArgs', 'PSQLClusterCredentialsArgsDict']] credentials: [string] Credentials for the database user to be created. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] display_name: [string] The friendly name of your cluster.
        :param pulumi.Input[str] dns_name: [string] The DNS name pointing to your cluster.
        :param pulumi.Input[Union['PSQLClusterFromBackupArgs', 'PSQLClusterFromBackupArgsDict']] from_backup: [string] The unique ID of the backup you want to restore. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[int] instances: [int] The total number of instances in the cluster (one master and n-1 standbys)
        :param pulumi.Input[str] location: [string] The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. Possible values are: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[Union['PSQLClusterMaintenanceWindowArgs', 'PSQLClusterMaintenanceWindowArgsDict']] maintenance_window: (Computed) A weekly 4 hour-long window, during which maintenance might occur
        :param pulumi.Input[str] postgres_version: [string] The PostgreSQL version of your cluster.
        :param pulumi.Input[int] ram: [int] The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        :param pulumi.Input[int] storage_size: [int] The amount of storage per instance in MB. Has to be a multiple of 2048.
        :param pulumi.Input[str] storage_type: [string] SSD, SSD Standard, SSD Premium, or HDD. Value "SSD" is deprecated, use the equivalent "SSD Premium" instead. This attribute is immutable(disallowed in update requests).
        :param pulumi.Input[str] synchronization_mode: [string] Represents different modes of replication. Can have one of the following values: ASYNCHRONOUS, SYNCHRONOUS, STRICTLY_SYNCHRONOUS. This attribute is immutable(disallowed in update requests).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PSQLClusterState.__new__(_PSQLClusterState)

        __props__.__dict__["backup_location"] = backup_location
        __props__.__dict__["connection_pooler"] = connection_pooler
        __props__.__dict__["connections"] = connections
        __props__.__dict__["cores"] = cores
        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["from_backup"] = from_backup
        __props__.__dict__["instances"] = instances
        __props__.__dict__["location"] = location
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["postgres_version"] = postgres_version
        __props__.__dict__["ram"] = ram
        __props__.__dict__["storage_size"] = storage_size
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["synchronization_mode"] = synchronization_mode
        return PSQLCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupLocation")
    def backup_location(self) -> pulumi.Output[str]:
        """
        (Computed)[string] The IONOS Object Storage location where the backups will be stored. Possible values are: `de`, `eu-south-2`, `eu-central-2`. This attribute is immutable (disallowed in update requests).
        """
        return pulumi.get(self, "backup_location")

    @property
    @pulumi.getter(name="connectionPooler")
    def connection_pooler(self) -> pulumi.Output['outputs.PSQLClusterConnectionPooler']:
        """
        [object]
        """
        return pulumi.get(self, "connection_pooler")

    @property
    @pulumi.getter
    def connections(self) -> pulumi.Output[Optional['outputs.PSQLClusterConnections']]:
        """
        [string] Details about the network connection for your cluster.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Output[int]:
        """
        [int] The number of CPU cores per replica.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output['outputs.PSQLClusterCredentials']:
        """
        [string] Credentials for the database user to be created. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        [string] The friendly name of your cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        """
        [string] The DNS name pointing to your cluster.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="fromBackup")
    def from_backup(self) -> pulumi.Output[Optional['outputs.PSQLClusterFromBackup']]:
        """
        [string] The unique ID of the backup you want to restore. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "from_backup")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[int]:
        """
        [int] The total number of instances in the cluster (one master and n-1 standbys)
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        [string] The physical location where the cluster will be created. This will be where all of your instances live. Property cannot be modified after datacenter creation. Possible values are: `de/fra`, `de/txl`, `gb/lhr`, `es/vit`, `us/ewr`, `us/las`. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.PSQLClusterMaintenanceWindow']:
        """
        (Computed) A weekly 4 hour-long window, during which maintenance might occur
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="postgresVersion")
    def postgres_version(self) -> pulumi.Output[str]:
        """
        [string] The PostgreSQL version of your cluster.
        """
        return pulumi.get(self, "postgres_version")

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Output[int]:
        """
        [int] The amount of memory per instance in megabytes. Has to be a multiple of 1024.
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Output[int]:
        """
        [int] The amount of storage per instance in MB. Has to be a multiple of 2048.
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[str]:
        """
        [string] SSD, SSD Standard, SSD Premium, or HDD. Value "SSD" is deprecated, use the equivalent "SSD Premium" instead. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="synchronizationMode")
    def synchronization_mode(self) -> pulumi.Output[str]:
        """
        [string] Represents different modes of replication. Can have one of the following values: ASYNCHRONOUS, SYNCHRONOUS, STRICTLY_SYNCHRONOUS. This attribute is immutable(disallowed in update requests).
        """
        return pulumi.get(self, "synchronization_mode")

