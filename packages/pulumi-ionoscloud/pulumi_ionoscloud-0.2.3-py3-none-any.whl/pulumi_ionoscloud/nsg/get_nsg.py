# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNsgResult',
    'AwaitableGetNsgResult',
    'get_nsg',
    'get_nsg_output',
]

@pulumi.output_type
class GetNsgResult:
    """
    A collection of values returned by getNsg.
    """
    def __init__(__self__, datacenter_id=None, description=None, id=None, name=None, rule_ids=None, rules=None):
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rule_ids and not isinstance(rule_ids, list):
            raise TypeError("Expected argument 'rule_ids' to be a list")
        pulumi.set(__self__, "rule_ids", rule_ids)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        UUID of the Virtual Data Center
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description for the Network Security Group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        UUID of the Network Security Group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Network Security Group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleIds")
    def rule_ids(self) -> Sequence[str]:
        """
        List of IDs for the Firewall Rules attached to this group
        """
        return pulumi.get(self, "rule_ids")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetNsgRuleResult']:
        """
        List of Firewall Rule objects attached to this group
        """
        return pulumi.get(self, "rules")


class AwaitableGetNsgResult(GetNsgResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsgResult(
            datacenter_id=self.datacenter_id,
            description=self.description,
            id=self.id,
            name=self.name,
            rule_ids=self.rule_ids,
            rules=self.rules)


def get_nsg(datacenter_id: Optional[str] = None,
            id: Optional[str] = None,
            name: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsgResult:
    """
    The **NSG Data source** can be used to search for and return an existing security group.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.nsg.get_nsg(datacenter_id=example_ionoscloud_datacenter["id"],
        id=nsg_id)
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.nsg.get_nsg(datacenter_id=example_ionoscloud_datacenter["id"],
        name="NSG Example")
    ```


    :param str datacenter_id: Datacenter's UUID.
    :param str id: Id of an existing Network Security Group that you want to search for.
    :param str name: Name of an existing Network Security Group that you want to search for.
           
           Either `name`, or `id` must be provided. If none, the datasource will return an error.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:nsg/getNsg:getNsg', __args__, opts=opts, typ=GetNsgResult).value

    return AwaitableGetNsgResult(
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        rule_ids=pulumi.get(__ret__, 'rule_ids'),
        rules=pulumi.get(__ret__, 'rules'))
def get_nsg_output(datacenter_id: Optional[pulumi.Input[str]] = None,
                   id: Optional[pulumi.Input[Optional[str]]] = None,
                   name: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNsgResult]:
    """
    The **NSG Data source** can be used to search for and return an existing security group.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.nsg.get_nsg(datacenter_id=example_ionoscloud_datacenter["id"],
        id=nsg_id)
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.nsg.get_nsg(datacenter_id=example_ionoscloud_datacenter["id"],
        name="NSG Example")
    ```


    :param str datacenter_id: Datacenter's UUID.
    :param str id: Id of an existing Network Security Group that you want to search for.
    :param str name: Name of an existing Network Security Group that you want to search for.
           
           Either `name`, or `id` must be provided. If none, the datasource will return an error.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:nsg/getNsg:getNsg', __args__, opts=opts, typ=GetNsgResult)
    return __ret__.apply(lambda __response__: GetNsgResult(
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        rule_ids=pulumi.get(__response__, 'rule_ids'),
        rules=pulumi.get(__response__, 'rules')))
