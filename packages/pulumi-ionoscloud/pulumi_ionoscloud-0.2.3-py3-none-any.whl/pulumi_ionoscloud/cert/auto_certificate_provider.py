# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AutoCertificateProviderArgs', 'AutoCertificateProvider']

@pulumi.input_type
class AutoCertificateProviderArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 server: pulumi.Input[str],
                 external_account_binding: Optional[pulumi.Input['AutoCertificateProviderExternalAccountBindingArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AutoCertificateProvider resource.
        :param pulumi.Input[str] email: [string] The email address of the certificate requester.
        :param pulumi.Input[str] server: [string] The URL of the certificate provider.
        :param pulumi.Input['AutoCertificateProviderExternalAccountBindingArgs'] external_account_binding: [list] External account binding details.
        :param pulumi.Input[str] location: [string] The location of the provider.
        :param pulumi.Input[str] name: [string] The name of the certificate provider.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "server", server)
        if external_account_binding is not None:
            pulumi.set(__self__, "external_account_binding", external_account_binding)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        [string] The email address of the certificate requester.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        [string] The URL of the certificate provider.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(self) -> Optional[pulumi.Input['AutoCertificateProviderExternalAccountBindingArgs']]:
        """
        [list] External account binding details.
        """
        return pulumi.get(self, "external_account_binding")

    @external_account_binding.setter
    def external_account_binding(self, value: Optional[pulumi.Input['AutoCertificateProviderExternalAccountBindingArgs']]):
        pulumi.set(self, "external_account_binding", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The location of the provider.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the certificate provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AutoCertificateProviderState:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 external_account_binding: Optional[pulumi.Input['AutoCertificateProviderExternalAccountBindingArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AutoCertificateProvider resources.
        :param pulumi.Input[str] email: [string] The email address of the certificate requester.
        :param pulumi.Input['AutoCertificateProviderExternalAccountBindingArgs'] external_account_binding: [list] External account binding details.
        :param pulumi.Input[str] location: [string] The location of the provider.
        :param pulumi.Input[str] name: [string] The name of the certificate provider.
        :param pulumi.Input[str] server: [string] The URL of the certificate provider.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if external_account_binding is not None:
            pulumi.set(__self__, "external_account_binding", external_account_binding)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The email address of the certificate requester.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(self) -> Optional[pulumi.Input['AutoCertificateProviderExternalAccountBindingArgs']]:
        """
        [list] External account binding details.
        """
        return pulumi.get(self, "external_account_binding")

    @external_account_binding.setter
    def external_account_binding(self, value: Optional[pulumi.Input['AutoCertificateProviderExternalAccountBindingArgs']]):
        pulumi.set(self, "external_account_binding", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The location of the provider.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the certificate provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The URL of the certificate provider.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


class AutoCertificateProvider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 external_account_binding: Optional[pulumi.Input[Union['AutoCertificateProviderExternalAccountBindingArgs', 'AutoCertificateProviderExternalAccountBindingArgsDict']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a **CM provider**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.cert.AutoCertificateProvider("example",
            name="Let's Encrypt",
            email="user@example.com",
            location="de/fra",
            server="https://acme-v02.api.letsencrypt.org/directory",
            external_account_binding={
                "key_id": "some-key-id",
                "key_secret": "secret",
            })
        ```

        ## Import

        The resource can be imported using the `provider_id` and the `location`, separated by `:`, e.g.

        ```sh
        $ pulumi import ionoscloud:cert/autoCertificateProvider:AutoCertificateProvider example location:provider_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: [string] The email address of the certificate requester.
        :param pulumi.Input[Union['AutoCertificateProviderExternalAccountBindingArgs', 'AutoCertificateProviderExternalAccountBindingArgsDict']] external_account_binding: [list] External account binding details.
        :param pulumi.Input[str] location: [string] The location of the provider.
        :param pulumi.Input[str] name: [string] The name of the certificate provider.
        :param pulumi.Input[str] server: [string] The URL of the certificate provider.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutoCertificateProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **CM provider**.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.cert.AutoCertificateProvider("example",
            name="Let's Encrypt",
            email="user@example.com",
            location="de/fra",
            server="https://acme-v02.api.letsencrypt.org/directory",
            external_account_binding={
                "key_id": "some-key-id",
                "key_secret": "secret",
            })
        ```

        ## Import

        The resource can be imported using the `provider_id` and the `location`, separated by `:`, e.g.

        ```sh
        $ pulumi import ionoscloud:cert/autoCertificateProvider:AutoCertificateProvider example location:provider_id
        ```

        :param str resource_name: The name of the resource.
        :param AutoCertificateProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutoCertificateProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 external_account_binding: Optional[pulumi.Input[Union['AutoCertificateProviderExternalAccountBindingArgs', 'AutoCertificateProviderExternalAccountBindingArgsDict']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutoCertificateProviderArgs.__new__(AutoCertificateProviderArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["external_account_binding"] = external_account_binding
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
        super(AutoCertificateProvider, __self__).__init__(
            'ionoscloud:cert/autoCertificateProvider:AutoCertificateProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            email: Optional[pulumi.Input[str]] = None,
            external_account_binding: Optional[pulumi.Input[Union['AutoCertificateProviderExternalAccountBindingArgs', 'AutoCertificateProviderExternalAccountBindingArgsDict']]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None) -> 'AutoCertificateProvider':
        """
        Get an existing AutoCertificateProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: [string] The email address of the certificate requester.
        :param pulumi.Input[Union['AutoCertificateProviderExternalAccountBindingArgs', 'AutoCertificateProviderExternalAccountBindingArgsDict']] external_account_binding: [list] External account binding details.
        :param pulumi.Input[str] location: [string] The location of the provider.
        :param pulumi.Input[str] name: [string] The name of the certificate provider.
        :param pulumi.Input[str] server: [string] The URL of the certificate provider.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutoCertificateProviderState.__new__(_AutoCertificateProviderState)

        __props__.__dict__["email"] = email
        __props__.__dict__["external_account_binding"] = external_account_binding
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["server"] = server
        return AutoCertificateProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        [string] The email address of the certificate requester.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(self) -> pulumi.Output[Optional['outputs.AutoCertificateProviderExternalAccountBinding']]:
        """
        [list] External account binding details.
        """
        return pulumi.get(self, "external_account_binding")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The location of the provider.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the certificate provider.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        [string] The URL of the certificate provider.
        """
        return pulumi.get(self, "server")

