# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNodePoolResult',
    'AwaitableGetNodePoolResult',
    'get_node_pool',
    'get_node_pool_output',
]

@pulumi.output_type
class GetNodePoolResult:
    """
    A collection of values returned by getNodePool.
    """
    def __init__(__self__, annotations=None, auto_scalings=None, availability_zone=None, available_upgrade_versions=None, cores_count=None, cpu_family=None, datacenter_id=None, id=None, k8s_cluster_id=None, k8s_version=None, labels=None, lans=None, maintenance_windows=None, name=None, node_count=None, public_ips=None, ram_size=None, state=None, storage_size=None, storage_type=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if auto_scalings and not isinstance(auto_scalings, list):
            raise TypeError("Expected argument 'auto_scalings' to be a list")
        pulumi.set(__self__, "auto_scalings", auto_scalings)
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if available_upgrade_versions and not isinstance(available_upgrade_versions, list):
            raise TypeError("Expected argument 'available_upgrade_versions' to be a list")
        pulumi.set(__self__, "available_upgrade_versions", available_upgrade_versions)
        if cores_count and not isinstance(cores_count, int):
            raise TypeError("Expected argument 'cores_count' to be a int")
        pulumi.set(__self__, "cores_count", cores_count)
        if cpu_family and not isinstance(cpu_family, str):
            raise TypeError("Expected argument 'cpu_family' to be a str")
        pulumi.set(__self__, "cpu_family", cpu_family)
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if k8s_cluster_id and not isinstance(k8s_cluster_id, str):
            raise TypeError("Expected argument 'k8s_cluster_id' to be a str")
        pulumi.set(__self__, "k8s_cluster_id", k8s_cluster_id)
        if k8s_version and not isinstance(k8s_version, str):
            raise TypeError("Expected argument 'k8s_version' to be a str")
        pulumi.set(__self__, "k8s_version", k8s_version)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if lans and not isinstance(lans, list):
            raise TypeError("Expected argument 'lans' to be a list")
        pulumi.set(__self__, "lans", lans)
        if maintenance_windows and not isinstance(maintenance_windows, list):
            raise TypeError("Expected argument 'maintenance_windows' to be a list")
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if public_ips and not isinstance(public_ips, list):
            raise TypeError("Expected argument 'public_ips' to be a list")
        pulumi.set(__self__, "public_ips", public_ips)
        if ram_size and not isinstance(ram_size, int):
            raise TypeError("Expected argument 'ram_size' to be a int")
        pulumi.set(__self__, "ram_size", ram_size)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if storage_size and not isinstance(storage_size, int):
            raise TypeError("Expected argument 'storage_size' to be a int")
        pulumi.set(__self__, "storage_size", storage_size)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        A map of annotations in the form of key > value
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="autoScalings")
    def auto_scalings(self) -> Sequence['outputs.GetNodePoolAutoScalingResult']:
        """
        The range defining the minimum and maximum number of worker nodes that the managed node group can scale in
        """
        return pulumi.get(self, "auto_scalings")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        """
        The compute availability zone in which the nodes should exist
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="availableUpgradeVersions")
    def available_upgrade_versions(self) -> Sequence[str]:
        """
        A list of kubernetes versions available for upgrade
        """
        return pulumi.get(self, "available_upgrade_versions")

    @property
    @pulumi.getter(name="coresCount")
    def cores_count(self) -> int:
        """
        CPU cores count
        """
        return pulumi.get(self, "cores_count")

    @property
    @pulumi.getter(name="cpuFamily")
    def cpu_family(self) -> str:
        """
        CPU Family
        """
        return pulumi.get(self, "cpu_family")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The UUID of the VDC
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The LAN ID of an existing LAN at the related datacenter
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="k8sClusterId")
    def k8s_cluster_id(self) -> str:
        """
        ID of the cluster this node pool is part of
        """
        return pulumi.get(self, "k8s_cluster_id")

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> str:
        """
        The kubernetes version
        """
        return pulumi.get(self, "k8s_version")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        A map of labels in the form of key > value
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def lans(self) -> Sequence['outputs.GetNodePoolLanResult']:
        """
        A list of Local Area Networks the node pool is a part of
        """
        return pulumi.get(self, "lans")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetNodePoolMaintenanceWindowResult']:
        """
        A maintenance window comprise of a day of the week and a time for maintenance to be allowed
        """
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the node pool
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        The number of nodes in this node pool
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence[str]:
        """
        The list of fixed IPs associated with this node pool
        """
        return pulumi.get(self, "public_ips")

    @property
    @pulumi.getter(name="ramSize")
    def ram_size(self) -> int:
        """
        The amount of RAM in MB
        """
        return pulumi.get(self, "ram_size")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        one of "AVAILABLE",
        "INACTIVE",
        "BUSY",
        "DEPLOYING",
        "ACTIVE",
        "FAILED",
        "SUSPENDED",
        "FAILED_SUSPENDED",
        "UPDATING",
        "FAILED_UPDATING",
        "DESTROYING",
        "FAILED_DESTROYING",
        "TERMINATED"
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> int:
        """
        The size of the volume in GB. The size should be greater than 10GB.
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        HDD or SDD
        """
        return pulumi.get(self, "storage_type")


class AwaitableGetNodePoolResult(GetNodePoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNodePoolResult(
            annotations=self.annotations,
            auto_scalings=self.auto_scalings,
            availability_zone=self.availability_zone,
            available_upgrade_versions=self.available_upgrade_versions,
            cores_count=self.cores_count,
            cpu_family=self.cpu_family,
            datacenter_id=self.datacenter_id,
            id=self.id,
            k8s_cluster_id=self.k8s_cluster_id,
            k8s_version=self.k8s_version,
            labels=self.labels,
            lans=self.lans,
            maintenance_windows=self.maintenance_windows,
            name=self.name,
            node_count=self.node_count,
            public_ips=self.public_ips,
            ram_size=self.ram_size,
            state=self.state,
            storage_size=self.storage_size,
            storage_type=self.storage_type)


def get_node_pool(id: Optional[str] = None,
                  k8s_cluster_id: Optional[str] = None,
                  name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNodePoolResult:
    """
    The **k8s Node Pool** data source can be used to search for and return existing k8s Node Pools.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.k8s.get_node_pool(id="k8s_nodepool_id",
        k8s_cluster_id="k8s_cluster_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.k8s.get_node_pool(name="k8s NodePool Example",
        k8s_cluster_id="k8s_cluster_id")
    ```


    :param str id: ID of the node pool you want to search for.
           
           `k8s_cluster_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str k8s_cluster_id: K8s Cluster' UUID
    :param str name: Name of an existing node pool that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['k8sClusterId'] = k8s_cluster_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:k8s/getNodePool:getNodePool', __args__, opts=opts, typ=GetNodePoolResult).value

    return AwaitableGetNodePoolResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        auto_scalings=pulumi.get(__ret__, 'auto_scalings'),
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        available_upgrade_versions=pulumi.get(__ret__, 'available_upgrade_versions'),
        cores_count=pulumi.get(__ret__, 'cores_count'),
        cpu_family=pulumi.get(__ret__, 'cpu_family'),
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        id=pulumi.get(__ret__, 'id'),
        k8s_cluster_id=pulumi.get(__ret__, 'k8s_cluster_id'),
        k8s_version=pulumi.get(__ret__, 'k8s_version'),
        labels=pulumi.get(__ret__, 'labels'),
        lans=pulumi.get(__ret__, 'lans'),
        maintenance_windows=pulumi.get(__ret__, 'maintenance_windows'),
        name=pulumi.get(__ret__, 'name'),
        node_count=pulumi.get(__ret__, 'node_count'),
        public_ips=pulumi.get(__ret__, 'public_ips'),
        ram_size=pulumi.get(__ret__, 'ram_size'),
        state=pulumi.get(__ret__, 'state'),
        storage_size=pulumi.get(__ret__, 'storage_size'),
        storage_type=pulumi.get(__ret__, 'storage_type'))
def get_node_pool_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                         k8s_cluster_id: Optional[pulumi.Input[str]] = None,
                         name: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNodePoolResult]:
    """
    The **k8s Node Pool** data source can be used to search for and return existing k8s Node Pools.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.k8s.get_node_pool(id="k8s_nodepool_id",
        k8s_cluster_id="k8s_cluster_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.k8s.get_node_pool(name="k8s NodePool Example",
        k8s_cluster_id="k8s_cluster_id")
    ```


    :param str id: ID of the node pool you want to search for.
           
           `k8s_cluster_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str k8s_cluster_id: K8s Cluster' UUID
    :param str name: Name of an existing node pool that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['k8sClusterId'] = k8s_cluster_id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:k8s/getNodePool:getNodePool', __args__, opts=opts, typ=GetNodePoolResult)
    return __ret__.apply(lambda __response__: GetNodePoolResult(
        annotations=pulumi.get(__response__, 'annotations'),
        auto_scalings=pulumi.get(__response__, 'auto_scalings'),
        availability_zone=pulumi.get(__response__, 'availability_zone'),
        available_upgrade_versions=pulumi.get(__response__, 'available_upgrade_versions'),
        cores_count=pulumi.get(__response__, 'cores_count'),
        cpu_family=pulumi.get(__response__, 'cpu_family'),
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        id=pulumi.get(__response__, 'id'),
        k8s_cluster_id=pulumi.get(__response__, 'k8s_cluster_id'),
        k8s_version=pulumi.get(__response__, 'k8s_version'),
        labels=pulumi.get(__response__, 'labels'),
        lans=pulumi.get(__response__, 'lans'),
        maintenance_windows=pulumi.get(__response__, 'maintenance_windows'),
        name=pulumi.get(__response__, 'name'),
        node_count=pulumi.get(__response__, 'node_count'),
        public_ips=pulumi.get(__response__, 'public_ips'),
        ram_size=pulumi.get(__response__, 'ram_size'),
        state=pulumi.get(__response__, 'state'),
        storage_size=pulumi.get(__response__, 'storage_size'),
        storage_type=pulumi.get(__response__, 'storage_type')))
