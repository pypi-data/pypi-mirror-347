# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAutoCertificateResult',
    'AwaitableGetAutoCertificateResult',
    'get_auto_certificate',
    'get_auto_certificate_output',
]

@pulumi.output_type
class GetAutoCertificateResult:
    """
    A collection of values returned by getAutoCertificate.
    """
    def __init__(__self__, common_name=None, id=None, key_algorithm=None, last_issued_certificate_id=None, location=None, name=None, provider_id=None, subject_alternative_names=None):
        if common_name and not isinstance(common_name, str):
            raise TypeError("Expected argument 'common_name' to be a str")
        pulumi.set(__self__, "common_name", common_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_algorithm and not isinstance(key_algorithm, str):
            raise TypeError("Expected argument 'key_algorithm' to be a str")
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        if last_issued_certificate_id and not isinstance(last_issued_certificate_id, str):
            raise TypeError("Expected argument 'last_issued_certificate_id' to be a str")
        pulumi.set(__self__, "last_issued_certificate_id", last_issued_certificate_id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_id and not isinstance(provider_id, str):
            raise TypeError("Expected argument 'provider_id' to be a str")
        pulumi.set(__self__, "provider_id", provider_id)
        if subject_alternative_names and not isinstance(subject_alternative_names, list):
            raise TypeError("Expected argument 'subject_alternative_names' to be a list")
        pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        """
        [string] The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> str:
        """
        [string] The key algorithm used to generate the certificate.
        """
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="lastIssuedCertificateId")
    def last_issued_certificate_id(self) -> str:
        """
        [string] The ID of the last certificate that was issued.
        """
        return pulumi.get(self, "last_issued_certificate_id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> str:
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Sequence[str]:
        """
        [list][string] Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.
        """
        return pulumi.get(self, "subject_alternative_names")


class AwaitableGetAutoCertificateResult(GetAutoCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoCertificateResult(
            common_name=self.common_name,
            id=self.id,
            key_algorithm=self.key_algorithm,
            last_issued_certificate_id=self.last_issued_certificate_id,
            location=self.location,
            name=self.name,
            provider_id=self.provider_id,
            subject_alternative_names=self.subject_alternative_names)


def get_auto_certificate(id: Optional[str] = None,
                         location: Optional[str] = None,
                         name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoCertificateResult:
    """
    The **CM AutoCertificate data source** can be used to search for and return an existing auto-certificate.
    You can provide a string for either id or name parameters which will be compared with provisioned auto-certificates.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cert.get_auto_certificate(id="auto_certificate_id",
        location="auto_certificate_location")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cert.get_auto_certificate(name="AutoCertificate Name Example",
        location="auto_certificate_location")
    ```


    :param str id: [string] ID of the auto-certificate you want to search for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str location: [string] The location of the auto-certificate.
    :param str name: [string] Name of an existing auto-certificate that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:cert/getAutoCertificate:getAutoCertificate', __args__, opts=opts, typ=GetAutoCertificateResult).value

    return AwaitableGetAutoCertificateResult(
        common_name=pulumi.get(__ret__, 'common_name'),
        id=pulumi.get(__ret__, 'id'),
        key_algorithm=pulumi.get(__ret__, 'key_algorithm'),
        last_issued_certificate_id=pulumi.get(__ret__, 'last_issued_certificate_id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        provider_id=pulumi.get(__ret__, 'provider_id'),
        subject_alternative_names=pulumi.get(__ret__, 'subject_alternative_names'))
def get_auto_certificate_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                location: Optional[pulumi.Input[str]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutoCertificateResult]:
    """
    The **CM AutoCertificate data source** can be used to search for and return an existing auto-certificate.
    You can provide a string for either id or name parameters which will be compared with provisioned auto-certificates.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cert.get_auto_certificate(id="auto_certificate_id",
        location="auto_certificate_location")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cert.get_auto_certificate(name="AutoCertificate Name Example",
        location="auto_certificate_location")
    ```


    :param str id: [string] ID of the auto-certificate you want to search for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str location: [string] The location of the auto-certificate.
    :param str name: [string] Name of an existing auto-certificate that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:cert/getAutoCertificate:getAutoCertificate', __args__, opts=opts, typ=GetAutoCertificateResult)
    return __ret__.apply(lambda __response__: GetAutoCertificateResult(
        common_name=pulumi.get(__response__, 'common_name'),
        id=pulumi.get(__response__, 'id'),
        key_algorithm=pulumi.get(__response__, 'key_algorithm'),
        last_issued_certificate_id=pulumi.get(__response__, 'last_issued_certificate_id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        provider_id=pulumi.get(__response__, 'provider_id'),
        subject_alternative_names=pulumi.get(__response__, 'subject_alternative_names')))
