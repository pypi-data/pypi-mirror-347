# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ApigatewayCustomDomainArgs',
    'ApigatewayCustomDomainArgsDict',
    'RouteUpstreamArgs',
    'RouteUpstreamArgsDict',
]

MYPY = False

if not MYPY:
    class ApigatewayCustomDomainArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        [string] The domain name. Externally reachable.
        """
        certificate_id: NotRequired[pulumi.Input[str]]
        """
        [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
        """
elif False:
    ApigatewayCustomDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApigatewayCustomDomainArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 certificate_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: [string] The domain name. Externally reachable.
        :param pulumi.Input[str] certificate_id: [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
        """
        pulumi.set(__self__, "name", name)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        [string] The domain name. Externally reachable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The certificate ID for the domain. Must be a valid certificate in UUID form.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)


if not MYPY:
    class RouteUpstreamArgsDict(TypedDict):
        host: pulumi.Input[str]
        """
        [string] The host of the upstream.
        """
        loadbalancer: NotRequired[pulumi.Input[str]]
        """
        [string] The load balancer algorithm. Default value: `roundrobin`.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        [int] The port of the upstream. Default value: `80`.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        [string] The target URL of the upstream. Default value: `http`.
        """
        weight: NotRequired[pulumi.Input[int]]
        """
        [int] Weight with which to split traffic to the upstream. Default value: `100`.
        """
elif False:
    RouteUpstreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RouteUpstreamArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 loadbalancer: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: [string] The host of the upstream.
        :param pulumi.Input[str] loadbalancer: [string] The load balancer algorithm. Default value: `roundrobin`.
        :param pulumi.Input[int] port: [int] The port of the upstream. Default value: `80`.
        :param pulumi.Input[str] scheme: [string] The target URL of the upstream. Default value: `http`.
        :param pulumi.Input[int] weight: [int] Weight with which to split traffic to the upstream. Default value: `100`.
        """
        pulumi.set(__self__, "host", host)
        if loadbalancer is not None:
            pulumi.set(__self__, "loadbalancer", loadbalancer)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        [string] The host of the upstream.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def loadbalancer(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The load balancer algorithm. Default value: `roundrobin`.
        """
        return pulumi.get(self, "loadbalancer")

    @loadbalancer.setter
    def loadbalancer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loadbalancer", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The port of the upstream. Default value: `80`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The target URL of the upstream. Default value: `http`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        [int] Weight with which to split traffic to the upstream. Default value: `100`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


