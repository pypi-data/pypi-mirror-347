# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    """
    A collection of values returned by getGroup.
    """
    def __init__(__self__, datacenter_id=None, id=None, location=None, max_replica_count=None, min_replica_count=None, name=None, policies=None, replica_configurations=None, target_replica_count=None):
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if max_replica_count and not isinstance(max_replica_count, int):
            raise TypeError("Expected argument 'max_replica_count' to be a int")
        pulumi.set(__self__, "max_replica_count", max_replica_count)
        if min_replica_count and not isinstance(min_replica_count, int):
            raise TypeError("Expected argument 'min_replica_count' to be a int")
        pulumi.set(__self__, "min_replica_count", min_replica_count)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if replica_configurations and not isinstance(replica_configurations, list):
            raise TypeError("Expected argument 'replica_configurations' to be a list")
        pulumi.set(__self__, "replica_configurations", replica_configurations)
        if target_replica_count and not isinstance(target_replica_count, int):
            raise TypeError("Expected argument 'target_replica_count' to be a int")
        pulumi.set(__self__, "target_replica_count", target_replica_count)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the datacenter. This location is the same as the one from the selected template.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> int:
        """
        Maximum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.
        """
        return pulumi.get(self, "max_replica_count")

    @property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> int:
        """
        Minimum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.
        """
        return pulumi.get(self, "min_replica_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Autoscaling Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetGroupPolicyResult']:
        """
        Specifies the behavior of this Autoscaling Group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and a Trigger is defined by the circumstances under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through Thresholds defined on a given Metric.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="replicaConfigurations")
    def replica_configurations(self) -> Sequence['outputs.GetGroupReplicaConfigurationResult']:
        return pulumi.get(self, "replica_configurations")

    @property
    @pulumi.getter(name="targetReplicaCount")
    def target_replica_count(self) -> int:
        return pulumi.get(self, "target_replica_count")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            datacenter_id=self.datacenter_id,
            id=self.id,
            location=self.location,
            max_replica_count=self.max_replica_count,
            min_replica_count=self.min_replica_count,
            name=self.name,
            policies=self.policies,
            replica_configurations=self.replica_configurations,
            target_replica_count=self.target_replica_count)


def get_group(id: Optional[str] = None,
              name: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    The autoscaling group data source can be used to search for and return an existing Autoscaling Group. You can provide a string for the name or id parameters which will be compared with provisioned Autoscaling Groups. If a single match is found, it will be returned.

    ## Example Usage

    ### By Id
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    autoscaling_group = ionoscloud.autoscaling.get_group(id="autoscaling_group_uuid")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    autoscaling_group = ionoscloud.autoscaling.get_group(name="test_ds")
    ```


    :param str id: Id of an existing Autoscaling Group that you want to search for.
    :param str name: Name of an existing Autoscaling Group that you want to search for.
           
           Either `name` or `id` must be provided. If none or both are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:autoscaling/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        max_replica_count=pulumi.get(__ret__, 'max_replica_count'),
        min_replica_count=pulumi.get(__ret__, 'min_replica_count'),
        name=pulumi.get(__ret__, 'name'),
        policies=pulumi.get(__ret__, 'policies'),
        replica_configurations=pulumi.get(__ret__, 'replica_configurations'),
        target_replica_count=pulumi.get(__ret__, 'target_replica_count'))
def get_group_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                     name: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupResult]:
    """
    The autoscaling group data source can be used to search for and return an existing Autoscaling Group. You can provide a string for the name or id parameters which will be compared with provisioned Autoscaling Groups. If a single match is found, it will be returned.

    ## Example Usage

    ### By Id
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    autoscaling_group = ionoscloud.autoscaling.get_group(id="autoscaling_group_uuid")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    autoscaling_group = ionoscloud.autoscaling.get_group(name="test_ds")
    ```


    :param str id: Id of an existing Autoscaling Group that you want to search for.
    :param str name: Name of an existing Autoscaling Group that you want to search for.
           
           Either `name` or `id` must be provided. If none or both are provided, the datasource will return an error.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:autoscaling/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult)
    return __ret__.apply(lambda __response__: GetGroupResult(
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        max_replica_count=pulumi.get(__response__, 'max_replica_count'),
        min_replica_count=pulumi.get(__response__, 'min_replica_count'),
        name=pulumi.get(__response__, 'name'),
        policies=pulumi.get(__response__, 'policies'),
        replica_configurations=pulumi.get(__response__, 'replica_configurations'),
        target_replica_count=pulumi.get(__response__, 'target_replica_count')))
