# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'InMemoryDBReplicaSetConnections',
    'InMemoryDBReplicaSetCredentials',
    'InMemoryDBReplicaSetCredentialsHashedPassword',
    'InMemoryDBReplicaSetMaintenanceWindow',
    'InMemoryDBReplicaSetResources',
    'MariaDBClusterConnections',
    'MariaDBClusterCredentials',
    'MariaDBClusterMaintenanceWindow',
    'MongoClusterBackup',
    'MongoClusterBiConnector',
    'MongoClusterConnections',
    'MongoClusterMaintenanceWindow',
    'MongoUserRole',
    'PSQLClusterConnectionPooler',
    'PSQLClusterConnections',
    'PSQLClusterCredentials',
    'PSQLClusterFromBackup',
    'PSQLClusterMaintenanceWindow',
    'GetInMemoryDBReplicaSetConnectionResult',
    'GetInMemoryDBReplicaSetCredentialResult',
    'GetInMemoryDBReplicaSetMaintenanceWindowResult',
    'GetInMemoryDBReplicaSetResourceResult',
    'GetInmemorydbSnapshotMetadataResult',
    'GetMariaDBBackupsBackupResult',
    'GetMariaDBBackupsBackupBaseBackupResult',
    'GetMariaDBClusterConnectionResult',
    'GetMariaDBClusterMaintenanceWindowResult',
    'GetMongoClusterBackupResult',
    'GetMongoClusterBiConnectorResult',
    'GetMongoClusterConnectionResult',
    'GetMongoClusterMaintenanceWindowResult',
    'GetMongoUserRoleResult',
    'GetPSQLBackupsClusterBackupResult',
    'GetPSQLBackupsClusterBackupMetadataResult',
    'GetPSQLClusterConnectionResult',
    'GetPSQLClusterConnectionPoolerResult',
    'GetPSQLClusterFromBackupResult',
    'GetPSQLClusterMaintenanceWindowResult',
    'GetPSQLDatabasesDatabaseResult',
]

@pulumi.output_type
class InMemoryDBReplicaSetConnections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "lanId":
            suggest = "lan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InMemoryDBReplicaSetConnections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InMemoryDBReplicaSetConnections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InMemoryDBReplicaSetConnections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: [string] The IP and subnet for your instance. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24.
        :param str datacenter_id: [string] The datacenter to connect your instance to.
        :param str lan_id: [string] The numeric LAN ID to connect your instance to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        [string] The IP and subnet for your instance. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        [string] The datacenter to connect your instance to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        [string] The numeric LAN ID to connect your instance to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class InMemoryDBReplicaSetCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hashedPassword":
            suggest = "hashed_password"
        elif key == "plainTextPassword":
            suggest = "plain_text_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InMemoryDBReplicaSetCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InMemoryDBReplicaSetCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InMemoryDBReplicaSetCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 username: str,
                 hashed_password: Optional['outputs.InMemoryDBReplicaSetCredentialsHashedPassword'] = None,
                 plain_text_password: Optional[str] = None):
        """
        :param str username: [string] The username for the initial InMemoryDB user. Some system usernames are restricted (e.g. 'admin', 'standby').
        :param 'InMemoryDBReplicaSetCredentialsHashedPasswordArgs' hashed_password: [object] The hashed password for a InMemoryDB user.
        :param str plain_text_password: [string] The password for a InMemoryDB user, this is a field that is marked as `Sensitive`.
        """
        pulumi.set(__self__, "username", username)
        if hashed_password is not None:
            pulumi.set(__self__, "hashed_password", hashed_password)
        if plain_text_password is not None:
            pulumi.set(__self__, "plain_text_password", plain_text_password)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        [string] The username for the initial InMemoryDB user. Some system usernames are restricted (e.g. 'admin', 'standby').
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="hashedPassword")
    def hashed_password(self) -> Optional['outputs.InMemoryDBReplicaSetCredentialsHashedPassword']:
        """
        [object] The hashed password for a InMemoryDB user.
        """
        return pulumi.get(self, "hashed_password")

    @property
    @pulumi.getter(name="plainTextPassword")
    def plain_text_password(self) -> Optional[str]:
        """
        [string] The password for a InMemoryDB user, this is a field that is marked as `Sensitive`.
        """
        return pulumi.get(self, "plain_text_password")


@pulumi.output_type
class InMemoryDBReplicaSetCredentialsHashedPassword(dict):
    def __init__(__self__, *,
                 algorithm: str,
                 hash: str):
        """
        :param str algorithm: [string] The value can be only: "SHA-256".
        :param str hash: [string] The hashed password.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "hash", hash)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        """
        [string] The value can be only: "SHA-256".
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def hash(self) -> str:
        """
        [string] The hashed password.
        """
        return pulumi.get(self, "hash")


@pulumi.output_type
class InMemoryDBReplicaSetMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfTheWeek":
            suggest = "day_of_the_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InMemoryDBReplicaSetMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InMemoryDBReplicaSetMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InMemoryDBReplicaSetMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        """
        :param str day_of_the_week: [string] The name of the week day.
        :param str time: [string] Start of the maintenance window in UTC time.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        """
        [string] The name of the week day.
        """
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        [string] Start of the maintenance window in UTC time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class InMemoryDBReplicaSetResources(dict):
    def __init__(__self__, *,
                 cores: int,
                 ram: int,
                 storage: Optional[int] = None):
        """
        :param int cores: [int] The number of CPU cores per instance.
        :param int ram: [int] The amount of memory per instance in gigabytes (GB).
        :param int storage: [int] The size of the storage in GB. The size is derived from the amount of RAM and the persistence mode and is not configurable.
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "ram", ram)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cores(self) -> int:
        """
        [int] The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def ram(self) -> int:
        """
        [int] The amount of memory per instance in gigabytes (GB).
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def storage(self) -> Optional[int]:
        """
        [int] The size of the storage in GB. The size is derived from the amount of RAM and the persistence mode and is not configurable.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class MariaDBClusterConnections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "lanId":
            suggest = "lan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MariaDBClusterConnections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MariaDBClusterConnections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MariaDBClusterConnections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: [true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See [Private IPs](https://www.ionos.com/help/server-cloud-infrastructure/private-network/private-ip-address-ranges/) and [Configuring the network](https://docs.ionos.com/cloud/compute-engine/networks/how-tos/configure-networks).
        :param str datacenter_id: [true] The datacenter to connect your cluster to.
        :param str lan_id: [true] The numeric LAN ID to connect your cluster to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        [true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See [Private IPs](https://www.ionos.com/help/server-cloud-infrastructure/private-network/private-ip-address-ranges/) and [Configuring the network](https://docs.ionos.com/cloud/compute-engine/networks/how-tos/configure-networks).
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        [true] The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        [true] The numeric LAN ID to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class MariaDBClusterCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: [string] The password for a MariaDB user.
        :param str username: [string] The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        [string] The password for a MariaDB user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        [string] The username for the initial MariaDB user. Some system usernames are restricted (e.g 'mariadb', 'admin', 'standby').
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class MariaDBClusterMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfTheWeek":
            suggest = "day_of_the_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MariaDBClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MariaDBClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MariaDBClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        """
        :param str day_of_the_week: [string] The name of the week day.
        :param str time: [string] Start of the maintenance window in UTC time.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        """
        [string] The name of the week day.
        """
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        [string] Start of the maintenance window in UTC time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MongoClusterBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pointInTimeWindowHours":
            suggest = "point_in_time_window_hours"
        elif key == "snapshotIntervalHours":
            suggest = "snapshot_interval_hours"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoClusterBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoClusterBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoClusterBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: Optional[str] = None,
                 point_in_time_window_hours: Optional[int] = None,
                 snapshot_interval_hours: Optional[int] = None):
        """
        :param str location: [string] - The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Possible values are de, eu-south-2, or eu-central-2.
        :param int point_in_time_window_hours: Number of hours in the past for which a point-in-time snapshot can be created.
        :param int snapshot_interval_hours: Number of hours between snapshots.
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if point_in_time_window_hours is not None:
            pulumi.set(__self__, "point_in_time_window_hours", point_in_time_window_hours)
        if snapshot_interval_hours is not None:
            pulumi.set(__self__, "snapshot_interval_hours", snapshot_interval_hours)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        [string] - The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Possible values are de, eu-south-2, or eu-central-2.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="pointInTimeWindowHours")
    def point_in_time_window_hours(self) -> Optional[int]:
        """
        Number of hours in the past for which a point-in-time snapshot can be created.
        """
        return pulumi.get(self, "point_in_time_window_hours")

    @property
    @pulumi.getter(name="snapshotIntervalHours")
    def snapshot_interval_hours(self) -> Optional[int]:
        """
        Number of hours between snapshots.
        """
        return pulumi.get(self, "snapshot_interval_hours")


@pulumi.output_type
class MongoClusterBiConnector(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 port: Optional[str] = None):
        """
        :param bool enabled: [bool] - The status of the BI Connector. If not set, the BI Connector is disabled.
        :param str host: [string] - The host where this new BI Connector is installed.
        :param str port: [string] - Port number used when connecting to this new BI Connector.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        [bool] - The status of the BI Connector. If not set, the BI Connector is disabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        [string] - The host where this new BI Connector is installed.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        [string] - Port number used when connecting to this new BI Connector.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class MongoClusterConnections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrLists":
            suggest = "cidr_lists"
        elif key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "lanId":
            suggest = "lan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoClusterConnections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoClusterConnections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoClusterConnections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_lists: Sequence[str],
                 datacenter_id: str,
                 lan_id: str):
        """
        :param Sequence[str] cidr_lists: [List] The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]. See [Private IPs](https://www.ionos.com/help/server-cloud-infrastructure/private-network/private-ip-address-ranges/) and [Cluster Setup - Preparing the network](https://docs.ionos.com/cloud/databases/mongodb/api-howtos/create-a-cluster#preparing-the-network).
        :param str datacenter_id: [string] The datacenter to connect your cluster to.
        :param str lan_id: [string] The LAN to connect your cluster to.
        """
        pulumi.set(__self__, "cidr_lists", cidr_lists)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter(name="cidrLists")
    def cidr_lists(self) -> Sequence[str]:
        """
        [List] The list of IPs and subnet for your cluster. Note the following unavailable IP ranges:10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. example: [192.168.1.100/24, 192.168.1.101/24]. See [Private IPs](https://www.ionos.com/help/server-cloud-infrastructure/private-network/private-ip-address-ranges/) and [Cluster Setup - Preparing the network](https://docs.ionos.com/cloud/databases/mongodb/api-howtos/create-a-cluster#preparing-the-network).
        """
        return pulumi.get(self, "cidr_lists")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        [string] The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        [string] The LAN to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class MongoClusterMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfTheWeek":
            suggest = "day_of_the_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MongoClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MongoClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MongoClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        """
        :param str day_of_the_week: [string]
        :param str time: [string]
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        """
        [string]
        """
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        [string]
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MongoUserRole(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 role: Optional[str] = None):
        """
        :param str database: [true] Database on which to apply the role.
               
               **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
        :param str role: [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        [true] Database on which to apply the role.

        **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class PSQLClusterConnectionPooler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolMode":
            suggest = "pool_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PSQLClusterConnectionPooler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PSQLClusterConnectionPooler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PSQLClusterConnectionPooler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 pool_mode: str):
        """
        :param bool enabled: [bool]
        :param str pool_mode: [string] Represents different modes of connection pooling for the connection pooler.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "pool_mode", pool_mode)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        [bool]
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="poolMode")
    def pool_mode(self) -> str:
        """
        [string] Represents different modes of connection pooling for the connection pooler.
        """
        return pulumi.get(self, "pool_mode")


@pulumi.output_type
class PSQLClusterConnections(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "lanId":
            suggest = "lan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PSQLClusterConnections. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PSQLClusterConnections.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PSQLClusterConnections.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: [true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See [Private IPs](https://www.ionos.com/help/server-cloud-infrastructure/private-network/private-ip-address-ranges/) and [Configuring the network](https://docs.ionos.com/cloud/compute-engine/networks/how-tos/configure-networks).
        :param str datacenter_id: [true] The datacenter to connect your cluster to.
        :param str lan_id: [true] The LAN to connect your cluster to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        [true] The IP and subnet for the database. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24. Please enter in the correct format like IP/Subnet, exp: 192.168.10.0/24. See [Private IPs](https://www.ionos.com/help/server-cloud-infrastructure/private-network/private-ip-address-ranges/) and [Configuring the network](https://docs.ionos.com/cloud/compute-engine/networks/how-tos/configure-networks).
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        [true] The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        [true] The LAN to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class PSQLClusterCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        """
        :param str password: [string]
        :param str username: [string] The username for the initial postgres user. Some system usernames are restricted (e.g. "postgres", "admin", "standby")
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        [string]
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        [string] The username for the initial postgres user. Some system usernames are restricted (e.g. "postgres", "admin", "standby")
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class PSQLClusterFromBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "recoveryTargetTime":
            suggest = "recovery_target_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PSQLClusterFromBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PSQLClusterFromBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PSQLClusterFromBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: str,
                 recovery_target_time: Optional[str] = None):
        """
        :param str backup_id: [string] The unique ID of the backup you want to restore.
        :param str recovery_target_time: [string] If this value is supplied as ISO 8601 timestamp, the backup will be replayed up until the given timestamp. If empty, the backup will be applied completely.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        if recovery_target_time is not None:
            pulumi.set(__self__, "recovery_target_time", recovery_target_time)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        [string] The unique ID of the backup you want to restore.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> Optional[str]:
        """
        [string] If this value is supplied as ISO 8601 timestamp, the backup will be replayed up until the given timestamp. If empty, the backup will be applied completely.
        """
        return pulumi.get(self, "recovery_target_time")


@pulumi.output_type
class PSQLClusterMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfTheWeek":
            suggest = "day_of_the_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PSQLClusterMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PSQLClusterMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PSQLClusterMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        """
        :param str day_of_the_week: [string]
        :param str time: [string]
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        """
        [string]
        """
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        [string]
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetInMemoryDBReplicaSetConnectionResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: [string] The IP and subnet for your instance. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24.
        :param str datacenter_id: [string] The datacenter to connect your instance to.
        :param str lan_id: [string] The numeric LAN ID to connect your instance to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        [string] The IP and subnet for your instance. Note the following unavailable IP ranges: 10.233.64.0/18, 10.233.0.0/18, 10.233.114.0/24.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        [string] The datacenter to connect your instance to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        [string] The numeric LAN ID to connect your instance to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class GetInMemoryDBReplicaSetCredentialResult(dict):
    def __init__(__self__, *,
                 username: str):
        """
        :param str username: [string] The username for the initial InMemoryDB user. Some system usernames are restricted (e.g. 'admin', 'standby').
        """
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        [string] The username for the initial InMemoryDB user. Some system usernames are restricted (e.g. 'admin', 'standby').
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetInMemoryDBReplicaSetMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        """
        :param str day_of_the_week: [string] The name of the week day.
        :param str time: [string] Start of the maintenance window in UTC time.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        """
        [string] The name of the week day.
        """
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        [string] Start of the maintenance window in UTC time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetInMemoryDBReplicaSetResourceResult(dict):
    def __init__(__self__, *,
                 cores: int,
                 ram: int,
                 storage: int):
        """
        :param int cores: [int] The number of CPU cores per instance.
        :param int ram: [int] The amount of memory per instance in gigabytes (GB).
        :param int storage: [int] The size of the storage in GB. The size is derived from the amount of RAM and the persistence mode and is not configurable.
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "ram", ram)
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cores(self) -> int:
        """
        [int] The number of CPU cores per instance.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def ram(self) -> int:
        """
        [int] The amount of memory per instance in gigabytes (GB).
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def storage(self) -> int:
        """
        [int] The size of the storage in GB. The size is derived from the amount of RAM and the persistence mode and is not configurable.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetInmemorydbSnapshotMetadataResult(dict):
    def __init__(__self__, *,
                 created_date: str,
                 datacenter_id: str,
                 last_modified_date: str,
                 replica_set_id: str,
                 snapshot_time: str):
        """
        :param str created_date: The ISO 8601 creation timestamp.
        :param str datacenter_id: The ID of the datacenter in which the snapshot is located.
        :param str last_modified_date: The ISO 8601 modified timestamp.
        :param str replica_set_id: The ID of the replica set from which the snapshot was created.
        :param str snapshot_time: The time at which the snapshot was taken.
        """
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "last_modified_date", last_modified_date)
        pulumi.set(__self__, "replica_set_id", replica_set_id)
        pulumi.set(__self__, "snapshot_time", snapshot_time)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The ISO 8601 creation timestamp.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The ID of the datacenter in which the snapshot is located.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lastModifiedDate")
    def last_modified_date(self) -> str:
        """
        The ISO 8601 modified timestamp.
        """
        return pulumi.get(self, "last_modified_date")

    @property
    @pulumi.getter(name="replicaSetId")
    def replica_set_id(self) -> str:
        """
        The ID of the replica set from which the snapshot was created.
        """
        return pulumi.get(self, "replica_set_id")

    @property
    @pulumi.getter(name="snapshotTime")
    def snapshot_time(self) -> str:
        """
        The time at which the snapshot was taken.
        """
        return pulumi.get(self, "snapshot_time")


@pulumi.output_type
class GetMariaDBBackupsBackupResult(dict):
    def __init__(__self__, *,
                 base_backups: Sequence['outputs.GetMariaDBBackupsBackupBaseBackupResult'],
                 cluster_id: str,
                 earliest_recovery_target_time: str,
                 size: int):
        """
        :param Sequence['GetMariaDBBackupsBackupBaseBackupArgs'] base_backups: The list of backups for the specified cluster
        :param str cluster_id: [string] The unique ID of the cluster.
        :param str earliest_recovery_target_time: The oldest available timestamp to which you can restore.
        :param int size: The size of the backup in Mebibytes (MiB). This is the size of the binary backup file that was stored
        """
        pulumi.set(__self__, "base_backups", base_backups)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "earliest_recovery_target_time", earliest_recovery_target_time)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="baseBackups")
    def base_backups(self) -> Sequence['outputs.GetMariaDBBackupsBackupBaseBackupResult']:
        """
        The list of backups for the specified cluster
        """
        return pulumi.get(self, "base_backups")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        [string] The unique ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="earliestRecoveryTargetTime")
    def earliest_recovery_target_time(self) -> str:
        """
        The oldest available timestamp to which you can restore.
        """
        return pulumi.get(self, "earliest_recovery_target_time")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the backup in Mebibytes (MiB). This is the size of the binary backup file that was stored
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetMariaDBBackupsBackupBaseBackupResult(dict):
    def __init__(__self__, *,
                 created: str,
                 size: int):
        """
        :param str created: The ISO 8601 creation timestamp
        :param int size: The size of the backup in Mebibytes (MiB). This is the size of the binary backup file that was stored
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The ISO 8601 creation timestamp
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the backup in Mebibytes (MiB). This is the size of the binary backup file that was stored
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetMariaDBClusterConnectionResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: [string] The IP and subnet for your cluster.
        :param str datacenter_id: [string] The datacenter to connect your cluster to.
        :param str lan_id: [string] The LAN to connect your cluster to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        [string] The IP and subnet for your cluster.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        [string] The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        [string] The LAN to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class GetMariaDBClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        """
        :param str day_of_the_week: [string] The name of the week day.
        :param str time: [string] Start of the maintenance window in UTC time.
        """
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        """
        [string] The name of the week day.
        """
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        [string] Start of the maintenance window in UTC time.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetMongoClusterBackupResult(dict):
    def __init__(__self__, *,
                 location: str):
        """
        :param str location: The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Possible values are de, eu-south-2, or eu-central-2.
        """
        pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location where the cluster backups will be stored. If not set, the backup is stored in the nearest location of the cluster. Possible values are de, eu-south-2, or eu-central-2.
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class GetMongoClusterBiConnectorResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 host: str,
                 port: str):
        """
        :param bool enabled: Enable or disable the BiConnector
        :param str host: The host where this new BI Connector is installed
        :param str port: Port number used when connecting to this new BI Connector
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable or disable the BiConnector
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host where this new BI Connector is installed
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Port number used when connecting to this new BI Connector
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetMongoClusterConnectionResult(dict):
    def __init__(__self__, *,
                 cidr_lists: Sequence[str],
                 datacenter_id: str,
                 lan_id: str):
        """
        :param Sequence[str] cidr_lists: The list of IPs and subnet for your cluster.
                         Note the following unavailable IP ranges:
                         10.233.64.0/18
                         10.233.0.0/18
                         10.233.114.0/24 		
                example: [192.168.1.100/24, 192.168.1.101/24]
        :param str datacenter_id: The datacenter to connect your cluster to.
        :param str lan_id: The LAN to connect your cluster to.
        """
        pulumi.set(__self__, "cidr_lists", cidr_lists)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter(name="cidrLists")
    def cidr_lists(self) -> Sequence[str]:
        """
        The list of IPs and subnet for your cluster.
                  Note the following unavailable IP ranges:
                  10.233.64.0/18
                  10.233.0.0/18
                  10.233.114.0/24 		
         example: [192.168.1.100/24, 192.168.1.101/24]
        """
        return pulumi.get(self, "cidr_lists")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        The LAN to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class GetMongoClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetMongoUserRoleResult(dict):
    def __init__(__self__, *,
                 database: str,
                 role: str):
        """
        :param str database: [true] Database on which to apply the role.
               
               **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
        :param str role: [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor and enableSharding.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        [true] Database on which to apply the role.

        **NOTE:** MongoDb users do not support update at the moment. Changing any attribute will result in the user being re-created.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        [true] Mongodb user role. Examples: read, readWrite, readAnyDatabase, readWriteAnyDatabase, dbAdmin, dbAdminAnyDatabase, clusterMonitor and enableSharding.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetPSQLBackupsClusterBackupResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 earliest_recovery_target_time: str,
                 id: str,
                 is_active: bool,
                 location: str,
                 metadatas: Sequence['outputs.GetPSQLBackupsClusterBackupMetadataResult'],
                 size: int,
                 type: str,
                 version: str):
        """
        :param str cluster_id: The unique ID of the cluster.
               
               `cluster_id` must be provided. If it is not provided, the datasource will return an error.
        :param str earliest_recovery_target_time: The oldest available timestamp to which you can restore.
        :param str id: The unique ID of the resource.
        :param bool is_active: Whether a cluster currently backs up data to this backup.
        :param str location: The IONOS Object Storage location where the backups will be stored.
        :param Sequence['GetPSQLBackupsClusterBackupMetadataArgs'] metadatas: Metadata of the resource.
        :param int size: The size of all base backups including the wal size in MB.
        :param str version: The PostgreSQL version this backup was created from.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "earliest_recovery_target_time", earliest_recovery_target_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The unique ID of the cluster.

        `cluster_id` must be provided. If it is not provided, the datasource will return an error.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="earliestRecoveryTargetTime")
    def earliest_recovery_target_time(self) -> str:
        """
        The oldest available timestamp to which you can restore.
        """
        return pulumi.get(self, "earliest_recovery_target_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Whether a cluster currently backs up data to this backup.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The IONOS Object Storage location where the backups will be stored.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetPSQLBackupsClusterBackupMetadataResult']:
        """
        Metadata of the resource.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of all base backups including the wal size in MB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The PostgreSQL version this backup was created from.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPSQLBackupsClusterBackupMetadataResult(dict):
    def __init__(__self__, *,
                 created_date: str):
        """
        :param str created_date: The ISO 8601 creation timestamp.
        """
        pulumi.set(__self__, "created_date", created_date)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The ISO 8601 creation timestamp.
        """
        return pulumi.get(self, "created_date")


@pulumi.output_type
class GetPSQLClusterConnectionResult(dict):
    def __init__(__self__, *,
                 cidr: str,
                 datacenter_id: str,
                 lan_id: str):
        """
        :param str cidr: The IP and subnet for the database.
        :param str datacenter_id: The datacenter to connect your cluster to.
        :param str lan_id: The LAN to connect your cluster to.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "lan_id", lan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        The IP and subnet for the database.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The datacenter to connect your cluster to.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="lanId")
    def lan_id(self) -> str:
        """
        The LAN to connect your cluster to.
        """
        return pulumi.get(self, "lan_id")


@pulumi.output_type
class GetPSQLClusterConnectionPoolerResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 pool_mode: str):
        """
        :param str pool_mode: Represents different modes of connection pooling for the connection pooler.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "pool_mode", pool_mode)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="poolMode")
    def pool_mode(self) -> str:
        """
        Represents different modes of connection pooling for the connection pooler.
        """
        return pulumi.get(self, "pool_mode")


@pulumi.output_type
class GetPSQLClusterFromBackupResult(dict):
    def __init__(__self__, *,
                 backup_id: str,
                 recovery_target_time: str):
        """
        :param str backup_id: The PostgreSQL version of your cluster.
        :param str recovery_target_time: If this value is supplied as ISO 8601 timestamp, the backup will be replayed up until the given timestamp.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "recovery_target_time", recovery_target_time)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        The PostgreSQL version of your cluster.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="recoveryTargetTime")
    def recovery_target_time(self) -> str:
        """
        If this value is supplied as ISO 8601 timestamp, the backup will be replayed up until the given timestamp.
        """
        return pulumi.get(self, "recovery_target_time")


@pulumi.output_type
class GetPSQLClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day_of_the_week: str,
                 time: str):
        pulumi.set(__self__, "day_of_the_week", day_of_the_week)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="dayOfTheWeek")
    def day_of_the_week(self) -> str:
        return pulumi.get(self, "day_of_the_week")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetPSQLDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 owner: str):
        """
        :param str id: [string] The ID of the database.
        :param str name: [string] The name of the database.
        :param str owner: [string] Filter using a specific owner.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        [string] The ID of the database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        [string] The name of the database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        [string] Filter using a specific owner.
        """
        return pulumi.get(self, "owner")


