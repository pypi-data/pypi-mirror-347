# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetMariaDBBackupsResult',
    'AwaitableGetMariaDBBackupsResult',
    'get_maria_db_backups',
    'get_maria_db_backups_output',
]

@pulumi.output_type
class GetMariaDBBackupsResult:
    """
    A collection of values returned by getMariaDBBackups.
    """
    def __init__(__self__, backup_id=None, backups=None, cluster_id=None, id=None, location=None):
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if backups and not isinstance(backups, list):
            raise TypeError("Expected argument 'backups' to be a list")
        pulumi.set(__self__, "backups", backups)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetMariaDBBackupsBackupResult']:
        return pulumi.get(self, "backups")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The unique ID of the cluster that was backed up.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")


class AwaitableGetMariaDBBackupsResult(GetMariaDBBackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMariaDBBackupsResult(
            backup_id=self.backup_id,
            backups=self.backups,
            cluster_id=self.cluster_id,
            id=self.id,
            location=self.location)


def get_maria_db_backups(backup_id: Optional[str] = None,
                         cluster_id: Optional[str] = None,
                         location: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMariaDBBackupsResult:
    """
    The **DBaaS MariaDB Backups data source** can be used to search for and return existing DBaaS MariaDB Backups for a specific cluster.

    ## Example Usage

    ### Get all backups for a specific cluster
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.dbaas.get_maria_db_backups(cluster_id="cluster_id",
        location="de/txl")
    ```

    ### Get a specific backup
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.dbaas.get_maria_db_backups(backup_id="backup_id",
        location="de/txl")
    ```


    :param str backup_id: [string] The unique ID of the backup.
    :param str cluster_id: [string] The unique ID of the cluster.
    :param str location: [string] The location of the cluster. Different service endpoints are used based on location, possible options are: "de/fra", "de/txl", "es/vit", "fr/par", "gb/lhr", "us/ewr", "us/las", "us/mci". If not set, the endpoint will be the one corresponding to "de/txl".
           
           ⚠️ **Note:** Either `cluster_id` or `backup_id` must be used, but not both at the same time.
           
           > **⚠ WARNING:** `Location` attribute will become required in the future.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['clusterId'] = cluster_id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:dbaas/getMariaDBBackups:getMariaDBBackups', __args__, opts=opts, typ=GetMariaDBBackupsResult).value

    return AwaitableGetMariaDBBackupsResult(
        backup_id=pulumi.get(__ret__, 'backup_id'),
        backups=pulumi.get(__ret__, 'backups'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'))
def get_maria_db_backups_output(backup_id: Optional[pulumi.Input[Optional[str]]] = None,
                                cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                location: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMariaDBBackupsResult]:
    """
    The **DBaaS MariaDB Backups data source** can be used to search for and return existing DBaaS MariaDB Backups for a specific cluster.

    ## Example Usage

    ### Get all backups for a specific cluster
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.dbaas.get_maria_db_backups(cluster_id="cluster_id",
        location="de/txl")
    ```

    ### Get a specific backup
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.dbaas.get_maria_db_backups(backup_id="backup_id",
        location="de/txl")
    ```


    :param str backup_id: [string] The unique ID of the backup.
    :param str cluster_id: [string] The unique ID of the cluster.
    :param str location: [string] The location of the cluster. Different service endpoints are used based on location, possible options are: "de/fra", "de/txl", "es/vit", "fr/par", "gb/lhr", "us/ewr", "us/las", "us/mci". If not set, the endpoint will be the one corresponding to "de/txl".
           
           ⚠️ **Note:** Either `cluster_id` or `backup_id` must be used, but not both at the same time.
           
           > **⚠ WARNING:** `Location` attribute will become required in the future.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['clusterId'] = cluster_id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:dbaas/getMariaDBBackups:getMariaDBBackups', __args__, opts=opts, typ=GetMariaDBBackupsResult)
    return __ret__.apply(lambda __response__: GetMariaDBBackupsResult(
        backup_id=pulumi.get(__response__, 'backup_id'),
        backups=pulumi.get(__response__, 'backups'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location')))
