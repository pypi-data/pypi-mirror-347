# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ForwardingRuleArgs', 'ForwardingRule']

@pulumi.input_type
class ForwardingRuleArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 datacenter_id: pulumi.Input[str],
                 listener_ip: pulumi.Input[str],
                 listener_port: pulumi.Input[int],
                 networkloadbalancer_id: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 targets: pulumi.Input[Sequence[pulumi.Input['ForwardingRuleTargetArgs']]],
                 health_check: Optional[pulumi.Input['ForwardingRuleHealthCheckArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ForwardingRule resource.
        :param pulumi.Input[str] algorithm: [string] Algorithm for the balancing.
        :param pulumi.Input[str] datacenter_id: [string] A Datacenter's UUID.
        :param pulumi.Input[str] listener_ip: [string] Listening IP. (inbound)
        :param pulumi.Input[int] listener_port: [int] Listening port number. (inbound) (range: 1 to 65535)
        :param pulumi.Input[str] protocol: [string] Protocol of the balancing.
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingRuleTargetArgs']]] targets: [Set] Array of items in that collection.
        :param pulumi.Input['ForwardingRuleHealthCheckArgs'] health_check: Health check attributes for Network Load Balancer forwarding rule.
        :param pulumi.Input[str] name: [string] A name of that Network Load Balancer forwarding rule.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "listener_ip", listener_ip)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "networkloadbalancer_id", networkloadbalancer_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "targets", targets)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        """
        [string] Algorithm for the balancing.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] A Datacenter's UUID.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> pulumi.Input[str]:
        """
        [string] Listening IP. (inbound)
        """
        return pulumi.get(self, "listener_ip")

    @listener_ip.setter
    def listener_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_ip", value)

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> pulumi.Input[int]:
        """
        [int] Listening port number. (inbound) (range: 1 to 65535)
        """
        return pulumi.get(self, "listener_port")

    @listener_port.setter
    def listener_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "listener_port", value)

    @property
    @pulumi.getter(name="networkloadbalancerId")
    def networkloadbalancer_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "networkloadbalancer_id")

    @networkloadbalancer_id.setter
    def networkloadbalancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "networkloadbalancer_id", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        [string] Protocol of the balancing.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Input[Sequence[pulumi.Input['ForwardingRuleTargetArgs']]]:
        """
        [Set] Array of items in that collection.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input[Sequence[pulumi.Input['ForwardingRuleTargetArgs']]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['ForwardingRuleHealthCheckArgs']]:
        """
        Health check attributes for Network Load Balancer forwarding rule.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['ForwardingRuleHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A name of that Network Load Balancer forwarding rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ForwardingRuleState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['ForwardingRuleHealthCheckArgs']] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 listener_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networkloadbalancer_id: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleTargetArgs']]]] = None):
        """
        Input properties used for looking up and filtering ForwardingRule resources.
        :param pulumi.Input[str] algorithm: [string] Algorithm for the balancing.
        :param pulumi.Input[str] datacenter_id: [string] A Datacenter's UUID.
        :param pulumi.Input['ForwardingRuleHealthCheckArgs'] health_check: Health check attributes for Network Load Balancer forwarding rule.
        :param pulumi.Input[str] listener_ip: [string] Listening IP. (inbound)
        :param pulumi.Input[int] listener_port: [int] Listening port number. (inbound) (range: 1 to 65535)
        :param pulumi.Input[str] name: [string] A name of that Network Load Balancer forwarding rule.
        :param pulumi.Input[str] protocol: [string] Protocol of the balancing.
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingRuleTargetArgs']]] targets: [Set] Array of items in that collection.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if listener_ip is not None:
            pulumi.set(__self__, "listener_ip", listener_ip)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networkloadbalancer_id is not None:
            pulumi.set(__self__, "networkloadbalancer_id", networkloadbalancer_id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Algorithm for the balancing.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A Datacenter's UUID.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['ForwardingRuleHealthCheckArgs']]:
        """
        Health check attributes for Network Load Balancer forwarding rule.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['ForwardingRuleHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Listening IP. (inbound)
        """
        return pulumi.get(self, "listener_ip")

    @listener_ip.setter
    def listener_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_ip", value)

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[pulumi.Input[int]]:
        """
        [int] Listening port number. (inbound) (range: 1 to 65535)
        """
        return pulumi.get(self, "listener_port")

    @listener_port.setter
    def listener_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listener_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A name of that Network Load Balancer forwarding rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkloadbalancerId")
    def networkloadbalancer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "networkloadbalancer_id")

    @networkloadbalancer_id.setter
    def networkloadbalancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "networkloadbalancer_id", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Protocol of the balancing.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleTargetArgs']]]]:
        """
        [Set] Array of items in that collection.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleTargetArgs']]]]):
        pulumi.set(self, "targets", value)


class ForwardingRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[Union['ForwardingRuleHealthCheckArgs', 'ForwardingRuleHealthCheckArgsDict']]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 listener_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networkloadbalancer_id: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleTargetArgs', 'ForwardingRuleTargetArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a **Network Load Balancer Forwarding Rule** on IonosCloud.

        ## Example Usage

        ### 

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="Datacenter Description",
            sec_auth_protection=False)
        example1 = ionoscloud.compute.Lan("example1",
            datacenter_id=example.id,
            public=False,
            name="Lan Example 1")
        example2 = ionoscloud.compute.Lan("example2",
            datacenter_id=example.id,
            public=False,
            name="Lan Example 2")
        example_balancer = ionoscloud.nlb.Balancer("example",
            datacenter_id=example.id,
            name="example",
            listener_lan=example1.id,
            target_lan=example2.id,
            ips=["10.12.118.224"],
            lb_private_ips=["10.13.72.225/24"])
        example_forwarding_rule = ionoscloud.nlb.ForwardingRule("example",
            datacenter_id=example.id,
            networkloadbalancer_id=example_balancer.id,
            name="example",
            algorithm="SOURCE_IP",
            protocol="TCP",
            listener_ip="10.12.118.224",
            listener_port=8081,
            targets=[{
                "ip": "22.231.2.2",
                "port": 8080,
                "weight": 123,
                "proxy_protocol": "v1",
                "health_check": {
                    "check": True,
                    "check_interval": 1000,
                },
            }])
        ```

        ## Import

        A Network Load Balancer Forwarding Rule resource can be imported using its `resource id`, the `datacenter id` and the `networkloadbalancer id` e.g.

        ```sh
        $ pulumi import ionoscloud:nlb/forwardingRule:ForwardingRule my_networkloadbalancer_forwardingrule datacenter uuid/networkloadbalancer uuid/networkloadbalancer_forwardingrule uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: [string] Algorithm for the balancing.
        :param pulumi.Input[str] datacenter_id: [string] A Datacenter's UUID.
        :param pulumi.Input[Union['ForwardingRuleHealthCheckArgs', 'ForwardingRuleHealthCheckArgsDict']] health_check: Health check attributes for Network Load Balancer forwarding rule.
        :param pulumi.Input[str] listener_ip: [string] Listening IP. (inbound)
        :param pulumi.Input[int] listener_port: [int] Listening port number. (inbound) (range: 1 to 65535)
        :param pulumi.Input[str] name: [string] A name of that Network Load Balancer forwarding rule.
        :param pulumi.Input[str] protocol: [string] Protocol of the balancing.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleTargetArgs', 'ForwardingRuleTargetArgsDict']]]] targets: [Set] Array of items in that collection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ForwardingRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **Network Load Balancer Forwarding Rule** on IonosCloud.

        ## Example Usage

        ### 

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="Datacenter Description",
            sec_auth_protection=False)
        example1 = ionoscloud.compute.Lan("example1",
            datacenter_id=example.id,
            public=False,
            name="Lan Example 1")
        example2 = ionoscloud.compute.Lan("example2",
            datacenter_id=example.id,
            public=False,
            name="Lan Example 2")
        example_balancer = ionoscloud.nlb.Balancer("example",
            datacenter_id=example.id,
            name="example",
            listener_lan=example1.id,
            target_lan=example2.id,
            ips=["10.12.118.224"],
            lb_private_ips=["10.13.72.225/24"])
        example_forwarding_rule = ionoscloud.nlb.ForwardingRule("example",
            datacenter_id=example.id,
            networkloadbalancer_id=example_balancer.id,
            name="example",
            algorithm="SOURCE_IP",
            protocol="TCP",
            listener_ip="10.12.118.224",
            listener_port=8081,
            targets=[{
                "ip": "22.231.2.2",
                "port": 8080,
                "weight": 123,
                "proxy_protocol": "v1",
                "health_check": {
                    "check": True,
                    "check_interval": 1000,
                },
            }])
        ```

        ## Import

        A Network Load Balancer Forwarding Rule resource can be imported using its `resource id`, the `datacenter id` and the `networkloadbalancer id` e.g.

        ```sh
        $ pulumi import ionoscloud:nlb/forwardingRule:ForwardingRule my_networkloadbalancer_forwardingrule datacenter uuid/networkloadbalancer uuid/networkloadbalancer_forwardingrule uuid
        ```

        :param str resource_name: The name of the resource.
        :param ForwardingRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ForwardingRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[Union['ForwardingRuleHealthCheckArgs', 'ForwardingRuleHealthCheckArgsDict']]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 listener_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networkloadbalancer_id: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleTargetArgs', 'ForwardingRuleTargetArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ForwardingRuleArgs.__new__(ForwardingRuleArgs)

            if algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'algorithm'")
            __props__.__dict__["algorithm"] = algorithm
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            __props__.__dict__["health_check"] = health_check
            if listener_ip is None and not opts.urn:
                raise TypeError("Missing required property 'listener_ip'")
            __props__.__dict__["listener_ip"] = listener_ip
            if listener_port is None and not opts.urn:
                raise TypeError("Missing required property 'listener_port'")
            __props__.__dict__["listener_port"] = listener_port
            __props__.__dict__["name"] = name
            if networkloadbalancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'networkloadbalancer_id'")
            __props__.__dict__["networkloadbalancer_id"] = networkloadbalancer_id
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if targets is None and not opts.urn:
                raise TypeError("Missing required property 'targets'")
            __props__.__dict__["targets"] = targets
        super(ForwardingRule, __self__).__init__(
            'ionoscloud:nlb/forwardingRule:ForwardingRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[str]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            health_check: Optional[pulumi.Input[Union['ForwardingRuleHealthCheckArgs', 'ForwardingRuleHealthCheckArgsDict']]] = None,
            listener_ip: Optional[pulumi.Input[str]] = None,
            listener_port: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            networkloadbalancer_id: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleTargetArgs', 'ForwardingRuleTargetArgsDict']]]]] = None) -> 'ForwardingRule':
        """
        Get an existing ForwardingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: [string] Algorithm for the balancing.
        :param pulumi.Input[str] datacenter_id: [string] A Datacenter's UUID.
        :param pulumi.Input[Union['ForwardingRuleHealthCheckArgs', 'ForwardingRuleHealthCheckArgsDict']] health_check: Health check attributes for Network Load Balancer forwarding rule.
        :param pulumi.Input[str] listener_ip: [string] Listening IP. (inbound)
        :param pulumi.Input[int] listener_port: [int] Listening port number. (inbound) (range: 1 to 65535)
        :param pulumi.Input[str] name: [string] A name of that Network Load Balancer forwarding rule.
        :param pulumi.Input[str] protocol: [string] Protocol of the balancing.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleTargetArgs', 'ForwardingRuleTargetArgsDict']]]] targets: [Set] Array of items in that collection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ForwardingRuleState.__new__(_ForwardingRuleState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["health_check"] = health_check
        __props__.__dict__["listener_ip"] = listener_ip
        __props__.__dict__["listener_port"] = listener_port
        __props__.__dict__["name"] = name
        __props__.__dict__["networkloadbalancer_id"] = networkloadbalancer_id
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["targets"] = targets
        return ForwardingRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[str]:
        """
        [string] Algorithm for the balancing.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        [string] A Datacenter's UUID.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Output['outputs.ForwardingRuleHealthCheck']:
        """
        Health check attributes for Network Load Balancer forwarding rule.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> pulumi.Output[str]:
        """
        [string] Listening IP. (inbound)
        """
        return pulumi.get(self, "listener_ip")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> pulumi.Output[int]:
        """
        [int] Listening port number. (inbound) (range: 1 to 65535)
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] A name of that Network Load Balancer forwarding rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkloadbalancerId")
    def networkloadbalancer_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "networkloadbalancer_id")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        [string] Protocol of the balancing.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.ForwardingRuleTarget']]:
        """
        [Set] Array of items in that collection.
        """
        return pulumi.get(self, "targets")

