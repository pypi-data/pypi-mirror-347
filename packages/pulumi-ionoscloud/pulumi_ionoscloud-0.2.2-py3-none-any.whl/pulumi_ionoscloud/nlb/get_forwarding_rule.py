# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetForwardingRuleResult',
    'AwaitableGetForwardingRuleResult',
    'get_forwarding_rule',
    'get_forwarding_rule_output',
]

@pulumi.output_type
class GetForwardingRuleResult:
    """
    A collection of values returned by getForwardingRule.
    """
    def __init__(__self__, algorithm=None, datacenter_id=None, health_checks=None, id=None, listener_ip=None, listener_port=None, name=None, networkloadbalancer_id=None, protocol=None, targets=None):
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if health_checks and not isinstance(health_checks, list):
            raise TypeError("Expected argument 'health_checks' to be a list")
        pulumi.set(__self__, "health_checks", health_checks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_ip and not isinstance(listener_ip, str):
            raise TypeError("Expected argument 'listener_ip' to be a str")
        pulumi.set(__self__, "listener_ip", listener_ip)
        if listener_port and not isinstance(listener_port, int):
            raise TypeError("Expected argument 'listener_port' to be a int")
        pulumi.set(__self__, "listener_port", listener_port)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if networkloadbalancer_id and not isinstance(networkloadbalancer_id, str):
            raise TypeError("Expected argument 'networkloadbalancer_id' to be a str")
        pulumi.set(__self__, "networkloadbalancer_id", networkloadbalancer_id)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        """
        Algorithm for the balancing.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetForwardingRuleHealthCheckResult']:
        """
        Health check attributes for Network Load Balancer forwarding rule target.
        """
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of that Network Load Balancer forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> str:
        """
        Listening IP. (inbound)
        """
        return pulumi.get(self, "listener_ip")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> int:
        """
        Listening port number. (inbound) (range: 1 to 65535)
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of that Network Load Balancer forwarding rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkloadbalancerId")
    def networkloadbalancer_id(self) -> str:
        return pulumi.get(self, "networkloadbalancer_id")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol of the balancing.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetForwardingRuleTargetResult']:
        """
        Array of items in that collection.
        """
        return pulumi.get(self, "targets")


class AwaitableGetForwardingRuleResult(GetForwardingRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetForwardingRuleResult(
            algorithm=self.algorithm,
            datacenter_id=self.datacenter_id,
            health_checks=self.health_checks,
            id=self.id,
            listener_ip=self.listener_ip,
            listener_port=self.listener_port,
            name=self.name,
            networkloadbalancer_id=self.networkloadbalancer_id,
            protocol=self.protocol,
            targets=self.targets)


def get_forwarding_rule(datacenter_id: Optional[str] = None,
                        id: Optional[str] = None,
                        name: Optional[str] = None,
                        networkloadbalancer_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetForwardingRuleResult:
    """
    The **Network Load Balancer Forwarding Rule data source** can be used to search for and return existing network forwarding rules.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## By ID

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.nlb.get_forwarding_rule(datacenter_id="datacenter_id",
        networkloadbalancer_id="networkloadbalancer_id",
        id="networkloadbalancer_forwardingrule_id")
    ```

    ## By Name

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.nlb.get_forwarding_rule(datacenter_id="datacenter_id",
        networkloadbalancer_id="networkloadbalancer_id",
        name="Network Load Balancer Forwarding Rule Example")
    ```


    :param str datacenter_id: Datacenter's UUID.
    :param str id: ID of the network load balancer forwarding rule you want to search for.
           
           Both `datacenter_id` and `networkloadbalancer_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str name: Name of an existing network load balancer forwarding rule that you want to search for.
    :param str networkloadbalancer_id: Network Load Balancer's UUID.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['networkloadbalancerId'] = networkloadbalancer_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:nlb/getForwardingRule:getForwardingRule', __args__, opts=opts, typ=GetForwardingRuleResult).value

    return AwaitableGetForwardingRuleResult(
        algorithm=pulumi.get(__ret__, 'algorithm'),
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        health_checks=pulumi.get(__ret__, 'health_checks'),
        id=pulumi.get(__ret__, 'id'),
        listener_ip=pulumi.get(__ret__, 'listener_ip'),
        listener_port=pulumi.get(__ret__, 'listener_port'),
        name=pulumi.get(__ret__, 'name'),
        networkloadbalancer_id=pulumi.get(__ret__, 'networkloadbalancer_id'),
        protocol=pulumi.get(__ret__, 'protocol'),
        targets=pulumi.get(__ret__, 'targets'))
def get_forwarding_rule_output(datacenter_id: Optional[pulumi.Input[str]] = None,
                               id: Optional[pulumi.Input[Optional[str]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               networkloadbalancer_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetForwardingRuleResult]:
    """
    The **Network Load Balancer Forwarding Rule data source** can be used to search for and return existing network forwarding rules.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## By ID

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.nlb.get_forwarding_rule(datacenter_id="datacenter_id",
        networkloadbalancer_id="networkloadbalancer_id",
        id="networkloadbalancer_forwardingrule_id")
    ```

    ## By Name

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.nlb.get_forwarding_rule(datacenter_id="datacenter_id",
        networkloadbalancer_id="networkloadbalancer_id",
        name="Network Load Balancer Forwarding Rule Example")
    ```


    :param str datacenter_id: Datacenter's UUID.
    :param str id: ID of the network load balancer forwarding rule you want to search for.
           
           Both `datacenter_id` and `networkloadbalancer_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str name: Name of an existing network load balancer forwarding rule that you want to search for.
    :param str networkloadbalancer_id: Network Load Balancer's UUID.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['networkloadbalancerId'] = networkloadbalancer_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:nlb/getForwardingRule:getForwardingRule', __args__, opts=opts, typ=GetForwardingRuleResult)
    return __ret__.apply(lambda __response__: GetForwardingRuleResult(
        algorithm=pulumi.get(__response__, 'algorithm'),
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        health_checks=pulumi.get(__response__, 'health_checks'),
        id=pulumi.get(__response__, 'id'),
        listener_ip=pulumi.get(__response__, 'listener_ip'),
        listener_port=pulumi.get(__response__, 'listener_port'),
        name=pulumi.get(__response__, 'name'),
        networkloadbalancer_id=pulumi.get(__response__, 'networkloadbalancer_id'),
        protocol=pulumi.get(__response__, 'protocol'),
        targets=pulumi.get(__response__, 'targets')))
