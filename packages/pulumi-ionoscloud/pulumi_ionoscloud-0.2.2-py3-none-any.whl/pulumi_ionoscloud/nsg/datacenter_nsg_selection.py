# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DatacenterNsgSelectionArgs', 'DatacenterNsgSelection']

@pulumi.input_type
class DatacenterNsgSelectionArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 nsg_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a DatacenterNsgSelection resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] nsg_id: [string] The ID of a Network Security Group.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nsg_id", nsg_id)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="nsgId")
    def nsg_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of a Network Security Group.
        """
        return pulumi.get(self, "nsg_id")

    @nsg_id.setter
    def nsg_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nsg_id", value)


@pulumi.input_type
class _DatacenterNsgSelectionState:
    def __init__(__self__, *,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 nsg_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DatacenterNsgSelection resources.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] nsg_id: [string] The ID of a Network Security Group.
        """
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nsg_id is not None:
            pulumi.set(__self__, "nsg_id", nsg_id)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="nsgId")
    def nsg_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a Network Security Group.
        """
        return pulumi.get(self, "nsg_id")

    @nsg_id.setter
    def nsg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsg_id", value)


class DatacenterNsgSelection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 nsg_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Links a Network Security Group to a IonosCloud datacenter. The datacenter can only have one linked NSG. To set a new NSG for the datacenter, the current one will be unlinked.

        ## Example Usage

        A Network Security Group can be linked to a `compute.Datacenter` with this resource.
        Deleting the resource will unlink the NSG from the datacenter.

        ### Select an external volume
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter Default NSG Example",
            location="de/fra")
        example_nsg = ionoscloud.nsg.Nsg("example",
            name="NSG",
            description="NSG",
            datacenter_id=example.id)
        example_datacenter_nsg_selection = ionoscloud.nsg.DatacenterNsgSelection("example",
            datacenter_id=example.id,
            nsg_id=example_nsg.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] nsg_id: [string] The ID of a Network Security Group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatacenterNsgSelectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Links a Network Security Group to a IonosCloud datacenter. The datacenter can only have one linked NSG. To set a new NSG for the datacenter, the current one will be unlinked.

        ## Example Usage

        A Network Security Group can be linked to a `compute.Datacenter` with this resource.
        Deleting the resource will unlink the NSG from the datacenter.

        ### Select an external volume
        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter Default NSG Example",
            location="de/fra")
        example_nsg = ionoscloud.nsg.Nsg("example",
            name="NSG",
            description="NSG",
            datacenter_id=example.id)
        example_datacenter_nsg_selection = ionoscloud.nsg.DatacenterNsgSelection("example",
            datacenter_id=example.id,
            nsg_id=example_nsg.id)
        ```

        :param str resource_name: The name of the resource.
        :param DatacenterNsgSelectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatacenterNsgSelectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 nsg_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatacenterNsgSelectionArgs.__new__(DatacenterNsgSelectionArgs)

            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            if nsg_id is None and not opts.urn:
                raise TypeError("Missing required property 'nsg_id'")
            __props__.__dict__["nsg_id"] = nsg_id
        super(DatacenterNsgSelection, __self__).__init__(
            'ionoscloud:nsg/datacenterNsgSelection:DatacenterNsgSelection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            nsg_id: Optional[pulumi.Input[str]] = None) -> 'DatacenterNsgSelection':
        """
        Get an existing DatacenterNsgSelection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] nsg_id: [string] The ID of a Network Security Group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatacenterNsgSelectionState.__new__(_DatacenterNsgSelectionState)

        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["nsg_id"] = nsg_id
        return DatacenterNsgSelection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="nsgId")
    def nsg_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of a Network Security Group.
        """
        return pulumi.get(self, "nsg_id")

