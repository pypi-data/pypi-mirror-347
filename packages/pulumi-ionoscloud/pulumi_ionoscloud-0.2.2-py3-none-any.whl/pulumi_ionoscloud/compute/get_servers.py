# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetServersResult',
    'AwaitableGetServersResult',
    'get_servers',
    'get_servers_output',
]

@pulumi.output_type
class GetServersResult:
    """
    A collection of values returned by getServers.
    """
    def __init__(__self__, datacenter_id=None, filters=None, id=None, servers=None):
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetServersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetServersServerResult']:
        """
        list of servers that matches the filters provided.
        For a full reference of all attributes returned, check out documentation
        """
        return pulumi.get(self, "servers")


class AwaitableGetServersResult(GetServersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServersResult(
            datacenter_id=self.datacenter_id,
            filters=self.filters,
            id=self.id,
            servers=self.servers)


def get_servers(datacenter_id: Optional[str] = None,
                filters: Optional[Sequence[Union['GetServersFilterArgs', 'GetServersFilterArgsDict']]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServersResult:
    """
    The **Servers data source** can be used to search for and return existing servers based on filters used.

    ## Example Usage

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_servers(datacenter_id=example_ionoscloud_datacenter["id"],
        filters=[{
            "name": "name",
            "value": "server_name_to_look_here",
        }])
    ```

    ### By CPU Family
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_servers(datacenter_id=example_ionoscloud_datacenter["id"],
        filters=[{
            "name": "cpu_family",
            "value": "INTEL_XEON",
        }])
    ```

    ### By Name and Cores
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_servers(datacenter_id=example_ionoscloud_datacenter["id"],
        filters=[
            {
                "name": "name",
                "value": "test",
            },
            {
                "name": "cores",
                "value": "1",
            },
        ])
    ```


    :param str datacenter_id: Name of an existing datacenter that the servers are a part of
    :param Sequence[Union['GetServersFilterArgs', 'GetServersFilterArgsDict']] filters: One or more name/value pairs to filter off of. You can use most base fields in the server resource. These do **NOT** include nested fields in nics or volume nested fields.
           
           
           `datacenter_id` must be provided. If `datacenter_id` is missing , the datasource will return an error.
           
           **NOTE:** Lookup by filter is partial. Searching for a server using filter name and value `test`, will find all servers that have `test` in the name.
           For example, it will find servers named `test`, `test1`, `testsomething`.
           
           **NOTE:** You cannot search by `image_name` by providing an alias like `ubuntu`.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:compute/getServers:getServers', __args__, opts=opts, typ=GetServersResult).value

    return AwaitableGetServersResult(
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        servers=pulumi.get(__ret__, 'servers'))
def get_servers_output(datacenter_id: Optional[pulumi.Input[str]] = None,
                       filters: Optional[pulumi.Input[Optional[Sequence[Union['GetServersFilterArgs', 'GetServersFilterArgsDict']]]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServersResult]:
    """
    The **Servers data source** can be used to search for and return existing servers based on filters used.

    ## Example Usage

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_servers(datacenter_id=example_ionoscloud_datacenter["id"],
        filters=[{
            "name": "name",
            "value": "server_name_to_look_here",
        }])
    ```

    ### By CPU Family
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_servers(datacenter_id=example_ionoscloud_datacenter["id"],
        filters=[{
            "name": "cpu_family",
            "value": "INTEL_XEON",
        }])
    ```

    ### By Name and Cores
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_servers(datacenter_id=example_ionoscloud_datacenter["id"],
        filters=[
            {
                "name": "name",
                "value": "test",
            },
            {
                "name": "cores",
                "value": "1",
            },
        ])
    ```


    :param str datacenter_id: Name of an existing datacenter that the servers are a part of
    :param Sequence[Union['GetServersFilterArgs', 'GetServersFilterArgsDict']] filters: One or more name/value pairs to filter off of. You can use most base fields in the server resource. These do **NOT** include nested fields in nics or volume nested fields.
           
           
           `datacenter_id` must be provided. If `datacenter_id` is missing , the datasource will return an error.
           
           **NOTE:** Lookup by filter is partial. Searching for a server using filter name and value `test`, will find all servers that have `test` in the name.
           For example, it will find servers named `test`, `test1`, `testsomething`.
           
           **NOTE:** You cannot search by `image_name` by providing an alias like `ubuntu`.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:compute/getServers:getServers', __args__, opts=opts, typ=GetServersResult)
    return __ret__.apply(lambda __response__: GetServersResult(
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        servers=pulumi.get(__response__, 'servers')))
