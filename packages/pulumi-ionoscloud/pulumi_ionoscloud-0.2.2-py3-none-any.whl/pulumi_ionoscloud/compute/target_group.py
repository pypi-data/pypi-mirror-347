# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TargetGroupArgs', 'TargetGroup']

@pulumi.input_type
class TargetGroupArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 protocol_version: pulumi.Input[str],
                 health_check: Optional[pulumi.Input['TargetGroupHealthCheckArgs']] = None,
                 http_health_check: Optional[pulumi.Input['TargetGroupHttpHealthCheckArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupTargetArgs']]]] = None):
        """
        The set of arguments for constructing a TargetGroup resource.
        :param pulumi.Input[str] algorithm: [string] Balancing algorithm.
        :param pulumi.Input[str] protocol: [string] Balancing protocol.
        :param pulumi.Input[str] protocol_version: [string] The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
        :param pulumi.Input['TargetGroupHealthCheckArgs'] health_check: Health check attributes for Target Group.
        :param pulumi.Input['TargetGroupHttpHealthCheckArgs'] http_health_check: Http health check attributes for Target Group
        :param pulumi.Input[str] name: [string] The name of the target group.
        :param pulumi.Input[Sequence[pulumi.Input['TargetGroupTargetArgs']]] targets: [list] Array of items in the collection
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "protocol_version", protocol_version)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if http_health_check is not None:
            pulumi.set(__self__, "http_health_check", http_health_check)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        """
        [string] Balancing algorithm.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        [string] Balancing protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> pulumi.Input[str]:
        """
        [string] The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
        """
        return pulumi.get(self, "protocol_version")

    @protocol_version.setter
    def protocol_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol_version", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['TargetGroupHealthCheckArgs']]:
        """
        Health check attributes for Target Group.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['TargetGroupHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="httpHealthCheck")
    def http_health_check(self) -> Optional[pulumi.Input['TargetGroupHttpHealthCheckArgs']]:
        """
        Http health check attributes for Target Group
        """
        return pulumi.get(self, "http_health_check")

    @http_health_check.setter
    def http_health_check(self, value: Optional[pulumi.Input['TargetGroupHttpHealthCheckArgs']]):
        pulumi.set(self, "http_health_check", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the target group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupTargetArgs']]]]:
        """
        [list] Array of items in the collection
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupTargetArgs']]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class _TargetGroupState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['TargetGroupHealthCheckArgs']] = None,
                 http_health_check: Optional[pulumi.Input['TargetGroupHttpHealthCheckArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_version: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupTargetArgs']]]] = None):
        """
        Input properties used for looking up and filtering TargetGroup resources.
        :param pulumi.Input[str] algorithm: [string] Balancing algorithm.
        :param pulumi.Input['TargetGroupHealthCheckArgs'] health_check: Health check attributes for Target Group.
        :param pulumi.Input['TargetGroupHttpHealthCheckArgs'] http_health_check: Http health check attributes for Target Group
        :param pulumi.Input[str] name: [string] The name of the target group.
        :param pulumi.Input[str] protocol: [string] Balancing protocol.
        :param pulumi.Input[str] protocol_version: [string] The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
        :param pulumi.Input[Sequence[pulumi.Input['TargetGroupTargetArgs']]] targets: [list] Array of items in the collection
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if http_health_check is not None:
            pulumi.set(__self__, "http_health_check", http_health_check)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_version is not None:
            pulumi.set(__self__, "protocol_version", protocol_version)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Balancing algorithm.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['TargetGroupHealthCheckArgs']]:
        """
        Health check attributes for Target Group.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['TargetGroupHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="httpHealthCheck")
    def http_health_check(self) -> Optional[pulumi.Input['TargetGroupHttpHealthCheckArgs']]:
        """
        Http health check attributes for Target Group
        """
        return pulumi.get(self, "http_health_check")

    @http_health_check.setter
    def http_health_check(self, value: Optional[pulumi.Input['TargetGroupHttpHealthCheckArgs']]):
        pulumi.set(self, "http_health_check", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the target group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Balancing protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
        """
        return pulumi.get(self, "protocol_version")

    @protocol_version.setter
    def protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_version", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupTargetArgs']]]]:
        """
        [list] Array of items in the collection
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupTargetArgs']]]]):
        pulumi.set(self, "targets", value)


class TargetGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[Union['TargetGroupHealthCheckArgs', 'TargetGroupHealthCheckArgsDict']]] = None,
                 http_health_check: Optional[pulumi.Input[Union['TargetGroupHttpHealthCheckArgs', 'TargetGroupHttpHealthCheckArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_version: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupTargetArgs', 'TargetGroupTargetArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a **Target Group** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.TargetGroup("example",
            name="Target Group Example",
            algorithm="ROUND_ROBIN",
            protocol="HTTP",
            protocol_version="HTTP1",
            targets=[
                {
                    "ip": "22.231.2.2",
                    "port": 8080,
                    "weight": 1,
                    "proxy_protocol": "v2ssl",
                    "health_check_enabled": True,
                    "maintenance_enabled": False,
                },
                {
                    "ip": "22.231.2.3",
                    "port": 8081,
                    "weight": 124,
                    "proxy_protocol": "v2",
                    "health_check_enabled": False,
                    "maintenance_enabled": False,
                },
            ],
            health_check={
                "check_timeout": 5000,
                "check_interval": 50000,
                "retries": 2,
            },
            http_health_check={
                "path": "/.",
                "method": "GET",
                "match_type": "STATUS_CODE",
                "response": "200",
                "regex": True,
                "negate": True,
            })
        ```

        ## Import

        Resource Target Group can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/targetGroup:TargetGroup myTargetGroup target group uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: [string] Balancing algorithm.
        :param pulumi.Input[Union['TargetGroupHealthCheckArgs', 'TargetGroupHealthCheckArgsDict']] health_check: Health check attributes for Target Group.
        :param pulumi.Input[Union['TargetGroupHttpHealthCheckArgs', 'TargetGroupHttpHealthCheckArgsDict']] http_health_check: Http health check attributes for Target Group
        :param pulumi.Input[str] name: [string] The name of the target group.
        :param pulumi.Input[str] protocol: [string] Balancing protocol.
        :param pulumi.Input[str] protocol_version: [string] The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupTargetArgs', 'TargetGroupTargetArgsDict']]]] targets: [list] Array of items in the collection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TargetGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **Target Group** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.TargetGroup("example",
            name="Target Group Example",
            algorithm="ROUND_ROBIN",
            protocol="HTTP",
            protocol_version="HTTP1",
            targets=[
                {
                    "ip": "22.231.2.2",
                    "port": 8080,
                    "weight": 1,
                    "proxy_protocol": "v2ssl",
                    "health_check_enabled": True,
                    "maintenance_enabled": False,
                },
                {
                    "ip": "22.231.2.3",
                    "port": 8081,
                    "weight": 124,
                    "proxy_protocol": "v2",
                    "health_check_enabled": False,
                    "maintenance_enabled": False,
                },
            ],
            health_check={
                "check_timeout": 5000,
                "check_interval": 50000,
                "retries": 2,
            },
            http_health_check={
                "path": "/.",
                "method": "GET",
                "match_type": "STATUS_CODE",
                "response": "200",
                "regex": True,
                "negate": True,
            })
        ```

        ## Import

        Resource Target Group can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/targetGroup:TargetGroup myTargetGroup target group uuid
        ```

        :param str resource_name: The name of the resource.
        :param TargetGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TargetGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[Union['TargetGroupHealthCheckArgs', 'TargetGroupHealthCheckArgsDict']]] = None,
                 http_health_check: Optional[pulumi.Input[Union['TargetGroupHttpHealthCheckArgs', 'TargetGroupHttpHealthCheckArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_version: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupTargetArgs', 'TargetGroupTargetArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TargetGroupArgs.__new__(TargetGroupArgs)

            if algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'algorithm'")
            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["health_check"] = health_check
            __props__.__dict__["http_health_check"] = http_health_check
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if protocol_version is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_version'")
            __props__.__dict__["protocol_version"] = protocol_version
            __props__.__dict__["targets"] = targets
        super(TargetGroup, __self__).__init__(
            'ionoscloud:compute/targetGroup:TargetGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[str]] = None,
            health_check: Optional[pulumi.Input[Union['TargetGroupHealthCheckArgs', 'TargetGroupHealthCheckArgsDict']]] = None,
            http_health_check: Optional[pulumi.Input[Union['TargetGroupHttpHealthCheckArgs', 'TargetGroupHttpHealthCheckArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            protocol_version: Optional[pulumi.Input[str]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupTargetArgs', 'TargetGroupTargetArgsDict']]]]] = None) -> 'TargetGroup':
        """
        Get an existing TargetGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: [string] Balancing algorithm.
        :param pulumi.Input[Union['TargetGroupHealthCheckArgs', 'TargetGroupHealthCheckArgsDict']] health_check: Health check attributes for Target Group.
        :param pulumi.Input[Union['TargetGroupHttpHealthCheckArgs', 'TargetGroupHttpHealthCheckArgsDict']] http_health_check: Http health check attributes for Target Group
        :param pulumi.Input[str] name: [string] The name of the target group.
        :param pulumi.Input[str] protocol: [string] Balancing protocol.
        :param pulumi.Input[str] protocol_version: [string] The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TargetGroupTargetArgs', 'TargetGroupTargetArgsDict']]]] targets: [list] Array of items in the collection
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TargetGroupState.__new__(_TargetGroupState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["health_check"] = health_check
        __props__.__dict__["http_health_check"] = http_health_check
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["protocol_version"] = protocol_version
        __props__.__dict__["targets"] = targets
        return TargetGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[str]:
        """
        [string] Balancing algorithm.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Output['outputs.TargetGroupHealthCheck']:
        """
        Health check attributes for Target Group.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="httpHealthCheck")
    def http_health_check(self) -> pulumi.Output['outputs.TargetGroupHttpHealthCheck']:
        """
        Http health check attributes for Target Group
        """
        return pulumi.get(self, "http_health_check")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the target group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        [string] Balancing protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> pulumi.Output[str]:
        """
        [string] The forwarding protocol version. Value is ignored when protocol is not 'HTTP'.
        """
        return pulumi.get(self, "protocol_version")

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.TargetGroupTarget']]:
        """
        [list] Array of items in the collection
        """
        return pulumi.get(self, "targets")

