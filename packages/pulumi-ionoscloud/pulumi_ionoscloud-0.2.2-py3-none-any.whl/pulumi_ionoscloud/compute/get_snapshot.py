# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetSnapshotResult',
    'AwaitableGetSnapshotResult',
    'get_snapshot',
    'get_snapshot_output',
]

@pulumi.output_type
class GetSnapshotResult:
    """
    A collection of values returned by getSnapshot.
    """
    def __init__(__self__, cpu_hot_plug=None, cpu_hot_unplug=None, description=None, disc_scsi_hot_plug=None, disc_scsi_hot_unplug=None, disc_virtio_hot_plug=None, disc_virtio_hot_unplug=None, id=None, licence_type=None, location=None, name=None, nic_hot_plug=None, nic_hot_unplug=None, ram_hot_plug=None, ram_hot_unplug=None, sec_auth_protection=None, size=None):
        if cpu_hot_plug and not isinstance(cpu_hot_plug, bool):
            raise TypeError("Expected argument 'cpu_hot_plug' to be a bool")
        pulumi.set(__self__, "cpu_hot_plug", cpu_hot_plug)
        if cpu_hot_unplug and not isinstance(cpu_hot_unplug, bool):
            raise TypeError("Expected argument 'cpu_hot_unplug' to be a bool")
        pulumi.set(__self__, "cpu_hot_unplug", cpu_hot_unplug)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disc_scsi_hot_plug and not isinstance(disc_scsi_hot_plug, bool):
            raise TypeError("Expected argument 'disc_scsi_hot_plug' to be a bool")
        pulumi.set(__self__, "disc_scsi_hot_plug", disc_scsi_hot_plug)
        if disc_scsi_hot_unplug and not isinstance(disc_scsi_hot_unplug, bool):
            raise TypeError("Expected argument 'disc_scsi_hot_unplug' to be a bool")
        pulumi.set(__self__, "disc_scsi_hot_unplug", disc_scsi_hot_unplug)
        if disc_virtio_hot_plug and not isinstance(disc_virtio_hot_plug, bool):
            raise TypeError("Expected argument 'disc_virtio_hot_plug' to be a bool")
        pulumi.set(__self__, "disc_virtio_hot_plug", disc_virtio_hot_plug)
        if disc_virtio_hot_unplug and not isinstance(disc_virtio_hot_unplug, bool):
            raise TypeError("Expected argument 'disc_virtio_hot_unplug' to be a bool")
        pulumi.set(__self__, "disc_virtio_hot_unplug", disc_virtio_hot_unplug)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if licence_type and not isinstance(licence_type, str):
            raise TypeError("Expected argument 'licence_type' to be a str")
        pulumi.set(__self__, "licence_type", licence_type)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nic_hot_plug and not isinstance(nic_hot_plug, bool):
            raise TypeError("Expected argument 'nic_hot_plug' to be a bool")
        pulumi.set(__self__, "nic_hot_plug", nic_hot_plug)
        if nic_hot_unplug and not isinstance(nic_hot_unplug, bool):
            raise TypeError("Expected argument 'nic_hot_unplug' to be a bool")
        pulumi.set(__self__, "nic_hot_unplug", nic_hot_unplug)
        if ram_hot_plug and not isinstance(ram_hot_plug, bool):
            raise TypeError("Expected argument 'ram_hot_plug' to be a bool")
        pulumi.set(__self__, "ram_hot_plug", ram_hot_plug)
        if ram_hot_unplug and not isinstance(ram_hot_unplug, bool):
            raise TypeError("Expected argument 'ram_hot_unplug' to be a bool")
        pulumi.set(__self__, "ram_hot_unplug", ram_hot_unplug)
        if sec_auth_protection and not isinstance(sec_auth_protection, bool):
            raise TypeError("Expected argument 'sec_auth_protection' to be a bool")
        pulumi.set(__self__, "sec_auth_protection", sec_auth_protection)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="cpuHotPlug")
    def cpu_hot_plug(self) -> bool:
        """
        Is capable of CPU hot plug (no reboot required)
        """
        return pulumi.get(self, "cpu_hot_plug")

    @property
    @pulumi.getter(name="cpuHotUnplug")
    def cpu_hot_unplug(self) -> bool:
        """
        Is capable of CPU hot unplug (no reboot required)
        """
        return pulumi.get(self, "cpu_hot_unplug")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Human readable description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discScsiHotPlug")
    def disc_scsi_hot_plug(self) -> bool:
        """
        Is capable of SCSI drive hot plug (no reboot required)
        """
        return pulumi.get(self, "disc_scsi_hot_plug")

    @property
    @pulumi.getter(name="discScsiHotUnplug")
    def disc_scsi_hot_unplug(self) -> bool:
        """
        Is capable of SCSI drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        """
        return pulumi.get(self, "disc_scsi_hot_unplug")

    @property
    @pulumi.getter(name="discVirtioHotPlug")
    def disc_virtio_hot_plug(self) -> bool:
        """
        Is capable of Virt-IO drive hot plug (no reboot required)
        """
        return pulumi.get(self, "disc_virtio_hot_plug")

    @property
    @pulumi.getter(name="discVirtioHotUnplug")
    def disc_virtio_hot_unplug(self) -> bool:
        """
        Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        """
        return pulumi.get(self, "disc_virtio_hot_unplug")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        UUID of the snapshot
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="licenceType")
    def licence_type(self) -> str:
        """
        OS type of this Snapshot
        """
        return pulumi.get(self, "licence_type")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of that image/snapshot
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the snapshot.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nicHotPlug")
    def nic_hot_plug(self) -> bool:
        """
        Is capable of nic hot plug (no reboot required)
        """
        return pulumi.get(self, "nic_hot_plug")

    @property
    @pulumi.getter(name="nicHotUnplug")
    def nic_hot_unplug(self) -> bool:
        """
        Is capable of nic hot unplug (no reboot required)
        """
        return pulumi.get(self, "nic_hot_unplug")

    @property
    @pulumi.getter(name="ramHotPlug")
    def ram_hot_plug(self) -> bool:
        """
        Is capable of memory hot plug (no reboot required)
        """
        return pulumi.get(self, "ram_hot_plug")

    @property
    @pulumi.getter(name="ramHotUnplug")
    def ram_hot_unplug(self) -> bool:
        """
        Is capable of memory hot unplug (no reboot required)
        """
        return pulumi.get(self, "ram_hot_unplug")

    @property
    @pulumi.getter(name="secAuthProtection")
    def sec_auth_protection(self) -> bool:
        """
        Boolean value representing if the snapshot requires extra protection e.g. two factor protection
        """
        return pulumi.get(self, "sec_auth_protection")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the image in GB
        """
        return pulumi.get(self, "size")


class AwaitableGetSnapshotResult(GetSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotResult(
            cpu_hot_plug=self.cpu_hot_plug,
            cpu_hot_unplug=self.cpu_hot_unplug,
            description=self.description,
            disc_scsi_hot_plug=self.disc_scsi_hot_plug,
            disc_scsi_hot_unplug=self.disc_scsi_hot_unplug,
            disc_virtio_hot_plug=self.disc_virtio_hot_plug,
            disc_virtio_hot_unplug=self.disc_virtio_hot_unplug,
            id=self.id,
            licence_type=self.licence_type,
            location=self.location,
            name=self.name,
            nic_hot_plug=self.nic_hot_plug,
            nic_hot_unplug=self.nic_hot_unplug,
            ram_hot_plug=self.ram_hot_plug,
            ram_hot_unplug=self.ram_hot_unplug,
            sec_auth_protection=self.sec_auth_protection,
            size=self.size)


def get_snapshot(id: Optional[str] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotResult:
    """
    The **Snapshot data source** can be used to search for and return an existing snapshot which can then be used to provision a server. If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned. When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_snapshot(id="snapshot_id")
    ```

    ### By Name & Size & Location
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_snapshot(name="Snapshot Example",
        size=2,
        location="us/las")
    ```
    Note: The size argument is in GB


    :param str id: UUID of an existing snapshot that you want to search for.
    :param str location: Existing snapshot's location.
    :param str name: Name of an existing snapshot that you want to search for.
    :param int size: The size of the snapshot to look for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
           Additionally, you can add `location` and `size` along with the `name` argument for a more refined search.
           If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
           When this happens, please refine your search string so that it is specific enough to return only one result.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['size'] = size
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:compute/getSnapshot:getSnapshot', __args__, opts=opts, typ=GetSnapshotResult).value

    return AwaitableGetSnapshotResult(
        cpu_hot_plug=pulumi.get(__ret__, 'cpu_hot_plug'),
        cpu_hot_unplug=pulumi.get(__ret__, 'cpu_hot_unplug'),
        description=pulumi.get(__ret__, 'description'),
        disc_scsi_hot_plug=pulumi.get(__ret__, 'disc_scsi_hot_plug'),
        disc_scsi_hot_unplug=pulumi.get(__ret__, 'disc_scsi_hot_unplug'),
        disc_virtio_hot_plug=pulumi.get(__ret__, 'disc_virtio_hot_plug'),
        disc_virtio_hot_unplug=pulumi.get(__ret__, 'disc_virtio_hot_unplug'),
        id=pulumi.get(__ret__, 'id'),
        licence_type=pulumi.get(__ret__, 'licence_type'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        nic_hot_plug=pulumi.get(__ret__, 'nic_hot_plug'),
        nic_hot_unplug=pulumi.get(__ret__, 'nic_hot_unplug'),
        ram_hot_plug=pulumi.get(__ret__, 'ram_hot_plug'),
        ram_hot_unplug=pulumi.get(__ret__, 'ram_hot_unplug'),
        sec_auth_protection=pulumi.get(__ret__, 'sec_auth_protection'),
        size=pulumi.get(__ret__, 'size'))
def get_snapshot_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                        location: Optional[pulumi.Input[Optional[str]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        size: Optional[pulumi.Input[Optional[int]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSnapshotResult]:
    """
    The **Snapshot data source** can be used to search for and return an existing snapshot which can then be used to provision a server. If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned. When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_snapshot(id="snapshot_id")
    ```

    ### By Name & Size & Location
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_snapshot(name="Snapshot Example",
        size=2,
        location="us/las")
    ```
    Note: The size argument is in GB


    :param str id: UUID of an existing snapshot that you want to search for.
    :param str location: Existing snapshot's location.
    :param str name: Name of an existing snapshot that you want to search for.
    :param int size: The size of the snapshot to look for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
           Additionally, you can add `location` and `size` along with the `name` argument for a more refined search.
           If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
           When this happens, please refine your search string so that it is specific enough to return only one result.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['size'] = size
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:compute/getSnapshot:getSnapshot', __args__, opts=opts, typ=GetSnapshotResult)
    return __ret__.apply(lambda __response__: GetSnapshotResult(
        cpu_hot_plug=pulumi.get(__response__, 'cpu_hot_plug'),
        cpu_hot_unplug=pulumi.get(__response__, 'cpu_hot_unplug'),
        description=pulumi.get(__response__, 'description'),
        disc_scsi_hot_plug=pulumi.get(__response__, 'disc_scsi_hot_plug'),
        disc_scsi_hot_unplug=pulumi.get(__response__, 'disc_scsi_hot_unplug'),
        disc_virtio_hot_plug=pulumi.get(__response__, 'disc_virtio_hot_plug'),
        disc_virtio_hot_unplug=pulumi.get(__response__, 'disc_virtio_hot_unplug'),
        id=pulumi.get(__response__, 'id'),
        licence_type=pulumi.get(__response__, 'licence_type'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        nic_hot_plug=pulumi.get(__response__, 'nic_hot_plug'),
        nic_hot_unplug=pulumi.get(__response__, 'nic_hot_unplug'),
        ram_hot_plug=pulumi.get(__response__, 'ram_hot_plug'),
        ram_hot_unplug=pulumi.get(__response__, 'ram_hot_unplug'),
        sec_auth_protection=pulumi.get(__response__, 'sec_auth_protection'),
        size=pulumi.get(__response__, 'size')))
