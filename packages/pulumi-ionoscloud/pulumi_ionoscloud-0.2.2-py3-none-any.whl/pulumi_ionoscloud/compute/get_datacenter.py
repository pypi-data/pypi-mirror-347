# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDatacenterResult',
    'AwaitableGetDatacenterResult',
    'get_datacenter',
    'get_datacenter_output',
]

@pulumi.output_type
class GetDatacenterResult:
    """
    A collection of values returned by getDatacenter.
    """
    def __init__(__self__, cpu_architectures=None, description=None, features=None, id=None, ipv6_cidr_block=None, location=None, name=None, sec_auth_protection=None, version=None):
        if cpu_architectures and not isinstance(cpu_architectures, list):
            raise TypeError("Expected argument 'cpu_architectures' to be a list")
        pulumi.set(__self__, "cpu_architectures", cpu_architectures)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        pulumi.set(__self__, "features", features)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv6_cidr_block and not isinstance(ipv6_cidr_block, str):
            raise TypeError("Expected argument 'ipv6_cidr_block' to be a str")
        pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sec_auth_protection and not isinstance(sec_auth_protection, bool):
            raise TypeError("Expected argument 'sec_auth_protection' to be a bool")
        pulumi.set(__self__, "sec_auth_protection", sec_auth_protection)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="cpuArchitectures")
    def cpu_architectures(self) -> Sequence['outputs.GetDatacenterCpuArchitectureResult']:
        """
        Array of features and CPU families available in a location
        """
        return pulumi.get(self, "cpu_architectures")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description for the Virtual Data Center
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        List of features supported by the location this data center is part of
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        UUID of the Virtual Data Center
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> str:
        return pulumi.get(self, "ipv6_cidr_block")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The regional location where the Virtual Data Center will be created
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Virtual Data Center
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secAuthProtection")
    def sec_auth_protection(self) -> bool:
        """
        Boolean value representing if the data center requires extra protection e.g. two factor protection
        """
        return pulumi.get(self, "sec_auth_protection")

    @property
    @pulumi.getter
    def version(self) -> int:
        """
        The version of that Data Center. Gets incremented with every change
        """
        return pulumi.get(self, "version")


class AwaitableGetDatacenterResult(GetDatacenterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatacenterResult(
            cpu_architectures=self.cpu_architectures,
            description=self.description,
            features=self.features,
            id=self.id,
            ipv6_cidr_block=self.ipv6_cidr_block,
            location=self.location,
            name=self.name,
            sec_auth_protection=self.sec_auth_protection,
            version=self.version)


def get_datacenter(id: Optional[str] = None,
                   location: Optional[str] = None,
                   name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatacenterResult:
    """
    The **Datacenter data source** can be used to search for and return an existing Virtual Data Center.
    You can provide a string for the name and location parameters which will be compared with provisioned Virtual Data Centers.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_datacenter(id="datacenter_id")
    ```

    ### By Name & Location
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_datacenter(name="Datacenter Example",
        location="us/las")
    ```


    :param str id: Id of an existing Virtual Data Center that you want to search for.
    :param str location: Id of the existing Virtual Data Center's location.
           
           Either `name`, `location` or `id` must be provided. If none, the datasource will return an error.
    :param str name: Name of an existing Virtual Data Center that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:compute/getDatacenter:getDatacenter', __args__, opts=opts, typ=GetDatacenterResult).value

    return AwaitableGetDatacenterResult(
        cpu_architectures=pulumi.get(__ret__, 'cpu_architectures'),
        description=pulumi.get(__ret__, 'description'),
        features=pulumi.get(__ret__, 'features'),
        id=pulumi.get(__ret__, 'id'),
        ipv6_cidr_block=pulumi.get(__ret__, 'ipv6_cidr_block'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        sec_auth_protection=pulumi.get(__ret__, 'sec_auth_protection'),
        version=pulumi.get(__ret__, 'version'))
def get_datacenter_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                          location: Optional[pulumi.Input[Optional[str]]] = None,
                          name: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatacenterResult]:
    """
    The **Datacenter data source** can be used to search for and return an existing Virtual Data Center.
    You can provide a string for the name and location parameters which will be compared with provisioned Virtual Data Centers.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_datacenter(id="datacenter_id")
    ```

    ### By Name & Location
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_datacenter(name="Datacenter Example",
        location="us/las")
    ```


    :param str id: Id of an existing Virtual Data Center that you want to search for.
    :param str location: Id of the existing Virtual Data Center's location.
           
           Either `name`, `location` or `id` must be provided. If none, the datasource will return an error.
    :param str name: Name of an existing Virtual Data Center that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:compute/getDatacenter:getDatacenter', __args__, opts=opts, typ=GetDatacenterResult)
    return __ret__.apply(lambda __response__: GetDatacenterResult(
        cpu_architectures=pulumi.get(__response__, 'cpu_architectures'),
        description=pulumi.get(__response__, 'description'),
        features=pulumi.get(__response__, 'features'),
        id=pulumi.get(__response__, 'id'),
        ipv6_cidr_block=pulumi.get(__response__, 'ipv6_cidr_block'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        sec_auth_protection=pulumi.get(__response__, 'sec_auth_protection'),
        version=pulumi.get(__response__, 'version')))
