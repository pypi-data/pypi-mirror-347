# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RegistryFeaturesArgs',
    'RegistryFeaturesArgsDict',
    'RegistryGarbageCollectionScheduleArgs',
    'RegistryGarbageCollectionScheduleArgsDict',
    'RegistryStorageUsageArgs',
    'RegistryStorageUsageArgsDict',
    'RegistryTokenCredentialArgs',
    'RegistryTokenCredentialArgsDict',
    'RegistryTokenScopeArgs',
    'RegistryTokenScopeArgsDict',
]

MYPY = False

if not MYPY:
    class RegistryFeaturesArgsDict(TypedDict):
        vulnerability_scanning: NotRequired[pulumi.Input[bool]]
        """
        [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.

        > **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerability_scanning` is set to false on resource creation.
        """
elif False:
    RegistryFeaturesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegistryFeaturesArgs:
    def __init__(__self__, *,
                 vulnerability_scanning: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] vulnerability_scanning: [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.
               
               > **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerability_scanning` is set to false on resource creation.
        """
        if vulnerability_scanning is not None:
            pulumi.set(__self__, "vulnerability_scanning", vulnerability_scanning)

    @property
    @pulumi.getter(name="vulnerabilityScanning")
    def vulnerability_scanning(self) -> Optional[pulumi.Input[bool]]:
        """
        [bool] Enables or disables the Vulnerability Scanning feature for the Container Registry. To disable this feature, set the attribute to false when creating the CR resource.

        > **⚠ WARNING** `Container Registry Vulnerability Scanning` is a paid feature which is enabled by default, and cannot be turned off after activation. To disable this feature for a Container Registry, ensure `vulnerability_scanning` is set to false on resource creation.
        """
        return pulumi.get(self, "vulnerability_scanning")

    @vulnerability_scanning.setter
    def vulnerability_scanning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vulnerability_scanning", value)


if not MYPY:
    class RegistryGarbageCollectionScheduleArgsDict(TypedDict):
        days: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        [list] Elements of list must have one of the values: `Saturday`, `Sunday`, `Monday`, `Tuesday`,  `Wednesday`,  `Thursday`,  `Friday`
        """
        time: pulumi.Input[str]
        """
        [string]
        """
elif False:
    RegistryGarbageCollectionScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegistryGarbageCollectionScheduleArgs:
    def __init__(__self__, *,
                 days: pulumi.Input[Sequence[pulumi.Input[str]]],
                 time: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] days: [list] Elements of list must have one of the values: `Saturday`, `Sunday`, `Monday`, `Tuesday`,  `Wednesday`,  `Thursday`,  `Friday`
        :param pulumi.Input[str] time: [string]
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def days(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        [list] Elements of list must have one of the values: `Saturday`, `Sunday`, `Monday`, `Tuesday`,  `Wednesday`,  `Thursday`,  `Friday`
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        [string]
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


if not MYPY:
    class RegistryStorageUsageArgsDict(TypedDict):
        bytes: NotRequired[pulumi.Input[int]]
        updated_at: NotRequired[pulumi.Input[str]]
elif False:
    RegistryStorageUsageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegistryStorageUsageArgs:
    def __init__(__self__, *,
                 bytes: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        if bytes is not None:
            pulumi.set(__self__, "bytes", bytes)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def bytes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bytes")

    @bytes.setter
    def bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bytes", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class RegistryTokenCredentialArgsDict(TypedDict):
        password: pulumi.Input[str]
        username: pulumi.Input[str]
elif False:
    RegistryTokenCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegistryTokenCredentialArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class RegistryTokenScopeArgsDict(TypedDict):
        actions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        [string] Example: ["pull", "push", "delete"]
        """
        name: pulumi.Input[str]
        """
        [string]
        """
        type: pulumi.Input[str]
        """
        [string]
        """
elif False:
    RegistryTokenScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegistryTokenScopeArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: [string] Example: ["pull", "push", "delete"]
        :param pulumi.Input[str] name: [string]
        :param pulumi.Input[str] type: [string]
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        [string] Example: ["pull", "push", "delete"]
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        [string]
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        [string]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


