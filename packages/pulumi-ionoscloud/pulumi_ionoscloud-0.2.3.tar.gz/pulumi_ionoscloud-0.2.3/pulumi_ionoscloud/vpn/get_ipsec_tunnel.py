# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetIpsecTunnelResult',
    'AwaitableGetIpsecTunnelResult',
    'get_ipsec_tunnel',
    'get_ipsec_tunnel_output',
]

@pulumi.output_type
class GetIpsecTunnelResult:
    """
    A collection of values returned by getIpsecTunnel.
    """
    def __init__(__self__, auths=None, cloud_network_cidrs=None, description=None, esps=None, gateway_id=None, id=None, ikes=None, location=None, name=None, peer_network_cidrs=None, remote_host=None):
        if auths and not isinstance(auths, list):
            raise TypeError("Expected argument 'auths' to be a list")
        pulumi.set(__self__, "auths", auths)
        if cloud_network_cidrs and not isinstance(cloud_network_cidrs, list):
            raise TypeError("Expected argument 'cloud_network_cidrs' to be a list")
        pulumi.set(__self__, "cloud_network_cidrs", cloud_network_cidrs)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if esps and not isinstance(esps, list):
            raise TypeError("Expected argument 'esps' to be a list")
        pulumi.set(__self__, "esps", esps)
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ikes and not isinstance(ikes, list):
            raise TypeError("Expected argument 'ikes' to be a list")
        pulumi.set(__self__, "ikes", ikes)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peer_network_cidrs and not isinstance(peer_network_cidrs, list):
            raise TypeError("Expected argument 'peer_network_cidrs' to be a list")
        pulumi.set(__self__, "peer_network_cidrs", peer_network_cidrs)
        if remote_host and not isinstance(remote_host, str):
            raise TypeError("Expected argument 'remote_host' to be a str")
        pulumi.set(__self__, "remote_host", remote_host)

    @property
    @pulumi.getter
    def auths(self) -> Sequence['outputs.GetIpsecTunnelAuthResult']:
        return pulumi.get(self, "auths")

    @property
    @pulumi.getter(name="cloudNetworkCidrs")
    def cloud_network_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "cloud_network_cidrs")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def esps(self) -> Sequence['outputs.GetIpsecTunnelEspResult']:
        return pulumi.get(self, "esps")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ikes(self) -> Sequence['outputs.GetIpsecTunnelIkeResult']:
        return pulumi.get(self, "ikes")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peerNetworkCidrs")
    def peer_network_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "peer_network_cidrs")

    @property
    @pulumi.getter(name="remoteHost")
    def remote_host(self) -> str:
        return pulumi.get(self, "remote_host")


class AwaitableGetIpsecTunnelResult(GetIpsecTunnelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpsecTunnelResult(
            auths=self.auths,
            cloud_network_cidrs=self.cloud_network_cidrs,
            description=self.description,
            esps=self.esps,
            gateway_id=self.gateway_id,
            id=self.id,
            ikes=self.ikes,
            location=self.location,
            name=self.name,
            peer_network_cidrs=self.peer_network_cidrs,
            remote_host=self.remote_host)


def get_ipsec_tunnel(gateway_id: Optional[str] = None,
                     id: Optional[str] = None,
                     location: Optional[str] = None,
                     name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIpsecTunnelResult:
    """
    The **VPN IPSec Gateway Tunnel data source** can be used to search for and return an existing IPSec Gateway Tunnel.
    You can provide a string for the name parameter which will be compared with provisioned IPSec Gateway Tunnels.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.vpn.get_ipsec_tunnel(id="tunnel_id",
        gateway_id="gateway_id",
        location="gateway_location")
    ```

    ### By Name

    Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
    this data source is called.

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.vpn.get_ipsec_tunnel(name="ipsec-tunnel",
        gateway_id="gateway_id",
        location="gateway_location")
    ```

    ## Attributes reference

    The following attributes are returned by the datasource:

    * `id` - The unique ID of the IPSec Gateway Tunnel.
    * `name` - The name of the IPSec Gateway Tunnel.
    * `description` - The human-readable description of your IPSec Gateway Tunnel.
    * `remote_host` - The remote peer host fully qualified domain name or public IPV4 IP to connect to.
    * `ike` - Settings for the initial security exchange phase.
        * `diffie_hellman_group` - The Diffie-Hellman Group to use for IPSec Encryption.
        * `encryption_algorithm` - The encryption algorithm to use for IPSec Encryption.
        * `integrity_algorithm` - The integrity algorithm to use for IPSec Encryption.
        * `lifetime` - The phase lifetime in seconds.
    * `esp` - Settings for the IPSec SA (ESP) phase.
        * `diffie_hellman_group` - The Diffie-Hellman Group to use for IPSec Encryption.
        * `encryption_algorithm` - The encryption algorithm to use for IPSec Encryption.
        * `integrity_algorithm` - The integrity algorithm to use for IPSec Encryption.
        * `lifetime` - The phase lifetime in seconds.
    * `auth` - Properties with all data needed to define IPSec Authentication.
        * `method` - The authentication method to use for IPSec Authentication.
    * `cloud_network_cidrs` - The network CIDRs on the "Left" side that are allowed to connect to the IPSec
      tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
    * `peer_network_cidrs` - The network CIDRs on the "Right" side that are allowed to connect to the IPSec
      tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses.


    :param str gateway_id: The ID of the IPSec Gateway that the tunnel belongs to.
    :param str id: ID of an existing IPSec Gateway Tunnel that you want to search for.
    :param str location: The location of the IPSec Gateway Tunnel.
    :param str name: Name of an existing IPSec Gateway Tunnel that you want to search for.
    """
    __args__ = dict()
    __args__['gatewayId'] = gateway_id
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:vpn/getIpsecTunnel:getIpsecTunnel', __args__, opts=opts, typ=GetIpsecTunnelResult).value

    return AwaitableGetIpsecTunnelResult(
        auths=pulumi.get(__ret__, 'auths'),
        cloud_network_cidrs=pulumi.get(__ret__, 'cloud_network_cidrs'),
        description=pulumi.get(__ret__, 'description'),
        esps=pulumi.get(__ret__, 'esps'),
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        ikes=pulumi.get(__ret__, 'ikes'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        peer_network_cidrs=pulumi.get(__ret__, 'peer_network_cidrs'),
        remote_host=pulumi.get(__ret__, 'remote_host'))
def get_ipsec_tunnel_output(gateway_id: Optional[pulumi.Input[str]] = None,
                            id: Optional[pulumi.Input[Optional[str]]] = None,
                            location: Optional[pulumi.Input[Optional[str]]] = None,
                            name: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIpsecTunnelResult]:
    """
    The **VPN IPSec Gateway Tunnel data source** can be used to search for and return an existing IPSec Gateway Tunnel.
    You can provide a string for the name parameter which will be compared with provisioned IPSec Gateway Tunnels.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.vpn.get_ipsec_tunnel(id="tunnel_id",
        gateway_id="gateway_id",
        location="gateway_location")
    ```

    ### By Name

    Needs to have the resource be previously created, or a depends_on clause to ensure that the resource is created before
    this data source is called.

    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.vpn.get_ipsec_tunnel(name="ipsec-tunnel",
        gateway_id="gateway_id",
        location="gateway_location")
    ```

    ## Attributes reference

    The following attributes are returned by the datasource:

    * `id` - The unique ID of the IPSec Gateway Tunnel.
    * `name` - The name of the IPSec Gateway Tunnel.
    * `description` - The human-readable description of your IPSec Gateway Tunnel.
    * `remote_host` - The remote peer host fully qualified domain name or public IPV4 IP to connect to.
    * `ike` - Settings for the initial security exchange phase.
        * `diffie_hellman_group` - The Diffie-Hellman Group to use for IPSec Encryption.
        * `encryption_algorithm` - The encryption algorithm to use for IPSec Encryption.
        * `integrity_algorithm` - The integrity algorithm to use for IPSec Encryption.
        * `lifetime` - The phase lifetime in seconds.
    * `esp` - Settings for the IPSec SA (ESP) phase.
        * `diffie_hellman_group` - The Diffie-Hellman Group to use for IPSec Encryption.
        * `encryption_algorithm` - The encryption algorithm to use for IPSec Encryption.
        * `integrity_algorithm` - The integrity algorithm to use for IPSec Encryption.
        * `lifetime` - The phase lifetime in seconds.
    * `auth` - Properties with all data needed to define IPSec Authentication.
        * `method` - The authentication method to use for IPSec Authentication.
    * `cloud_network_cidrs` - The network CIDRs on the "Left" side that are allowed to connect to the IPSec
      tunnel, i.e. the CIDRs within your IONOS Cloud LAN. Specify "0.0.0.0/0" or "::/0" for all addresses.
    * `peer_network_cidrs` - The network CIDRs on the "Right" side that are allowed to connect to the IPSec
      tunnel. Specify "0.0.0.0/0" or "::/0" for all addresses.


    :param str gateway_id: The ID of the IPSec Gateway that the tunnel belongs to.
    :param str id: ID of an existing IPSec Gateway Tunnel that you want to search for.
    :param str location: The location of the IPSec Gateway Tunnel.
    :param str name: Name of an existing IPSec Gateway Tunnel that you want to search for.
    """
    __args__ = dict()
    __args__['gatewayId'] = gateway_id
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:vpn/getIpsecTunnel:getIpsecTunnel', __args__, opts=opts, typ=GetIpsecTunnelResult)
    return __ret__.apply(lambda __response__: GetIpsecTunnelResult(
        auths=pulumi.get(__response__, 'auths'),
        cloud_network_cidrs=pulumi.get(__response__, 'cloud_network_cidrs'),
        description=pulumi.get(__response__, 'description'),
        esps=pulumi.get(__response__, 'esps'),
        gateway_id=pulumi.get(__response__, 'gateway_id'),
        id=pulumi.get(__response__, 'id'),
        ikes=pulumi.get(__response__, 'ikes'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        peer_network_cidrs=pulumi.get(__response__, 'peer_network_cidrs'),
        remote_host=pulumi.get(__response__, 'remote_host')))
