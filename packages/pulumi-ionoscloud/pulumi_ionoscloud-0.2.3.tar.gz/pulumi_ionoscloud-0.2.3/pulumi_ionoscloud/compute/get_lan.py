# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetLanResult',
    'AwaitableGetLanResult',
    'get_lan',
    'get_lan_output',
]

@pulumi.output_type
class GetLanResult:
    """
    A collection of values returned by getLan.
    """
    def __init__(__self__, datacenter_id=None, id=None, ip_failovers=None, ipv4_cidr_block=None, ipv6_cidr_block=None, name=None, pcc=None, public=None):
        if datacenter_id and not isinstance(datacenter_id, str):
            raise TypeError("Expected argument 'datacenter_id' to be a str")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_failovers and not isinstance(ip_failovers, list):
            raise TypeError("Expected argument 'ip_failovers' to be a list")
        pulumi.set(__self__, "ip_failovers", ip_failovers)
        if ipv4_cidr_block and not isinstance(ipv4_cidr_block, str):
            raise TypeError("Expected argument 'ipv4_cidr_block' to be a str")
        pulumi.set(__self__, "ipv4_cidr_block", ipv4_cidr_block)
        if ipv6_cidr_block and not isinstance(ipv6_cidr_block, str):
            raise TypeError("Expected argument 'ipv6_cidr_block' to be a str")
        pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pcc and not isinstance(pcc, str):
            raise TypeError("Expected argument 'pcc' to be a str")
        pulumi.set(__self__, "pcc", pcc)
        if public and not isinstance(public, bool):
            raise TypeError("Expected argument 'public' to be a bool")
        pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> str:
        """
        The ID of lan's Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the LAN.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipFailovers")
    def ip_failovers(self) -> Sequence['outputs.GetLanIpFailoverResult']:
        """
        list of
        """
        return pulumi.get(self, "ip_failovers")

    @property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> str:
        """
        For public LANs this property is null, for private LANs it contains the private IPv4 CIDR range.
        """
        return pulumi.get(self, "ipv4_cidr_block")

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> str:
        """
        Contains the LAN's /64 IPv6 CIDR block if this LAN is IPv6 enabled.
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the LAN.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pcc(self) -> str:
        """
        The unique id of a `compute.Crossconnect` resource, in order.
        """
        return pulumi.get(self, "pcc")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        Indicates if the LAN faces the public Internet (true) or not (false).
        """
        return pulumi.get(self, "public")


class AwaitableGetLanResult(GetLanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLanResult(
            datacenter_id=self.datacenter_id,
            id=self.id,
            ip_failovers=self.ip_failovers,
            ipv4_cidr_block=self.ipv4_cidr_block,
            ipv6_cidr_block=self.ipv6_cidr_block,
            name=self.name,
            pcc=self.pcc,
            public=self.public)


def get_lan(datacenter_id: Optional[str] = None,
            id: Optional[str] = None,
            name: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLanResult:
    """
    The **LAN data source** can be used to search for and return existing lans.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_lan(datacenter_id="datacenter_id",
        id="lan_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_lan(datacenter_id="datacenter_id",
        name="Lan Example")
    ```


    :param str datacenter_id: Datacenter's UUID.
    :param str id: ID of the lan you want to search for.
           
           `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str name: Name of an existing lan that you want to search for.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:compute/getLan:getLan', __args__, opts=opts, typ=GetLanResult).value

    return AwaitableGetLanResult(
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        id=pulumi.get(__ret__, 'id'),
        ip_failovers=pulumi.get(__ret__, 'ip_failovers'),
        ipv4_cidr_block=pulumi.get(__ret__, 'ipv4_cidr_block'),
        ipv6_cidr_block=pulumi.get(__ret__, 'ipv6_cidr_block'),
        name=pulumi.get(__ret__, 'name'),
        pcc=pulumi.get(__ret__, 'pcc'),
        public=pulumi.get(__ret__, 'public'))
def get_lan_output(datacenter_id: Optional[pulumi.Input[str]] = None,
                   id: Optional[pulumi.Input[Optional[str]]] = None,
                   name: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLanResult]:
    """
    The **LAN data source** can be used to search for and return existing lans.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_lan(datacenter_id="datacenter_id",
        id="lan_id")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.compute.get_lan(datacenter_id="datacenter_id",
        name="Lan Example")
    ```


    :param str datacenter_id: Datacenter's UUID.
    :param str id: ID of the lan you want to search for.
           
           `datacenter_id` and either `name` or `id` must be provided. If none, or both of `name` and `id` are provided, the datasource will return an error.
    :param str name: Name of an existing lan that you want to search for.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:compute/getLan:getLan', __args__, opts=opts, typ=GetLanResult)
    return __ret__.apply(lambda __response__: GetLanResult(
        datacenter_id=pulumi.get(__response__, 'datacenter_id'),
        id=pulumi.get(__response__, 'id'),
        ip_failovers=pulumi.get(__response__, 'ip_failovers'),
        ipv4_cidr_block=pulumi.get(__response__, 'ipv4_cidr_block'),
        ipv6_cidr_block=pulumi.get(__response__, 'ipv6_cidr_block'),
        name=pulumi.get(__response__, 'name'),
        pcc=pulumi.get(__response__, 'pcc'),
        public=pulumi.get(__response__, 'public')))
