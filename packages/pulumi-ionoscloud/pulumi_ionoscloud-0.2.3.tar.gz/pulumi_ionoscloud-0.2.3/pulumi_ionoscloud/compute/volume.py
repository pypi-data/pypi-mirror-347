# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VolumeArgs', 'Volume']

@pulumi.input_type
class VolumeArgs:
    def __init__(__self__, *,
                 datacenter_id: pulumi.Input[str],
                 disk_type: pulumi.Input[str],
                 server_id: pulumi.Input[str],
                 size: pulumi.Input[int],
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_unit_id: Optional[pulumi.Input[str]] = None,
                 bus: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 licence_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Volume resource.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] disk_type: [string] The volume type: HDD or SSD. This property is immutable.
        :param pulumi.Input[str] server_id: [string] The ID of a server.
        :param pulumi.Input[int] size: [integer] The size of the volume in GB.
        :param pulumi.Input[str] availability_zone: [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
        :param pulumi.Input[str] backup_unit_id: [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        :param pulumi.Input[str] bus: [Boolean] The bus type of the volume: VIRTIO or IDE.
        :param pulumi.Input[str] image_name: [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        :param pulumi.Input[str] image_password: [string] Required if `sshkey_path` is not provided.
        :param pulumi.Input[str] licence_type: [string] Required if `image_name` is not provided.
        :param pulumi.Input[str] name: [string] The name of the volume.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_paths: [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        :param pulumi.Input[str] user_data: [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
        """
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "size", size)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if backup_unit_id is not None:
            pulumi.set(__self__, "backup_unit_id", backup_unit_id)
        if bus is not None:
            pulumi.set(__self__, "bus", bus)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_password is not None:
            pulumi.set(__self__, "image_password", image_password)
        if licence_type is not None:
            pulumi.set(__self__, "licence_type", licence_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ssh_key_paths is not None:
            pulumi.set(__self__, "ssh_key_paths", ssh_key_paths)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[str]:
        """
        [string] The volume type: HDD or SSD. This property is immutable.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of a server.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[int]:
        """
        [integer] The size of the volume in GB.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[int]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="backupUnitId")
    def backup_unit_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        """
        return pulumi.get(self, "backup_unit_id")

    @backup_unit_id.setter
    def backup_unit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_unit_id", value)

    @property
    @pulumi.getter
    def bus(self) -> Optional[pulumi.Input[str]]:
        """
        [Boolean] The bus type of the volume: VIRTIO or IDE.
        """
        return pulumi.get(self, "bus")

    @bus.setter
    def bus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bus", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Required if `sshkey_path` is not provided.
        """
        return pulumi.get(self, "image_password")

    @image_password.setter
    def image_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_password", value)

    @property
    @pulumi.getter(name="licenceType")
    def licence_type(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Required if `image_name` is not provided.
        """
        return pulumi.get(self, "licence_type")

    @licence_type.setter
    def licence_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "licence_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sshKeyPaths")
    def ssh_key_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        """
        return pulumi.get(self, "ssh_key_paths")

    @ssh_key_paths.setter
    def ssh_key_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_key_paths", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class _VolumeState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_unit_id: Optional[pulumi.Input[str]] = None,
                 boot_server: Optional[pulumi.Input[str]] = None,
                 bus: Optional[pulumi.Input[str]] = None,
                 cpu_hot_plug: Optional[pulumi.Input[bool]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 device_number: Optional[pulumi.Input[int]] = None,
                 disc_virtio_hot_plug: Optional[pulumi.Input[bool]] = None,
                 disc_virtio_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 licence_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nic_hot_plug: Optional[pulumi.Input[bool]] = None,
                 nic_hot_unplug: Optional[pulumi.Input[bool]] = None,
                 pci_slot: Optional[pulumi.Input[int]] = None,
                 ram_hot_plug: Optional[pulumi.Input[bool]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sshkey: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Volume resources.
        :param pulumi.Input[str] availability_zone: [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
        :param pulumi.Input[str] backup_unit_id: [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        :param pulumi.Input[str] boot_server: [string] The UUID of the attached server.
               > **⚠ WARNING**
               >
               > ssh_key_path and ssh_keys fields are immutable.
               > If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
        :param pulumi.Input[str] bus: [Boolean] The bus type of the volume: VIRTIO or IDE.
        :param pulumi.Input[bool] cpu_hot_plug: [string] Is capable of CPU hot plug (no reboot required)
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[int] device_number: The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
        :param pulumi.Input[bool] disc_virtio_hot_plug: [string] Is capable of Virt-IO drive hot plug (no reboot required)
        :param pulumi.Input[bool] disc_virtio_hot_unplug: [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        :param pulumi.Input[str] disk_type: [string] The volume type: HDD or SSD. This property is immutable.
        :param pulumi.Input[str] image: The image or snapshot UUID.
        :param pulumi.Input[str] image_name: [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        :param pulumi.Input[str] image_password: [string] Required if `sshkey_path` is not provided.
        :param pulumi.Input[str] licence_type: [string] Required if `image_name` is not provided.
        :param pulumi.Input[str] name: [string] The name of the volume.
        :param pulumi.Input[bool] nic_hot_plug: [string] Is capable of nic hot plug (no reboot required)
        :param pulumi.Input[bool] nic_hot_unplug: [string] Is capable of nic hot unplug (no reboot required)
        :param pulumi.Input[int] pci_slot: The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
        :param pulumi.Input[bool] ram_hot_plug: [string] Is capable of memory hot plug (no reboot required)
        :param pulumi.Input[str] server_id: [string] The ID of a server.
        :param pulumi.Input[int] size: [integer] The size of the volume in GB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_paths: [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        :param pulumi.Input[str] sshkey: The associated public SSH key.
        :param pulumi.Input[str] user_data: [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if backup_unit_id is not None:
            pulumi.set(__self__, "backup_unit_id", backup_unit_id)
        if boot_server is not None:
            pulumi.set(__self__, "boot_server", boot_server)
        if bus is not None:
            pulumi.set(__self__, "bus", bus)
        if cpu_hot_plug is not None:
            pulumi.set(__self__, "cpu_hot_plug", cpu_hot_plug)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if disc_virtio_hot_plug is not None:
            pulumi.set(__self__, "disc_virtio_hot_plug", disc_virtio_hot_plug)
        if disc_virtio_hot_unplug is not None:
            pulumi.set(__self__, "disc_virtio_hot_unplug", disc_virtio_hot_unplug)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_password is not None:
            pulumi.set(__self__, "image_password", image_password)
        if licence_type is not None:
            pulumi.set(__self__, "licence_type", licence_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nic_hot_plug is not None:
            pulumi.set(__self__, "nic_hot_plug", nic_hot_plug)
        if nic_hot_unplug is not None:
            pulumi.set(__self__, "nic_hot_unplug", nic_hot_unplug)
        if pci_slot is not None:
            pulumi.set(__self__, "pci_slot", pci_slot)
        if ram_hot_plug is not None:
            pulumi.set(__self__, "ram_hot_plug", ram_hot_plug)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if ssh_key_paths is not None:
            pulumi.set(__self__, "ssh_key_paths", ssh_key_paths)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if sshkey is not None:
            pulumi.set(__self__, "sshkey", sshkey)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="backupUnitId")
    def backup_unit_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        """
        return pulumi.get(self, "backup_unit_id")

    @backup_unit_id.setter
    def backup_unit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_unit_id", value)

    @property
    @pulumi.getter(name="bootServer")
    def boot_server(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The UUID of the attached server.
        > **⚠ WARNING**
        >
        > ssh_key_path and ssh_keys fields are immutable.
        > If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
        """
        return pulumi.get(self, "boot_server")

    @boot_server.setter
    def boot_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_server", value)

    @property
    @pulumi.getter
    def bus(self) -> Optional[pulumi.Input[str]]:
        """
        [Boolean] The bus type of the volume: VIRTIO or IDE.
        """
        return pulumi.get(self, "bus")

    @bus.setter
    def bus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bus", value)

    @property
    @pulumi.getter(name="cpuHotPlug")
    def cpu_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        [string] Is capable of CPU hot plug (no reboot required)
        """
        return pulumi.get(self, "cpu_hot_plug")

    @cpu_hot_plug.setter
    def cpu_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cpu_hot_plug", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[pulumi.Input[int]]:
        """
        The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
        """
        return pulumi.get(self, "device_number")

    @device_number.setter
    def device_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_number", value)

    @property
    @pulumi.getter(name="discVirtioHotPlug")
    def disc_virtio_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        [string] Is capable of Virt-IO drive hot plug (no reboot required)
        """
        return pulumi.get(self, "disc_virtio_hot_plug")

    @disc_virtio_hot_plug.setter
    def disc_virtio_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disc_virtio_hot_plug", value)

    @property
    @pulumi.getter(name="discVirtioHotUnplug")
    def disc_virtio_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        """
        return pulumi.get(self, "disc_virtio_hot_unplug")

    @disc_virtio_hot_unplug.setter
    def disc_virtio_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disc_virtio_hot_unplug", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The volume type: HDD or SSD. This property is immutable.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        The image or snapshot UUID.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Required if `sshkey_path` is not provided.
        """
        return pulumi.get(self, "image_password")

    @image_password.setter
    def image_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_password", value)

    @property
    @pulumi.getter(name="licenceType")
    def licence_type(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Required if `image_name` is not provided.
        """
        return pulumi.get(self, "licence_type")

    @licence_type.setter
    def licence_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "licence_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nicHotPlug")
    def nic_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        [string] Is capable of nic hot plug (no reboot required)
        """
        return pulumi.get(self, "nic_hot_plug")

    @nic_hot_plug.setter
    def nic_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nic_hot_plug", value)

    @property
    @pulumi.getter(name="nicHotUnplug")
    def nic_hot_unplug(self) -> Optional[pulumi.Input[bool]]:
        """
        [string] Is capable of nic hot unplug (no reboot required)
        """
        return pulumi.get(self, "nic_hot_unplug")

    @nic_hot_unplug.setter
    def nic_hot_unplug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nic_hot_unplug", value)

    @property
    @pulumi.getter(name="pciSlot")
    def pci_slot(self) -> Optional[pulumi.Input[int]]:
        """
        The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
        """
        return pulumi.get(self, "pci_slot")

    @pci_slot.setter
    def pci_slot(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pci_slot", value)

    @property
    @pulumi.getter(name="ramHotPlug")
    def ram_hot_plug(self) -> Optional[pulumi.Input[bool]]:
        """
        [string] Is capable of memory hot plug (no reboot required)
        """
        return pulumi.get(self, "ram_hot_plug")

    @ram_hot_plug.setter
    def ram_hot_plug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ram_hot_plug", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a server.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        [integer] The size of the volume in GB.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sshKeyPaths")
    def ssh_key_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        """
        return pulumi.get(self, "ssh_key_paths")

    @ssh_key_paths.setter
    def ssh_key_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_key_paths", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter
    def sshkey(self) -> Optional[pulumi.Input[str]]:
        """
        The associated public SSH key.
        """
        return pulumi.get(self, "sshkey")

    @sshkey.setter
    def sshkey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sshkey", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


class Volume(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_unit_id: Optional[pulumi.Input[str]] = None,
                 bus: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 licence_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a **Volume** on IonosCloud.

        ## Example Usage

        A primary volume will be created with the server. If there is a need for additional volumes, this resource handles it.

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        example = ionoscloud.compute.get_image(type="HDD",
            cloud_init="V1",
            image_alias="ubuntu:latest",
            location="us/las")
        example_datacenter = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="Datacenter Description",
            sec_auth_protection=False)
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example_datacenter.id,
            public=True,
            name="Lan Example")
        example_ip_block = ionoscloud.compute.IPBlock("example",
            location=example_datacenter.location,
            size=4,
            name="IP Block Example")
        server_image_password = random.index.Password("server_image_password",
            length=16,
            special=False)
        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            datacenter_id=example_datacenter.id,
            cores=1,
            ram=1024,
            availability_zone="ZONE_1",
            cpu_family="INTEL_XEON",
            image_name=example.name,
            image_password=server_image_password["result"],
            type="ENTERPRISE",
            volume={
                "name": "system",
                "size": 5,
                "disk_type": "SSD Standard",
                "user_data": "foo",
                "bus": "VIRTIO",
                "availability_zone": "ZONE_1",
            },
            nic={
                "lan": example_lan.id,
                "name": "system",
                "dhcp": True,
                "firewall_active": True,
                "firewall_type": "BIDIRECTIONAL",
                "ips": [
                    example_ip_block.ips[0],
                    example_ip_block.ips[1],
                ],
                "firewalls": [{
                    "protocol": "TCP",
                    "name": "SSH",
                    "port_range_start": 22,
                    "port_range_end": 22,
                    "source_mac": "00:0a:95:9d:68:17",
                    "source_ip": example_ip_block.ips[2],
                    "target_ip": example_ip_block.ips[3],
                    "type": "EGRESS",
                }],
            })
        volume_image_password = random.index.Password("volume_image_password",
            length=16,
            special=False)
        example_volume = ionoscloud.compute.Volume("example",
            datacenter_id=example_datacenter.id,
            server_id=example_server.id,
            name="Volume Example",
            availability_zone="ZONE_1",
            size=5,
            disk_type="SSD Standard",
            bus="VIRTIO",
            image_name=example.name,
            image_password=volume_image_password["result"],
            user_data="foo")
        example2 = ionoscloud.compute.Volume("example2",
            datacenter_id=example_datacenter.id,
            server_id=example_server.id,
            name="Another Volume Example",
            availability_zone="ZONE_1",
            size=5,
            disk_type="SSD Standard",
            bus="VIRTIO",
            licence_type="OTHER")
        ```

        ## Import

        Resource Volume can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/volume:Volume myvolume datacenter uuid/server uuid/volume uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
        :param pulumi.Input[str] backup_unit_id: [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        :param pulumi.Input[str] bus: [Boolean] The bus type of the volume: VIRTIO or IDE.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] disk_type: [string] The volume type: HDD or SSD. This property is immutable.
        :param pulumi.Input[str] image_name: [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        :param pulumi.Input[str] image_password: [string] Required if `sshkey_path` is not provided.
        :param pulumi.Input[str] licence_type: [string] Required if `image_name` is not provided.
        :param pulumi.Input[str] name: [string] The name of the volume.
        :param pulumi.Input[str] server_id: [string] The ID of a server.
        :param pulumi.Input[int] size: [integer] The size of the volume in GB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_paths: [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        :param pulumi.Input[str] user_data: [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a **Volume** on IonosCloud.

        ## Example Usage

        A primary volume will be created with the server. If there is a need for additional volumes, this resource handles it.

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        example = ionoscloud.compute.get_image(type="HDD",
            cloud_init="V1",
            image_alias="ubuntu:latest",
            location="us/las")
        example_datacenter = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="Datacenter Description",
            sec_auth_protection=False)
        example_lan = ionoscloud.compute.Lan("example",
            datacenter_id=example_datacenter.id,
            public=True,
            name="Lan Example")
        example_ip_block = ionoscloud.compute.IPBlock("example",
            location=example_datacenter.location,
            size=4,
            name="IP Block Example")
        server_image_password = random.index.Password("server_image_password",
            length=16,
            special=False)
        example_server = ionoscloud.compute.Server("example",
            name="Server Example",
            datacenter_id=example_datacenter.id,
            cores=1,
            ram=1024,
            availability_zone="ZONE_1",
            cpu_family="INTEL_XEON",
            image_name=example.name,
            image_password=server_image_password["result"],
            type="ENTERPRISE",
            volume={
                "name": "system",
                "size": 5,
                "disk_type": "SSD Standard",
                "user_data": "foo",
                "bus": "VIRTIO",
                "availability_zone": "ZONE_1",
            },
            nic={
                "lan": example_lan.id,
                "name": "system",
                "dhcp": True,
                "firewall_active": True,
                "firewall_type": "BIDIRECTIONAL",
                "ips": [
                    example_ip_block.ips[0],
                    example_ip_block.ips[1],
                ],
                "firewalls": [{
                    "protocol": "TCP",
                    "name": "SSH",
                    "port_range_start": 22,
                    "port_range_end": 22,
                    "source_mac": "00:0a:95:9d:68:17",
                    "source_ip": example_ip_block.ips[2],
                    "target_ip": example_ip_block.ips[3],
                    "type": "EGRESS",
                }],
            })
        volume_image_password = random.index.Password("volume_image_password",
            length=16,
            special=False)
        example_volume = ionoscloud.compute.Volume("example",
            datacenter_id=example_datacenter.id,
            server_id=example_server.id,
            name="Volume Example",
            availability_zone="ZONE_1",
            size=5,
            disk_type="SSD Standard",
            bus="VIRTIO",
            image_name=example.name,
            image_password=volume_image_password["result"],
            user_data="foo")
        example2 = ionoscloud.compute.Volume("example2",
            datacenter_id=example_datacenter.id,
            server_id=example_server.id,
            name="Another Volume Example",
            availability_zone="ZONE_1",
            size=5,
            disk_type="SSD Standard",
            bus="VIRTIO",
            licence_type="OTHER")
        ```

        ## Import

        Resource Volume can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/volume:Volume myvolume datacenter uuid/server uuid/volume uuid
        ```

        :param str resource_name: The name of the resource.
        :param VolumeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_unit_id: Optional[pulumi.Input[str]] = None,
                 bus: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_password: Optional[pulumi.Input[str]] = None,
                 licence_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeArgs.__new__(VolumeArgs)

            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["backup_unit_id"] = backup_unit_id
            __props__.__dict__["bus"] = bus
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            if disk_type is None and not opts.urn:
                raise TypeError("Missing required property 'disk_type'")
            __props__.__dict__["disk_type"] = disk_type
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["image_password"] = image_password
            __props__.__dict__["licence_type"] = licence_type
            __props__.__dict__["name"] = name
            if server_id is None and not opts.urn:
                raise TypeError("Missing required property 'server_id'")
            __props__.__dict__["server_id"] = server_id
            if size is None and not opts.urn:
                raise TypeError("Missing required property 'size'")
            __props__.__dict__["size"] = size
            __props__.__dict__["ssh_key_paths"] = ssh_key_paths
            __props__.__dict__["ssh_keys"] = ssh_keys
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["boot_server"] = None
            __props__.__dict__["cpu_hot_plug"] = None
            __props__.__dict__["device_number"] = None
            __props__.__dict__["disc_virtio_hot_plug"] = None
            __props__.__dict__["disc_virtio_hot_unplug"] = None
            __props__.__dict__["image"] = None
            __props__.__dict__["image_id"] = None
            __props__.__dict__["nic_hot_plug"] = None
            __props__.__dict__["nic_hot_unplug"] = None
            __props__.__dict__["pci_slot"] = None
            __props__.__dict__["ram_hot_plug"] = None
            __props__.__dict__["sshkey"] = None
        super(Volume, __self__).__init__(
            'ionoscloud:compute/volume:Volume',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            backup_unit_id: Optional[pulumi.Input[str]] = None,
            boot_server: Optional[pulumi.Input[str]] = None,
            bus: Optional[pulumi.Input[str]] = None,
            cpu_hot_plug: Optional[pulumi.Input[bool]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            device_number: Optional[pulumi.Input[int]] = None,
            disc_virtio_hot_plug: Optional[pulumi.Input[bool]] = None,
            disc_virtio_hot_unplug: Optional[pulumi.Input[bool]] = None,
            disk_type: Optional[pulumi.Input[str]] = None,
            image: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            image_name: Optional[pulumi.Input[str]] = None,
            image_password: Optional[pulumi.Input[str]] = None,
            licence_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nic_hot_plug: Optional[pulumi.Input[bool]] = None,
            nic_hot_unplug: Optional[pulumi.Input[bool]] = None,
            pci_slot: Optional[pulumi.Input[int]] = None,
            ram_hot_plug: Optional[pulumi.Input[bool]] = None,
            server_id: Optional[pulumi.Input[str]] = None,
            size: Optional[pulumi.Input[int]] = None,
            ssh_key_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            sshkey: Optional[pulumi.Input[str]] = None,
            user_data: Optional[pulumi.Input[str]] = None) -> 'Volume':
        """
        Get an existing Volume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
        :param pulumi.Input[str] backup_unit_id: [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        :param pulumi.Input[str] boot_server: [string] The UUID of the attached server.
               > **⚠ WARNING**
               >
               > ssh_key_path and ssh_keys fields are immutable.
               > If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
        :param pulumi.Input[str] bus: [Boolean] The bus type of the volume: VIRTIO or IDE.
        :param pulumi.Input[bool] cpu_hot_plug: [string] Is capable of CPU hot plug (no reboot required)
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[int] device_number: The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
        :param pulumi.Input[bool] disc_virtio_hot_plug: [string] Is capable of Virt-IO drive hot plug (no reboot required)
        :param pulumi.Input[bool] disc_virtio_hot_unplug: [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        :param pulumi.Input[str] disk_type: [string] The volume type: HDD or SSD. This property is immutable.
        :param pulumi.Input[str] image: The image or snapshot UUID.
        :param pulumi.Input[str] image_name: [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        :param pulumi.Input[str] image_password: [string] Required if `sshkey_path` is not provided.
        :param pulumi.Input[str] licence_type: [string] Required if `image_name` is not provided.
        :param pulumi.Input[str] name: [string] The name of the volume.
        :param pulumi.Input[bool] nic_hot_plug: [string] Is capable of nic hot plug (no reboot required)
        :param pulumi.Input[bool] nic_hot_unplug: [string] Is capable of nic hot unplug (no reboot required)
        :param pulumi.Input[int] pci_slot: The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
        :param pulumi.Input[bool] ram_hot_plug: [string] Is capable of memory hot plug (no reboot required)
        :param pulumi.Input[str] server_id: [string] The ID of a server.
        :param pulumi.Input[int] size: [integer] The size of the volume in GB.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_paths: [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        :param pulumi.Input[str] sshkey: The associated public SSH key.
        :param pulumi.Input[str] user_data: [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumeState.__new__(_VolumeState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["backup_unit_id"] = backup_unit_id
        __props__.__dict__["boot_server"] = boot_server
        __props__.__dict__["bus"] = bus
        __props__.__dict__["cpu_hot_plug"] = cpu_hot_plug
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["device_number"] = device_number
        __props__.__dict__["disc_virtio_hot_plug"] = disc_virtio_hot_plug
        __props__.__dict__["disc_virtio_hot_unplug"] = disc_virtio_hot_unplug
        __props__.__dict__["disk_type"] = disk_type
        __props__.__dict__["image"] = image
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["image_password"] = image_password
        __props__.__dict__["licence_type"] = licence_type
        __props__.__dict__["name"] = name
        __props__.__dict__["nic_hot_plug"] = nic_hot_plug
        __props__.__dict__["nic_hot_unplug"] = nic_hot_unplug
        __props__.__dict__["pci_slot"] = pci_slot
        __props__.__dict__["ram_hot_plug"] = ram_hot_plug
        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["size"] = size
        __props__.__dict__["ssh_key_paths"] = ssh_key_paths
        __props__.__dict__["ssh_keys"] = ssh_keys
        __props__.__dict__["sshkey"] = sshkey
        __props__.__dict__["user_data"] = user_data
        return Volume(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        [string] The storage availability zone assigned to the volume: AUTO, ZONE_1, ZONE_2, or ZONE_3. This property is immutable
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="backupUnitId")
    def backup_unit_id(self) -> pulumi.Output[str]:
        """
        [string] The uuid of the Backup Unit that user has access to. The property is immutable and is only allowed to be set on a new volume creation. It is mandatory to provide either 'public image' or 'imageAlias' in conjunction with this property.
        """
        return pulumi.get(self, "backup_unit_id")

    @property
    @pulumi.getter(name="bootServer")
    def boot_server(self) -> pulumi.Output[str]:
        """
        [string] The UUID of the attached server.
        > **⚠ WARNING**
        >
        > ssh_key_path and ssh_keys fields are immutable.
        > If you want to create a **CUBE** server, the type of the inline volume must be set to **DAS**. In this case, you can not set the `size` argument since it is taken from the `template_uuid` you set in the server.
        """
        return pulumi.get(self, "boot_server")

    @property
    @pulumi.getter
    def bus(self) -> pulumi.Output[str]:
        """
        [Boolean] The bus type of the volume: VIRTIO or IDE.
        """
        return pulumi.get(self, "bus")

    @property
    @pulumi.getter(name="cpuHotPlug")
    def cpu_hot_plug(self) -> pulumi.Output[bool]:
        """
        [string] Is capable of CPU hot plug (no reboot required)
        """
        return pulumi.get(self, "cpu_hot_plug")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> pulumi.Output[int]:
        """
        The Logical Unit Number of the storage volume. Null for volumes not mounted to any VM.
        """
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="discVirtioHotPlug")
    def disc_virtio_hot_plug(self) -> pulumi.Output[bool]:
        """
        [string] Is capable of Virt-IO drive hot plug (no reboot required)
        """
        return pulumi.get(self, "disc_virtio_hot_plug")

    @property
    @pulumi.getter(name="discVirtioHotUnplug")
    def disc_virtio_hot_unplug(self) -> pulumi.Output[bool]:
        """
        [string] Is capable of Virt-IO drive hot unplug (no reboot required). This works only for non-Windows virtual Machines.
        """
        return pulumi.get(self, "disc_virtio_hot_unplug")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Output[str]:
        """
        [string] The volume type: HDD or SSD. This property is immutable.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output[str]:
        """
        The image or snapshot UUID.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The name, ID or alias of the image. May also be a snapshot ID. It is required if `licence_type` is not provided. Attribute is immutable.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imagePassword")
    def image_password(self) -> pulumi.Output[Optional[str]]:
        """
        [string] Required if `sshkey_path` is not provided.
        """
        return pulumi.get(self, "image_password")

    @property
    @pulumi.getter(name="licenceType")
    def licence_type(self) -> pulumi.Output[str]:
        """
        [string] Required if `image_name` is not provided.
        """
        return pulumi.get(self, "licence_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nicHotPlug")
    def nic_hot_plug(self) -> pulumi.Output[bool]:
        """
        [string] Is capable of nic hot plug (no reboot required)
        """
        return pulumi.get(self, "nic_hot_plug")

    @property
    @pulumi.getter(name="nicHotUnplug")
    def nic_hot_unplug(self) -> pulumi.Output[bool]:
        """
        [string] Is capable of nic hot unplug (no reboot required)
        """
        return pulumi.get(self, "nic_hot_unplug")

    @property
    @pulumi.getter(name="pciSlot")
    def pci_slot(self) -> pulumi.Output[int]:
        """
        The PCI slot number of the storage volume. Null for volumes not mounted to any VM.
        """
        return pulumi.get(self, "pci_slot")

    @property
    @pulumi.getter(name="ramHotPlug")
    def ram_hot_plug(self) -> pulumi.Output[bool]:
        """
        [string] Is capable of memory hot plug (no reboot required)
        """
        return pulumi.get(self, "ram_hot_plug")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of a server.
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[int]:
        """
        [integer] The size of the volume in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sshKeyPaths")
    def ssh_key_paths(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        """
        return pulumi.get(self, "ssh_key_paths")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        [list] List of absolute paths to files containing a public SSH key that will be injected into IonosCloud provided Linux images. Also accepts ssh keys directly. Required for IonosCloud Linux images. Required if `image_password` is not provided. This property is immutable.
        """
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter
    def sshkey(self) -> pulumi.Output[str]:
        """
        The associated public SSH key.
        """
        return pulumi.get(self, "sshkey")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[str]:
        """
        [string] The cloud-init configuration for the volume as base64 encoded string. The property is immutable and is only allowed to be set on a new volume creation. This option will work only with cloud-init compatible images.
        """
        return pulumi.get(self, "user_data")

