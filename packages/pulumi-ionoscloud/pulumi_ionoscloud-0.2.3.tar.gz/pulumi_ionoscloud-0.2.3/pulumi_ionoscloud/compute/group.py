# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 access_activity_log: Optional[pulumi.Input[bool]] = None,
                 access_and_manage_certificates: Optional[pulumi.Input[bool]] = None,
                 access_and_manage_monitoring: Optional[pulumi.Input[bool]] = None,
                 create_backup_unit: Optional[pulumi.Input[bool]] = None,
                 create_datacenter: Optional[pulumi.Input[bool]] = None,
                 create_flow_log: Optional[pulumi.Input[bool]] = None,
                 create_internet_access: Optional[pulumi.Input[bool]] = None,
                 create_k8s_cluster: Optional[pulumi.Input[bool]] = None,
                 create_pcc: Optional[pulumi.Input[bool]] = None,
                 create_snapshot: Optional[pulumi.Input[bool]] = None,
                 manage_dbaas: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reserve_ip: Optional[pulumi.Input[bool]] = None,
                 s3_privilege: Optional[pulumi.Input[bool]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Group resource.
        :param pulumi.Input[bool] access_activity_log: [Boolean] The group will be allowed to access the activity log.
        :param pulumi.Input[bool] access_and_manage_certificates: [Boolean]  The group will be allowed to access and manage certificates.
        :param pulumi.Input[bool] access_and_manage_monitoring: [Boolean]  The group will be allowed to access and manage monitoring.
        :param pulumi.Input[bool] create_backup_unit: [Boolean] The group will be allowed to create backup unit privilege.
        :param pulumi.Input[bool] create_datacenter: [Boolean] The group will be allowed to create virtual data centers.
        :param pulumi.Input[bool] create_flow_log: [Boolean]  The group will be allowed to create flow log.
        :param pulumi.Input[bool] create_internet_access: [Boolean] The group will be allowed to create internet access privilege.
        :param pulumi.Input[bool] create_k8s_cluster: [Boolean]  The group will be allowed to create kubernetes cluster privilege.
        :param pulumi.Input[bool] create_pcc: [Boolean] The group will be allowed to create Cross Connects privilege.
        :param pulumi.Input[bool] create_snapshot: [Boolean] The group will be allowed to create snapshots.
        :param pulumi.Input[bool] manage_dbaas: [Boolean]  Privilege for a group to manage DBaaS related functionality.
        :param pulumi.Input[str] name: [string] A name for the group.
        :param pulumi.Input[bool] reserve_ip: [Boolean] The group will be allowed to reserve IP addresses.
        :param pulumi.Input[bool] s3_privilege: [Boolean] The group will have S3 privilege.
        :param pulumi.Input[str] user_id: [string] The ID of the specific user to add to the group. Please use user_ids argument since this is **DEPRECATED**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_ids: [list] A list of users to add to the group.
        """
        if access_activity_log is not None:
            pulumi.set(__self__, "access_activity_log", access_activity_log)
        if access_and_manage_certificates is not None:
            pulumi.set(__self__, "access_and_manage_certificates", access_and_manage_certificates)
        if access_and_manage_monitoring is not None:
            pulumi.set(__self__, "access_and_manage_monitoring", access_and_manage_monitoring)
        if create_backup_unit is not None:
            pulumi.set(__self__, "create_backup_unit", create_backup_unit)
        if create_datacenter is not None:
            pulumi.set(__self__, "create_datacenter", create_datacenter)
        if create_flow_log is not None:
            pulumi.set(__self__, "create_flow_log", create_flow_log)
        if create_internet_access is not None:
            pulumi.set(__self__, "create_internet_access", create_internet_access)
        if create_k8s_cluster is not None:
            pulumi.set(__self__, "create_k8s_cluster", create_k8s_cluster)
        if create_pcc is not None:
            pulumi.set(__self__, "create_pcc", create_pcc)
        if create_snapshot is not None:
            pulumi.set(__self__, "create_snapshot", create_snapshot)
        if manage_dbaas is not None:
            pulumi.set(__self__, "manage_dbaas", manage_dbaas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reserve_ip is not None:
            pulumi.set(__self__, "reserve_ip", reserve_ip)
        if s3_privilege is not None:
            pulumi.set(__self__, "s3_privilege", s3_privilege)
        if user_id is not None:
            warnings.warn("""Please use user_ids for adding users to the group, since user_id will be removed in the future""", DeprecationWarning)
            pulumi.log.warn("""user_id is deprecated: Please use user_ids for adding users to the group, since user_id will be removed in the future""")
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)

    @property
    @pulumi.getter(name="accessActivityLog")
    def access_activity_log(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to access the activity log.
        """
        return pulumi.get(self, "access_activity_log")

    @access_activity_log.setter
    def access_activity_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_activity_log", value)

    @property
    @pulumi.getter(name="accessAndManageCertificates")
    def access_and_manage_certificates(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  The group will be allowed to access and manage certificates.
        """
        return pulumi.get(self, "access_and_manage_certificates")

    @access_and_manage_certificates.setter
    def access_and_manage_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_and_manage_certificates", value)

    @property
    @pulumi.getter(name="accessAndManageMonitoring")
    def access_and_manage_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  The group will be allowed to access and manage monitoring.
        """
        return pulumi.get(self, "access_and_manage_monitoring")

    @access_and_manage_monitoring.setter
    def access_and_manage_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_and_manage_monitoring", value)

    @property
    @pulumi.getter(name="createBackupUnit")
    def create_backup_unit(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create backup unit privilege.
        """
        return pulumi.get(self, "create_backup_unit")

    @create_backup_unit.setter
    def create_backup_unit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_backup_unit", value)

    @property
    @pulumi.getter(name="createDatacenter")
    def create_datacenter(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create virtual data centers.
        """
        return pulumi.get(self, "create_datacenter")

    @create_datacenter.setter
    def create_datacenter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_datacenter", value)

    @property
    @pulumi.getter(name="createFlowLog")
    def create_flow_log(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  The group will be allowed to create flow log.
        """
        return pulumi.get(self, "create_flow_log")

    @create_flow_log.setter
    def create_flow_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_flow_log", value)

    @property
    @pulumi.getter(name="createInternetAccess")
    def create_internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create internet access privilege.
        """
        return pulumi.get(self, "create_internet_access")

    @create_internet_access.setter
    def create_internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_internet_access", value)

    @property
    @pulumi.getter(name="createK8sCluster")
    def create_k8s_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  The group will be allowed to create kubernetes cluster privilege.
        """
        return pulumi.get(self, "create_k8s_cluster")

    @create_k8s_cluster.setter
    def create_k8s_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_k8s_cluster", value)

    @property
    @pulumi.getter(name="createPcc")
    def create_pcc(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create Cross Connects privilege.
        """
        return pulumi.get(self, "create_pcc")

    @create_pcc.setter
    def create_pcc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_pcc", value)

    @property
    @pulumi.getter(name="createSnapshot")
    def create_snapshot(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create snapshots.
        """
        return pulumi.get(self, "create_snapshot")

    @create_snapshot.setter
    def create_snapshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_snapshot", value)

    @property
    @pulumi.getter(name="manageDbaas")
    def manage_dbaas(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  Privilege for a group to manage DBaaS related functionality.
        """
        return pulumi.get(self, "manage_dbaas")

    @manage_dbaas.setter
    def manage_dbaas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_dbaas", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A name for the group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reserveIp")
    def reserve_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to reserve IP addresses.
        """
        return pulumi.get(self, "reserve_ip")

    @reserve_ip.setter
    def reserve_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reserve_ip", value)

    @property
    @pulumi.getter(name="s3Privilege")
    def s3_privilege(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will have S3 privilege.
        """
        return pulumi.get(self, "s3_privilege")

    @s3_privilege.setter
    def s3_privilege(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "s3_privilege", value)

    @property
    @pulumi.getter(name="userId")
    @_utilities.deprecated("""Please use user_ids for adding users to the group, since user_id will be removed in the future""")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of the specific user to add to the group. Please use user_ids argument since this is **DEPRECATED**
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] A list of users to add to the group.
        """
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_ids", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 access_activity_log: Optional[pulumi.Input[bool]] = None,
                 access_and_manage_certificates: Optional[pulumi.Input[bool]] = None,
                 access_and_manage_monitoring: Optional[pulumi.Input[bool]] = None,
                 create_backup_unit: Optional[pulumi.Input[bool]] = None,
                 create_datacenter: Optional[pulumi.Input[bool]] = None,
                 create_flow_log: Optional[pulumi.Input[bool]] = None,
                 create_internet_access: Optional[pulumi.Input[bool]] = None,
                 create_k8s_cluster: Optional[pulumi.Input[bool]] = None,
                 create_pcc: Optional[pulumi.Input[bool]] = None,
                 create_snapshot: Optional[pulumi.Input[bool]] = None,
                 manage_dbaas: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reserve_ip: Optional[pulumi.Input[bool]] = None,
                 s3_privilege: Optional[pulumi.Input[bool]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['GroupUserArgs']]]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        :param pulumi.Input[bool] access_activity_log: [Boolean] The group will be allowed to access the activity log.
        :param pulumi.Input[bool] access_and_manage_certificates: [Boolean]  The group will be allowed to access and manage certificates.
        :param pulumi.Input[bool] access_and_manage_monitoring: [Boolean]  The group will be allowed to access and manage monitoring.
        :param pulumi.Input[bool] create_backup_unit: [Boolean] The group will be allowed to create backup unit privilege.
        :param pulumi.Input[bool] create_datacenter: [Boolean] The group will be allowed to create virtual data centers.
        :param pulumi.Input[bool] create_flow_log: [Boolean]  The group will be allowed to create flow log.
        :param pulumi.Input[bool] create_internet_access: [Boolean] The group will be allowed to create internet access privilege.
        :param pulumi.Input[bool] create_k8s_cluster: [Boolean]  The group will be allowed to create kubernetes cluster privilege.
        :param pulumi.Input[bool] create_pcc: [Boolean] The group will be allowed to create Cross Connects privilege.
        :param pulumi.Input[bool] create_snapshot: [Boolean] The group will be allowed to create snapshots.
        :param pulumi.Input[bool] manage_dbaas: [Boolean]  Privilege for a group to manage DBaaS related functionality.
        :param pulumi.Input[str] name: [string] A name for the group.
        :param pulumi.Input[bool] reserve_ip: [Boolean] The group will be allowed to reserve IP addresses.
        :param pulumi.Input[bool] s3_privilege: [Boolean] The group will have S3 privilege.
        :param pulumi.Input[str] user_id: [string] The ID of the specific user to add to the group. Please use user_ids argument since this is **DEPRECATED**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_ids: [list] A list of users to add to the group.
        :param pulumi.Input[Sequence[pulumi.Input['GroupUserArgs']]] users: List of users - See the User section
               
               **NOTE:** user_id/user_ids field cannot be used at the same time with group_ids field in user resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
        """
        if access_activity_log is not None:
            pulumi.set(__self__, "access_activity_log", access_activity_log)
        if access_and_manage_certificates is not None:
            pulumi.set(__self__, "access_and_manage_certificates", access_and_manage_certificates)
        if access_and_manage_monitoring is not None:
            pulumi.set(__self__, "access_and_manage_monitoring", access_and_manage_monitoring)
        if create_backup_unit is not None:
            pulumi.set(__self__, "create_backup_unit", create_backup_unit)
        if create_datacenter is not None:
            pulumi.set(__self__, "create_datacenter", create_datacenter)
        if create_flow_log is not None:
            pulumi.set(__self__, "create_flow_log", create_flow_log)
        if create_internet_access is not None:
            pulumi.set(__self__, "create_internet_access", create_internet_access)
        if create_k8s_cluster is not None:
            pulumi.set(__self__, "create_k8s_cluster", create_k8s_cluster)
        if create_pcc is not None:
            pulumi.set(__self__, "create_pcc", create_pcc)
        if create_snapshot is not None:
            pulumi.set(__self__, "create_snapshot", create_snapshot)
        if manage_dbaas is not None:
            pulumi.set(__self__, "manage_dbaas", manage_dbaas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reserve_ip is not None:
            pulumi.set(__self__, "reserve_ip", reserve_ip)
        if s3_privilege is not None:
            pulumi.set(__self__, "s3_privilege", s3_privilege)
        if user_id is not None:
            warnings.warn("""Please use user_ids for adding users to the group, since user_id will be removed in the future""", DeprecationWarning)
            pulumi.log.warn("""user_id is deprecated: Please use user_ids for adding users to the group, since user_id will be removed in the future""")
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accessActivityLog")
    def access_activity_log(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to access the activity log.
        """
        return pulumi.get(self, "access_activity_log")

    @access_activity_log.setter
    def access_activity_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_activity_log", value)

    @property
    @pulumi.getter(name="accessAndManageCertificates")
    def access_and_manage_certificates(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  The group will be allowed to access and manage certificates.
        """
        return pulumi.get(self, "access_and_manage_certificates")

    @access_and_manage_certificates.setter
    def access_and_manage_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_and_manage_certificates", value)

    @property
    @pulumi.getter(name="accessAndManageMonitoring")
    def access_and_manage_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  The group will be allowed to access and manage monitoring.
        """
        return pulumi.get(self, "access_and_manage_monitoring")

    @access_and_manage_monitoring.setter
    def access_and_manage_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_and_manage_monitoring", value)

    @property
    @pulumi.getter(name="createBackupUnit")
    def create_backup_unit(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create backup unit privilege.
        """
        return pulumi.get(self, "create_backup_unit")

    @create_backup_unit.setter
    def create_backup_unit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_backup_unit", value)

    @property
    @pulumi.getter(name="createDatacenter")
    def create_datacenter(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create virtual data centers.
        """
        return pulumi.get(self, "create_datacenter")

    @create_datacenter.setter
    def create_datacenter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_datacenter", value)

    @property
    @pulumi.getter(name="createFlowLog")
    def create_flow_log(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  The group will be allowed to create flow log.
        """
        return pulumi.get(self, "create_flow_log")

    @create_flow_log.setter
    def create_flow_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_flow_log", value)

    @property
    @pulumi.getter(name="createInternetAccess")
    def create_internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create internet access privilege.
        """
        return pulumi.get(self, "create_internet_access")

    @create_internet_access.setter
    def create_internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_internet_access", value)

    @property
    @pulumi.getter(name="createK8sCluster")
    def create_k8s_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  The group will be allowed to create kubernetes cluster privilege.
        """
        return pulumi.get(self, "create_k8s_cluster")

    @create_k8s_cluster.setter
    def create_k8s_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_k8s_cluster", value)

    @property
    @pulumi.getter(name="createPcc")
    def create_pcc(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create Cross Connects privilege.
        """
        return pulumi.get(self, "create_pcc")

    @create_pcc.setter
    def create_pcc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_pcc", value)

    @property
    @pulumi.getter(name="createSnapshot")
    def create_snapshot(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to create snapshots.
        """
        return pulumi.get(self, "create_snapshot")

    @create_snapshot.setter
    def create_snapshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_snapshot", value)

    @property
    @pulumi.getter(name="manageDbaas")
    def manage_dbaas(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean]  Privilege for a group to manage DBaaS related functionality.
        """
        return pulumi.get(self, "manage_dbaas")

    @manage_dbaas.setter
    def manage_dbaas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_dbaas", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] A name for the group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reserveIp")
    def reserve_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will be allowed to reserve IP addresses.
        """
        return pulumi.get(self, "reserve_ip")

    @reserve_ip.setter
    def reserve_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reserve_ip", value)

    @property
    @pulumi.getter(name="s3Privilege")
    def s3_privilege(self) -> Optional[pulumi.Input[bool]]:
        """
        [Boolean] The group will have S3 privilege.
        """
        return pulumi.get(self, "s3_privilege")

    @s3_privilege.setter
    def s3_privilege(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "s3_privilege", value)

    @property
    @pulumi.getter(name="userId")
    @_utilities.deprecated("""Please use user_ids for adding users to the group, since user_id will be removed in the future""")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of the specific user to add to the group. Please use user_ids argument since this is **DEPRECATED**
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] A list of users to add to the group.
        """
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_ids", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupUserArgs']]]]:
        """
        List of users - See the User section

        **NOTE:** user_id/user_ids field cannot be used at the same time with group_ids field in user resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupUserArgs']]]]):
        pulumi.set(self, "users", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_activity_log: Optional[pulumi.Input[bool]] = None,
                 access_and_manage_certificates: Optional[pulumi.Input[bool]] = None,
                 access_and_manage_monitoring: Optional[pulumi.Input[bool]] = None,
                 create_backup_unit: Optional[pulumi.Input[bool]] = None,
                 create_datacenter: Optional[pulumi.Input[bool]] = None,
                 create_flow_log: Optional[pulumi.Input[bool]] = None,
                 create_internet_access: Optional[pulumi.Input[bool]] = None,
                 create_k8s_cluster: Optional[pulumi.Input[bool]] = None,
                 create_pcc: Optional[pulumi.Input[bool]] = None,
                 create_snapshot: Optional[pulumi.Input[bool]] = None,
                 manage_dbaas: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reserve_ip: Optional[pulumi.Input[bool]] = None,
                 s3_privilege: Optional[pulumi.Input[bool]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages **Groups** and **Group Privileges** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        user1_password = random.index.Password("user1_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        example1 = ionoscloud.compute.User("example1",
            first_name="user1",
            last_name="user1",
            email="unique_email.com",
            password=user1_password["result"],
            administrator=False,
            force_sec_auth=False)
        user2_password = random.index.Password("user2_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        example2 = ionoscloud.compute.User("example2",
            first_name="user2",
            last_name="user2",
            email="unique_email.com",
            password=user2_password["result"],
            administrator=False,
            force_sec_auth=False)
        example = ionoscloud.compute.Group("example",
            name="Group Example",
            create_datacenter=True,
            create_snapshot=True,
            reserve_ip=True,
            access_activity_log=True,
            create_pcc=True,
            s3_privilege=True,
            create_backup_unit=True,
            create_internet_access=True,
            create_k8s_cluster=True,
            create_flow_log=True,
            access_and_manage_monitoring=True,
            access_and_manage_certificates=True,
            manage_dbaas=True,
            user_ids=[
                example1.id,
                example2.id,
            ])
        ```

        ## Import

        Resource Group can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/group:Group mygroup group uuid
        ```

        > :warning: **If you are upgrading to v6.2.0**: You have to modify you plan for user_ids to match the new structure, by renaming the field old field, **user_id**, to user_ids and put the old value into an array. This is not backwards compatible.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] access_activity_log: [Boolean] The group will be allowed to access the activity log.
        :param pulumi.Input[bool] access_and_manage_certificates: [Boolean]  The group will be allowed to access and manage certificates.
        :param pulumi.Input[bool] access_and_manage_monitoring: [Boolean]  The group will be allowed to access and manage monitoring.
        :param pulumi.Input[bool] create_backup_unit: [Boolean] The group will be allowed to create backup unit privilege.
        :param pulumi.Input[bool] create_datacenter: [Boolean] The group will be allowed to create virtual data centers.
        :param pulumi.Input[bool] create_flow_log: [Boolean]  The group will be allowed to create flow log.
        :param pulumi.Input[bool] create_internet_access: [Boolean] The group will be allowed to create internet access privilege.
        :param pulumi.Input[bool] create_k8s_cluster: [Boolean]  The group will be allowed to create kubernetes cluster privilege.
        :param pulumi.Input[bool] create_pcc: [Boolean] The group will be allowed to create Cross Connects privilege.
        :param pulumi.Input[bool] create_snapshot: [Boolean] The group will be allowed to create snapshots.
        :param pulumi.Input[bool] manage_dbaas: [Boolean]  Privilege for a group to manage DBaaS related functionality.
        :param pulumi.Input[str] name: [string] A name for the group.
        :param pulumi.Input[bool] reserve_ip: [Boolean] The group will be allowed to reserve IP addresses.
        :param pulumi.Input[bool] s3_privilege: [Boolean] The group will have S3 privilege.
        :param pulumi.Input[str] user_id: [string] The ID of the specific user to add to the group. Please use user_ids argument since this is **DEPRECATED**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_ids: [list] A list of users to add to the group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages **Groups** and **Group Privileges** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud
        import pulumi_random as random

        user1_password = random.index.Password("user1_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        example1 = ionoscloud.compute.User("example1",
            first_name="user1",
            last_name="user1",
            email="unique_email.com",
            password=user1_password["result"],
            administrator=False,
            force_sec_auth=False)
        user2_password = random.index.Password("user2_password",
            length=16,
            special=True,
            override_special=!#$%&*()-_=+[]{}<>:?)
        example2 = ionoscloud.compute.User("example2",
            first_name="user2",
            last_name="user2",
            email="unique_email.com",
            password=user2_password["result"],
            administrator=False,
            force_sec_auth=False)
        example = ionoscloud.compute.Group("example",
            name="Group Example",
            create_datacenter=True,
            create_snapshot=True,
            reserve_ip=True,
            access_activity_log=True,
            create_pcc=True,
            s3_privilege=True,
            create_backup_unit=True,
            create_internet_access=True,
            create_k8s_cluster=True,
            create_flow_log=True,
            access_and_manage_monitoring=True,
            access_and_manage_certificates=True,
            manage_dbaas=True,
            user_ids=[
                example1.id,
                example2.id,
            ])
        ```

        ## Import

        Resource Group can be imported using the `resource id`, e.g.

        ```sh
        $ pulumi import ionoscloud:compute/group:Group mygroup group uuid
        ```

        > :warning: **If you are upgrading to v6.2.0**: You have to modify you plan for user_ids to match the new structure, by renaming the field old field, **user_id**, to user_ids and put the old value into an array. This is not backwards compatible.

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_activity_log: Optional[pulumi.Input[bool]] = None,
                 access_and_manage_certificates: Optional[pulumi.Input[bool]] = None,
                 access_and_manage_monitoring: Optional[pulumi.Input[bool]] = None,
                 create_backup_unit: Optional[pulumi.Input[bool]] = None,
                 create_datacenter: Optional[pulumi.Input[bool]] = None,
                 create_flow_log: Optional[pulumi.Input[bool]] = None,
                 create_internet_access: Optional[pulumi.Input[bool]] = None,
                 create_k8s_cluster: Optional[pulumi.Input[bool]] = None,
                 create_pcc: Optional[pulumi.Input[bool]] = None,
                 create_snapshot: Optional[pulumi.Input[bool]] = None,
                 manage_dbaas: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reserve_ip: Optional[pulumi.Input[bool]] = None,
                 s3_privilege: Optional[pulumi.Input[bool]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["access_activity_log"] = access_activity_log
            __props__.__dict__["access_and_manage_certificates"] = access_and_manage_certificates
            __props__.__dict__["access_and_manage_monitoring"] = access_and_manage_monitoring
            __props__.__dict__["create_backup_unit"] = create_backup_unit
            __props__.__dict__["create_datacenter"] = create_datacenter
            __props__.__dict__["create_flow_log"] = create_flow_log
            __props__.__dict__["create_internet_access"] = create_internet_access
            __props__.__dict__["create_k8s_cluster"] = create_k8s_cluster
            __props__.__dict__["create_pcc"] = create_pcc
            __props__.__dict__["create_snapshot"] = create_snapshot
            __props__.__dict__["manage_dbaas"] = manage_dbaas
            __props__.__dict__["name"] = name
            __props__.__dict__["reserve_ip"] = reserve_ip
            __props__.__dict__["s3_privilege"] = s3_privilege
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["user_ids"] = user_ids
            __props__.__dict__["users"] = None
        super(Group, __self__).__init__(
            'ionoscloud:compute/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_activity_log: Optional[pulumi.Input[bool]] = None,
            access_and_manage_certificates: Optional[pulumi.Input[bool]] = None,
            access_and_manage_monitoring: Optional[pulumi.Input[bool]] = None,
            create_backup_unit: Optional[pulumi.Input[bool]] = None,
            create_datacenter: Optional[pulumi.Input[bool]] = None,
            create_flow_log: Optional[pulumi.Input[bool]] = None,
            create_internet_access: Optional[pulumi.Input[bool]] = None,
            create_k8s_cluster: Optional[pulumi.Input[bool]] = None,
            create_pcc: Optional[pulumi.Input[bool]] = None,
            create_snapshot: Optional[pulumi.Input[bool]] = None,
            manage_dbaas: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            reserve_ip: Optional[pulumi.Input[bool]] = None,
            s3_privilege: Optional[pulumi.Input[bool]] = None,
            user_id: Optional[pulumi.Input[str]] = None,
            user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GroupUserArgs', 'GroupUserArgsDict']]]]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] access_activity_log: [Boolean] The group will be allowed to access the activity log.
        :param pulumi.Input[bool] access_and_manage_certificates: [Boolean]  The group will be allowed to access and manage certificates.
        :param pulumi.Input[bool] access_and_manage_monitoring: [Boolean]  The group will be allowed to access and manage monitoring.
        :param pulumi.Input[bool] create_backup_unit: [Boolean] The group will be allowed to create backup unit privilege.
        :param pulumi.Input[bool] create_datacenter: [Boolean] The group will be allowed to create virtual data centers.
        :param pulumi.Input[bool] create_flow_log: [Boolean]  The group will be allowed to create flow log.
        :param pulumi.Input[bool] create_internet_access: [Boolean] The group will be allowed to create internet access privilege.
        :param pulumi.Input[bool] create_k8s_cluster: [Boolean]  The group will be allowed to create kubernetes cluster privilege.
        :param pulumi.Input[bool] create_pcc: [Boolean] The group will be allowed to create Cross Connects privilege.
        :param pulumi.Input[bool] create_snapshot: [Boolean] The group will be allowed to create snapshots.
        :param pulumi.Input[bool] manage_dbaas: [Boolean]  Privilege for a group to manage DBaaS related functionality.
        :param pulumi.Input[str] name: [string] A name for the group.
        :param pulumi.Input[bool] reserve_ip: [Boolean] The group will be allowed to reserve IP addresses.
        :param pulumi.Input[bool] s3_privilege: [Boolean] The group will have S3 privilege.
        :param pulumi.Input[str] user_id: [string] The ID of the specific user to add to the group. Please use user_ids argument since this is **DEPRECATED**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_ids: [list] A list of users to add to the group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['GroupUserArgs', 'GroupUserArgsDict']]]] users: List of users - See the User section
               
               **NOTE:** user_id/user_ids field cannot be used at the same time with group_ids field in user resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["access_activity_log"] = access_activity_log
        __props__.__dict__["access_and_manage_certificates"] = access_and_manage_certificates
        __props__.__dict__["access_and_manage_monitoring"] = access_and_manage_monitoring
        __props__.__dict__["create_backup_unit"] = create_backup_unit
        __props__.__dict__["create_datacenter"] = create_datacenter
        __props__.__dict__["create_flow_log"] = create_flow_log
        __props__.__dict__["create_internet_access"] = create_internet_access
        __props__.__dict__["create_k8s_cluster"] = create_k8s_cluster
        __props__.__dict__["create_pcc"] = create_pcc
        __props__.__dict__["create_snapshot"] = create_snapshot
        __props__.__dict__["manage_dbaas"] = manage_dbaas
        __props__.__dict__["name"] = name
        __props__.__dict__["reserve_ip"] = reserve_ip
        __props__.__dict__["s3_privilege"] = s3_privilege
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_ids"] = user_ids
        __props__.__dict__["users"] = users
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessActivityLog")
    def access_activity_log(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] The group will be allowed to access the activity log.
        """
        return pulumi.get(self, "access_activity_log")

    @property
    @pulumi.getter(name="accessAndManageCertificates")
    def access_and_manage_certificates(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean]  The group will be allowed to access and manage certificates.
        """
        return pulumi.get(self, "access_and_manage_certificates")

    @property
    @pulumi.getter(name="accessAndManageMonitoring")
    def access_and_manage_monitoring(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean]  The group will be allowed to access and manage monitoring.
        """
        return pulumi.get(self, "access_and_manage_monitoring")

    @property
    @pulumi.getter(name="createBackupUnit")
    def create_backup_unit(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] The group will be allowed to create backup unit privilege.
        """
        return pulumi.get(self, "create_backup_unit")

    @property
    @pulumi.getter(name="createDatacenter")
    def create_datacenter(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] The group will be allowed to create virtual data centers.
        """
        return pulumi.get(self, "create_datacenter")

    @property
    @pulumi.getter(name="createFlowLog")
    def create_flow_log(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean]  The group will be allowed to create flow log.
        """
        return pulumi.get(self, "create_flow_log")

    @property
    @pulumi.getter(name="createInternetAccess")
    def create_internet_access(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] The group will be allowed to create internet access privilege.
        """
        return pulumi.get(self, "create_internet_access")

    @property
    @pulumi.getter(name="createK8sCluster")
    def create_k8s_cluster(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean]  The group will be allowed to create kubernetes cluster privilege.
        """
        return pulumi.get(self, "create_k8s_cluster")

    @property
    @pulumi.getter(name="createPcc")
    def create_pcc(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] The group will be allowed to create Cross Connects privilege.
        """
        return pulumi.get(self, "create_pcc")

    @property
    @pulumi.getter(name="createSnapshot")
    def create_snapshot(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] The group will be allowed to create snapshots.
        """
        return pulumi.get(self, "create_snapshot")

    @property
    @pulumi.getter(name="manageDbaas")
    def manage_dbaas(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean]  Privilege for a group to manage DBaaS related functionality.
        """
        return pulumi.get(self, "manage_dbaas")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] A name for the group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reserveIp")
    def reserve_ip(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] The group will be allowed to reserve IP addresses.
        """
        return pulumi.get(self, "reserve_ip")

    @property
    @pulumi.getter(name="s3Privilege")
    def s3_privilege(self) -> pulumi.Output[Optional[bool]]:
        """
        [Boolean] The group will have S3 privilege.
        """
        return pulumi.get(self, "s3_privilege")

    @property
    @pulumi.getter(name="userId")
    @_utilities.deprecated("""Please use user_ids for adding users to the group, since user_id will be removed in the future""")
    def user_id(self) -> pulumi.Output[Optional[str]]:
        """
        [string] The ID of the specific user to add to the group. Please use user_ids argument since this is **DEPRECATED**
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        [list] A list of users to add to the group.
        """
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence['outputs.GroupUser']]:
        """
        List of users - See the User section

        **NOTE:** user_id/user_ids field cannot be used at the same time with group_ids field in user resource. Trying to add the same user to the same group in both ways in the same plan will result in a cyclic dependency error.
        """
        return pulumi.get(self, "users")

