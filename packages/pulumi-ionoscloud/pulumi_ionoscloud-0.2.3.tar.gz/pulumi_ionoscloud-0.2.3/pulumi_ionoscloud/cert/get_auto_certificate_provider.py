# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutoCertificateProviderResult',
    'AwaitableGetAutoCertificateProviderResult',
    'get_auto_certificate_provider',
    'get_auto_certificate_provider_output',
]

@pulumi.output_type
class GetAutoCertificateProviderResult:
    """
    A collection of values returned by getAutoCertificateProvider.
    """
    def __init__(__self__, email=None, external_account_bindings=None, id=None, location=None, name=None, server=None):
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if external_account_bindings and not isinstance(external_account_bindings, list):
            raise TypeError("Expected argument 'external_account_bindings' to be a list")
        pulumi.set(__self__, "external_account_bindings", external_account_bindings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        [string] The email address of the certificate requester.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="externalAccountBindings")
    def external_account_bindings(self) -> Sequence['outputs.GetAutoCertificateProviderExternalAccountBindingResult']:
        """
        [list]
        """
        return pulumi.get(self, "external_account_bindings")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        [string] The URL of the certificate provider.
        """
        return pulumi.get(self, "server")


class AwaitableGetAutoCertificateProviderResult(GetAutoCertificateProviderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutoCertificateProviderResult(
            email=self.email,
            external_account_bindings=self.external_account_bindings,
            id=self.id,
            location=self.location,
            name=self.name,
            server=self.server)


def get_auto_certificate_provider(id: Optional[str] = None,
                                  location: Optional[str] = None,
                                  name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutoCertificateProviderResult:
    """
    The **CM Provider data source** can be used to search for and return an existing certificate manager provider.
    You can provide a string for either id or name parameters which will be compared with provisioned providers.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cert.get_auto_certificate_provider(id="provider_id",
        location="provider_location")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cert.get_auto_certificate_provider(name="Provider Name Example",
        location="provider_location")
    ```


    :param str id: [string] ID of the provider you want to search for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str location: [string] The location of the provider.
    :param str name: [string] Name of an existing provider that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ionoscloud:cert/getAutoCertificateProvider:getAutoCertificateProvider', __args__, opts=opts, typ=GetAutoCertificateProviderResult).value

    return AwaitableGetAutoCertificateProviderResult(
        email=pulumi.get(__ret__, 'email'),
        external_account_bindings=pulumi.get(__ret__, 'external_account_bindings'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        server=pulumi.get(__ret__, 'server'))
def get_auto_certificate_provider_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                         location: Optional[pulumi.Input[Optional[str]]] = None,
                                         name: Optional[pulumi.Input[Optional[str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutoCertificateProviderResult]:
    """
    The **CM Provider data source** can be used to search for and return an existing certificate manager provider.
    You can provide a string for either id or name parameters which will be compared with provisioned providers.
    If a single match is found, it will be returned. If your search results in multiple matches, an error will be returned.
    When this happens, please refine your search string so that it is specific enough to return only one result.

    ## Example Usage

    ### By ID
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cert.get_auto_certificate_provider(id="provider_id",
        location="provider_location")
    ```

    ### By Name
    ```python
    import pulumi
    import pulumi_ionoscloud as ionoscloud

    example = ionoscloud.cert.get_auto_certificate_provider(name="Provider Name Example",
        location="provider_location")
    ```


    :param str id: [string] ID of the provider you want to search for.
           
           Either `name` or `id` must be provided. If none, or both are provided, the datasource will return an error.
    :param str location: [string] The location of the provider.
    :param str name: [string] Name of an existing provider that you want to search for.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ionoscloud:cert/getAutoCertificateProvider:getAutoCertificateProvider', __args__, opts=opts, typ=GetAutoCertificateProviderResult)
    return __ret__.apply(lambda __response__: GetAutoCertificateProviderResult(
        email=pulumi.get(__response__, 'email'),
        external_account_bindings=pulumi.get(__response__, 'external_account_bindings'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        server=pulumi.get(__response__, 'server')))
