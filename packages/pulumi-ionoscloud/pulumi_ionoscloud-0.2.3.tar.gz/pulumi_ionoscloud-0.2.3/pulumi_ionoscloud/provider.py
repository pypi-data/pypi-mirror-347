# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 contract_number: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 s3_access_key: Optional[pulumi.Input[str]] = None,
                 s3_region: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] endpoint: IonosCloud REST API URL. Usually not necessary to be set, SDKs know internally how to route requests to the API.
        :param pulumi.Input[bool] insecure: This field is to be set only for testing purposes. It is not recommended to set this field in production environments.
        :param pulumi.Input[str] password: IonosCloud password for API operations. If token is provided, token is preferred
        :param pulumi.Input[str] s3_access_key: Access key for IONOS Object Storage operations.
        :param pulumi.Input[str] s3_region: Region for IONOS Object Storage operations.
        :param pulumi.Input[str] s3_secret_key: Secret key for IONOS Object Storage operations.
        :param pulumi.Input[str] token: IonosCloud bearer token for API operations.
        :param pulumi.Input[str] username: IonosCloud username for API operations. If token is provided, token is preferred
        """
        if contract_number is not None:
            pulumi.set(__self__, "contract_number", contract_number)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if retries is not None:
            warnings.warn("""Timeout is used instead of this functionality""", DeprecationWarning)
            pulumi.log.warn("""retries is deprecated: Timeout is used instead of this functionality""")
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if s3_access_key is not None:
            pulumi.set(__self__, "s3_access_key", s3_access_key)
        if s3_region is not None:
            pulumi.set(__self__, "s3_region", s3_region)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="contractNumber")
    def contract_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "contract_number")

    @contract_number.setter
    def contract_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contract_number", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        IonosCloud REST API URL. Usually not necessary to be set, SDKs know internally how to route requests to the API.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        This field is to be set only for testing purposes. It is not recommended to set this field in production environments.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        IonosCloud password for API operations. If token is provided, token is preferred
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Timeout is used instead of this functionality""")
    def retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter(name="s3AccessKey")
    def s3_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access key for IONOS Object Storage operations.
        """
        return pulumi.get(self, "s3_access_key")

    @s3_access_key.setter
    def s3_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_access_key", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region for IONOS Object Storage operations.
        """
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_region", value)

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Secret key for IONOS Object Storage operations.
        """
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_secret_key", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        IonosCloud bearer token for API operations.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        IonosCloud username for API operations. If token is provided, token is preferred
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contract_number: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 s3_access_key: Optional[pulumi.Input[str]] = None,
                 s3_region: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the ionoscloud package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] endpoint: IonosCloud REST API URL. Usually not necessary to be set, SDKs know internally how to route requests to the API.
        :param pulumi.Input[bool] insecure: This field is to be set only for testing purposes. It is not recommended to set this field in production environments.
        :param pulumi.Input[str] password: IonosCloud password for API operations. If token is provided, token is preferred
        :param pulumi.Input[str] s3_access_key: Access key for IONOS Object Storage operations.
        :param pulumi.Input[str] s3_region: Region for IONOS Object Storage operations.
        :param pulumi.Input[str] s3_secret_key: Secret key for IONOS Object Storage operations.
        :param pulumi.Input[str] token: IonosCloud bearer token for API operations.
        :param pulumi.Input[str] username: IonosCloud username for API operations. If token is provided, token is preferred
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the ionoscloud package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contract_number: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 s3_access_key: Optional[pulumi.Input[str]] = None,
                 s3_region: Optional[pulumi.Input[str]] = None,
                 s3_secret_key: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["contract_number"] = contract_number
            __props__.__dict__["endpoint"] = endpoint
            __props__.__dict__["insecure"] = pulumi.Output.from_input(insecure).apply(pulumi.runtime.to_json) if insecure is not None else None
            __props__.__dict__["password"] = password
            __props__.__dict__["retries"] = pulumi.Output.from_input(retries).apply(pulumi.runtime.to_json) if retries is not None else None
            __props__.__dict__["s3_access_key"] = s3_access_key
            __props__.__dict__["s3_region"] = s3_region
            __props__.__dict__["s3_secret_key"] = s3_secret_key
            __props__.__dict__["token"] = token
            __props__.__dict__["username"] = username
        super(Provider, __self__).__init__(
            'ionoscloud',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="contractNumber")
    def contract_number(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "contract_number")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[Optional[str]]:
        """
        IonosCloud REST API URL. Usually not necessary to be set, SDKs know internally how to route requests to the API.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        IonosCloud password for API operations. If token is provided, token is preferred
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="s3AccessKey")
    def s3_access_key(self) -> pulumi.Output[Optional[str]]:
        """
        Access key for IONOS Object Storage operations.
        """
        return pulumi.get(self, "s3_access_key")

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Output[Optional[str]]:
        """
        Region for IONOS Object Storage operations.
        """
        return pulumi.get(self, "s3_region")

    @property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> pulumi.Output[Optional[str]]:
        """
        Secret key for IONOS Object Storage operations.
        """
        return pulumi.get(self, "s3_secret_key")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[Optional[str]]:
        """
        IonosCloud bearer token for API operations.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        IonosCloud username for API operations. If token is provided, token is preferred
        """
        return pulumi.get(self, "username")

