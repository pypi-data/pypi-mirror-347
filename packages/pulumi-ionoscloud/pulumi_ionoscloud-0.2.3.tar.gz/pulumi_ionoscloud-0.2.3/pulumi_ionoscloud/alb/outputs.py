# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'BalancerFlowlog',
    'ForwardingRuleHttpRule',
    'ForwardingRuleHttpRuleCondition',
    'GetBalancerFlowlogResult',
    'GetForwardingRuleHttpRuleResult',
    'GetForwardingRuleHttpRuleConditionResult',
]

@pulumi.output_type
class BalancerFlowlog(dict):
    def __init__(__self__, *,
                 action: str,
                 bucket: str,
                 direction: str,
                 name: str,
                 id: Optional[str] = None):
        """
        :param str action: [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        :param str bucket: [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        :param str direction: [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        :param str name: [string] Specifies the name of the flow log.
               
               ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
        :param str id: The resource's unique identifier.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        [string] Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        [string] Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        [string] Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        [string] Specifies the name of the flow log.

        ⚠️ **Note:**: Removing the `flowlog` forces re-creation of the application load balancer resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The resource's unique identifier.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ForwardingRuleHttpRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "dropQuery":
            suggest = "drop_query"
        elif key == "responseMessage":
            suggest = "response_message"
        elif key == "statusCode":
            suggest = "status_code"
        elif key == "targetGroup":
            suggest = "target_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingRuleHttpRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingRuleHttpRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingRuleHttpRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: str,
                 conditions: Optional[Sequence['outputs.ForwardingRuleHttpRuleCondition']] = None,
                 content_type: Optional[str] = None,
                 drop_query: Optional[bool] = None,
                 location: Optional[str] = None,
                 response_message: Optional[str] = None,
                 status_code: Optional[int] = None,
                 target_group: Optional[str] = None):
        """
        :param str name: [string] The unique name of the Application Load Balancer HTTP rule.
        :param str type: [string] Type of the Http Rule.
        :param Sequence['ForwardingRuleHttpRuleConditionArgs'] conditions: [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
        :param str content_type: [string] Valid only for STATIC actions.
        :param bool drop_query: [bool] Default is false; valid only for REDIRECT actions.
        :param str location: [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
        :param str response_message: [string] The response message of the request; mandatory for STATIC action.
        :param int status_code: [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
        :param str target_group: [string] The UUID of the target group; mandatory for FORWARD action.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if drop_query is not None:
            pulumi.set(__self__, "drop_query", drop_query)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if response_message is not None:
            pulumi.set(__self__, "response_message", response_message)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if target_group is not None:
            pulumi.set(__self__, "target_group", target_group)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        [string] The unique name of the Application Load Balancer HTTP rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        [string] Type of the Http Rule.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ForwardingRuleHttpRuleCondition']]:
        """
        [list] - An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        """
        [string] Valid only for STATIC actions.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="dropQuery")
    def drop_query(self) -> Optional[bool]:
        """
        [bool] Default is false; valid only for REDIRECT actions.
        """
        return pulumi.get(self, "drop_query")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        [string] The location for redirecting; mandatory and valid only for REDIRECT actions.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> Optional[str]:
        """
        [string] The response message of the request; mandatory for STATIC action.
        """
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        """
        [int] Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="targetGroup")
    def target_group(self) -> Optional[str]:
        """
        [string] The UUID of the target group; mandatory for FORWARD action.
        """
        return pulumi.get(self, "target_group")


@pulumi.output_type
class ForwardingRuleHttpRuleCondition(dict):
    def __init__(__self__, *,
                 type: str,
                 condition: Optional[str] = None,
                 key: Optional[str] = None,
                 negate: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str type: [string] Type of the Http Rule condition.
        :param str condition: [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
        :param str key: [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
        :param bool negate: [bool] Specifies whether the condition is negated or not; the default is False.
        :param str value: [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
        """
        pulumi.set(__self__, "type", type)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        [string] Type of the Http Rule condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        [string] Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        [string] Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        """
        [bool] Specifies whether the condition is negated or not; the default is False.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        [string] Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBalancerFlowlogResult(dict):
    def __init__(__self__, *,
                 action: str,
                 bucket: str,
                 direction: str,
                 id: str,
                 name: str):
        """
        :param str action: Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        :param str bucket: Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        :param str direction: Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        :param str id: ID of the application load balancer you want to search for.
        :param str name: Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Specifies the action to be taken when the rule is matched. Possible values: ACCEPTED, REJECTED, ALL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Specifies the IONOS Object Storage bucket where the flow log data will be stored. The bucket must exist. Immutable, forces re-creation.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Specifies the traffic direction pattern. Valid values: INGRESS, EGRESS, BIDIRECTIONAL. Immutable, forces re-creation.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the application load balancer you want to search for.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingRuleHttpRuleResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetForwardingRuleHttpRuleConditionResult'],
                 content_type: str,
                 drop_query: bool,
                 location: str,
                 name: str,
                 response_message: str,
                 status_code: int,
                 target_group: str,
                 type: str):
        """
        :param Sequence['GetForwardingRuleHttpRuleConditionArgs'] conditions: An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
        :param str content_type: Valid only for STATIC actions.
        :param bool drop_query: Default is false; valid only for REDIRECT actions.
        :param str location: The location for redirecting; mandatory and valid only for REDIRECT actions.
        :param str name: Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        :param str response_message: The response message of the request; mandatory for STATIC action.
        :param int status_code: Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
        :param str target_group: The UUID of the target group; mandatory for FORWARD action.
        :param str type: Type of the Http Rule condition.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "drop_query", drop_query)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "response_message", response_message)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "target_group", target_group)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetForwardingRuleHttpRuleConditionResult']:
        """
        An array of items in the collection.The action is only performed if each and every condition is met; if no conditions are set, the rule will always be performed.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        Valid only for STATIC actions.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="dropQuery")
    def drop_query(self) -> bool:
        """
        Default is false; valid only for REDIRECT actions.
        """
        return pulumi.get(self, "drop_query")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location for redirecting; mandatory and valid only for REDIRECT actions.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of an existing application load balancer that you want to search for. Search by name is case-insensitive. The whole resource name is required if `partial_match` parameter is not set to true.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="responseMessage")
    def response_message(self) -> str:
        """
        The response message of the request; mandatory for STATIC action.
        """
        return pulumi.get(self, "response_message")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        """
        Valid only for REDIRECT and STATIC actions. For REDIRECT actions, default is 301 and possible values are 301, 302, 303, 307, and 308. For STATIC actions, default is 503 and valid range is 200 to 599.
        """
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="targetGroup")
    def target_group(self) -> str:
        """
        The UUID of the target group; mandatory for FORWARD action.
        """
        return pulumi.get(self, "target_group")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Http Rule condition.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetForwardingRuleHttpRuleConditionResult(dict):
    def __init__(__self__, *,
                 condition: str,
                 key: str,
                 negate: bool,
                 type: str,
                 value: str):
        """
        :param str condition: Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
        :param str key: Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
        :param bool negate: Specifies whether the condition is negated or not; the default is False.
        :param str type: Type of the Http Rule condition.
        :param str value: Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "negate", negate)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def negate(self) -> bool:
        """
        Specifies whether the condition is negated or not; the default is False.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the Http Rule condition.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
        """
        return pulumi.get(self, "value")


