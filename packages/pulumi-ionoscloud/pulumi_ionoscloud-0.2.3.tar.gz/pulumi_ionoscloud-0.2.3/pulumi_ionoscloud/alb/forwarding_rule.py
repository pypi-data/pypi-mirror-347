# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ForwardingRuleArgs', 'ForwardingRule']

@pulumi.input_type
class ForwardingRuleArgs:
    def __init__(__self__, *,
                 application_loadbalancer_id: pulumi.Input[str],
                 datacenter_id: pulumi.Input[str],
                 listener_ip: pulumi.Input[str],
                 listener_port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 client_timeout: Optional[pulumi.Input[int]] = None,
                 http_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleHttpRuleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ForwardingRule resource.
        :param pulumi.Input[str] application_loadbalancer_id: [string] The ID of Application Load Balancer.
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[str] listener_ip: [string] Listening (inbound) IP.
        :param pulumi.Input[int] listener_port: [int] Listening (inbound) port number; valid range is 1 to 65535.
        :param pulumi.Input[str] protocol: [string] Balancing protocol.
        :param pulumi.Input[int] client_timeout: [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingRuleHttpRuleArgs']]] http_rules: [list] Array of items in that collection
        :param pulumi.Input[str] name: [string] The name of the Application Load Balancer forwarding rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] server_certificates: [list] Array of certificate ids. You can create certificates with the certificate resource.
        """
        pulumi.set(__self__, "application_loadbalancer_id", application_loadbalancer_id)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "listener_ip", listener_ip)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "protocol", protocol)
        if client_timeout is not None:
            pulumi.set(__self__, "client_timeout", client_timeout)
        if http_rules is not None:
            pulumi.set(__self__, "http_rules", http_rules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_certificates is not None:
            pulumi.set(__self__, "server_certificates", server_certificates)

    @property
    @pulumi.getter(name="applicationLoadbalancerId")
    def application_loadbalancer_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of Application Load Balancer.
        """
        return pulumi.get(self, "application_loadbalancer_id")

    @application_loadbalancer_id.setter
    def application_loadbalancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_loadbalancer_id", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> pulumi.Input[str]:
        """
        [string] Listening (inbound) IP.
        """
        return pulumi.get(self, "listener_ip")

    @listener_ip.setter
    def listener_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_ip", value)

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> pulumi.Input[int]:
        """
        [int] Listening (inbound) port number; valid range is 1 to 65535.
        """
        return pulumi.get(self, "listener_port")

    @listener_port.setter
    def listener_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "listener_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        [string] Balancing protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="clientTimeout")
    def client_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
        """
        return pulumi.get(self, "client_timeout")

    @client_timeout.setter
    def client_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_timeout", value)

    @property
    @pulumi.getter(name="httpRules")
    def http_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleHttpRuleArgs']]]]:
        """
        [list] Array of items in that collection
        """
        return pulumi.get(self, "http_rules")

    @http_rules.setter
    def http_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleHttpRuleArgs']]]]):
        pulumi.set(self, "http_rules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the Application Load Balancer forwarding rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] Array of certificate ids. You can create certificates with the certificate resource.
        """
        return pulumi.get(self, "server_certificates")

    @server_certificates.setter
    def server_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "server_certificates", value)


@pulumi.input_type
class _ForwardingRuleState:
    def __init__(__self__, *,
                 application_loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 client_timeout: Optional[pulumi.Input[int]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 http_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleHttpRuleArgs']]]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 listener_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 server_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ForwardingRule resources.
        :param pulumi.Input[str] application_loadbalancer_id: [string] The ID of Application Load Balancer.
        :param pulumi.Input[int] client_timeout: [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingRuleHttpRuleArgs']]] http_rules: [list] Array of items in that collection
        :param pulumi.Input[str] listener_ip: [string] Listening (inbound) IP.
        :param pulumi.Input[int] listener_port: [int] Listening (inbound) port number; valid range is 1 to 65535.
        :param pulumi.Input[str] name: [string] The name of the Application Load Balancer forwarding rule.
        :param pulumi.Input[str] protocol: [string] Balancing protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] server_certificates: [list] Array of certificate ids. You can create certificates with the certificate resource.
        """
        if application_loadbalancer_id is not None:
            pulumi.set(__self__, "application_loadbalancer_id", application_loadbalancer_id)
        if client_timeout is not None:
            pulumi.set(__self__, "client_timeout", client_timeout)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if http_rules is not None:
            pulumi.set(__self__, "http_rules", http_rules)
        if listener_ip is not None:
            pulumi.set(__self__, "listener_ip", listener_ip)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if server_certificates is not None:
            pulumi.set(__self__, "server_certificates", server_certificates)

    @property
    @pulumi.getter(name="applicationLoadbalancerId")
    def application_loadbalancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of Application Load Balancer.
        """
        return pulumi.get(self, "application_loadbalancer_id")

    @application_loadbalancer_id.setter
    def application_loadbalancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_loadbalancer_id", value)

    @property
    @pulumi.getter(name="clientTimeout")
    def client_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
        """
        return pulumi.get(self, "client_timeout")

    @client_timeout.setter
    def client_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_timeout", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="httpRules")
    def http_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleHttpRuleArgs']]]]:
        """
        [list] Array of items in that collection
        """
        return pulumi.get(self, "http_rules")

    @http_rules.setter
    def http_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingRuleHttpRuleArgs']]]]):
        pulumi.set(self, "http_rules", value)

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Listening (inbound) IP.
        """
        return pulumi.get(self, "listener_ip")

    @listener_ip.setter
    def listener_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_ip", value)

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[pulumi.Input[int]]:
        """
        [int] Listening (inbound) port number; valid range is 1 to 65535.
        """
        return pulumi.get(self, "listener_port")

    @listener_port.setter
    def listener_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listener_port", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        [string] The name of the Application Load Balancer forwarding rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        [string] Balancing protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        [list] Array of certificate ids. You can create certificates with the certificate resource.
        """
        return pulumi.get(self, "server_certificates")

    @server_certificates.setter
    def server_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "server_certificates", value)


class ForwardingRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 client_timeout: Optional[pulumi.Input[int]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 http_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleHttpRuleArgs', 'ForwardingRuleHttpRuleArgsDict']]]]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 listener_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 server_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages an **Application Load Balancer Forwarding Rule** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="datacenter description",
            sec_auth_protection=False)
        example1 = ionoscloud.compute.Lan("example_1",
            datacenter_id=example.id,
            public=True,
            name="Lan Example")
        example2 = ionoscloud.compute.Lan("example_2",
            datacenter_id=example.id,
            public=True,
            name="Lan Example")
        example_balancer = ionoscloud.alb.Balancer("example",
            datacenter_id=example.id,
            name="ALB Example",
            listener_lan=example1.id,
            ips=["10.12.118.224"],
            target_lan=example2.id,
            lb_private_ips=["10.13.72.225/24"])
        #optionally you can add a certificate to the application load balancer
        cert = ionoscloud.cert.Certificate("cert",
            name="add_name_here",
            certificate="your_certificate",
            certificate_chain="your_certificate_chain",
            private_key="your_private_key")
        example_forwarding_rule = ionoscloud.alb.ForwardingRule("example",
            datacenter_id=example.id,
            application_loadbalancer_id=example_balancer.id,
            name="ALB FR Example",
            protocol="HTTP",
            listener_ip="10.12.118.224",
            listener_port=8080,
            client_timeout=1000,
            http_rules=[
                {
                    "name": "http_rule",
                    "type": "REDIRECT",
                    "drop_query": True,
                    "location": "www.ionos.com",
                    "status_code": 301,
                    "conditions": [{
                        "type": "HEADER",
                        "condition": "EQUALS",
                        "negate": True,
                        "key": "key",
                        "value": "10.12.120.224/24",
                    }],
                },
                {
                    "name": "http_rule_2",
                    "type": "STATIC",
                    "drop_query": False,
                    "status_code": 303,
                    "response_message": "Response",
                    "content_type": "text/plain",
                    "conditions": [{
                        "type": "QUERY",
                        "condition": "MATCHES",
                        "negate": False,
                        "key": "key",
                        "value": "10.12.120.224/24",
                    }],
                },
            ],
            server_certificates=[cert.id])
        ```

        ## Import

        Resource Application Load Balancer Forwarding Rule can be imported using the `resource id`, `alb id` and `datacenter id`, e.g.

        ```sh
        $ pulumi import ionoscloud:alb/forwardingRule:ForwardingRule my_application_loadbalancer_forwardingrule datacenter uuid/application_loadbalancer uuid/application_loadbalancer_forwardingrule uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_loadbalancer_id: [string] The ID of Application Load Balancer.
        :param pulumi.Input[int] client_timeout: [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleHttpRuleArgs', 'ForwardingRuleHttpRuleArgsDict']]]] http_rules: [list] Array of items in that collection
        :param pulumi.Input[str] listener_ip: [string] Listening (inbound) IP.
        :param pulumi.Input[int] listener_port: [int] Listening (inbound) port number; valid range is 1 to 65535.
        :param pulumi.Input[str] name: [string] The name of the Application Load Balancer forwarding rule.
        :param pulumi.Input[str] protocol: [string] Balancing protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] server_certificates: [list] Array of certificate ids. You can create certificates with the certificate resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ForwardingRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an **Application Load Balancer Forwarding Rule** on IonosCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ionoscloud as ionoscloud

        example = ionoscloud.compute.Datacenter("example",
            name="Datacenter Example",
            location="us/las",
            description="datacenter description",
            sec_auth_protection=False)
        example1 = ionoscloud.compute.Lan("example_1",
            datacenter_id=example.id,
            public=True,
            name="Lan Example")
        example2 = ionoscloud.compute.Lan("example_2",
            datacenter_id=example.id,
            public=True,
            name="Lan Example")
        example_balancer = ionoscloud.alb.Balancer("example",
            datacenter_id=example.id,
            name="ALB Example",
            listener_lan=example1.id,
            ips=["10.12.118.224"],
            target_lan=example2.id,
            lb_private_ips=["10.13.72.225/24"])
        #optionally you can add a certificate to the application load balancer
        cert = ionoscloud.cert.Certificate("cert",
            name="add_name_here",
            certificate="your_certificate",
            certificate_chain="your_certificate_chain",
            private_key="your_private_key")
        example_forwarding_rule = ionoscloud.alb.ForwardingRule("example",
            datacenter_id=example.id,
            application_loadbalancer_id=example_balancer.id,
            name="ALB FR Example",
            protocol="HTTP",
            listener_ip="10.12.118.224",
            listener_port=8080,
            client_timeout=1000,
            http_rules=[
                {
                    "name": "http_rule",
                    "type": "REDIRECT",
                    "drop_query": True,
                    "location": "www.ionos.com",
                    "status_code": 301,
                    "conditions": [{
                        "type": "HEADER",
                        "condition": "EQUALS",
                        "negate": True,
                        "key": "key",
                        "value": "10.12.120.224/24",
                    }],
                },
                {
                    "name": "http_rule_2",
                    "type": "STATIC",
                    "drop_query": False,
                    "status_code": 303,
                    "response_message": "Response",
                    "content_type": "text/plain",
                    "conditions": [{
                        "type": "QUERY",
                        "condition": "MATCHES",
                        "negate": False,
                        "key": "key",
                        "value": "10.12.120.224/24",
                    }],
                },
            ],
            server_certificates=[cert.id])
        ```

        ## Import

        Resource Application Load Balancer Forwarding Rule can be imported using the `resource id`, `alb id` and `datacenter id`, e.g.

        ```sh
        $ pulumi import ionoscloud:alb/forwardingRule:ForwardingRule my_application_loadbalancer_forwardingrule datacenter uuid/application_loadbalancer uuid/application_loadbalancer_forwardingrule uuid
        ```

        :param str resource_name: The name of the resource.
        :param ForwardingRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ForwardingRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_loadbalancer_id: Optional[pulumi.Input[str]] = None,
                 client_timeout: Optional[pulumi.Input[int]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 http_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleHttpRuleArgs', 'ForwardingRuleHttpRuleArgsDict']]]]] = None,
                 listener_ip: Optional[pulumi.Input[str]] = None,
                 listener_port: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 server_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ForwardingRuleArgs.__new__(ForwardingRuleArgs)

            if application_loadbalancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_loadbalancer_id'")
            __props__.__dict__["application_loadbalancer_id"] = application_loadbalancer_id
            __props__.__dict__["client_timeout"] = client_timeout
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            __props__.__dict__["http_rules"] = http_rules
            if listener_ip is None and not opts.urn:
                raise TypeError("Missing required property 'listener_ip'")
            __props__.__dict__["listener_ip"] = listener_ip
            if listener_port is None and not opts.urn:
                raise TypeError("Missing required property 'listener_port'")
            __props__.__dict__["listener_port"] = listener_port
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["server_certificates"] = server_certificates
        super(ForwardingRule, __self__).__init__(
            'ionoscloud:alb/forwardingRule:ForwardingRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_loadbalancer_id: Optional[pulumi.Input[str]] = None,
            client_timeout: Optional[pulumi.Input[int]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            http_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleHttpRuleArgs', 'ForwardingRuleHttpRuleArgsDict']]]]] = None,
            listener_ip: Optional[pulumi.Input[str]] = None,
            listener_port: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            server_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ForwardingRule':
        """
        Get an existing ForwardingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_loadbalancer_id: [string] The ID of Application Load Balancer.
        :param pulumi.Input[int] client_timeout: [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
        :param pulumi.Input[str] datacenter_id: [string] The ID of a Virtual Data Center.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ForwardingRuleHttpRuleArgs', 'ForwardingRuleHttpRuleArgsDict']]]] http_rules: [list] Array of items in that collection
        :param pulumi.Input[str] listener_ip: [string] Listening (inbound) IP.
        :param pulumi.Input[int] listener_port: [int] Listening (inbound) port number; valid range is 1 to 65535.
        :param pulumi.Input[str] name: [string] The name of the Application Load Balancer forwarding rule.
        :param pulumi.Input[str] protocol: [string] Balancing protocol.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] server_certificates: [list] Array of certificate ids. You can create certificates with the certificate resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ForwardingRuleState.__new__(_ForwardingRuleState)

        __props__.__dict__["application_loadbalancer_id"] = application_loadbalancer_id
        __props__.__dict__["client_timeout"] = client_timeout
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["http_rules"] = http_rules
        __props__.__dict__["listener_ip"] = listener_ip
        __props__.__dict__["listener_port"] = listener_port
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["server_certificates"] = server_certificates
        return ForwardingRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationLoadbalancerId")
    def application_loadbalancer_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of Application Load Balancer.
        """
        return pulumi.get(self, "application_loadbalancer_id")

    @property
    @pulumi.getter(name="clientTimeout")
    def client_timeout(self) -> pulumi.Output[int]:
        """
        [int] The maximum time in milliseconds to wait for the client to acknowledge or send data; default is 50,000 (50 seconds).
        """
        return pulumi.get(self, "client_timeout")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        [string] The ID of a Virtual Data Center.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="httpRules")
    def http_rules(self) -> pulumi.Output[Optional[Sequence['outputs.ForwardingRuleHttpRule']]]:
        """
        [list] Array of items in that collection
        """
        return pulumi.get(self, "http_rules")

    @property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> pulumi.Output[str]:
        """
        [string] Listening (inbound) IP.
        """
        return pulumi.get(self, "listener_ip")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> pulumi.Output[int]:
        """
        [int] Listening (inbound) port number; valid range is 1 to 65535.
        """
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        [string] The name of the Application Load Balancer forwarding rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        [string] Balancing protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        [list] Array of certificate ids. You can create certificates with the certificate resource.
        """
        return pulumi.get(self, "server_certificates")

