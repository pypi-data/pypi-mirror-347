Metadata-Version: 2.4
Name: spatialbound
Version: 0.0.6
Summary: Spatialbound API client library
Home-page: https://github.com/spatialbound/spatialbound_api
Author: Mohamed R. Ibrahim
Author-email: contact@spatialbound.com
Project-URL: Bug Tracker, https://github.com/spatialbound/spatialbound_api/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: requests>=2.25.0
Requires-Dist: python-dotenv>=0.15.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary


# SpatialBound API Client Library

A Python client library for the SpatialBound SDK API, providing access to spatial AI and analytics, mapping, geocoding, routing, raw video streams to structured geospatial database, and environmental data services.

## Installation

```shell
pip install spatialbound
```

## Getting Started

Initialize the client with your API key:

```shell
from spatialbound import Spatialbound
```

## Initialize with your API key

```shell
spatialbound = Spatialbound(api_key)
```

## View login response

```shell
print("Login Response:", spatialbound.login_response)
Features and Examples
```

##  Map Generation
Create grid maps for specific areas:

```shell
# Generate a map ID
map_id_response = spatialbound.generate_map_id()
map_id = map_id_response.get('map_id')
print(f"Generated map ID: {map_id}")
```

## Create a grid map for Central London

```shell
london_bbox = "51.505,-0.155,51.520,-0.130"  # Central London bounding box
grid_map = spatialbound.create_map(
    map_id=f"{map_id}_grid",
    layers=["green_spaces", "water", "residential"],
    grid_or_vector="grid",
    grid_type="square",
    resolution=100,
    boundary_type="bbox",
    boundary_details=london_bbox,
    operation="visualisation"
)
print(f"Grid map created: {grid_map.get('message')}")
print(f"Number of features: {len(grid_map.get('data', {}).get('features', []))}")
```

## Geocoding
Convert addresses to coordinates:

```shell
# Convert address to lat/lon
address = "SW1A 0AA"  # Houses of Parliament
address_coords = spatialbound.address_to_latlon(address)
print(f"Coordinates for {address}: {address_coords}")
```

## Conversational AI
Ask questions about locations:

```shell
# Ask a question via chat
chat_response = spatialbound.chat("How to go to London Heathrow airport from Notting Hill, London, UK, driving?")
print(f"Chat response: {chat_response}")
```

## Navigation and Routing
Calculate routes between locations:

```shell
# Create a route between multiple points
origin_address = "London Eye, London, UK"
destination_addresses = [
    "British Museum, London, UK",
    "Tower of London, London, UK"
]

address_route = spatialbound.navigate(
    route_type="address",
    origin=origin_address,
    destinations=destination_addresses,
    optimisation_type="shortest_path",  # Route through parks and green areas
    mode_of_travel="walk"
)
print('route', address_route)
```


## Location Analysis
Analyze residential locations:

```shell
# Analyze residential location by address
residential_analysis = spatialbound.analyse_location(
    location_type="home",  
    address="221B Baker Street, London",
    transaction_type="rent",
    radius=400
)
print(residential_analysis)

# Analyze commercial location
commercial_analysis = spatialbound.analyse_location(
    location_type="business",
    postcode="EC2A 4BX",  # Shoreditch, London
    business_type="restaurant",
    transaction_type="rent",
    radius=500
)
print(commercial_analysis)

# Analyze location using coordinates
coordinate_analysis = spatialbound.analyse_location(
    location_type="home",
    location={"lat": 51.5074, "lng": -0.1278},  # Central London coordinates
    transaction_type="buy"
)
print(coordinate_analysis)
```



## Video analysis 
Upload and analyze videos, search for specific content, and identify locations:

```shell
# Upload a video file
upload_response = spatialbound.upload_video("brixton.mp4")
video_url = upload_response.get("video_url")
print("Uploaded video URL:", video_url)

# Analyze the uploaded video
analysis = spatialbound.analyse_video(
    video_url=video_url,
    user_prompt="Count vehicles, identify weather conditions, detect road signs",
    fps=1  # Process 1 frame per second
)
print(analysis)

# Search for specific content in a video
search_results = spatialbound.search_video(
    query="red cars at intersection",
    video_url=video_url,
    limit=5,
    search_mode="semantic"
)
print(search_results)

# Find similarities to a specific timestamp
similar_moments = spatialbound.find_similarities(
    video_url=video_url,
    timestamp=45.2,  # 45.2 seconds into the video
    limit=3,
    threshold=0.8
)
print(similar_moments)

# Find an image in a video
image_occurrences = spatialbound.find_image_in_video(
    image_path="image.png",
    video_url=video_url,
    threshold=0.75
)
print(image_occurrences)
```


## Weather Data
Get current weather information:

```shell
# Get weather data for London
london_coords = (51.5074, -0.1278)  # London coordinates
weather_data = spatialbound.get_weather(london_coords[0], london_coords[1])
print(weather_data)

```


## Air Quality Data
Retrieve air quality metrics:

```shell
# Get air quality data
ny_coords = (40.7128, -74.0060)  # New York coordinates
air_quality = spatialbound.get_air_quality(ny_coords[0], ny_coords[1])
print(air_quality)

```


## Library Structure

```shell
spatialbound/
│
├── MANIFEST.in
├── spatialbound/
│ ├── __init__.py
│ ├── spatialbound.py
│ ├── api_handler.py
│ ├── route_calculator.py
│ ├── location_analyser.py
│ ├── video_analyser.py
│ ├── geocode_functions.py
│ ├── poi_handler.py
│ ├── chat_handler.py
│ ├── map_generator.py
│ ├── weather_handler.py
│ └── config.py
│
├── setup.py
└── README.md
```

## License

SpatialBound License

This proprietary software is the sole property of the copyright holder. You are granted permission to use this software solely in accordance to the terms and conditions of SpatialBound.
Under no circumstances may this software be copied, distributed, modified, or reused for any commercial purposes without explicit prior written consent from the copyright holder.
All rights reserved, including but not limited to distribution, modification, and use for commercial benefit outside the terms and conditions of SpatialBound.

## Support

For support, please contact contact@spatialbound.com
