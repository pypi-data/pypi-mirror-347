# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawFileEndpointsClient, RawFileEndpointsClient
from .types.post_files_response import PostFilesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FileEndpointsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFileEndpointsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFileEndpointsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFileEndpointsClient
        """
        return self._raw_client

    def create_file(
        self,
        *,
        name: str,
        url: typing.Optional[str] = OMIT,
        raw_text: typing.Optional[str] = OMIT,
        media_type: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostFilesResponse:
        """
        Create a new file in Extend for use in an evaluation set. This endpoint is deprecated, use /files/upload instead.

        Parameters
        ----------
        name : str
            The name of the file

        url : typing.Optional[str]
            A pre signed URL for the file

        raw_text : typing.Optional[str]
            The raw text content of the file

        media_type : typing.Optional[str]
            The media type of the file (e.g. application/pdf)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostFilesResponse
            Successfully created file

        Examples
        --------
        from extend_ai import Extend
        client = Extend(extend_api_version="YOUR_EXTEND_API_VERSION", token="YOUR_TOKEN", )
        client.file_endpoints.create_file(name='name', )
        """
        _response = self._raw_client.create_file(
            name=name, url=url, raw_text=raw_text, media_type=media_type, request_options=request_options
        )
        return _response.data


class AsyncFileEndpointsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFileEndpointsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFileEndpointsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFileEndpointsClient
        """
        return self._raw_client

    async def create_file(
        self,
        *,
        name: str,
        url: typing.Optional[str] = OMIT,
        raw_text: typing.Optional[str] = OMIT,
        media_type: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostFilesResponse:
        """
        Create a new file in Extend for use in an evaluation set. This endpoint is deprecated, use /files/upload instead.

        Parameters
        ----------
        name : str
            The name of the file

        url : typing.Optional[str]
            A pre signed URL for the file

        raw_text : typing.Optional[str]
            The raw text content of the file

        media_type : typing.Optional[str]
            The media type of the file (e.g. application/pdf)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostFilesResponse
            Successfully created file

        Examples
        --------
        from extend_ai import AsyncExtend
        import asyncio
        client = AsyncExtend(extend_api_version="YOUR_EXTEND_API_VERSION", token="YOUR_TOKEN", )
        async def main() -> None:
            await client.file_endpoints.create_file(name='name', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_file(
            name=name, url=url, raw_text=raw_text, media_type=media_type, request_options=request_options
        )
        return _response.data
