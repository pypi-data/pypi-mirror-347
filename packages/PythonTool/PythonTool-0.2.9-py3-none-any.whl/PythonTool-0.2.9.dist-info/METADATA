Metadata-Version: 2.1
Name: PythonTool
Version: 0.2.9
Summary: A package for tools in Python
Author: Zhu Chongjing
Author-email: tommy1008@dingtalk.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: manim

# 导入

```python
from PythonTool import *
```

`PythonTool`依赖库，`manim`

***发现任何bug或问题，请反馈到tommy1008@dingtalk.com，谢谢！** 

```bash
pip install --upgrade PythonTool
```

记得更新`PythonTool`！

---

## $\text{Manim}$工具

了解更多详情，请前往[$\text{Manim Community}$](https://www.manim.community)

### 公式与图形

```python
def ChineseMathTex(*texts, font="SimSun", tex_to_color_map={}, **kwargs):
```

创建中文数学公式，在此函数的公式部分和`tex_to_color_map`中直接写入中文即可，无需包裹`\text{}`，返回`MathTex()`。`font`，设置公式中的中文字体。所有原版`MathTex()`参数都可使用。

```python
def YellowLine(**kwargs):
```

创建黄色的`Line()`，所有原版参数都可使用。

```python
def LabelDot(dot_label, dot_pos, label_pos=DOWN, buff=0.1):
```

创建一个带有名字的点，返回带有点和名字的`VGroup()`。`dot_label`，点的名字，字符串。`dot_pos`，点的位置，位置列表`[x,y,z]`。`label_pos`，点的名字相对于点的位置，$\text{Manim}$中的八个方向。`buff`，点的名字与点的间距，数值。

```python
def MathTexLine(mathtex: MathTex, direction=UP, buff=0.5, **kwargs):
def MathTexBrace(mathtex: MathTex, direction=UP, buff=0.5, **kwargs):
def MathTexDoublearrow(mathtex: MathTex, direction=UP, buff=0.5, **kwargs):
```

创建可以标注内容的图形，返回带有线和标注内容的`VGroup()`。`mathtex`，标注的公式，`MathTex()`类型。`direction`，标注内容相对于线的位置，八个方向。`buff`，标注内容与线的间距，数值。图形的所有原版参数都可使用。

```python
def ExtendedLine(line: Line, extend_distance: float) -> Line:
```

将一条线延长`extend_distance`的距离，返回延长后的`Line()`。`line`，`Line()`类型。`extend_distance`，要延长的距离，数值。

### 交点

```python
def CircleInt(circle1, circle2):
```

寻找两个圆的两个交点并返回`Dot()`，如果没有交点会返回`None`。

```python
def LineCircleInt(line, circle):
```

寻找一条线和一个圆的一个或两个交点并返回`Dot()`，如果没有交点会返回`None`。

```python
def LineInt(line1: Line, line2: Line) -> Optional[Tuple[float, float]]:
```

寻找两条线的一个交点并返回`Dot()`，如果没有交点会返回`None`。

### 动画

```python
def VisDrawArc(scene: Scene, p1, p2, angle=PI, axis=OUT):
```

 创建可视化的绘弧动画。显示圆心、半径等，返回绘制的`Arc()`，便于之后动画的使用。`scene`，动画场景。`p1`， 代表圆规的针，绘制时不动的点，`numpy.ndarray`类型，即`Dot(...).get_center()`得到的结果。`p2`，代表圆规的笔芯，绘制圆弧的点，与`p1`类型相同。`angle`，绘制圆弧的角度，默认`PI`，相当于绘制半个圆。`axis`，只有2个值`IN`和`OUT`，分别表示顺时针还是逆时针作弧。

---

## 排序工具

```python
def sort(arr: List[Any], key: Callable[[Any], Any] = lambda x: x, reverse: bool = False) -> None:

# 示例代码
numbers = [-5, 3, -2, 1, 4]
sort(numbers, key=abs)  # 使用内置的 abs 函数作为 key ，即以绝对值大小排序
print(numbers)
# 输出
[1, -2, 3, 4, -5]
```

内省排序`Introsort`，C++`<algorithm>`中的`sort()`使用的排序方法，结合了多种排序算法的优点，以确保在各种情况下都能获得高效的性能，不返回列表。`arr`，待排序的列表。`key`，用于比较的键函数，自定义排序规则，而不必修改原始数据。`reverse`，是否降序排列，默认为升序。


