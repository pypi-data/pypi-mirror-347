Metadata-Version: 2.4
Name: mcp-aws-level-checker
Version: 0.1.0
Summary: AWS技術ブログのレベルを分析するMCPサーバー
Project-URL: Homepage, https://github.com/yourusername/mcp-aws-level-checker
Project-URL: Bug Tracker, https://github.com/yourusername/mcp-aws-level-checker/issues
Author-email: Your Name <your.email@example.com>
License: MIT License
        
        Copyright (c) 2025 みのるん
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Requires-Dist: mcp[cli]>=1.2.0
Description-Content-Type: text/markdown

# AWSレベル判定くん MCPサーバー版

AWS技術ブログの内容を分析し、レベルを判定するMCPサーバーです。

大好評のうちにサービス終了となった [#AWSレベル判定くん](https://github.com/minorun365/aws-level-checker) の魂を継いでいます。

![利用イメージ](https://github.com/user-attachments/assets/3fe16c5a-85ee-4eb7-a4cb-23ab202b1a7c)

## 概要

このMCPサーバーは、AWS技術ブログの内容を分析し、以下の4つのレベルのいずれかに判定します：

- **Level 100**: AWSサービスの概要を解説するレベル
- **Level 200**: トピックの入門知識を持っていることを前提に、ベストプラクティス、サービス機能を解説するレベル
- **Level 300**: 対象のトピックの詳細を解説するレベル
- **Level 400**: 複数のサービス、アーキテクチャによる実装でテクノロジーがどのように機能するかを解説するレベル

## インストール

### `uvx`を使用する方法（推奨）

[`uv`](https://docs.astral.sh/uv/)を使用する場合、特別なインストールは不要です。[`uvx`](https://docs.astral.sh/uv/guides/tools/)を使って直接実行できます：

```bash
uvx mcp-aws-level-checker
```

### PyPI経由でインストールする方法

pip を使用してインストールすることもできます：

```bash
pip install mcp-aws-level-checker
```

インストール後は、次のコマンドで実行できます：

```bash
python -m mcp_aws_level_checker
```

## 設定方法

### Claude.app での設定

Claude の設定に以下を追加してください：

#### uvx を使用する場合

```json
"mcpServers": {
  "aws-level-checker": {
    "command": "uvx",
    "args": ["mcp-aws-level-checker"]
  }
}
```

#### pip でインストールした場合

```json
"mcpServers": {
  "aws-level-checker": {
    "command": "python",
    "args": ["-m", "mcp_aws_level_checker"]
  }
}
```

### VS Code での設定

VS Code の設定ファイルに以下を追加してください。`Ctrl + Shift + P` を押して、`Preferences: Open User Settings (JSON)` と入力することで設定ファイルを開けます。

あるいは、`.vscode/mcp.json` ファイルをワークスペースに作成することで、設定を他のユーザーと共有できます。

> `.vscode/mcp.json` ファイルを使用する場合は、`mcp` キーが必要です。

#### uvx を使用する場合

```json
{
  "mcp": {
    "servers": {
      "aws-level-checker": {
        "command": "uvx",
        "args": ["mcp-aws-level-checker"]
      }
    }
  }
}
```

#### pip でインストールした場合

```json
{
  "mcp": {
    "servers": {
      "aws-level-checker": {
        "command": "python",
        "args": ["-m", "mcp_aws_level_checker"]
      }
    }
  }
}
```

## MCPサーバー仕様

- ツール名： `analyze_aws_blog`
- 入力形式：AWSブログ記事のテキスト全文
- 出力形式：以下のとおり

```
レベル: [判定したレベル (100/200/300/400)]
判定理由: [判定理由の詳細説明]
```

## ヒント

[Fetch](https://github.com/modelcontextprotocol/servers/tree/main/src/fetch)と組み合わせて使うと便利です。

## 開発

### ローカルでの実行

このリポジトリをクローンして開発する場合：

```bash
# このリポジトリのクローン
git clone https://github.com/yourusername/mcp-aws-level-checker
cd mcp-aws-level-checker

# 仮想環境の作成と有効化
python -m venv .venv
source .venv/bin/activate  # Windows: .venv\Scripts\activate

# 開発モードでインストール
pip install -e .
```

### パッケージのビルド

```bash
pip install build
python -m build
```

### PyPI への公開

```bash
pip install twine
python -m twine upload dist/*
```

## ライセンス

MIT ライセンスで公開されています。詳しくはLICENSEファイルをご覧ください。
