[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "paramkit"
version = "0.2.9"
authors = [{ name = "Dylan", email = "cgq2012516@gmail.com" }]
description = "A parameter management toolkit for Python"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
keywords = ["parameters", "configuration", "management"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"]
dependencies = [
    # 新添加的依赖
    "peewee >= 3.1.0",
    "mdutils >=1.5.0",
    "typing-extensions >=4.0.0; python_version < '3.8'"]

[project.optional-dependencies]
test = ["pytest>=7.0", "pytest-cov"]
dev = ["black", "flake8", "mypy", "isort", "pylint", "pycln"]

[project.urls]
Homepage = "https://github.com/Dyaln2012516/paramkit"
Documentation = "https://github.com/Dyaln2012516/paramkit/blob/main/README.md"
Issues = "https://github.com/Dyaln2012516/paramkit/issues"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-data]
"paramkit" = ["docs/static/**/*", 'docs/static/**/.*']

[project.scripts]
paramkit = "paramkit.cli:main"

# ========== Code Quality Tools ==========

[tool.black]
line-length = 128
target-version = ["py310"]
skip-string-normalization = true

[tool.isort]
profile = "black"
line_length = 128
known_third_party = ["pytest", "django", "requests"]
multi_line_output = 3
include_trailing_comma = true
combine_as_imports = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 128
extend-ignore = [
    "E203", # Space related rule conflict
    "W503", # Operator position
    "E501", # Line length (handled by black)
    "W291", # handled by black
    # Unused imports (handled by pycln)
    "F401",
    "C901"]
max-complexity = 12  # Increase cyclomatic complexity threshold
per-file-ignores = [
    "__init__.py:F401",
    # Allow assert in test cases
    "tests/*:S101"]
exclude = [
    ".git",
    ".venv",
    "build",
    "dist",
    "migrations"]

[tool.mypy]
python_version = "3.10"
#strict = true
check_untyped_defs = true
disallow_any_generics = true
warn_unused_configs = true
show_error_codes = true
ignore_missing_imports = true
disable_error_code = ["no-untyped-def", "no-untyped-call", " type-arg", "assignment"]
exclude = ["tests/.*", "migrations/.*"]

# Peewee类型提示补丁
[mypy-peewee."*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["django.*", "sqlalchemy.*"]
ignore_errors = true

[tool.pylint]
max-line-length = 128
max-args = 16
max-locals = 16
max-attributes = 16
good-names = ["id", "url", "db", "api", "pk", "uid", "tmp", "obj", "args", "kwargs"]

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "import-error",
    "no-member",
    "invalid-name",
    "fixme",
    "implicit-str-concat",
    "unused-argument"]

[tool.pylint.DESIGN]
max-parents = 6
min-public-methods = 1

[tool.pylint.FORMAT]
max-module-lines = 1200

[tool.pycln]
all = true
skip-imports = ["__init__"]
exclude = ["migrations/*", "legacy/*"]

[tool.coverage.run]
branch = true
source = ["paramkit"]
omit = ["tests/*", "migrations/*", "**/__init__.py"]

[tool.coverage.report]
show_missing = true
fail_under = 85

[tool.pytest.ini_options]
addopts = "--cov=paramkit --cov-report=term-missing --cov-fail-under=85"
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"]

# ========== pre-commit Configuration ==========

[tool.pre_commit]
repos = [
    { repo = "local", hooks = [
        { id = "pycln", name = "Pycln - Clean Unused Imports", entry = "pycln -a", language = "python", types = ["python"] },
        { id = "isort", name = "isort - Sort Imports", entry = "isort", language = "python", types = ["python"] },
        { id = "black", name = "Black - Code Formatting", entry = "black", language = "python", types = ["python"] },
        { id = "flake8", name = "Flake8 - Basic Checks", entry = "flake8", language = "python", types = ["python"] },
        { id = "pylint", name = "Pylint - Code Quality", entry = "pylint", language = "python", types = ["python"], args = ["--rcfile=pyproject.toml", "--jobs=0"] },
        { id = "mypy", name = "Mypy - Static Types", entry = "mypy", language = "python", types = ["python"] }
    ] }]