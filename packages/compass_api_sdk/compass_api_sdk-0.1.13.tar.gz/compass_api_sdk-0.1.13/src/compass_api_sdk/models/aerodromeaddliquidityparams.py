"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


AmountADesiredTypedDict = TypeAliasType("AmountADesiredTypedDict", Union[float, str])
r"""The amount of token A you want to provide"""


AmountADesired = TypeAliasType("AmountADesired", Union[float, str])
r"""The amount of token A you want to provide"""


AmountBDesiredTypedDict = TypeAliasType("AmountBDesiredTypedDict", Union[float, str])
r"""The amount of token B you want to provide"""


AmountBDesired = TypeAliasType("AmountBDesired", Union[float, str])
r"""The amount of token B you want to provide"""


AerodromeAddLiquidityParamsAmountAMinTypedDict = TypeAliasType(
    "AerodromeAddLiquidityParamsAmountAMinTypedDict", Union[float, str]
)
r"""The minimal amount of token A you are willing to provide"""


AerodromeAddLiquidityParamsAmountAMin = TypeAliasType(
    "AerodromeAddLiquidityParamsAmountAMin", Union[float, str]
)
r"""The minimal amount of token A you are willing to provide"""


AerodromeAddLiquidityParamsAmountBMinTypedDict = TypeAliasType(
    "AerodromeAddLiquidityParamsAmountBMinTypedDict", Union[float, str]
)
r"""The minimal amount of token B you are willing to provide"""


AerodromeAddLiquidityParamsAmountBMin = TypeAliasType(
    "AerodromeAddLiquidityParamsAmountBMin", Union[float, str]
)
r"""The minimal amount of token B you are willing to provide"""


class AerodromeAddLiquidityParamsTypedDict(TypedDict):
    r"""Endpoint parameters for adding liquidity on Aerodrome Basic.

    This action is performed on the Aerodrome Basic Router to add liquidity to a pool.
    """

    token_a: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    token_b: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    stable: bool
    r"""If true, try to provide liquidity on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to provide liquidity on a volatile pool with a bonding curve of K=xy"""
    amount_a_desired: AmountADesiredTypedDict
    r"""The amount of token A you want to provide"""
    amount_b_desired: AmountBDesiredTypedDict
    r"""The amount of token B you want to provide"""
    amount_a_min: AerodromeAddLiquidityParamsAmountAMinTypedDict
    r"""The minimal amount of token A you are willing to provide"""
    amount_b_min: AerodromeAddLiquidityParamsAmountBMinTypedDict
    r"""The minimal amount of token B you are willing to provide"""
    deadline: Nullable[int]
    r"""The deadline for this transaction in seconds since epoch"""
    to: NotRequired[Nullable[str]]
    r"""The receiver of the LP tokens from this trade, default to sender"""


class AerodromeAddLiquidityParams(BaseModel):
    r"""Endpoint parameters for adding liquidity on Aerodrome Basic.

    This action is performed on the Aerodrome Basic Router to add liquidity to a pool.
    """

    token_a: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    token_b: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    stable: bool
    r"""If true, try to provide liquidity on a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to provide liquidity on a volatile pool with a bonding curve of K=xy"""

    amount_a_desired: AmountADesired
    r"""The amount of token A you want to provide"""

    amount_b_desired: AmountBDesired
    r"""The amount of token B you want to provide"""

    amount_a_min: AerodromeAddLiquidityParamsAmountAMin
    r"""The minimal amount of token A you are willing to provide"""

    amount_b_min: AerodromeAddLiquidityParamsAmountBMin
    r"""The minimal amount of token B you are willing to provide"""

    deadline: Nullable[int]
    r"""The deadline for this transaction in seconds since epoch"""

    to: OptionalNullable[str] = UNSET
    r"""The receiver of the LP tokens from this trade, default to sender"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["to"]
        nullable_fields = ["to", "deadline"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
