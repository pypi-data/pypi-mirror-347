"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chain import Chain
from .token_enum import TokenEnum
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


AerodromeRemoveLiquidityRequestLiquidityTypedDict = TypeAliasType(
    "AerodromeRemoveLiquidityRequestLiquidityTypedDict", Union[float, str]
)
r"""The amount of liquidity you want to remove"""


AerodromeRemoveLiquidityRequestLiquidity = TypeAliasType(
    "AerodromeRemoveLiquidityRequestLiquidity", Union[float, str]
)
r"""The amount of liquidity you want to remove"""


AerodromeRemoveLiquidityRequestAmountAMinTypedDict = TypeAliasType(
    "AerodromeRemoveLiquidityRequestAmountAMinTypedDict", Union[float, str]
)
r"""The minimal amount of token A you are willing to receive"""


AerodromeRemoveLiquidityRequestAmountAMin = TypeAliasType(
    "AerodromeRemoveLiquidityRequestAmountAMin", Union[float, str]
)
r"""The minimal amount of token A you are willing to receive"""


AerodromeRemoveLiquidityRequestAmountBMinTypedDict = TypeAliasType(
    "AerodromeRemoveLiquidityRequestAmountBMinTypedDict", Union[float, str]
)
r"""The minimal amount of token B you are willing to receive"""


AerodromeRemoveLiquidityRequestAmountBMin = TypeAliasType(
    "AerodromeRemoveLiquidityRequestAmountBMin", Union[float, str]
)
r"""The minimal amount of token B you are willing to receive"""


class AerodromeRemoveLiquidityRequestTypedDict(TypedDict):
    chain: Chain
    r"""The chain to use."""
    sender: str
    r"""The address of the transaction sender."""
    token_a: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    token_b: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    stable: bool
    r"""If true, try to remove liquidity from a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to remove liquidity from a volatile pool with a bonding curve of K=xy"""
    liquidity: AerodromeRemoveLiquidityRequestLiquidityTypedDict
    r"""The amount of liquidity you want to remove"""
    amount_a_min: AerodromeRemoveLiquidityRequestAmountAMinTypedDict
    r"""The minimal amount of token A you are willing to receive"""
    amount_b_min: AerodromeRemoveLiquidityRequestAmountBMinTypedDict
    r"""The minimal amount of token B you are willing to receive"""
    deadline: Nullable[int]
    r"""The deadline for this transaction in seconds since epoch"""
    to: NotRequired[Nullable[str]]
    r"""The receiver of the tokens from this liquidity removal, default to sender"""


class AerodromeRemoveLiquidityRequest(BaseModel):
    chain: Chain
    r"""The chain to use."""

    sender: str
    r"""The address of the transaction sender."""

    token_a: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    token_b: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    stable: bool
    r"""If true, try to remove liquidity from a stable pool with a bonding curve of K=x^3y+y^3x. If false, try to remove liquidity from a volatile pool with a bonding curve of K=xy"""

    liquidity: AerodromeRemoveLiquidityRequestLiquidity
    r"""The amount of liquidity you want to remove"""

    amount_a_min: AerodromeRemoveLiquidityRequestAmountAMin
    r"""The minimal amount of token A you are willing to receive"""

    amount_b_min: AerodromeRemoveLiquidityRequestAmountBMin
    r"""The minimal amount of token B you are willing to receive"""

    deadline: Nullable[int]
    r"""The deadline for this transaction in seconds since epoch"""

    to: OptionalNullable[str] = UNSET
    r"""The receiver of the tokens from this liquidity removal, default to sender"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["to"]
        nullable_fields = ["to", "deadline"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
