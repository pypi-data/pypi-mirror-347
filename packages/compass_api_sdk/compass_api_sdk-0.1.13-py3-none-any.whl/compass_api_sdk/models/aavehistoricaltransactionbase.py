"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .action import Action
from .borrow import Borrow, BorrowTypedDict
from .liquidationcall import LiquidationCall, LiquidationCallTypedDict
from .redeemunderlying import RedeemUnderlying, RedeemUnderlyingTypedDict
from .repay import Repay, RepayTypedDict
from .supply import Supply, SupplyTypedDict
from .swapborrowrate import SwapBorrowRate, SwapBorrowRateTypedDict
from .usageascollateral import UsageAsCollateral, UsageAsCollateralTypedDict
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class AaveHistoricalTransactionBaseTypedDict(TypedDict):
    id: str
    timestamp: int
    tx_hash: str
    action: Action
    supply: NotRequired[Nullable[SupplyTypedDict]]
    redeem_underlying: NotRequired[Nullable[RedeemUnderlyingTypedDict]]
    borrow: NotRequired[Nullable[BorrowTypedDict]]
    usage_as_collateral: NotRequired[Nullable[UsageAsCollateralTypedDict]]
    repay: NotRequired[Nullable[RepayTypedDict]]
    swap_borrow_rate: NotRequired[Nullable[SwapBorrowRateTypedDict]]
    liquidation_call: NotRequired[Nullable[LiquidationCallTypedDict]]


class AaveHistoricalTransactionBase(BaseModel):
    id: str

    timestamp: int

    tx_hash: Annotated[str, pydantic.Field(alias="txHash")]

    action: Action

    supply: OptionalNullable[Supply] = UNSET

    redeem_underlying: Annotated[
        OptionalNullable[RedeemUnderlying], pydantic.Field(alias="redeemUnderlying")
    ] = UNSET

    borrow: OptionalNullable[Borrow] = UNSET

    usage_as_collateral: Annotated[
        OptionalNullable[UsageAsCollateral], pydantic.Field(alias="usageAsCollateral")
    ] = UNSET

    repay: OptionalNullable[Repay] = UNSET

    swap_borrow_rate: Annotated[
        OptionalNullable[SwapBorrowRate], pydantic.Field(alias="swapBorrowRate")
    ] = UNSET

    liquidation_call: Annotated[
        OptionalNullable[LiquidationCall], pydantic.Field(alias="liquidationCall")
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "supply",
            "redeemUnderlying",
            "borrow",
            "usageAsCollateral",
            "repay",
            "swapBorrowRate",
            "liquidationCall",
        ]
        nullable_fields = [
            "supply",
            "redeemUnderlying",
            "borrow",
            "usageAsCollateral",
            "repay",
            "swapBorrowRate",
            "liquidationCall",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
