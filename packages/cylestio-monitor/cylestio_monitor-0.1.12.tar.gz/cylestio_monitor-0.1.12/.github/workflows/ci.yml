name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev,test,security]"

      - name: Run tests
        run: |
          pytest

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[security]"
          pip install bandit detect-secrets pip-audit semgrep

      - name: Create security reports directory
        run: mkdir -p security-reports

      - name: Run bandit
        run: bandit -r src -s B110,B311,B404,B603,B324 --severity-level medium --confidence-level medium
        continue-on-error: true

      - name: Check dependencies with pip-audit
        run: |
          pip-audit --format json --output security-reports/dependency-audit.json || true

          # Display critical vulnerabilities in log
          echo "Critical vulnerabilities found:"
          jq '.vulnerabilities[] | select(.severity=="critical")' security-reports/dependency-audit.json || echo "None found"

      - name: Run detect-secrets scan
        run: |
          # Create baseline if it doesn't exist
          if [ ! -f .secrets.baseline ]; then
            detect-secrets scan > .secrets.baseline
          fi

          # Run scan in informational mode
          detect-secrets scan --baseline .secrets.baseline > security-reports/secrets-scan.json

          # Show warning if secrets found
          if grep -q "results" security-reports/secrets-scan.json && ! grep -q "results\": {}" security-reports/secrets-scan.json; then
            echo "WARNING: Potential secrets found. Please review."
          fi

      - name: Run basic Semgrep scan
        run: |
          # Run with minimal rule sets
          semgrep --config=p/python --config=p/security-audit src/ \
            --json > security-reports/semgrep-results.json

          # Show critical findings
          echo "Critical security issues found:"
          jq '.results[] | select(.extra.severity == "ERROR")' security-reports/semgrep-results.json || echo "None found"

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'cylestio-monitor'
          path: '.'
          format: 'HTML'
          args: >
            --enableExperimental
            --enableRetired
            --failOnCVSS 9
            --suppression suppression.xml
        continue-on-error: true

      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports

      - name: Check for PyPI package name availability
        run: |
          pip install pip-api
          python -c "import pip_api; print('Package name check passed' if 'cylestio-monitor' in pip_api.installed_distributions() or 'cylestio-monitor' not in pip_api.available_packages() else 'Package exists but not owned by you')"
        continue-on-error: true

      - name: Verify package can be installed
        run: |
          # Create a temporary directory for test installation
          mkdir -p /tmp/package-test
          cd /tmp/package-test

          # Create virtual environment
          python -m venv venv
          source venv/bin/activate

          # Try to install the package from local build
          cd $GITHUB_WORKSPACE
          pip install build
          python -m build
          pip install dist/*.whl

          # Verify the package can be imported
          python -c "import cylestio_monitor; print('Package installed successfully')"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: security-reports/
