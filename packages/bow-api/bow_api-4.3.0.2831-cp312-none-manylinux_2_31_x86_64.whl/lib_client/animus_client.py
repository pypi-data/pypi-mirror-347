# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _animus_client
else:
    import _animus_client

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _animus_client.SWIG_PyInstanceMethod_New
_swig_new_static_method = _animus_client.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


cdata = _animus_client.cdata
memmove = _animus_client.memmove
class _GoString_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p = property(_animus_client._GoString__p_get, _animus_client._GoString__p_set)
    n = property(_animus_client._GoString__n_get, _animus_client._GoString__n_set)

    def __init__(self):
        _animus_client._GoString__swiginit(self, _animus_client.new__GoString_())
    __swig_destroy__ = _animus_client.delete__GoString_

# Register _GoString_ in _animus_client:
_animus_client._GoString__swigregister(_GoString_)

class ProtoMessageC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    len = property(_animus_client.ProtoMessageC_len_get, _animus_client.ProtoMessageC_len_set)
    data = property(_animus_client.ProtoMessageC_data_get, _animus_client.ProtoMessageC_data_set)

    def __init__(self):
        _animus_client.ProtoMessageC_swiginit(self, _animus_client.new_ProtoMessageC())
    __swig_destroy__ = _animus_client.delete_ProtoMessageC

# Register ProtoMessageC in _animus_client:
_animus_client.ProtoMessageC_swigregister(ProtoMessageC)

class GoInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t = property(_animus_client.GoInterface_t_get, _animus_client.GoInterface_t_set)
    v = property(_animus_client.GoInterface_v_get, _animus_client.GoInterface_v_set)

    def __init__(self):
        _animus_client.GoInterface_swiginit(self, _animus_client.new_GoInterface())
    __swig_destroy__ = _animus_client.delete_GoInterface

# Register GoInterface in _animus_client:
_animus_client.GoInterface_swigregister(GoInterface)

class GoSlice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_animus_client.GoSlice_data_get, _animus_client.GoSlice_data_set)
    len = property(_animus_client.GoSlice_len_get, _animus_client.GoSlice_len_set)
    cap = property(_animus_client.GoSlice_cap_get, _animus_client.GoSlice_cap_set)

    def __init__(self):
        _animus_client.GoSlice_swiginit(self, _animus_client.new_GoSlice())
    __swig_destroy__ = _animus_client.delete_GoSlice

# Register GoSlice in _animus_client:
_animus_client.GoSlice_swigregister(GoSlice)

VersionGo = _animus_client.VersionGo
SetupGo = _animus_client.SetupGo
LoginUserGo = _animus_client.LoginUserGo
GetRobotsGo = _animus_client.GetRobotsGo
ConnectGo = _animus_client.ConnectGo
OpenModalityGo = _animus_client.OpenModalityGo
SetModalityGo = _animus_client.SetModalityGo
GetModalityGo = _animus_client.GetModalityGo
UpdateTextureGo = _animus_client.UpdateTextureGo
CloseModalityGo = _animus_client.CloseModalityGo
DisconnectGo = _animus_client.DisconnectGo
CloseClientInterfaceGo = _animus_client.CloseClientInterfaceGo
Setup = _animus_client.Setup
LoginUser = _animus_client.LoginUser
GetRobots = _animus_client.GetRobots
Connect = _animus_client.Connect
OpenModality = _animus_client.OpenModality
SetModality = _animus_client.SetModality
UpdateTexture = _animus_client.UpdateTexture
GetModality = _animus_client.GetModality
CloseModality = _animus_client.CloseModality
Disconnect = _animus_client.Disconnect


