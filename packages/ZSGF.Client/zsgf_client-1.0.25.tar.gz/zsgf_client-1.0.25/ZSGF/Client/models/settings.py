# coding: utf-8

"""
    全部  API 文档

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Settings(BaseModel):
    """
    公共配置存储实体，用于集中管理系统的配置项。
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="配置项的唯一标识符。")
    biz_code: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="配置项所属的业务代码，用于分类管理。", alias="bizCode")
    biz_identity: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="配置项所属的业务标识，用于唯一标识业务。", alias="bizIdentity")
    provider_code: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="配置项的提供者代码，用于标识配置来源。", alias="providerCode")
    group_code: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="配置项的分组代码，用于组织和管理相关配置。", alias="groupCode")
    code: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="配置项的唯一代码，用于标识具体的配置项。")
    value: Optional[StrictStr] = Field(default=None, description="配置项的具体值，存储配置内容。")
    tags: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="用于分类或标记配置项的标签。")
    description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="配置项的详细描述，说明其用途和作用。")
    frontend_usable: Optional[StrictBool] = Field(default=None, description="指示该配置项是否可供前端使用。", alias="frontendUsable")
    create_date: Optional[datetime] = Field(default=None, description="配置项的创建日期，默认为当前时间。", alias="createDate")
    last_update: Optional[datetime] = Field(default=None, description="配置项的最后更新日期，默认为当前时间。", alias="lastUpdate")
    __properties: ClassVar[List[str]] = ["id", "bizCode", "bizIdentity", "providerCode", "groupCode", "code", "value", "tags", "description", "frontendUsable", "createDate", "lastUpdate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if biz_code (nullable) is None
        # and model_fields_set contains the field
        if self.biz_code is None and "biz_code" in self.model_fields_set:
            _dict['bizCode'] = None

        # set to None if biz_identity (nullable) is None
        # and model_fields_set contains the field
        if self.biz_identity is None and "biz_identity" in self.model_fields_set:
            _dict['bizIdentity'] = None

        # set to None if provider_code (nullable) is None
        # and model_fields_set contains the field
        if self.provider_code is None and "provider_code" in self.model_fields_set:
            _dict['providerCode'] = None

        # set to None if group_code (nullable) is None
        # and model_fields_set contains the field
        if self.group_code is None and "group_code" in self.model_fields_set:
            _dict['groupCode'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "bizCode": obj.get("bizCode"),
            "bizIdentity": obj.get("bizIdentity"),
            "providerCode": obj.get("providerCode"),
            "groupCode": obj.get("groupCode"),
            "code": obj.get("code"),
            "value": obj.get("value"),
            "tags": obj.get("tags"),
            "description": obj.get("description"),
            "frontendUsable": obj.get("frontendUsable"),
            "createDate": obj.get("createDate"),
            "lastUpdate": obj.get("lastUpdate")
        })
        return _obj


