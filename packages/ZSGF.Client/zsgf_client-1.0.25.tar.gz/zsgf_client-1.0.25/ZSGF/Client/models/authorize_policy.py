# coding: utf-8

"""
    全部  API 文档

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AuthorizePolicy(BaseModel):
    """
    鉴权策略实体，用于定义和管理系统的鉴权规则。
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="鉴权策略的唯一标识符。")
    policy_name: Optional[StrictStr] = Field(default=None, description="鉴权策略的名称。根据鉴权类型填写不同的名称：角色类型填写角色名称，用户类型填写用户ID，访问令牌类型填写令牌ID。", alias="policyName")
    authorize_type: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="鉴权策略的类型，可选值为 'access_token', 'user', 或 'role'。", alias="authorizeType")
    policy_value: Optional[StrictStr] = Field(default=None, description="与鉴权策略关联的权限集合，多个权限可以用逗号分隔。", alias="policyValue")
    create_date: Optional[datetime] = Field(default=None, description="鉴权策略的创建日期，默认为当前时间。", alias="createDate")
    last_update: Optional[datetime] = Field(default=None, description="鉴权策略的最后更新日期，默认为当前时间。", alias="lastUpdate")
    __properties: ClassVar[List[str]] = ["id", "policyName", "authorizeType", "policyValue", "createDate", "lastUpdate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorizePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if policy_name (nullable) is None
        # and model_fields_set contains the field
        if self.policy_name is None and "policy_name" in self.model_fields_set:
            _dict['policyName'] = None

        # set to None if authorize_type (nullable) is None
        # and model_fields_set contains the field
        if self.authorize_type is None and "authorize_type" in self.model_fields_set:
            _dict['authorizeType'] = None

        # set to None if policy_value (nullable) is None
        # and model_fields_set contains the field
        if self.policy_value is None and "policy_value" in self.model_fields_set:
            _dict['policyValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorizePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "policyName": obj.get("policyName"),
            "authorizeType": obj.get("authorizeType"),
            "policyValue": obj.get("policyValue"),
            "createDate": obj.get("createDate"),
            "lastUpdate": obj.get("lastUpdate")
        })
        return _obj


