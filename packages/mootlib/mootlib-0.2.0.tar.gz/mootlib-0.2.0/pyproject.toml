[project]
name = "mootlib"
dynamic = ["version"]
description = "A library for scraping and analyzing forecasting markets"
authors = [
    { name = "Luigi Petrucco", email = "luigi.petrucco@gmail.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["forecasting", "markets", "scraping", "prediction"]
dependencies = [
    "aiohttp>=3.9.3",
    "beautifulsoup4>=4.12.0",
    "pandas>=2.0.0,<3.0.0",
    "tqdm>=4.65.0",
    "requests>=2.31.0",
    "scikit-learn>=1.3.2",
    "openai>=1.3.0",
    "forecasting_tools>=0.1.0",
    "python-dotenv>=1.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.2.1",
    "mypy>=1.3.0",
    "pre-commit>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/vigji/mootlib"
Repository = "https://github.com/vigji/mootlib.git"
Documentation = "https://github.com/vigji/mootlib"
"Bug Tracker" = "https://github.com/vigji/mootlib/issues"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["mootlib"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.dev]
dependencies = [
    ".[dev]"
]

[tool.ruff]
target-version = "py311"
line-length = 88
fix = true
unsafe-fixes = true

# Exclude scripts directory from package checks
exclude = ["scripts/*"]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "F",     # pyflakes
    "B",     # flake8-bugbear
    "C",     # flake8-comprehensions
    "UP",    # pyupgrade
    "D",     # pydocstyle
    "I",     # isort
    "N",     # pep8-naming
    "PTH",   # use pathlib
    "RUF",   # Ruff-specific rules
    "SIM",   # flake8-simplify
    "TRY",   # tryceratops
    "ERA",   # eradicate
    "PD",    # pandas-vet
]

# Ignore specific issues
ignore = [
    "D100",        # Missing module docstring - too strict
    "D104",        # Missing docstring in public package
    "D107",        # Missing docstring in __init__
    "D105",        # Missing docstring in magic method
    "D205",        # Blank line required between summary line and description
    "PLR2004",     # Magic numbers
    "PLR0912",     # Too many branches
    "PLR0915",     # Too many statements
    "ERA001",      # Found commented-out code - we'll clean this up manually
    "TRY300",      # Consider moving try/except to else
    "ARG002",      # Unused method argument
    "BLE001",      # Do not catch blind exception
    "C901",        # Function is too complex
    "PLR2004",     # Magic numbers, catches too much
    "PD901",       # Pandas vet
    "TRY003",      # Keep error messages with info
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D100",        # Missing module docstring in tests
    "D101",        # Missing class docstring in tests
    "D102",        # Missing method docstring in tests
    "D103",        # Missing function docstring in tests
    "S101",        # Use of assert in tests
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=mootlib --cov-report=term-missing" 