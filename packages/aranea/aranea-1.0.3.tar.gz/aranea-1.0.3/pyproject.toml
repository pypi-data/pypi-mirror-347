[build-system]
requires = [
    "poetry-core",
]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
package-mode = true
name = "aranea"
version = "1.0.3"
description = "Aranea is an automated architecture analysis tool for parsing a car architecture from a PDF file."
license = "MIT"
authors = [
    "Thorben Carl <thorben.carl@uni-ulm.de>",
    "Jonathan Heitzmann <jonathan.heitzmann@uni-ulm.de>",
    "Johannes Kortmann <johannes.kortmann@uni-ulm.de>",
    "David Sievers <david.sievers@uni-ulm.de>",
    "Johannes Sonn <johannes.sonn@uni-ulm.de>",
]
maintainers = []
readme = "README.md"
homepage = "https://www.uni-ulm.de/in/fakultaet/studium/inf-mi/studienplanung-se/apse/#c914734"
repository = "https://gitlab.uni-ulm.de/se/mbti/automated-architecture-analysis"
documentation = "https://gitlab.uni-ulm.de/api/v4/projects/6351/jobs/artifacts/main/download?job=build-html"
keywords = [
    "UUlm",
    "SE",
    "MBTI",
    "aranea",
    "Architecture",
    "Analysis",
    "Tool",
    "PDF",
    "Parsing",
    "Car",
    "Automated",
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Natural Language :: English",
    "Natural Language :: German",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Security",
]
packages = [
    { include = "aranea", from = "src" },
    { include = "cli", from = "src" },
]
include = []
exclude = [
    ".gitlab/",
    "docs/",
    "tests/",
    ".gitlab-ci.yml",
]

[tool.poetry.dependencies]
python = "^3.13.0"
dataclasses = "^0.6"
numpy = "^2.1.2"
PyMuPDF = "^1.25.2"
shapely = "^2.0.6"
pydantic-xml = "^2.13.1"
pydantic-extra-types = "^2.10.0"
lark = "^1.2.2"
pydantic = "2.9.2"
click = "^8.1.7"
tomli = "^2.1.0"
tomli-w = "^1.1.0"
deepmerge = "^2.0"
defusedxml = "^0.7.1"
jinja2 = "^3.1.6"
pandas = "^2.2.3"
openpyxl = "^3.1.5"
networkx = "3.4.2"
tqdm = "^4.67.1"
rtree = "^1.3.0"
xlsxwriter = "^3.2.2"
rich = "^13.9.4"

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-timeout = "^2.3.1"
pytest-repeat ="^0.9.3"
pylint = "^3.3.1"
pylint-gitlab = "^2.0.1"
pyright = "^1.1.390"
types-defusedxml = "^0.7"
pandas-stubs = "^2.2.3"
lxml = "^5.3.0"
bandit = "^1.7.10"
codespell = "^2.3.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = "^8.1.3"
sphinx-rtd-theme = "^3.0.1"
sphinx-versioned-docs = "^1.4"
sphinx-click = "^6.0.0"
autodoc_pydantic = "^2.2.0"
pylint = "^3.3.1"

[tool.poetry.group.developing]
optional = true

[tool.poetry.group.developing.dependencies]
black = "^24.10.0"

[tool.poetry.urls]
Issues = "https://gitlab.uni-ulm.de/se/mbti/automated-architecture-analysis/-/issues"

[tool.poetry.scripts]
aranea = "cli.main:aranea"

[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "src"
junit_suite_name = "aranea-test-suite"
log_cli = false
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s %(levelname)s [%(name)s] %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
addopts = "--junitxml=./tests/pytest_report.xml --cov=src --cov-report=html:./tests/coverage --cov-report=xml:./tests/coverage.xml --cov-report=term-missing --cov-branch --cov-fail-under=80 --showlocals"

[tool.pylint.main]
fail-under = 9.0
ignore = [
    "CVS",
]
ignore-patterns = [
    "^\\.#",
]
jobs = 1
limit-inference-results = 100
persistent = true
py-version = "3.13"
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = [
    "foo",
    "bar",
    "baz",
    "toto",
    "tutu",
    "tata",
]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = [
    "i",
    "j",
    "k",
    "ex",
    "Run",
    "_",
]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = [
    "abc.abstractproperty",
]
variable-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = [
    "__init__",
    "__new__",
    "setUp",
    "asyncSetUp",
    "__post_init__",
]
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
    "os._exit",
]
valid-classmethod-first-arg = [
    "cls",
]
valid-metaclass-classmethod-first-arg = [
    "mcs",
]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-positional-arguments = 5
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
known-third-party = [
    "enchant",
]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = [
    "logging",
]

[tool.pylint."messages control"]
confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zero",
]

[tool.pylint.method_args]
timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
notes = [
    "FIXME",
    "XXX",
    "TODO",
]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = [
    "sys.exit",
    "argparse.parse_error",
]
suggest-join-with-non-empty-separator = true

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = [
    "contextlib.contextmanager",
]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-init",
]
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "argparse.Namespace",
]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = [
    "cb_",
    "_cb",
]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]

[tool.pyright]
include = [
    "src",
    "tests",
]
exclude = [
    "**/__pycache__",
]
pythonVersion = "3.13"
pythonPlatform = "All"
analyzeUnannotatedFunctions = true
disableBytesTypePromotions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
enableReachabilityAnalysis = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
deprecateTypingAliases = false
enableExperimentalFeatures = false
reportMissingTypeStubs = "warning"
reportMissingModuleSource = "warning"
reportInvalidTypeForm = "error"
reportMissingImports = "error"
reportUndefinedVariable = "error"
reportAssertAlwaysTrue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidTypeVarUse = "error"
reportSelfClsParameterName = "error"
reportUnsupportedDunderAll = "error"
reportUnusedExpression = "error"
reportWildcardImportFromLibrary = "error"
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallIssue = "error"
reportGeneralTypeIssues = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidTypeArguments = "error"
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportRedeclaration = "error"
reportReturnType = "error"
reportTypedDictNotRequiredAccess = "error"
reportPrivateImportUsage = "error"
reportUnboundVariable = "error"
reportUnhashable = "error"
reportUnusedCoroutine = "error"
reportUnusedExcept = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportPrivateUsage = "error"
reportTypeCommentUsage = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnusedClass = "error"
reportUnusedImport = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportCallInDefaultInitializer = "none"
reportImplicitOverride = "none"
reportImplicitStringConcatenation = "none"
reportImportCycles = "none"
reportMissingSuperCall = "none"
reportPropertyTypeMismatch = "none"
reportShadowedImports = "none"
reportUninitializedInstanceVariable = "none"
reportUnnecessaryTypeIgnoreComment = "none"
reportUnusedCallResult = "none"

[tool.black]
line-length = 100

[tool.codespell]
skip = "./.venv,./tests/coverage,./docs/build/*.js,./docs/build/*.css,./docs/build/*.svg,./poetry.lock,./gl-sbom-pypi-poetry*,*.pdf,./typings"
summary = true
count = true
quiet-level = 2
check-filenames = true
check-hidden = false
before-context = 1
after-context = 1
