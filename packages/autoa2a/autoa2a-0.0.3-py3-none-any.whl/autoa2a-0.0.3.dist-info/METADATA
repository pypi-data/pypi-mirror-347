Metadata-Version: 2.4
Name: autoa2a
Version: 0.0.3
Summary: Converts any agent into A2A servers
Project-URL: Homepage, https://github.com/NapthaAI/autoa2a
Author-email: Richard Blythman <richard@naptha.ai>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
License-File: LICENSE
Requires-Python: >=3.12
Requires-Dist: click>=8.1.8
Requires-Dist: httpx-sse>=0.4.0
Requires-Dist: httpx>=0.28.1
Requires-Dist: jinja2>=3.1.6
Requires-Dist: jwcrypto>=1.5.6
Requires-Dist: pydantic>=2.10.6
Requires-Dist: pyjwt>=2.10.1
Requires-Dist: python-dotenv>=1.1.0
Requires-Dist: sse-starlette>=2.2.1
Requires-Dist: starlette>=0.46.1
Requires-Dist: typing-extensions>=4.12.2
Requires-Dist: uvicorn>=0.17.0
Requires-Dist: uvicorn>=0.34.0
Description-Content-Type: text/markdown

# AutoA2A

## 🚀 Overview

**Convert any agent into an A2A-compatible server**

AutoA2A is a CLI tool that scaffolds the boilerplate required to run AI agents as servers compatible with Google's A2A protocol. It supports various agent frameworks — requiring minimal changes to your code.

We currently support the following agent frameworks:

1. CrewAI
2. LangGraph
3. Llama Index
4. OpenAI Agents SDK
5. Pydantic AI

## 🔧 Installation

Python 3.12+ is required.

Install from source:

```bash
git clone https://github.com/NapthaAI/autoa2a
cd autoa2a
git submodule update --init --recursive
pip install -e .
```

Or using UV:

```bash
git clone https://github.com/NapthaAI/autoa2a
cd autoa2a
git submodule update --init --recursive
uv venv
source .venv/bin/activate
uv sync
```

## 🧩 Quick Start

Create a new A2A server for your project:

Navigate to your project directory with your agent implementation:

```bash
cd your-project-directory
```

Generate the A2A server files via CLI with one of the following flags (crewai, langgraph, llamaindex, openai, pydantic):

```bash
autoa2a init --framework langgraph
```

Follow the TODOs and edit the generated `agent.py` file to configure your agent:

```python
# Replace these imports with your actual agent classes
from agent import MyAgent

# Define the input schema
class TaskInput(BaseModel):
    parameter1: str
    parameter2: str

# Replace the agent in the init method
def __init__(self):
    self.agent_graph = MyAgent()
```

Follow the TODOs and edit the generated `taskmanager.py` file to configure your taskmanager:

```python
# Customize TaskInput mapping to match your Input schema
def _get_user_query(self, task_send_params: TaskSendParams) -> TaskInput:
    # existing code .....

    # TODO: Customize this mapping to match your TaskInput schema
        return TaskInput(query=parts[0].text)
```

Follow the TODOs and edit the generated `run_a2a.py` file to configure your A2A server:

```python
# Modify the agent card and agent skill to reflect your agent details
def main(host, port):
    # existing code .....

    skill = AgentSkill(
            id="a2a_agent", # TODO: Change this to the agent's ID
            name="Generic A2A Agent", # TODO: Change this to the agent's name
            description="Plug your A2A logic into this A2A scaffold", # TODO: Change this to the agent's description
            tags=["a2a", "reasoning", "agent"], # TODO: Change this to the agent's tags
            examples=["Example task for A2A agent"], # TODO: Change this to the agent's examples
        )

    agent_card = AgentCard(
        name="A2A Agent", # TODO: Change this to the agent's name
        description="This agent runs A2A logic via A2A", # TODO: Change this to the agent's description
        url= os.getenv("PROXY_URL", f"http://{host}:{port}/"),
        version="0.1.0",
        defaultInputModes=A2AWrapperAgent.SUPPORTED_CONTENT_TYPES,
        defaultOutputModes=A2AWrapperAgent.SUPPORTED_CONTENT_TYPES,
        capabilities=capabilities,
        skills=[skill],
    )

```

Install dependencies and run your A2A server:

```bash
uv run serve_a2a
```

## 📁 Generated Files

When you run `autoa2a init --framework <FRAMEWORK>`, the following files are generated:

### __main__.py

This is the main file that sets up and runs your A2A server. It contains:

- **Server Initialization**: Sets up the A2A server using the `A2AServer` class.
- **Agent Configuration**: Defines the agent's capabilities, skills, and metadata using `AgentCard` and `AgentSkill`.
- **Environment Setup**: Loads environment variables and configures logging.
- **Command-Line Interface**: Uses `click` to handle command-line options for host and port.
- **Error Handling**: Manages errors related to missing API keys and server startup issues.

**You'll need to edit the following things in this file**:
- Update the `agent's ID, name, description, and tags` in the `AgentSkill` definition to match your specific agent.

### agent.py

This file contains the implementation of the agent logic. It typically includes:
- **Agent Wrapper**: A class that wraps the core logic of the agent, providing a standardized interface for interaction.
- **Task Input Schema**: A schema class to handle the input parameters accepted the agent

**You'll need to edit the following things in this file**:
- Update the `MyAgent` import with your agent
- Update `TaskInput` class to match your agent's input schema.

### taskmanager.py

This file manages the lifecycle of tasks sent to the agent. It includes:
- **Task Validation**: Ensures that incoming task requests are valid and compatible with the agent's capabilities.
- **Task Execution**: Handles the execution of tasks, including invoking the agent and processing responses.
- **Streaming Support**: Provides support for streaming task responses, allowing for real-time updates.
- **Push Notifications**: Manages push notification configurations and sends updates as tasks progress.
- **Error Handling**: Captures and logs errors during task processing, ensuring robust operation.

**You'll need to edit the following things in this file**:
- Customize the `_get_user_query` method to map incoming task parameters to your agent's input schema.
- Implement any specific logic required for task processing and response handling.

## 🔍 Examples

### Running the examples

The repository includes examples for each supported framework:

```bash
# Clone the repository
git clone https://github.com/NapthaAI/autoa2a.git
cd autoa2a

# Install autoa2a in development mode
pip install -e .

# Navigate to an example directory
cd examples/crewai/simple_researcher

# Run the server
uv run serve_a2a
```

## 🛠️ Creating New Adapter Template

Want to add support for a new agent framework? Here's how:

1. Create a new adapter file in `autoa2a/templates/agent_specific/<framwork_folder>/agent.py` (or add to an existing framework file):
```python
# autoa2a/templates/agent_specific/<framwork_folder>/agent.py
from typing import Dict, Any, AsyncIterable
from pydantic import BaseModel
from agent import MyAgent
# Add any other imports required

class TaskInput(BaseModel):
    # Add the input schema supported by the framework

class A2AWrapperAgent:
    def __init__(self):
        self.agent = MyAgent()
        # Add any other global variable initializations

    # Update the invoke function to run the agent (DONOT change the name of the function)  
    async def invoke(self, input_data: TaskInput, sessionId: str) -> Dict[str, Any]:
        # Use try/catch to handle exceptions
        try:
            # Append sessionId to the Task Inputs
            inputs = {**input_data.model_dump(), "sessionId": sessionId}
            
            # Store the result of your agent after running it
            # Note: You may need to adjust the method calls (kickoff, run)
            # to match your framework's specific API
            result = self.agent.crew().kickoff(inputs)

            return {
                "is_task_complete": True,
                "require_user_input": False,
                "content": str(result),
                # optionally, include metadata for downstream artifact retrieval
                "metadata": {
                    "artifact_id": str(result),
                    "session_id": sessionId
                }
            }
        # Add proper exception handling to better troubleshoot the issues, if there are any
        except Exception as e:
            return {
                "is_task_complete": False,
                "require_user_input": True,
                "content": f"Error: {str(e)}"
            }
    
    # Create a stream function to handle streammable ouput of your framework
    async def stream(self, input_data: TaskInput, sessionId: str) -> AsyncIterable[Dict[str, Any]]:
        # Use the ivoke function if your framework doesnot support streaming
        result = await self.invoke(input_data, sessionId)
        yield result

    # Create a List of supported Content Types
    SUPPORTED_CONTENT_TYPES = ["text", "text/plain"]


2. Create an example in examples/your_framework/<your_example>/
```

## ☁️ Deploying with Naptha's MCPaaS
Naptha supports deploying your newly-created A2A server to our MCP servers-as-a-service platform! It's easy to get started.

### Setup
Naptha's MCPaaS platform requires your repository be set up with `uv`. 
This means you need a couple configurations in your `pyproject.toml`. 

First, make sure the `run_a2a.py`, `agent.py` and `taskmanager.py` files generated by Naptha's `autoa2a` is the root of your repository.

Second, make sure your `pyproject.toml` has the following configurations:

```toml
[build-system]
requires = [ "hatchling",]
build-backend = "hatchling.build"

[project.scripts]
serve_a2a = "run_a2a:main"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
include = [ "./run_a2a.py" ]
exclude = [ "__pycache__", "*.pyc" ]
packages = [ "." ]
```

If your agent is in a subdirectory / package of your repository:

```
pyproject.toml
run_a2a.py
agent.py
taskmanager.py
my_agent/
|---| __init__.py
    | agent.py
```

Make sure that it's imported like this in `agent.py`:
```python
from my_agent.agent
```
Not like below, since this will cause the build to fail:
```python 
from .my_agent.agent
``` 

Once you have configured everything, commit and push your code (but not your environment variables!) to github. Then, you can test it to make sure you set up everything correctly:

```shell
uvx --from git+https://github.com/your-username/your-repo serve_a2a
```

If this results in your A2A server being launched on port 10000 successfully, you're good to go!


### Launching your server
1. go to [labs.naptha.ai](https://labs.naptha.ai)
2. Sign in with your github account
3. Choose "A2A" from the "Server Type" dropdown
4. Pick the repository you edited from your repository list -- we autodiscover your github repos.
5. add your environment variables e.g. `OPENAI_API_KEY`, etc.
6. Click Launch.
7. Copy the URL, and paste it into your A2A client:

## 🔌 Using with A2A Clients

### Google's A2A cli client
1. Clone the Google's A2A repo
```shell
git clone https://github.com/google/A2A
```
2. Navigate to `samples/python`
```shell
cd <path to A2A>/samples/python
```
3. Install the dependencies and run the client
```shell
uv venv # Create a virtual environment
source .venv/bin/activate
uv sync

uv run hosts/cli --agent <url of the A2A Server>
```

### Google's A2A UI client

1. Clone the Google's A2A repo
```shell
git clone https://github.com/google/A2A
```
2. Navigate to `demo/ui`
```shell
cd <path to A2A>/demo/ui
```
3. Install the dependencies and run the client
```shell
uv venv # Create a virtual environment
source .venv/bin/activate
uv sync

uv run main.py
```
4. Navigate to agent tab and add the agent by supplying the A2A server url

**Note**: Add the url without the protocol in the client (eg: labs-api.naptha.ai:8080/a2a/<id> )

5. Navigate to conversations tab and start conversation with the agent