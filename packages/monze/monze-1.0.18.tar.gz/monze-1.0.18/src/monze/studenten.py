import os
import shutil
import glob
from copy import deepcopy
import random
import webbrowser
import unicodedata
import pylightxl as xl
from flask import redirect, request, Blueprint, render_template

from general import Casting, Timetools, IOstuff, ListDicts, JINJAstuff, BaseClass, Mainroad, FtpAnta
from singletons import UserSettings, Sysls, Students, Emails, Views
from emails import EmailBaseClass

DEFAULTSTUDENTEN = 'registratie'

# handles one student
class Student(BaseClass):
	@classmethod
	def get_model(cls) -> dict:
		return Students.get_empty()

	@classmethod
	def get_nicename(cls, key: str) -> str:
		nicenames = Students.get_nicenames()
		if key in nicenames:
			return nicenames[key]
		return key

# handles a note for a student
class Note(BaseClass):
	@classmethod
	def get_model(cls) -> dict:
		return dict(
			note = {'default': ''},
			alias = {'default': ''}, # teacher
			created_ts = {'default': 0},
			todo = {'default': 0},
			to_alias = {'default': ''},
		)

	@classmethod
	def normalize(cls, d: dict) -> dict:
		keys = cls.get_model().keys()
		for k in keys:
			if not k in d:
				d[k] = cls.get_model()[k]['default']

	@classmethod
	def jinja_note(cls, d: dict) -> JINJAstuff:
		return JINJAstuff(d, cls.get_model())

class  StudentJinja(JINJAstuff):
	def _s_item(self, lijstnaam: str) -> dict:
		sysls_o = Sysls()
		empty: dict = sysls_o.get_empty()
		key = self._try(lijstnaam, default=None)
		if key is None:
			return empty

		# get item from s_lijsten
		item = sysls_o.get_sysl_item(lijstnaam, key)
		if item is None:
			return empty

		# and normalize
		for thing in item:
			if thing in empty:
				empty[thing] = item[thing]
		return empty

	def _try_l(self, key, default: any = '', field='naam') -> any:
		# tries to get value from connected Lijst, if not, default or fallback
		val = self._try(key, default=None)
		if self.model is None or val is None:
			return default

		try:
			sysl = self.model[key]['from']
		except:
			return default

		if isinstance(sysl, list):
			# from is a list in the model, so single value in r
			return val
		if not isinstance(val, list):
			# single value, should be list
			return val

		if field == 'naam':
			try:
				return val[1]  # fallback
			except:
				return default

		return default

	def _grade(self):
		g = self._try('cijfer')
		try:
			if g[0] != '':
				return g[0]
			else:
				cijfer = g[1]
				if cijfer >= 10:
					return cijfer/10
				else:
					return f'{cijfer}'
		except:
			return g

	def _pfurl(self):
		g = self._try('portfolio_url').strip()
		if g == '':
			return ''
		else:
			return f'<a href="{g}" target="_blank">pf&rarr;</a>'

	def _circular(self, vname: str, cname: str) -> int:
		try:
			circ = self.record['circulars'][str(vname)][cname]
			return circ
		except:
			return 0

	def _custom(self, vname: str, cname: str) -> str:
		try:
			custom = self.record['customs'][str(vname)][cname]
			return str(custom)
		except:
			return ''

	def _same(self) -> str:
		ss = self._try('samestudent', default=[])
		sss = ', '.join(map(str, ss))
		return sss

	def _ass(self) -> str:
		# gives color for assessment
		s = self._try('assessment', default=0)
		if s == 1:
			return 'rgb(51, 172, 6)'
		elif s == 2:
			return 'rgb(255, 147, 0)'
		elif s == 3:
			return 'rgb(255, 0, 0)'
		else:
			return 'rgb(238, 238, 238)'

	def _notes(self):
		ns = list()
		for n in self.record['notes']:
			ns.append(Note.jinja_note(n))
		return ns

	def _todo(self) -> bool:
		# sees if there is anything to do with this student
		if 'notestodo' in self.record:
			# generated by mongo
			return self.record['notestodo'] > 0

		if not 'notes' in self.record:
			return False

		for n in self.record['notes']:
			if isinstance(n, dict):
				if 'todo' in n:
					if n['todo'] == 1:
						return True
			elif isinstance(n, JINJAstuff):
				if n._try('todo', default=0) == 1:
					return True
		return False

# =============== ENDPOINTS =====================
ep_studenten = Blueprint(
	'ep_studenten', __name__,
	url_prefix="/studenten",
	template_folder='templates',
    static_folder='static',
	static_url_path='static',
)

menuitem = 'students'

@ep_studenten.get('/<path:filter>')
@ep_studenten.get('/')
def studenten(filter=''):
	if filter == '':
		return redirect(f'/studenten/{DEFAULTSTUDENTEN}')

	# get and set filter
	sta, fil, act = filter_stuff()
	if not filter in sta:
		return redirect(f'/studenten/{DEFAULTSTUDENTEN}')

	jus = UserSettings()
	students_o = Students()
	students = list()
	where = {'s_status': {'$in': sta[filter]}}
	students = students_o.get_students_mongo(where=where)
	for i in range(len(students)):
		students[i] = StudentJinja(students[i], Student.get_model())

	groepmenu = filter in ['registratie', 'studenten', 'beoordelen']
	sysls_o = Sysls()
	views_o = Views(slim=True)

	return render_template(
		'studenten.html',
		menuitem=menuitem,
		groepmenu=groepmenu,
		props=jus,
		students=students,
		filter=filter,
		filters=fil,
		actiefstats=act,
		zoekterm=None,
		sysls=sysls_o.get(),
		sortpath=f"/studenten/{filter}",
	)

@ep_studenten.get('/zoek')
def studenten_zoek():
	jus = UserSettings()
	try:
		zoekterm = Casting.str_(request.args.get('s'), '')
	except:
		zoekterm = ''
	if zoekterm == '':
		return redirect(jus.get_prop('last_url', default='/home'))

	# determine where search is started
	# ALTIJD IN ALL ZOEKEN
	zoekfilter = 'alle'
	zoektab = 'alle'

	sta, fil, act = filter_stuff()
	gevonden = list()
	students_o = Students()
	students = students_o.zoek_studenten_mongo(zoekterm)
	for i in range(len(students)):
		students[i] = StudentJinja(students[i], Student.get_model())

	sysls_o = Sysls()
	views_o = Views(slim=True)
	searchterms = jus.set_searchterm(zoekterm)
	# we have search results. add search term to user settings.

	return render_template(
		'studenten.html',
		menuitem=menuitem,
		props=jus,
		students=students,
		filter=zoekfilter,
		filters=fil,
		actiefstats=act,
		zoekterm=zoekterm,
		zoektab=zoektab,
		zoekfilter=zoekfilter,
		comesfrom=f"/{zoektab}/{zoekfilter}",
		sysls=sysls_o.get(),
		sortpath = "/studenten/zoek",
	)

@ep_studenten.post('/collectief')
def collectief_post():
	jus = UserSettings()
	if not IOstuff.check_required_keys(request.form, ['col-ids', 'to-group', 'to-stream', 'to-status', 'save']):
		return redirect(jus.get_prop('last_url', default='/home'))

	try:
		ids = list(request.form.get('col-ids').split(','))
		for i in range(len(ids)):
			ids[i] = Casting.int_(ids[i], 0)
	except:
		return redirect(jus.get_prop('last_url', default='/home'))

	s_group = Casting.int_(request.form.get('to-group'), 0)
	s_stream = Casting.int_(request.form.get('to-stream'), 0)
	s_status = Casting.int_(request.form.get('to-status'), 0)

	students_o = Students()
	for id in ids:
		student = students_o.get_by_id_mongo(id)
		if student is None:
			continue
		newstudent = deepcopy(student)
		what = {}
		if s_status > 0:
			newstudent['s_status'] = s_status
			what['s_status'] = s_status
		if s_group > 0:
			newstudent['s_group'] = s_group
			what['s_group'] = s_group
		if s_stream > 0:
			newstudent['s_stream'] = s_stream
			what['s_stream'] = s_stream
		where = {'id': id}
		what = {'$set': what}
		students_o.update_student_mongo(where, what)

	return redirect(request.referrer)

@ep_studenten.get('/single/<int:id>')
def single_get(id):
	jus = UserSettings()
	students_o = Students()
	statussen = get_statussen()
	student = students_o.get_by_id_mongo(id)
	if student is None:
		return redirect(f'/studenten/{DEFAULTSTUDENTEN}')

	student['filter'] = get_student_filter(student, statussen)
	student['notes'] = ListDicts.sortlistofdicts(student['notes'], 'created_ts', reverse=True)

	invite = None
	if student['s_status'] == 10: # listed
		invite = create_mail(student, 'confirm')

	grade = None
	if student['s_status'] == 21:
		grade = create_mail(student, 'grade')

	pad = students_o.make_student_folder_path(id)
	sysls_o = Sysls()
	views_o = Views(slim=True)

	return render_template(
		'student.html',
		menuitem=menuitem,
		props=UserSettings(),
		lijsten=sysls_o.get_lijsten_nicename(),
		sysls=sysls_o.get(),
		student=StudentJinja(student, Student.get_model()),
		nieuw=False,
		invite=invite,
		grade=grade,
		studmappad=pad,
	)

@ep_studenten.get('/new')
def single_new_get():
	students_o = Students()
	id = students_o.new_student_id_mongo()

	if id is None:
		return redirect('/home')

	statussen = get_statussen()
	student = Student.get_empty()
	student['filter'] = 'registratie'
	student['id'] = id
	student['s_status'] = 10

	student['s_origin'] = 2
	sysls_o = Sysls()
	views_o = Views(slim=True)

	return render_template(
		'student.html',
		menuitem=menuitem,
		props=UserSettings(),
		lijsten=sysls_o.get_lijsten_nicename(),
		sysls=sysls_o.get(),
		student=StudentJinja(student, Student.get_model()),
		nieuw=True,
	)

@ep_studenten.post('/new/<int:id>')
def single_new_post(id):
	students_o = Students()
	newstudent = crunch_student(Student.get_empty(), request.form)

	# prefil
	newstudent['id'] = id
	newstudent['created_ts'] = Timetools.now_secs()
	newstudent['password'] = students_o.new_password(newstudent['created_ts'])
	if newstudent['s_origin'] == 1:
		newstudent['s_uni'] = 1

	# opslaan
	students_o.create_student_mongo(newstudent)
	# make student dir is done when completing the students data.
	return redirect(f"/studenten/single/{id}")

@ep_studenten.post('/single/<int:id>')
def single_edit_post(id):
	students_o = Students()
	student = students_o.get_by_id_mongo(id)

	if student is None:
		return redirect('/studenten/new')

	if 'save' in request.form:
		edited = crunch_student(deepcopy(student), request.form)
		where = {'id': id}
		what = {'$set': edited}
		students_o.update_student_mongo(where, what)

		# eventualy fix student dir issues
		views_o = Views(slim=False)
		fix_student_dir(edited, views_o)
		return redirect(f"/studenten/single/{id}")

	elif 'delete' in request.form:
		# on delete show student folder
		students_o.open_student_dir(id)
		students_o.delete_student_mongo({'id': id})

	elif 'kopieer' in request.form:
		# make empty copy of student
		kopie = Student.get_empty()
		kopie['created_ts'] = Timetools.now_secs()
		kopie['email'] = student['email']
		kopie['firstname'] = student['firstname']
		kopie['lastname'] = student['lastname']
		kopie['s_gender'] = student['s_gender']
		kopie['s_lang'] = student['s_lang']
		kopie['s_origin'] = student['s_origin']
		kopie['s_program'] = student['s_program']
		kopie['s_uni'] = student['s_uni']
		# dit moet worden aangepast door user
		kopie['s_year'] = student['s_year']
		kopie['s_term'] = student['s_term']
		kopie['password'] = students_o.new_password(kopie['created_ts'])
		kopie['id'] = students_o.new_student_id_mongo()
		# this is same student
		kopie['samestudent'] = student['samestudent']
		kopie['samestudent'].append(id)
		# get current year
		# opslaan
		students_o.create_student_mongo(kopie)

		# make dir
		views_o = Views(slim=False)
		# show student dir
		students_o.open_student_dir(kopie['id'])
		return redirect(f"/studenten/single/{kopie['id']}")

	return redirect(f"/studenten/registratie")

@ep_studenten.post('/note/<int:id>')
def note_new_post(id):
	jus = UserSettings()
	students_o = Students()

	note = request.form.get('note').replace('\r\n', '<br>')
	toalias = Casting.str_(request.form.get('to_alias'), default=jus.alias())
	if note == '':
		return redirect(f"/studenten/single/{id}")

	nu = Timetools.now_secs()
	student = students_o.get_by_id_mongo(id)

	student['notes'] = ListDicts.sortlistofdicts(student['notes'], 'created_ts', reverse=True)
	newnote = dict(
		note=note,
		created_ts=nu,
		alias=jus.alias(),
		todo=1,
		to_alias=toalias,
	)
	student['notes'].insert(0, newnote)
	where = {'id': id}
	what = {'$set': {'notes': student['notes']}}
	students_o.update_student_mongo(where, what)

	return redirect(f"/studenten/single/{id}")

@ep_studenten.post('/note/<int:id>/<int:noteid>')
def note_post_done(id, noteid):
	students_o = Students()
	student = students_o.get_by_id_mongo(id)
	index = -1
	for i in range(len(student['notes'])):
		if noteid == student['notes'][i]['created_ts']:
			index = i
			break
	if index == -1:
		return redirect(f"/studenten/single/{id}")

	if 'delete' in request.form:
		student['notes'].pop(index)
	else:
		if 'todo' in request.form:
			student['notes'][index]['todo'] = 1
		else:
			student['notes'][index]['todo'] = 0
	where = {'id': id}
	what = {'$set': {'notes': student['notes']}}
	students_o.update_student_mongo(where, what)

	return redirect(f"/studenten/single/{id}")

@ep_studenten.get('/opendir/<int:id>')
def single_opendir(id):
	students_o = Students()
	students_o.open_student_dir(id)
	return redirect(request.referrer)

@ep_studenten.get('/import')
def import_get():
	sysls_o = Sysls()
	views_o = Views(slim=True)
	preset = dict(
		s_status = 10,
		s_origin = 1,
		s_year = sysls_o.get_sysl_item_first_active('s_year')['id'],
		s_term = sysls_o.get_sysl_item_first_active('s_term')['id'],
		s_course = sysls_o.get_sysl_item_first_active('s_course')['id'],
		s_lang = sysls_o.get_sysl_item_first_active('s_lang')['id'],
		s_uni = 1,
		s_program = 0,
		sep = 'komma',
		volgorde = ['nhls_code', 'lastname', 'firstname', 'email'],
		csv = '',
	)
	seps = dict(
		puntkomma = ';',
		tab = '\t',
	)
	return render_template(
		'studenten-import.html',
		menuitem=menuitem,
		props=UserSettings(),
		sysls=sysls_o.get(),
		preset=preset,
		seps=list(seps.keys()),
		rows=None,
	)

@ep_studenten.post('/import')
def import_post():
	# this function translates form input into
	# a correct import list of dicts
	seps = dict(
		puntkomma = ';',
		tab = '\t',
	)
	# default stuff
	try:
		d = dict(
			s_status = Casting.int_(request.form.get('s_status'), 0),
			s_origin = Casting.int_(request.form.get('s_origin'), 0),
			s_year = Casting.int_(request.form.get('s_year'), 0),
			s_term = Casting.int_(request.form.get('s_term'), 0),
			s_course = Casting.int_(request.form.get('s_course'), 0),
			s_lang = Casting.int_(request.form.get('s_lang'), 1),
			volgorde = request.form.get('placeholders').split(','),
		)
	except Exception as e:
		print(f"Import students error: {e}")
		return redirect('/studenten/import')

	# stuff from excel
	if 's_uni' in request.form:
		d['s_uni'] = Casting.int_(request.form.get('s_uni'), 0)

	if 's_program' in request.form:
		d['s_program'] = Casting.int_(request.form.get('s_program'), 0)

	if d['s_course'] == 3:
		d['s_ec'] = 30
	else:
		d['s_ec'] = 15
	if 'sep' in request.form and 'sep' in seps.keys():
		d['sep'] = request.form.get('sep').strip()
	else:
		d['sep'] = 'puntkomma'
	d['sep'] = seps[d['sep']]

	try:
		d['csv'] = request.form.get('csv')
		d['csv_lines'] = d['csv'].split('\r\n')
	except Exception as e:
		print(f"Import csv error: {e}")
		return redirect('/studenten/import')

	rows = list()
	for row in d['csv_lines']:
		student = dict()
		csv = row.split(d['sep'])

		i = 0
		for key in d['volgorde']:
			try:
				student[key] = csv[i].strip()
			except:
				student[key] = ''
			if key == 'lastname':
				student['lastname'] = student['lastname'].split(',')[0].strip()
			i += 1

		for key in d:
			if not key.startswith('s_'):
				continue
			student[key] = d[key]

		if 'import' in request.form:
			rows.append(student)
		else:
			rows.append(StudentJinja(student, Student.get_model()))

	students_o = Students()
	if 'import' in request.form:
		# importeren en door naar registraties
		views_o = Views(slim=True)
		for newstudent in rows:
			id = students_o.new_student_id_mongo()
			newstudent['id'] = id
			newstudent['created_ts'] = Timetools.now_secs()
			newstudent['password'] = students_o.new_password(newstudent['created_ts'])

			newstudent = crunch_student({}, newstudent)
			# opslaan
			students_o.create_student_mongo(newstudent)

			# make student dir
			fix_student_dir(newstudent, views_o)
		return redirect(f"/studenten/registratie")

	sysls_o = Sysls()

	return render_template(
		'studenten-import.html',
		menuitem=menuitem,
		props=UserSettings(),
		sysls=sysls_o.get(),
		seps=list(seps.keys()),
		rows=rows,
		preset=d,
	)

@ep_studenten.get('/invite-mail/<int:id>')
def invite_mail(id):
	students_o = Students()
	statussen = get_statussen()
	student = students_o.get_by_id_mongo(id)
	if student is None:
		return redirect('/studenten/studenten')
	if student['s_status'] != 10: # listed
		return redirect(f'/studenten/single/{id}')

	invite = create_mail(student, 'confirm')
	body = invite['text']
	body = body.replace('<br>', "\n")
	urimail = f"mailto:{student['email']}?subject={invite['subject']}&body={body}";
	webbrowser.open(urimail)
	student['s_status'] = 11
	where = {'id': id}
	what = {'$set': student}
	students_o.update_student_mongo(where, what)

	return redirect(f'/studenten/single/{id}')

@ep_studenten.get('/graded-mail/<int:id>')
def graded_mail(id):
	students_o = Students()
	statussen = get_statussen()
	student = students_o.get_by_id_mongo(id)
	if student is None:
		return redirect('/studenten/studenten')

	if student['s_status'] == 21:
		return redirect(f'/studenten/single/{id}')

	graded = create_mail(student, 'grade')
	body = graded['text']
	body = body.replace('<br>', "\n")
	urimail = f"mailto:{student['email']}?subject={graded['subject']}&body={body}";
	webbrowser.open(urimail)
	if student['grade'] >= 55:
		student['s_status'] = 39
	else:
		student['s_status'] = 38
	where = {'id': id}
	what = {'$set': student}
	students_o.update_student_mongo(where, what)

	return redirect(f'/studenten/single/{id}')

@ep_studenten.get('/emailbutton/<path:emb>/<int:id>')
def emailbutton(emb, id):
	if not emb in EmailBaseClass.alle_emails():
		return redirect(request.referrer)

	students_o = Students()
	stud = students_o.get_by_id_mongo(id)
	if stud is None:
		return redirect(request.referrer)

	emailmessage = create_mail(stud, emb)
	body = emailmessage['text'].strip()
	body = body.replace('<br>', "\n")
	urimail = f"mailto:{stud['email']}?subject={emailmessage['subject']}&body={body}";
	webbrowser.open(urimail)

	return redirect(request.referrer)

@ep_studenten.post('/to-excel')
def to_excel_post():
	if not 'comes-from' in request.form or not 'to-excel' in request.form or not 'csv-data' in request.form:
		print('incompleet form')
		return redirect(request.form['comes-from'])

	try:
		csvdata = request.form['csv-data'].strip()
		csvdata = unicodedata.normalize('NFKC', csvdata)
		csvdata = csvdata.split('\r\n')
		ehead = csvdata[0].split(';')
		erows = csvdata[1:]
		if 'shuffle' in request.form:
			if Casting.int_(request.form['shuffle'], default=0) == 1:
				random.shuffle(erows)
	except:
		return redirect(request.form['comes-from'])

	# now convert to and open excel
	try:
		db = xl.Database()
		db.add_ws(ws="students")
		row = 1
		col = 1
		for h in ehead:
			db.ws(ws="students").update_index(row=1, col=col, val=h)
			col += 1
		row += 1
		for line in erows:
			items = line.split(';')
			col = 1
			for item in items:
				db.ws(ws="students").update_index(row=row, col=col, val=item)
				col += 1
			row += 1

		desktoppad = Mainroad.get_desktop_path()
		naam = 'students'
		if 'group-name' in request.form:
			nm = Casting.str_(request.form['group-name'], default='')
			if len(nm) > 0:
				naam = nm
		xl.writexl(db=db, fn=f"{desktoppad}/{naam}.xlsx")
	except Exception as e:
		print('error met excel', e)

	return redirect(request.form['comes-from'])

@ep_studenten.post('/yes_ajax')
def yes_ajax_post():
	d = request.form.to_dict()
	# check data
	if not IOstuff.check_required_keys(d, ['what', 'field-name', 'field-value', 'student-id', 'view-id']):
		return {'result': False}

	# update data (bleach, circular etc)
	try:
		studid = Casting.int_(request.form['student-id'], default=None)
		fieldname = Casting.str_(request.form['field-name'], None)
		viewid = Casting.int_(request.form['view-id'], None)
		what = Casting.str_(request.form['what'], None)
	except:
		return {'result': False}

	students_o = Students()
	try:
		student = students_o.get_students_mongo(where={'id': studid})[0]
	except:
		student = None
	if student is None:
		return {'result': False}

	cc = 'circulars'  # avoid typoos
	cu = 'customs'
	if what == 'do-asshole':
		fieldval = Casting.int_(request.form['field-value'], 3)
		if fieldval < 3:
			fieldval += 1
		else:
			fieldval = 0
		student['assessment'] = fieldval
		mw = {'assessment': fieldval}

	elif what == 'portfolio':
		fieldval = Casting.str_(request.form['field-value'], '')
		student['pf_url'] = fieldval
		mw = {'pf_url': fieldval}

	elif what == 'grade':
		fieldval = Casting.int_(request.form['field-value'], 0)
		student['grade'] = fieldval
		if fieldval > 0:
			student['grade_ts'] = Timetools.now_secs()
		else:
			student['grade_ts'] = 0
		mw = {'grade_ts': student['grade_ts'], 'grade': student['grade']}

	elif what == cc:
		# click on circular field
		cirval = Casting.int_(request.form['field-value'], 0)
		if cirval < 3:
			cirval += 1
		else:
			cirval = 0
		fieldval = cirval

		fieldname = str(fieldname)
		viewid = str(viewid)

		if not cc in student:
			student[cc] = {viewid: {fieldname: cirval}}
		if not viewid in student[cc]:
			student[cc][viewid] = {fieldname: cirval}
		if not fieldname in student[cc][viewid]:
			student[cc][viewid][fieldname] = cirval
		else:
			student[cc][viewid][fieldname] = cirval
		mw = {cc: student[cc]}

	elif what == cu:
		# edit in custom text field
		cusval = Casting.str_(request.form['field-value'], '')

		fieldname = str(fieldname)
		viewid = str(viewid)

		if not cu in student:
			student[cu] = {viewid: {fieldname: cusval}}
		if not viewid in student[cu]:
			student[cu][viewid] = {fieldname: cusval}
		if not fieldname in student[cu][viewid]:
			student[cu][viewid][fieldname] = cusval
		else:
			student[cu][viewid][fieldname] = cusval
		fieldval = cusval
		mw = {cu: student[cu]}

	else:
		# no more options possible
		return {'result': False}

	r = students_o.update_student_mongo(where={'id': studid}, what={'$set': mw})
	return {'result': fieldval}

@ep_studenten.post('/set_sort')
def set_sort():
	# ajax thing without return value
	js = request.get_json()
	path = js['path']
	fieldname = js["fieldname"]
	direction = js["direction"]
	jus = UserSettings()
	jus.set_sort(path, fieldname, direction)
	return ""

# =========== helpers ========
def get_student_filter(s, sta):
	for st in sta:
		if st == 'alle':
			continue
		if s['s_status'] in sta[st]:
			return st
	return 'alle'

def get_active_statusses(sta) -> list:
	l = list()
	for st in sta:
		if not st in ['studenten', 'registratie', 'beoordelen', 'resit']:
			continue
		l.extend(sta[st])
	return l

def from_sysl(veld, d: dict):
	sysls_o = Sysls()
	try:
		return sysls_o.get_sysl_item(veld, d[veld])['name']
	except:
		return ''

def from_student(veld, d: dict):
	try:
		return d[veld]
	except:
		return ''

def create_mail(student, welk) -> dict:
	# create confirm text
	emails_o = Emails()
	mail = emails_o.get_single(welk)
	lang = from_sysl('s_lang', student)
	if lang == 'nl':
		text = mail['nl_text'].replace('\n', '<br>')
		subject = mail['nl_subject']
	elif lang == 'en':
		text = mail['en_text'].replace('\n', '<br>')
		subject = mail['en_subject']
	else:
		return dict()
	email = dict(
		naam=f"{from_student('firstname', student)} {from_student('lastname', student)}",
		minor=from_sysl('s_course', student),
		periode=from_sysl('s_term', student),
		jaar=from_sysl('s_year', student),
		ec=from_sysl('s_ec', student),
		cijfer=from_student('grade', student),
		wachtwoord=from_student('password', student),
		subject=subject,
	)
	try:
		email['text'] = text.format(
			name=email['naam'],
			minor=email['minor'],
			period=email['periode'],
			year=email['jaar'],
			ec=email['ec'],
			grade=round(email['cijfer'] / 10.0, 0),
			password=email['wachtwoord']
		)
	except Exception as e:
		email = f"ERROR in email: {text}\n\t{e}"
	return email

def get_statussen() -> dict:
	sysls_o = Sysls()
	ss = sysls_o.get_stud_statussen()
	return ss

def get_status_filters() -> list:
	ss = get_statussen()
	sl = list(ss.keys())
	# put alle at end
	sl.remove('alle')
	sl.append('alle')
	return sl

def filter_stuff():
	statussen = get_statussen()
	filters = get_status_filters()
	actiefstats = Students.active_set()
	return statussen, filters, actiefstats

def crunch_student(s, req):
	empty = Student.get_empty()
	newstudent = dict()

	# only keys in model are welcome
	for key in req:
		if not key in empty.keys():
			continue
		if key == 'samestudent':
			ids = req[key].split(',')
			newstudent[key] = list()
			for iid in list(ids):
				iid = Casting.int_(iid, default=None)
				if iid is None:
					continue
				if iid < 1:
					continue
				newstudent[key].append(iid)
			newstudent[key] = sorted(newstudent[key])

		elif type(empty[key]) == str:
			newstudent[key] = Casting.str_(req[key], '').strip()
		elif type(empty[key]) == int:
			newstudent[key] = Casting.int_(req[key], 0)
		else:
			newstudent[key] = req[key]

	if not 'assessment' in req:
		newstudent['assessment'] = 0

	if 'grade' in newstudent:
		if 'grade' in s:
			if newstudent['grade'] != s['grade']:
				# new grade
				if newstudent['grade'] == 0:
					newstudent['grade_ts'] = 0
				else:
					newstudent['grade_ts'] = Timetools.now_secs()
			else:
				newstudent['grade'] = s['grade']
		else:
			newstudent['grade'] = 0

	if 's_course' in newstudent:
		if newstudent['s_course'] == 1:
			newstudent['s_ec'] = 15
			newstudent['s_stream'] = 0
		elif newstudent['s_course'] == 3:
			newstudent['s_ec'] = 30

	# add current values
	for key in s.keys():
		if key in newstudent.keys():
			continue
		newstudent[key] = s[key]

	# add empty fields if not in form
	for key in empty.keys():
		if key in newstudent.keys():
			continue
		newstudent[key] = empty[key]

	# merged and normalized
	return newstudent

def get_current_student_dir(id: int) -> str|None:
	students_o = Students()
	bpad = students_o.stud_dir_path()
	for jaar in os.listdir(bpad):
		# jaren
		if jaar.startswith('.'):
			continue
		fjaar = os.path.join(bpad, jaar)
		if not os.path.isdir(fjaar):
			continue

		# dieper: terms
		for term in os.listdir(fjaar):
			if term.startswith('.'):
				continue
			fterm = os.path.join(fjaar, term)
			if not os.path.isdir(fterm):
				continue

			# nog dieper: studenten
			for stud in os.listdir(fterm):
				if stud.startswith('.'):
					continue
				try:
					dirid = int(stud.split('-')[-1].strip())
				except:
					continue
				if dirid == id:
					return os.path.join(fterm, stud)
	return None

def upload_summative(views_o, studid: int|None=None, student: dict|None=None):
	# zet om in dict per student in deze view
	sysl_o = Sysls()
	student_o = Students()
	sumviews = views_o.summative_views()
	if student is None and not studid is None:
		students_o = Students()
		student = students_o.get_by_id_mongo(studid)

	password = student['password']
	# 's_course': 1, 's_ec': 15  's_group': 1026
	try:
		course = sysl_o.get_sysl_item('s_course', student['s_course'])['name']
	except:
		course = ""

	try:
		stream = sysl_o.get_sysl_item('s_stream', student['s_stream'])['name']
	except:
		stream = ""
	print(stream)

	try:
		ass = student['assessment']
	except:
		ass = 0

	d = dict(
		password=student['password'],
		name=f"{student['firstname']} {student['lastname']}",
		course=course,  # naam cpnits 15 of zo
		stream=stream,
		fields=list(),
		fieldvals=list(),  # sync to fields
		ass=ass,
		tabel="",
		grade=int(student['grade'] / 10),
	)
	# een groep kan maar in één summative zitten
	# een student dus ook
	for key, view in sumviews.items():
		if student['s_group'] in view['groups']:
			# IMPORTANT dit moet met lijsten want dict sorteert zichzelf
			# is ook handiger bij HTMl maken
			d['fields'] = list()
			d['fieldvals'] = list()
			for field in view['fields']:
				if not field.startswith('c_'):
					continue
				d['fields'].append(field.replace('c_', ''))
				try:
					skey = Casting.str_(key, default='-1')
					val = Casting.int_(student['circulars'][skey][field], default=0)
					d['fieldvals'].append(val)
				except:
					# if not yet valued
					d['fieldvals'].append(0)
	# nu html tabel maken
	eruit = student_o.maak_html_tabelletje(d)
	# stuur naar ANTA ftp server
	anta = FtpAnta(
		'cpnits.com',
		'cpnitswebsite@cpnits.com',
		'CpnitsWebsite',
		'public_html/summative'
	)
	anta.put_grade(eruit, f'student_{password}.html')


def fix_student_dir(student: dict, views_o: Views):
	# fixes problems with dirs, not delete = manual
	if student is None:
		return

	# new approach
	id = student['id']
	students_o = Students()
	safepath = students_o.make_student_folder_path_from_d(student)
	# print('safepath', safepath)
	if safepath is None:
		# print("No safepath yet")
		return
	if not os.path.isdir(safepath):
		# find current dir by id in dir name
		currentpath = get_current_student_dir(id)
		# print('currentpath', currentpath)
		# currentsafepath is het kloppende pad en is nu dus anders dan currentpath
		# if not found:
		if currentpath is None:
			# make it.
			try:
				os.makedirs(safepath, exist_ok=True)
				# print(f"Created student dir {safepath}")
			except:
				print(f"Could not make student dir {safepath}")
				return
		else:
			# move folder
			try:
				shutil.move(currentpath, safepath)
				# print(f"Moved student dir {currentpath} to {safepath}")
			except:
				print(f"ERROR moving student dir {currentpath} to {safepath}")
				return
	else:
		# this dir is the appropriate dir after student edit
		pass

	# remove *-id.html file
	try:
		for f in glob.glob(f"{safepath}/*{id}*.html"):
			os.remove(f)
	except:
		pass
	# make new html file
	user_o = UserSettings()
	# upload student results to webserver, takes some time, so only for admin
	if user_o.magda(['admin']):
		upload_summative(views_o, studid=id, student=student)
	# make new html file
	return students_o.as_html(id, student, views_o)
