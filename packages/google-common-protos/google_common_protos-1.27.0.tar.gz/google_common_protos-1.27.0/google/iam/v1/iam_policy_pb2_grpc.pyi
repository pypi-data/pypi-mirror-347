"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2022 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import abc
import collections.abc
import google.iam.v1.iam_policy_pb2
import google.iam.v1.policy_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class IAMPolicyStub:
    """API Overview


    Manages Identity and Access Management (IAM) policies.

    Any implementation of an API that offers access control features
    implements the google.iam.v1.IAMPolicy interface.

    ## Data model

    Access control is applied when a principal (user or service account), takes
    some action on a resource exposed by a service. Resources, identified by
    URI-like names, are the unit of access control specification. Service
    implementations can choose the granularity of access control and the
    supported permissions for their resources.
    For example one database service may allow access control to be
    specified only at the Table level, whereas another might allow access control
    to also be specified at the Column level.

    ## Policy Structure

    See google.iam.v1.Policy

    This is intentionally not a CRUD style API because access control policies
    are created and deleted implicitly with the resources to which they are
    attached.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    SetIamPolicy: grpc.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.SetIamPolicyRequest,
        google.iam.v1.policy_pb2.Policy,
    ]
    """Sets the access control policy on the specified resource. Replaces any
    existing policy.

    Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
    """

    GetIamPolicy: grpc.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.GetIamPolicyRequest,
        google.iam.v1.policy_pb2.Policy,
    ]
    """Gets the access control policy for a resource.
    Returns an empty policy if the resource exists and does not have a policy
    set.
    """

    TestIamPermissions: grpc.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest,
        google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse,
    ]
    """Returns permissions that a caller has on the specified resource.
    If the resource does not exist, this will return an empty set of
    permissions, not a `NOT_FOUND` error.

    Note: This operation is designed to be used for building permission-aware
    UIs and command-line tools, not for authorization checking. This operation
    may "fail open" without warning.
    """

class IAMPolicyAsyncStub:
    """API Overview


    Manages Identity and Access Management (IAM) policies.

    Any implementation of an API that offers access control features
    implements the google.iam.v1.IAMPolicy interface.

    ## Data model

    Access control is applied when a principal (user or service account), takes
    some action on a resource exposed by a service. Resources, identified by
    URI-like names, are the unit of access control specification. Service
    implementations can choose the granularity of access control and the
    supported permissions for their resources.
    For example one database service may allow access control to be
    specified only at the Table level, whereas another might allow access control
    to also be specified at the Column level.

    ## Policy Structure

    See google.iam.v1.Policy

    This is intentionally not a CRUD style API because access control policies
    are created and deleted implicitly with the resources to which they are
    attached.
    """

    SetIamPolicy: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.SetIamPolicyRequest,
        google.iam.v1.policy_pb2.Policy,
    ]
    """Sets the access control policy on the specified resource. Replaces any
    existing policy.

    Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
    """

    GetIamPolicy: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.GetIamPolicyRequest,
        google.iam.v1.policy_pb2.Policy,
    ]
    """Gets the access control policy for a resource.
    Returns an empty policy if the resource exists and does not have a policy
    set.
    """

    TestIamPermissions: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest,
        google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse,
    ]
    """Returns permissions that a caller has on the specified resource.
    If the resource does not exist, this will return an empty set of
    permissions, not a `NOT_FOUND` error.

    Note: This operation is designed to be used for building permission-aware
    UIs and command-line tools, not for authorization checking. This operation
    may "fail open" without warning.
    """

class IAMPolicyServicer(metaclass=abc.ABCMeta):
    """API Overview


    Manages Identity and Access Management (IAM) policies.

    Any implementation of an API that offers access control features
    implements the google.iam.v1.IAMPolicy interface.

    ## Data model

    Access control is applied when a principal (user or service account), takes
    some action on a resource exposed by a service. Resources, identified by
    URI-like names, are the unit of access control specification. Service
    implementations can choose the granularity of access control and the
    supported permissions for their resources.
    For example one database service may allow access control to be
    specified only at the Table level, whereas another might allow access control
    to also be specified at the Column level.

    ## Policy Structure

    See google.iam.v1.Policy

    This is intentionally not a CRUD style API because access control policies
    are created and deleted implicitly with the resources to which they are
    attached.
    """

    @abc.abstractmethod
    def SetIamPolicy(
        self,
        request: google.iam.v1.iam_policy_pb2.SetIamPolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.v1.policy_pb2.Policy, collections.abc.Awaitable[google.iam.v1.policy_pb2.Policy]]:
        """Sets the access control policy on the specified resource. Replaces any
        existing policy.

        Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
        """

    @abc.abstractmethod
    def GetIamPolicy(
        self,
        request: google.iam.v1.iam_policy_pb2.GetIamPolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.v1.policy_pb2.Policy, collections.abc.Awaitable[google.iam.v1.policy_pb2.Policy]]:
        """Gets the access control policy for a resource.
        Returns an empty policy if the resource exists and does not have a policy
        set.
        """

    @abc.abstractmethod
    def TestIamPermissions(
        self,
        request: google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse, collections.abc.Awaitable[google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse]]:
        """Returns permissions that a caller has on the specified resource.
        If the resource does not exist, this will return an empty set of
        permissions, not a `NOT_FOUND` error.

        Note: This operation is designed to be used for building permission-aware
        UIs and command-line tools, not for authorization checking. This operation
        may "fail open" without warning.
        """

def add_IAMPolicyServicer_to_server(servicer: IAMPolicyServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
