"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2022 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import abc
import collections.abc
import google.iam.admin.v1.iam_pb2
import google.iam.v1.iam_policy_pb2
import google.iam.v1.policy_pb2
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class IAMStub:
    """Creates and manages Identity and Access Management (IAM) resources.

    You can use this service to work with all of the following resources:

    * **Service accounts**, which identify an application or a virtual machine
      (VM) instance rather than a person
    * **Service account keys**, which service accounts use to authenticate with
      Google APIs
    * **IAM policies for service accounts**, which specify the roles that a
      principal has for the service account
    * **IAM custom roles**, which help you limit the number of permissions that
      you grant to principals

    In addition, you can use this service to complete the following tasks, among
    others:

    * Test whether a service account can use specific permissions
    * Check which roles you can grant for a specific resource
    * Lint, or validate, condition expressions in an IAM policy

    When you read data from the IAM API, each read is eventually consistent. In
    other words, if you write data with the IAM API, then immediately read that
    data, the read operation might return an older version of the data. To deal
    with this behavior, your application can retry the request with truncated
    exponential backoff.

    In contrast, writing data to the IAM API is sequentially consistent. In other
    words, write operations are always processed in the order in which they were
    received.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListServiceAccounts: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.ListServiceAccountsRequest,
        google.iam.admin.v1.iam_pb2.ListServiceAccountsResponse,
    ]
    """Lists every [ServiceAccount][google.iam.admin.v1.ServiceAccount] that belongs to a specific project."""

    GetServiceAccount: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.GetServiceAccountRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccount,
    ]
    """Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    CreateServiceAccount: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.CreateServiceAccountRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccount,
    ]
    """Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    UpdateServiceAccount: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.ServiceAccount,
        google.iam.admin.v1.iam_pb2.ServiceAccount,
    ]
    """**Note:** We are in the process of deprecating this method. Use
    [PatchServiceAccount][google.iam.admin.v1.IAM.PatchServiceAccount] instead.

    Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    You can update only the `display_name` field.
    """

    PatchServiceAccount: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.PatchServiceAccountRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccount,
    ]
    """Patches a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    DeleteServiceAccount: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DeleteServiceAccountRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    **Warning:** After you delete a service account, you might not be able to
    undelete it. If you know that you need to re-enable the service account in
    the future, use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] instead.

    If you delete a service account, IAM permanently removes the service
    account 30 days later. Google Cloud cannot recover the service account
    after it is permanently removed, even if you file a support request.

    To help avoid unplanned outages, we recommend that you disable the service
    account before you delete it. Use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] to disable the
    service account, then wait at least 24 hours and watch for unintended
    consequences. If there are no unintended consequences, you can delete the
    service account.
    """

    UndeleteServiceAccount: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.UndeleteServiceAccountRequest,
        google.iam.admin.v1.iam_pb2.UndeleteServiceAccountResponse,
    ]
    """Restores a deleted [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    **Important:** It is not always possible to restore a deleted service
    account. Use this method only as a last resort.

    After you delete a service account, IAM permanently removes the service
    account 30 days later. There is no way to restore a deleted service account
    that has been permanently removed.
    """

    EnableServiceAccount: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.EnableServiceAccountRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Enables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] that was disabled by
    [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount].

    If the service account is already enabled, then this method has no effect.

    If the service account was disabled by other means—for example, if Google
    disabled the service account because it was compromised—you cannot use this
    method to enable the service account.
    """

    DisableServiceAccount: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DisableServiceAccountRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Disables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] immediately.

    If an application uses the service account to authenticate, that
    application can no longer call Google APIs or access Google Cloud
    resources. Existing access tokens for the service account are rejected, and
    requests for new access tokens will fail.

    To re-enable the service account, use [EnableServiceAccount][google.iam.admin.v1.IAM.EnableServiceAccount]. After you
    re-enable the service account, its existing access tokens will be accepted,
    and you can request new access tokens.

    To help avoid unplanned outages, we recommend that you disable the service
    account before you delete it. Use this method to disable the service
    account, then wait at least 24 hours and watch for unintended consequences.
    If there are no unintended consequences, you can delete the service account
    with [DeleteServiceAccount][google.iam.admin.v1.IAM.DeleteServiceAccount].
    """

    ListServiceAccountKeys: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.ListServiceAccountKeysRequest,
        google.iam.admin.v1.iam_pb2.ListServiceAccountKeysResponse,
    ]
    """Lists every [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey] for a service account."""

    GetServiceAccountKey: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.GetServiceAccountKeyRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccountKey,
    ]
    """Gets a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    CreateServiceAccountKey: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.CreateServiceAccountKeyRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccountKey,
    ]
    """Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    UploadServiceAccountKey: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.UploadServiceAccountKeyRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccountKey,
    ]
    """Uploads the public key portion of a key pair that you manage, and
    associates the public key with a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    After you upload the public key, you can use the private key from the key
    pair as a service account key.
    """

    DeleteServiceAccountKey: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DeleteServiceAccountKeyRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. Deleting a service account key does not
    revoke short-lived credentials that have been issued based on the service
    account key.
    """

    DisableServiceAccountKey: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DisableServiceAccountKeyRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Disable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. A disabled service account key can be
    re-enabled with [EnableServiceAccountKey][google.iam.admin.v1.IAM.EnableServiceAccountKey].
    """

    EnableServiceAccountKey: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.EnableServiceAccountKeyRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Enable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    SignBlob: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.SignBlobRequest,
        google.iam.admin.v1.iam_pb2.SignBlobResponse,
    ]
    """**Note:** This method is deprecated. Use the
    [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
    method in the IAM Service Account Credentials API instead. If you currently
    use this method, see the [migration
    guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
    instructions.

    Signs a blob using the system-managed private key for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    """

    SignJwt: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.SignJwtRequest,
        google.iam.admin.v1.iam_pb2.SignJwtResponse,
    ]
    """**Note:** This method is deprecated. Use the
    [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
    method in the IAM Service Account Credentials API instead. If you currently
    use this method, see the [migration
    guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
    instructions.

    Signs a JSON Web Token (JWT) using the system-managed private key for a
    [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    """

    GetIamPolicy: grpc.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.GetIamPolicyRequest,
        google.iam.v1.policy_pb2.Policy,
    ]
    """Gets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount]. This IAM
    policy specifies which principals have access to the service account.

    This method does not tell you whether the service account has been granted
    any roles on other resources. To check whether a service account has role
    grants on a resource, use the `getIamPolicy` method for that resource. For
    example, to view the role grants for a project, call the Resource Manager
    API's
    [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
    method.
    """

    SetIamPolicy: grpc.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.SetIamPolicyRequest,
        google.iam.v1.policy_pb2.Policy,
    ]
    """Sets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    Use this method to grant or revoke access to the service account. For
    example, you could grant a principal the ability to impersonate the service
    account.

    This method does not enable the service account to access other resources.
    To grant roles to a service account on a resource, follow these steps:

    1. Call the resource's `getIamPolicy` method to get its current IAM policy.
    2. Edit the policy so that it binds the service account to an IAM role for
    the resource.
    3. Call the resource's `setIamPolicy` method to update its IAM policy.

    For detailed instructions, see
    [Manage access to project, folders, and
    organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts)
    or [Manage access to other
    resources](https://cloud.google.com/iam/help/access/manage-other-resources).
    """

    TestIamPermissions: grpc.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest,
        google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse,
    ]
    """Tests whether the caller has the specified permissions on a
    [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    """

    QueryGrantableRoles: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.QueryGrantableRolesRequest,
        google.iam.admin.v1.iam_pb2.QueryGrantableRolesResponse,
    ]
    """Lists roles that can be granted on a Google Cloud resource. A role is
    grantable if the IAM policy for the resource can contain bindings to the
    role.
    """

    ListRoles: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.ListRolesRequest,
        google.iam.admin.v1.iam_pb2.ListRolesResponse,
    ]
    """Lists every predefined [Role][google.iam.admin.v1.Role] that IAM supports, or every custom role
    that is defined for an organization or project.
    """

    GetRole: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.GetRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Gets the definition of a [Role][google.iam.admin.v1.Role]."""

    CreateRole: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.CreateRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Creates a new custom [Role][google.iam.admin.v1.Role]."""

    UpdateRole: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.UpdateRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Updates the definition of a custom [Role][google.iam.admin.v1.Role]."""

    DeleteRole: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DeleteRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Deletes a custom [Role][google.iam.admin.v1.Role].

    When you delete a custom role, the following changes occur immediately:

    * You cannot bind a principal to the custom role in an IAM
    [Policy][google.iam.v1.Policy].
    * Existing bindings to the custom role are not changed, but they have no
    effect.
    * By default, the response from [ListRoles][google.iam.admin.v1.IAM.ListRoles] does not include the custom
    role.

    You have 7 days to undelete the custom role. After 7 days, the following
    changes occur:

    * The custom role is permanently deleted and cannot be recovered.
    * If an IAM policy contains a binding to the custom role, the binding is
    permanently removed.
    """

    UndeleteRole: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.UndeleteRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Undeletes a custom [Role][google.iam.admin.v1.Role]."""

    QueryTestablePermissions: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.QueryTestablePermissionsRequest,
        google.iam.admin.v1.iam_pb2.QueryTestablePermissionsResponse,
    ]
    """Lists every permission that you can test on a resource. A permission is
    testable if you can check whether a principal has that permission on the
    resource.
    """

    QueryAuditableServices: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.QueryAuditableServicesRequest,
        google.iam.admin.v1.iam_pb2.QueryAuditableServicesResponse,
    ]
    """Returns a list of services that allow you to opt into audit logs that are
    not generated by default.

    To learn more about audit logs, see the [Logging
    documentation](https://cloud.google.com/logging/docs/audit).
    """

    LintPolicy: grpc.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.LintPolicyRequest,
        google.iam.admin.v1.iam_pb2.LintPolicyResponse,
    ]
    """Lints, or validates, an IAM policy. Currently checks the
    [google.iam.v1.Binding.condition][google.iam.v1.Binding.condition] field, which contains a condition
    expression for a role binding.

    Successful calls to this method always return an HTTP `200 OK` status code,
    even if the linter detects an issue in the IAM policy.
    """

class IAMAsyncStub:
    """Creates and manages Identity and Access Management (IAM) resources.

    You can use this service to work with all of the following resources:

    * **Service accounts**, which identify an application or a virtual machine
      (VM) instance rather than a person
    * **Service account keys**, which service accounts use to authenticate with
      Google APIs
    * **IAM policies for service accounts**, which specify the roles that a
      principal has for the service account
    * **IAM custom roles**, which help you limit the number of permissions that
      you grant to principals

    In addition, you can use this service to complete the following tasks, among
    others:

    * Test whether a service account can use specific permissions
    * Check which roles you can grant for a specific resource
    * Lint, or validate, condition expressions in an IAM policy

    When you read data from the IAM API, each read is eventually consistent. In
    other words, if you write data with the IAM API, then immediately read that
    data, the read operation might return an older version of the data. To deal
    with this behavior, your application can retry the request with truncated
    exponential backoff.

    In contrast, writing data to the IAM API is sequentially consistent. In other
    words, write operations are always processed in the order in which they were
    received.
    """

    ListServiceAccounts: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.ListServiceAccountsRequest,
        google.iam.admin.v1.iam_pb2.ListServiceAccountsResponse,
    ]
    """Lists every [ServiceAccount][google.iam.admin.v1.ServiceAccount] that belongs to a specific project."""

    GetServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.GetServiceAccountRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccount,
    ]
    """Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    CreateServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.CreateServiceAccountRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccount,
    ]
    """Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    UpdateServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.ServiceAccount,
        google.iam.admin.v1.iam_pb2.ServiceAccount,
    ]
    """**Note:** We are in the process of deprecating this method. Use
    [PatchServiceAccount][google.iam.admin.v1.IAM.PatchServiceAccount] instead.

    Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    You can update only the `display_name` field.
    """

    PatchServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.PatchServiceAccountRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccount,
    ]
    """Patches a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    DeleteServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DeleteServiceAccountRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    **Warning:** After you delete a service account, you might not be able to
    undelete it. If you know that you need to re-enable the service account in
    the future, use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] instead.

    If you delete a service account, IAM permanently removes the service
    account 30 days later. Google Cloud cannot recover the service account
    after it is permanently removed, even if you file a support request.

    To help avoid unplanned outages, we recommend that you disable the service
    account before you delete it. Use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] to disable the
    service account, then wait at least 24 hours and watch for unintended
    consequences. If there are no unintended consequences, you can delete the
    service account.
    """

    UndeleteServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.UndeleteServiceAccountRequest,
        google.iam.admin.v1.iam_pb2.UndeleteServiceAccountResponse,
    ]
    """Restores a deleted [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    **Important:** It is not always possible to restore a deleted service
    account. Use this method only as a last resort.

    After you delete a service account, IAM permanently removes the service
    account 30 days later. There is no way to restore a deleted service account
    that has been permanently removed.
    """

    EnableServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.EnableServiceAccountRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Enables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] that was disabled by
    [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount].

    If the service account is already enabled, then this method has no effect.

    If the service account was disabled by other means—for example, if Google
    disabled the service account because it was compromised—you cannot use this
    method to enable the service account.
    """

    DisableServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DisableServiceAccountRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Disables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] immediately.

    If an application uses the service account to authenticate, that
    application can no longer call Google APIs or access Google Cloud
    resources. Existing access tokens for the service account are rejected, and
    requests for new access tokens will fail.

    To re-enable the service account, use [EnableServiceAccount][google.iam.admin.v1.IAM.EnableServiceAccount]. After you
    re-enable the service account, its existing access tokens will be accepted,
    and you can request new access tokens.

    To help avoid unplanned outages, we recommend that you disable the service
    account before you delete it. Use this method to disable the service
    account, then wait at least 24 hours and watch for unintended consequences.
    If there are no unintended consequences, you can delete the service account
    with [DeleteServiceAccount][google.iam.admin.v1.IAM.DeleteServiceAccount].
    """

    ListServiceAccountKeys: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.ListServiceAccountKeysRequest,
        google.iam.admin.v1.iam_pb2.ListServiceAccountKeysResponse,
    ]
    """Lists every [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey] for a service account."""

    GetServiceAccountKey: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.GetServiceAccountKeyRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccountKey,
    ]
    """Gets a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    CreateServiceAccountKey: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.CreateServiceAccountKeyRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccountKey,
    ]
    """Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    UploadServiceAccountKey: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.UploadServiceAccountKeyRequest,
        google.iam.admin.v1.iam_pb2.ServiceAccountKey,
    ]
    """Uploads the public key portion of a key pair that you manage, and
    associates the public key with a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    After you upload the public key, you can use the private key from the key
    pair as a service account key.
    """

    DeleteServiceAccountKey: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DeleteServiceAccountKeyRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. Deleting a service account key does not
    revoke short-lived credentials that have been issued based on the service
    account key.
    """

    DisableServiceAccountKey: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DisableServiceAccountKeyRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Disable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. A disabled service account key can be
    re-enabled with [EnableServiceAccountKey][google.iam.admin.v1.IAM.EnableServiceAccountKey].
    """

    EnableServiceAccountKey: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.EnableServiceAccountKeyRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Enable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    SignBlob: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.SignBlobRequest,
        google.iam.admin.v1.iam_pb2.SignBlobResponse,
    ]
    """**Note:** This method is deprecated. Use the
    [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
    method in the IAM Service Account Credentials API instead. If you currently
    use this method, see the [migration
    guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
    instructions.

    Signs a blob using the system-managed private key for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    """

    SignJwt: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.SignJwtRequest,
        google.iam.admin.v1.iam_pb2.SignJwtResponse,
    ]
    """**Note:** This method is deprecated. Use the
    [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
    method in the IAM Service Account Credentials API instead. If you currently
    use this method, see the [migration
    guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
    instructions.

    Signs a JSON Web Token (JWT) using the system-managed private key for a
    [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    """

    GetIamPolicy: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.GetIamPolicyRequest,
        google.iam.v1.policy_pb2.Policy,
    ]
    """Gets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount]. This IAM
    policy specifies which principals have access to the service account.

    This method does not tell you whether the service account has been granted
    any roles on other resources. To check whether a service account has role
    grants on a resource, use the `getIamPolicy` method for that resource. For
    example, to view the role grants for a project, call the Resource Manager
    API's
    [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
    method.
    """

    SetIamPolicy: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.SetIamPolicyRequest,
        google.iam.v1.policy_pb2.Policy,
    ]
    """Sets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

    Use this method to grant or revoke access to the service account. For
    example, you could grant a principal the ability to impersonate the service
    account.

    This method does not enable the service account to access other resources.
    To grant roles to a service account on a resource, follow these steps:

    1. Call the resource's `getIamPolicy` method to get its current IAM policy.
    2. Edit the policy so that it binds the service account to an IAM role for
    the resource.
    3. Call the resource's `setIamPolicy` method to update its IAM policy.

    For detailed instructions, see
    [Manage access to project, folders, and
    organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts)
    or [Manage access to other
    resources](https://cloud.google.com/iam/help/access/manage-other-resources).
    """

    TestIamPermissions: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest,
        google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse,
    ]
    """Tests whether the caller has the specified permissions on a
    [ServiceAccount][google.iam.admin.v1.ServiceAccount].
    """

    QueryGrantableRoles: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.QueryGrantableRolesRequest,
        google.iam.admin.v1.iam_pb2.QueryGrantableRolesResponse,
    ]
    """Lists roles that can be granted on a Google Cloud resource. A role is
    grantable if the IAM policy for the resource can contain bindings to the
    role.
    """

    ListRoles: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.ListRolesRequest,
        google.iam.admin.v1.iam_pb2.ListRolesResponse,
    ]
    """Lists every predefined [Role][google.iam.admin.v1.Role] that IAM supports, or every custom role
    that is defined for an organization or project.
    """

    GetRole: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.GetRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Gets the definition of a [Role][google.iam.admin.v1.Role]."""

    CreateRole: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.CreateRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Creates a new custom [Role][google.iam.admin.v1.Role]."""

    UpdateRole: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.UpdateRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Updates the definition of a custom [Role][google.iam.admin.v1.Role]."""

    DeleteRole: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.DeleteRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Deletes a custom [Role][google.iam.admin.v1.Role].

    When you delete a custom role, the following changes occur immediately:

    * You cannot bind a principal to the custom role in an IAM
    [Policy][google.iam.v1.Policy].
    * Existing bindings to the custom role are not changed, but they have no
    effect.
    * By default, the response from [ListRoles][google.iam.admin.v1.IAM.ListRoles] does not include the custom
    role.

    You have 7 days to undelete the custom role. After 7 days, the following
    changes occur:

    * The custom role is permanently deleted and cannot be recovered.
    * If an IAM policy contains a binding to the custom role, the binding is
    permanently removed.
    """

    UndeleteRole: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.UndeleteRoleRequest,
        google.iam.admin.v1.iam_pb2.Role,
    ]
    """Undeletes a custom [Role][google.iam.admin.v1.Role]."""

    QueryTestablePermissions: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.QueryTestablePermissionsRequest,
        google.iam.admin.v1.iam_pb2.QueryTestablePermissionsResponse,
    ]
    """Lists every permission that you can test on a resource. A permission is
    testable if you can check whether a principal has that permission on the
    resource.
    """

    QueryAuditableServices: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.QueryAuditableServicesRequest,
        google.iam.admin.v1.iam_pb2.QueryAuditableServicesResponse,
    ]
    """Returns a list of services that allow you to opt into audit logs that are
    not generated by default.

    To learn more about audit logs, see the [Logging
    documentation](https://cloud.google.com/logging/docs/audit).
    """

    LintPolicy: grpc.aio.UnaryUnaryMultiCallable[
        google.iam.admin.v1.iam_pb2.LintPolicyRequest,
        google.iam.admin.v1.iam_pb2.LintPolicyResponse,
    ]
    """Lints, or validates, an IAM policy. Currently checks the
    [google.iam.v1.Binding.condition][google.iam.v1.Binding.condition] field, which contains a condition
    expression for a role binding.

    Successful calls to this method always return an HTTP `200 OK` status code,
    even if the linter detects an issue in the IAM policy.
    """

class IAMServicer(metaclass=abc.ABCMeta):
    """Creates and manages Identity and Access Management (IAM) resources.

    You can use this service to work with all of the following resources:

    * **Service accounts**, which identify an application or a virtual machine
      (VM) instance rather than a person
    * **Service account keys**, which service accounts use to authenticate with
      Google APIs
    * **IAM policies for service accounts**, which specify the roles that a
      principal has for the service account
    * **IAM custom roles**, which help you limit the number of permissions that
      you grant to principals

    In addition, you can use this service to complete the following tasks, among
    others:

    * Test whether a service account can use specific permissions
    * Check which roles you can grant for a specific resource
    * Lint, or validate, condition expressions in an IAM policy

    When you read data from the IAM API, each read is eventually consistent. In
    other words, if you write data with the IAM API, then immediately read that
    data, the read operation might return an older version of the data. To deal
    with this behavior, your application can retry the request with truncated
    exponential backoff.

    In contrast, writing data to the IAM API is sequentially consistent. In other
    words, write operations are always processed in the order in which they were
    received.
    """

    @abc.abstractmethod
    def ListServiceAccounts(
        self,
        request: google.iam.admin.v1.iam_pb2.ListServiceAccountsRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ListServiceAccountsResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ListServiceAccountsResponse]]:
        """Lists every [ServiceAccount][google.iam.admin.v1.ServiceAccount] that belongs to a specific project."""

    @abc.abstractmethod
    def GetServiceAccount(
        self,
        request: google.iam.admin.v1.iam_pb2.GetServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ServiceAccount, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ServiceAccount]]:
        """Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    @abc.abstractmethod
    def CreateServiceAccount(
        self,
        request: google.iam.admin.v1.iam_pb2.CreateServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ServiceAccount, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ServiceAccount]]:
        """Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    @abc.abstractmethod
    def UpdateServiceAccount(
        self,
        request: google.iam.admin.v1.iam_pb2.ServiceAccount,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ServiceAccount, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ServiceAccount]]:
        """**Note:** We are in the process of deprecating this method. Use
        [PatchServiceAccount][google.iam.admin.v1.IAM.PatchServiceAccount] instead.

        Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

        You can update only the `display_name` field.
        """

    @abc.abstractmethod
    def PatchServiceAccount(
        self,
        request: google.iam.admin.v1.iam_pb2.PatchServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ServiceAccount, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ServiceAccount]]:
        """Patches a [ServiceAccount][google.iam.admin.v1.ServiceAccount]."""

    @abc.abstractmethod
    def DeleteServiceAccount(
        self,
        request: google.iam.admin.v1.iam_pb2.DeleteServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

        **Warning:** After you delete a service account, you might not be able to
        undelete it. If you know that you need to re-enable the service account in
        the future, use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] instead.

        If you delete a service account, IAM permanently removes the service
        account 30 days later. Google Cloud cannot recover the service account
        after it is permanently removed, even if you file a support request.

        To help avoid unplanned outages, we recommend that you disable the service
        account before you delete it. Use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] to disable the
        service account, then wait at least 24 hours and watch for unintended
        consequences. If there are no unintended consequences, you can delete the
        service account.
        """

    @abc.abstractmethod
    def UndeleteServiceAccount(
        self,
        request: google.iam.admin.v1.iam_pb2.UndeleteServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.UndeleteServiceAccountResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.UndeleteServiceAccountResponse]]:
        """Restores a deleted [ServiceAccount][google.iam.admin.v1.ServiceAccount].

        **Important:** It is not always possible to restore a deleted service
        account. Use this method only as a last resort.

        After you delete a service account, IAM permanently removes the service
        account 30 days later. There is no way to restore a deleted service account
        that has been permanently removed.
        """

    @abc.abstractmethod
    def EnableServiceAccount(
        self,
        request: google.iam.admin.v1.iam_pb2.EnableServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Enables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] that was disabled by
        [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount].

        If the service account is already enabled, then this method has no effect.

        If the service account was disabled by other means—for example, if Google
        disabled the service account because it was compromised—you cannot use this
        method to enable the service account.
        """

    @abc.abstractmethod
    def DisableServiceAccount(
        self,
        request: google.iam.admin.v1.iam_pb2.DisableServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Disables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] immediately.

        If an application uses the service account to authenticate, that
        application can no longer call Google APIs or access Google Cloud
        resources. Existing access tokens for the service account are rejected, and
        requests for new access tokens will fail.

        To re-enable the service account, use [EnableServiceAccount][google.iam.admin.v1.IAM.EnableServiceAccount]. After you
        re-enable the service account, its existing access tokens will be accepted,
        and you can request new access tokens.

        To help avoid unplanned outages, we recommend that you disable the service
        account before you delete it. Use this method to disable the service
        account, then wait at least 24 hours and watch for unintended consequences.
        If there are no unintended consequences, you can delete the service account
        with [DeleteServiceAccount][google.iam.admin.v1.IAM.DeleteServiceAccount].
        """

    @abc.abstractmethod
    def ListServiceAccountKeys(
        self,
        request: google.iam.admin.v1.iam_pb2.ListServiceAccountKeysRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ListServiceAccountKeysResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ListServiceAccountKeysResponse]]:
        """Lists every [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey] for a service account."""

    @abc.abstractmethod
    def GetServiceAccountKey(
        self,
        request: google.iam.admin.v1.iam_pb2.GetServiceAccountKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ServiceAccountKey, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ServiceAccountKey]]:
        """Gets a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    @abc.abstractmethod
    def CreateServiceAccountKey(
        self,
        request: google.iam.admin.v1.iam_pb2.CreateServiceAccountKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ServiceAccountKey, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ServiceAccountKey]]:
        """Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    @abc.abstractmethod
    def UploadServiceAccountKey(
        self,
        request: google.iam.admin.v1.iam_pb2.UploadServiceAccountKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ServiceAccountKey, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ServiceAccountKey]]:
        """Uploads the public key portion of a key pair that you manage, and
        associates the public key with a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

        After you upload the public key, you can use the private key from the key
        pair as a service account key.
        """

    @abc.abstractmethod
    def DeleteServiceAccountKey(
        self,
        request: google.iam.admin.v1.iam_pb2.DeleteServiceAccountKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. Deleting a service account key does not
        revoke short-lived credentials that have been issued based on the service
        account key.
        """

    @abc.abstractmethod
    def DisableServiceAccountKey(
        self,
        request: google.iam.admin.v1.iam_pb2.DisableServiceAccountKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Disable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. A disabled service account key can be
        re-enabled with [EnableServiceAccountKey][google.iam.admin.v1.IAM.EnableServiceAccountKey].
        """

    @abc.abstractmethod
    def EnableServiceAccountKey(
        self,
        request: google.iam.admin.v1.iam_pb2.EnableServiceAccountKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Enable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]."""

    @abc.abstractmethod
    def SignBlob(
        self,
        request: google.iam.admin.v1.iam_pb2.SignBlobRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.SignBlobResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.SignBlobResponse]]:
        """**Note:** This method is deprecated. Use the
        [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
        method in the IAM Service Account Credentials API instead. If you currently
        use this method, see the [migration
        guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
        instructions.

        Signs a blob using the system-managed private key for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
        """

    @abc.abstractmethod
    def SignJwt(
        self,
        request: google.iam.admin.v1.iam_pb2.SignJwtRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.SignJwtResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.SignJwtResponse]]:
        """**Note:** This method is deprecated. Use the
        [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
        method in the IAM Service Account Credentials API instead. If you currently
        use this method, see the [migration
        guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
        instructions.

        Signs a JSON Web Token (JWT) using the system-managed private key for a
        [ServiceAccount][google.iam.admin.v1.ServiceAccount].
        """

    @abc.abstractmethod
    def GetIamPolicy(
        self,
        request: google.iam.v1.iam_policy_pb2.GetIamPolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.v1.policy_pb2.Policy, collections.abc.Awaitable[google.iam.v1.policy_pb2.Policy]]:
        """Gets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount]. This IAM
        policy specifies which principals have access to the service account.

        This method does not tell you whether the service account has been granted
        any roles on other resources. To check whether a service account has role
        grants on a resource, use the `getIamPolicy` method for that resource. For
        example, to view the role grants for a project, call the Resource Manager
        API's
        [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
        method.
        """

    @abc.abstractmethod
    def SetIamPolicy(
        self,
        request: google.iam.v1.iam_policy_pb2.SetIamPolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.v1.policy_pb2.Policy, collections.abc.Awaitable[google.iam.v1.policy_pb2.Policy]]:
        """Sets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount].

        Use this method to grant or revoke access to the service account. For
        example, you could grant a principal the ability to impersonate the service
        account.

        This method does not enable the service account to access other resources.
        To grant roles to a service account on a resource, follow these steps:

        1. Call the resource's `getIamPolicy` method to get its current IAM policy.
        2. Edit the policy so that it binds the service account to an IAM role for
        the resource.
        3. Call the resource's `setIamPolicy` method to update its IAM policy.

        For detailed instructions, see
        [Manage access to project, folders, and
        organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts)
        or [Manage access to other
        resources](https://cloud.google.com/iam/help/access/manage-other-resources).
        """

    @abc.abstractmethod
    def TestIamPermissions(
        self,
        request: google.iam.v1.iam_policy_pb2.TestIamPermissionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse, collections.abc.Awaitable[google.iam.v1.iam_policy_pb2.TestIamPermissionsResponse]]:
        """Tests whether the caller has the specified permissions on a
        [ServiceAccount][google.iam.admin.v1.ServiceAccount].
        """

    @abc.abstractmethod
    def QueryGrantableRoles(
        self,
        request: google.iam.admin.v1.iam_pb2.QueryGrantableRolesRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.QueryGrantableRolesResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.QueryGrantableRolesResponse]]:
        """Lists roles that can be granted on a Google Cloud resource. A role is
        grantable if the IAM policy for the resource can contain bindings to the
        role.
        """

    @abc.abstractmethod
    def ListRoles(
        self,
        request: google.iam.admin.v1.iam_pb2.ListRolesRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.ListRolesResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.ListRolesResponse]]:
        """Lists every predefined [Role][google.iam.admin.v1.Role] that IAM supports, or every custom role
        that is defined for an organization or project.
        """

    @abc.abstractmethod
    def GetRole(
        self,
        request: google.iam.admin.v1.iam_pb2.GetRoleRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.Role, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.Role]]:
        """Gets the definition of a [Role][google.iam.admin.v1.Role]."""

    @abc.abstractmethod
    def CreateRole(
        self,
        request: google.iam.admin.v1.iam_pb2.CreateRoleRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.Role, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.Role]]:
        """Creates a new custom [Role][google.iam.admin.v1.Role]."""

    @abc.abstractmethod
    def UpdateRole(
        self,
        request: google.iam.admin.v1.iam_pb2.UpdateRoleRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.Role, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.Role]]:
        """Updates the definition of a custom [Role][google.iam.admin.v1.Role]."""

    @abc.abstractmethod
    def DeleteRole(
        self,
        request: google.iam.admin.v1.iam_pb2.DeleteRoleRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.Role, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.Role]]:
        """Deletes a custom [Role][google.iam.admin.v1.Role].

        When you delete a custom role, the following changes occur immediately:

        * You cannot bind a principal to the custom role in an IAM
        [Policy][google.iam.v1.Policy].
        * Existing bindings to the custom role are not changed, but they have no
        effect.
        * By default, the response from [ListRoles][google.iam.admin.v1.IAM.ListRoles] does not include the custom
        role.

        You have 7 days to undelete the custom role. After 7 days, the following
        changes occur:

        * The custom role is permanently deleted and cannot be recovered.
        * If an IAM policy contains a binding to the custom role, the binding is
        permanently removed.
        """

    @abc.abstractmethod
    def UndeleteRole(
        self,
        request: google.iam.admin.v1.iam_pb2.UndeleteRoleRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.Role, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.Role]]:
        """Undeletes a custom [Role][google.iam.admin.v1.Role]."""

    @abc.abstractmethod
    def QueryTestablePermissions(
        self,
        request: google.iam.admin.v1.iam_pb2.QueryTestablePermissionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.QueryTestablePermissionsResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.QueryTestablePermissionsResponse]]:
        """Lists every permission that you can test on a resource. A permission is
        testable if you can check whether a principal has that permission on the
        resource.
        """

    @abc.abstractmethod
    def QueryAuditableServices(
        self,
        request: google.iam.admin.v1.iam_pb2.QueryAuditableServicesRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.QueryAuditableServicesResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.QueryAuditableServicesResponse]]:
        """Returns a list of services that allow you to opt into audit logs that are
        not generated by default.

        To learn more about audit logs, see the [Logging
        documentation](https://cloud.google.com/logging/docs/audit).
        """

    @abc.abstractmethod
    def LintPolicy(
        self,
        request: google.iam.admin.v1.iam_pb2.LintPolicyRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.iam.admin.v1.iam_pb2.LintPolicyResponse, collections.abc.Awaitable[google.iam.admin.v1.iam_pb2.LintPolicyResponse]]:
        """Lints, or validates, an IAM policy. Currently checks the
        [google.iam.v1.Binding.condition][google.iam.v1.Binding.condition] field, which contains a condition
        expression for a role binding.

        Successful calls to this method always return an HTTP `200 OK` status code,
        even if the linter detects an issue in the IAM policy.
        """

def add_IAMServicer_to_server(servicer: IAMServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
