"""This file is generated automatically, so changes to this file will be lost."""
from typing import Any, TypeAlias as typing_TypeAlias
import ast
import sys
intORstr: typing_TypeAlias = Any
intORstrORtype_params: typing_TypeAlias = Any
intORtype_params: typing_TypeAlias = Any
yourPythonIsOld: typing_TypeAlias = Any
if sys.version_info >= (3, 11):
    from ast import TryStar as astDOTTryStar
else:
    astDOTTryStar: typing_TypeAlias = yourPythonIsOld
if sys.version_info >= (3, 12):
    from ast import ParamSpec as astDOTParamSpec, type_param as astDOTtype_param, TypeAlias as astDOTTypeAlias, TypeVar as astDOTTypeVar, TypeVarTuple as astDOTTypeVarTuple
else:
    astDOTParamSpec: typing_TypeAlias = yourPythonIsOld
    astDOTtype_param: typing_TypeAlias = yourPythonIsOld
    astDOTTypeAlias: typing_TypeAlias = yourPythonIsOld
    astDOTTypeVar: typing_TypeAlias = yourPythonIsOld
    astDOTTypeVarTuple: typing_TypeAlias = yourPythonIsOld
hasDOTannotation_expr: typing_TypeAlias = ast.AnnAssign
hasDOTannotation_exprOrNone: typing_TypeAlias = ast.arg
hasDOTannotation: typing_TypeAlias = hasDOTannotation_expr | hasDOTannotation_exprOrNone
hasDOTarg_Identifier: typing_TypeAlias = ast.arg
hasDOTarg_IdentifierOrNone: typing_TypeAlias = ast.keyword
hasDOTarg: typing_TypeAlias = hasDOTarg_Identifier | hasDOTarg_IdentifierOrNone
hasDOTargs_arguments: typing_TypeAlias = ast.FunctionDef | ast.AsyncFunctionDef | ast.Lambda
hasDOTargs_list_expr: typing_TypeAlias = ast.Call
hasDOTargs_list_arg: typing_TypeAlias = ast.arguments
hasDOTargs: typing_TypeAlias = hasDOTargs_arguments | hasDOTargs_list_expr | hasDOTargs_list_arg
hasDOTargtypes: typing_TypeAlias = ast.FunctionType
hasDOTasname: typing_TypeAlias = ast.alias
hasDOTattr: typing_TypeAlias = ast.Attribute
hasDOTbases: typing_TypeAlias = ast.ClassDef
hasDOTbody_list_stmt: typing_TypeAlias = ast.Module | ast.Interactive | ast.FunctionDef | ast.AsyncFunctionDef | ast.ClassDef | ast.For | ast.AsyncFor | ast.While | ast.If | ast.With | ast.AsyncWith | ast.Try | ast.ExceptHandler | astDOTTryStar | ast.match_case
hasDOTbody_expr: typing_TypeAlias = ast.Expression | ast.Lambda | ast.IfExp
hasDOTbody: typing_TypeAlias = hasDOTbody_list_stmt | hasDOTbody_expr
hasDOTbound: typing_TypeAlias = astDOTTypeVar
hasDOTcases: typing_TypeAlias = ast.Match
hasDOTcause: typing_TypeAlias = ast.Raise
hasDOTcls: typing_TypeAlias = ast.MatchClass
hasDOTcomparators: typing_TypeAlias = ast.Compare
hasDOTcontext_expr: typing_TypeAlias = ast.withitem
hasDOTconversion: typing_TypeAlias = ast.FormattedValue
hasDOTctx: typing_TypeAlias = ast.Attribute | ast.Subscript | ast.Starred | ast.Name | ast.List | ast.Tuple
hasDOTdecorator_list: typing_TypeAlias = ast.FunctionDef | ast.AsyncFunctionDef | ast.ClassDef
hasDOTdefault_value: typing_TypeAlias = astDOTTypeVar | astDOTParamSpec | astDOTTypeVarTuple
hasDOTdefaults: typing_TypeAlias = ast.arguments
hasDOTelt: typing_TypeAlias = ast.ListComp | ast.SetComp | ast.GeneratorExp
hasDOTelts: typing_TypeAlias = ast.Set | ast.List | ast.Tuple
hasDOTexc: typing_TypeAlias = ast.Raise
hasDOTfinalbody: typing_TypeAlias = ast.Try | astDOTTryStar
hasDOTformat_spec: typing_TypeAlias = ast.FormattedValue
hasDOTfunc: typing_TypeAlias = ast.Call
hasDOTgenerators: typing_TypeAlias = ast.ListComp | ast.SetComp | ast.DictComp | ast.GeneratorExp
hasDOTguard: typing_TypeAlias = ast.match_case
hasDOThandlers: typing_TypeAlias = ast.Try | astDOTTryStar
hasDOTid: typing_TypeAlias = ast.Name
hasDOTifs: typing_TypeAlias = ast.comprehension
hasDOTis_async: typing_TypeAlias = ast.comprehension
hasDOTitems: typing_TypeAlias = ast.With | ast.AsyncWith
hasDOTiter: typing_TypeAlias = ast.For | ast.AsyncFor | ast.comprehension
hasDOTkey: typing_TypeAlias = ast.DictComp
hasDOTkeys_list_exprOrNone: typing_TypeAlias = ast.Dict
hasDOTkeys_list_expr: typing_TypeAlias = ast.MatchMapping
hasDOTkeys: typing_TypeAlias = hasDOTkeys_list_exprOrNone | hasDOTkeys_list_expr
hasDOTkeywords: typing_TypeAlias = ast.ClassDef | ast.Call
hasDOTkind: typing_TypeAlias = ast.Constant
hasDOTkw_defaults: typing_TypeAlias = ast.arguments
hasDOTkwarg: typing_TypeAlias = ast.arguments
hasDOTkwd_attrs: typing_TypeAlias = ast.MatchClass
hasDOTkwd_patterns: typing_TypeAlias = ast.MatchClass
hasDOTkwonlyargs: typing_TypeAlias = ast.arguments
hasDOTleft: typing_TypeAlias = ast.BinOp | ast.Compare
hasDOTlevel: typing_TypeAlias = ast.ImportFrom
hasDOTlineno: typing_TypeAlias = ast.TypeIgnore
hasDOTlower: typing_TypeAlias = ast.Slice
hasDOTmodule: typing_TypeAlias = ast.ImportFrom
hasDOTmsg: typing_TypeAlias = ast.Assert
hasDOTname_Identifier: typing_TypeAlias = ast.FunctionDef | ast.AsyncFunctionDef | ast.ClassDef | astDOTTypeVar | astDOTParamSpec | astDOTTypeVarTuple
hasDOTname_IdentifierOrNone: typing_TypeAlias = ast.ExceptHandler | ast.MatchStar | ast.MatchAs
hasDOTname_str: typing_TypeAlias = ast.alias
hasDOTname_Name: typing_TypeAlias = astDOTTypeAlias
hasDOTname: typing_TypeAlias = hasDOTname_Identifier | hasDOTname_IdentifierOrNone | hasDOTname_str | hasDOTname_Name
hasDOTnames_list_alias: typing_TypeAlias = ast.Import | ast.ImportFrom
hasDOTnames_list_Identifier: typing_TypeAlias = ast.Global | ast.Nonlocal
hasDOTnames: typing_TypeAlias = hasDOTnames_list_alias | hasDOTnames_list_Identifier
hasDOTop_operator: typing_TypeAlias = ast.AugAssign | ast.BinOp
hasDOTop_boolop: typing_TypeAlias = ast.BoolOp
hasDOTop_unaryop: typing_TypeAlias = ast.UnaryOp
hasDOTop: typing_TypeAlias = hasDOTop_operator | hasDOTop_boolop | hasDOTop_unaryop
hasDOToperand: typing_TypeAlias = ast.UnaryOp
hasDOTops: typing_TypeAlias = ast.Compare
hasDOToptional_vars: typing_TypeAlias = ast.withitem
hasDOTorelse_list_stmt: typing_TypeAlias = ast.For | ast.AsyncFor | ast.While | ast.If | ast.Try | astDOTTryStar
hasDOTorelse_expr: typing_TypeAlias = ast.IfExp
hasDOTorelse: typing_TypeAlias = hasDOTorelse_list_stmt | hasDOTorelse_expr
hasDOTpattern_Pattern: typing_TypeAlias = ast.match_case
hasDOTpattern_patternOrNone: typing_TypeAlias = ast.MatchAs
hasDOTpattern: typing_TypeAlias = hasDOTpattern_Pattern | hasDOTpattern_patternOrNone
hasDOTpatterns: typing_TypeAlias = ast.MatchSequence | ast.MatchMapping | ast.MatchClass | ast.MatchOr
hasDOTposonlyargs: typing_TypeAlias = ast.arguments
hasDOTrest: typing_TypeAlias = ast.MatchMapping
hasDOTreturns_expr: typing_TypeAlias = ast.FunctionType
hasDOTreturns_exprOrNone: typing_TypeAlias = ast.FunctionDef | ast.AsyncFunctionDef
hasDOTreturns: typing_TypeAlias = hasDOTreturns_expr | hasDOTreturns_exprOrNone
hasDOTright: typing_TypeAlias = ast.BinOp
hasDOTsimple: typing_TypeAlias = ast.AnnAssign
hasDOTslice: typing_TypeAlias = ast.Subscript
hasDOTstep: typing_TypeAlias = ast.Slice
hasDOTsubject: typing_TypeAlias = ast.Match
hasDOTtag: typing_TypeAlias = ast.TypeIgnore
hasDOTtarget_NameOrAttributeOrSubscript: typing_TypeAlias = ast.AugAssign | ast.AnnAssign
hasDOTtarget_expr: typing_TypeAlias = ast.For | ast.AsyncFor | ast.comprehension
hasDOTtarget_Name: typing_TypeAlias = ast.NamedExpr
hasDOTtarget: typing_TypeAlias = hasDOTtarget_NameOrAttributeOrSubscript | hasDOTtarget_expr | hasDOTtarget_Name
hasDOTtargets: typing_TypeAlias = ast.Delete | ast.Assign
hasDOTtest: typing_TypeAlias = ast.While | ast.If | ast.Assert | ast.IfExp
hasDOTtype: typing_TypeAlias = ast.ExceptHandler
hasDOTtype_comment: typing_TypeAlias = ast.FunctionDef | ast.AsyncFunctionDef | ast.Assign | ast.For | ast.AsyncFor | ast.With | ast.AsyncWith | ast.arg
hasDOTtype_ignores: typing_TypeAlias = ast.Module
hasDOTtype_params: typing_TypeAlias = ast.FunctionDef | ast.AsyncFunctionDef | ast.ClassDef | astDOTTypeAlias
hasDOTupper: typing_TypeAlias = ast.Slice
hasDOTvalue_exprOrNone: typing_TypeAlias = ast.Return | ast.AnnAssign | ast.Yield
hasDOTvalue_expr: typing_TypeAlias = ast.Assign | ast.AugAssign | ast.Expr | ast.NamedExpr | ast.DictComp | ast.Await | ast.YieldFrom | ast.FormattedValue | ast.Attribute | ast.Subscript | ast.Starred | ast.keyword | astDOTTypeAlias | ast.MatchValue
hasDOTvalue_Any: typing_TypeAlias = ast.Constant
hasDOTvalue_LiteralTrueFalseOrNone: typing_TypeAlias = ast.MatchSingleton
hasDOTvalue: typing_TypeAlias = hasDOTvalue_exprOrNone | hasDOTvalue_expr | hasDOTvalue_Any | hasDOTvalue_LiteralTrueFalseOrNone
hasDOTvalues: typing_TypeAlias = ast.BoolOp | ast.Dict | ast.JoinedStr
hasDOTvararg: typing_TypeAlias = ast.arguments
