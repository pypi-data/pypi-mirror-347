#test:
#  image: git.jinr.ru:5005/malyshkin/ubuntu_ntsim_requirements
#  script:
#    - pwd
#    - ls
#    - source /software/geant4-v11.1.0-install/bin/geant4.sh
#    - pip install geant4_pybind==0.1.0-beta.11 numpy h5py matplotlib configargparse
#    - export PYTHONPATH=${PWD}:$PYTHONPATH
#    - echo $PYTHONPATH
#    - cd /workdir
#    - python -m g4camp.run_g4camp # this cannot import geant4_pybind (???)

# The Docker image that will be used to build your app
stages:
  - install
  - publish-docs
  - publish-pypi

variables:
  PYTHON_VERSION: "3.11"

build-docs:
  stage: publish-docs
  needs: ["install"]
  image: ruby:2.7
  pages: true #mark that this job produces output for GitLab.pages
  script:
    - gem install bundler -v 2.4.22
    - bundle install
    - bundle exec jekyll build -s docs -d public
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED

# Common setup for all jobs
.setup: &setup
  image: python:$PYTHON_VERSION
  before_script:
    - python -m venv .venv
    - source .venv/bin/activate
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .venv/
      - .cache/pip

install:
  stage: install
  <<: *setup
  script:
    - pip install .
  artifacts:
    paths:
      - .venv/
    expire_in: 1 hour
  rules:
      - if: $CI_COMMIT_TAG

publish-test: &publish_base
  stage: publish-pypi
  needs: ["install"]
  <<: *setup
  environment: deploy_testpypi 
  script:
    - pip install twine build
    - python -m build
    - twine upload dist/* --username __token__ --password $PYPI_TOKEN --repository $PYPI_REPOSITORY
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED != "true"

publish-pypi:
  <<: *publish_base
  environment: deploy_pypi 
  before_script:
    #check if the current tag is consistent with the __version__
    - | 
      python -c "
      import os
      from g4camp.__about__ import __version__
      current_tag = os.getenv('CI_COMMIT_TAG', '').lstrip('v')
      assert __version__ == current_tag, f'Version mismatch: {__version__} != {current_tag}'
      "
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"