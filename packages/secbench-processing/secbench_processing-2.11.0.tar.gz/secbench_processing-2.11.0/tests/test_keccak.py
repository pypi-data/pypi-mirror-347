###
# Copyright CEA (Commissariat à l'énergie atomique et aux
# énergies alternatives) (2017-2025)
#
# This software is governed by the CeCILL  license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL license and that you accept its terms.
###

import numpy as np
import pytest

from secbench.processing.crypto.keccak import Keccak_f


def test_init():
    with pytest.raises(ValueError):
        Keccak_f(12345)

    ke = Keccak_f(1600)
    assert ke._w == 64
    assert ke._nrounds == 24


# fmt: off
EXAMPLE_STATE = np.array([
    [0xdc, 0x7f, 0x32, 0x86, 0xbb, 0x9c, 0xa6, 0xa0, 0x71, 0x25, 0x11, 0xa1, 0xb8, 0x8a, 0x9f, 0x39, 0x21, 0x25, 0xe6, 0xad, 0xe2, 0x3f, 0xa4, 0xaf, 0x91],
    [0x5a, 0x60, 0x11, 0x63, 0xbe, 0xad, 0xd8, 0xcf, 0xba, 0xb0, 0x88, 0x73, 0x80, 0xe7, 0x95, 0xf6, 0x4c, 0x41, 0x07, 0x38, 0x8d, 0x05, 0x79, 0xf4, 0x4c]],
    dtype=np.uint8)
# fmt: on


def test_theta():
    result = Keccak_f(200).theta(EXAMPLE_STATE)
    # fmt: off
    expected = np.array([
        [0x2d, 0xa2, 0x3c, 0x57, 0x9a, 0x6d, 0x7b, 0xae, 0xa0, 0x04, 0xe0, 0x7c, 0xb6, 0x5b, 0xbe, 0xc8, 0xfc, 0x2b, 0x37, 0x8c, 0x13, 0xe2, 0xaa, 0x7e, 0xb0],
        [0xb0, 0xa8, 0x08, 0xda, 0x7b, 0x47, 0x10, 0xd6, 0x03, 0x75, 0x62, 0xbb, 0x99, 0x5e, 0x50, 0x1c, 0x84, 0x58, 0xbe, 0xfd, 0x67, 0xcd, 0x60, 0x4d, 0x89]],
        dtype=np.uint8)
    # fmt: on
    assert np.all(result == expected)


def test_rho():
    ke = Keccak_f(200)
    result = ke.rho(EXAMPLE_STATE)
    # fmt: off
    expected = np.array([
        [0xdc, 0xfe, 0x8c, 0x68, 0xdd, 0xc9, 0x6a, 0x28, 0xb8, 0x52, 0x88, 0x86, 0xc5, 0x15, 0xcf, 0x72, 0x24, 0x92, 0xdc, 0xad, 0x8b, 0xfc, 0x94, 0xaf, 0x64],
        [0x5a, 0xc0, 0x44, 0x36, 0xf5, 0xda, 0x8d, 0xf3, 0x5d, 0x0b, 0x44, 0xcd, 0x04, 0xcf, 0xca, 0xed, 0x89, 0xa0, 0xe0, 0x38, 0x36, 0x14, 0x2f, 0xf4, 0x13]],
        dtype=np.uint8)
    # fmt: on
    assert np.all(result == expected)


def test_pi():
    ke = Keccak_f(200)
    result = ke.pi(EXAMPLE_STATE)
    # fmt: off
    expected = np.array([
        [0xdc, 0xa6, 0xb8, 0xe6, 0x91, 0x86, 0x25, 0x11, 0x21, 0xa4, 0x7f, 0xa0, 0x8a, 0xad, 0xe2, 0xbb, 0x9c, 0xa1, 0x25, 0xaf, 0x32, 0x71, 0x9f, 0x39, 0x3f],
        [0x5a, 0xd8, 0x80, 0x07, 0x4c, 0x63, 0xb0, 0x88, 0x4c, 0x79, 0x60, 0xcf, 0xe7, 0x38, 0x8d, 0xbe, 0xad, 0x73, 0x41, 0xf4, 0x11, 0xba, 0x95, 0xf6, 0x05]],
        dtype=np.uint8)
    # fmt: on
    assert np.all(result == expected)


def test_chi():
    ke = Keccak_f(200)
    result = ke.chi(EXAMPLE_STATE)
    # fmt: off
    expected = np.array([
        [0xdc, 0xfb, 0x0b, 0xc2, 0x98, 0x9c, 0xf7, 0xa4, 0xe9, 0x07, 0x09, 0xa3, 0xad, 0x8a, 0x3f, 0x3d, 0xe3, 0x2c, 0xf6, 0xad, 0x62, 0x34, 0xb4, 0xcd, 0x8c],
        [0x4b, 0x02, 0x8d, 0x23, 0x9e, 0xaa, 0xe8, 0xcf, 0xb7, 0xe0, 0x08, 0x14, 0x90, 0xef, 0xe6, 0xf7, 0x4a, 0x79, 0xc1, 0x30, 0xf5, 0x81, 0x71, 0x75, 0x4c]],
        dtype=np.uint8)
    # fmt: on
    assert np.all(result == expected)


def test_permutation():
    ke = Keccak_f(200)
    result = ke.permutation(EXAMPLE_STATE)
    # fmt: off
    expected = np.array([
        [0x53, 0xf0, 0x2a, 0x15, 0xec, 0xd8, 0xa8, 0x6e, 0xc5, 0x66, 0x47, 0x39, 0xa9, 0x1e, 0x4f, 0xa1, 0x73, 0xe5, 0xd9, 0x52, 0xc3, 0x21, 0x4c, 0x6c, 0x78],
        [0xf2, 0x9d, 0xe2, 0xed, 0xdc, 0x20, 0x55, 0x5c, 0x25, 0xa3, 0xcc, 0x82, 0x3a, 0xec, 0xce, 0xa0, 0x9c, 0x5d, 0xb0, 0xc2, 0xbe, 0xf5, 0xd6, 0x2f, 0x3f]],
        dtype=np.uint8)
    # fmt: on
    assert np.all(result == expected)