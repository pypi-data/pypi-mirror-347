# Project metadata and configuration for the AI Circus project
# Author: Angel Martinez-Tenor, 2025. Adapted from https://github.com/angelmtenor/ds-template

[project]
name = "ai-circus"
version = "0.1.1" # Follow semantic versioning (MAJOR.MINOR.PATCH)
description = "Smart AI Building Block for innovative applications."
readme = "README.md"
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [{ name = "Angel Martinez-Tenor", email = "angelmtenor@gmail.com" }]
keywords = [
    "ai",
    "machine learning",
    "deep learning",
    "neural networks",
    "building block",
    "smart systems",
    "python",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Main dependencies (it will always be installed and part of the package)
dependencies = [
    "gitpython>=3.1.44",
    "httpx>=0.28.1",
    "langchain>=0.3.25",
    "langchain-core>=0.3.59",
    "langchain-google-genai>=2.1.4",
    "langchain-openai>=0.3.16",
    "langgraph>=0.4.3",
    "loguru>=0.7.3",
    "psutil>=7.0.0",
    "py-cpuinfo>=9.0.0",
    "pydantic>=2.11.4",
    "python-dotenv>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/angelmtenor/ai-circus"
Repository = "https://github.com/angelmtenor/ai-circus"
Documentation = "https://angelmtenor.github.io/ai-circus"
BugTracker = "https://github.com/angelmtenor/ai-circus/issues"

# Core dependencies


# Optional dependencies
[project.optional-dependencies]
optional = []

# Development dependencies
[dependency-groups]
dev = [
    "debugpy>=1.8.14",
    "deptry>=0.23.0",
    "jupyter>=1.1.1",
    "nodejs>=0.1.1",       # required for pyright
    "pre-commit>=4.2.0",
    "pyinstrument>=5.0.1",
    "pyright>=1.1.400",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "ruff>=0.11.8",
    "twine>=6.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Pyright configuration (static type checker)
[tool.pyright]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/.git",
    "**/.hg",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.ruff_cache",
    "**/.tox",
    "**/.venv",
    "**/build",
    "**/dist",
    "**/docs/_build",
    "**/notebooks_extra",
]
typeCheckingMode = "standard" # "standard" balances strictness and practicality

# Ruff configuration (linter and formatter)
[tool.ruff]
target-version = "py313"
line-length = 120
fix = true
extend-exclude = [".venv", "build", "dist", "notebooks_extra"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ANN", # flake8-annotations
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "RUF", # ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
]
ignore = [
    "B007",    # Unused loop variable
    "B008",    # Function call in argument defaults
    "C901",    # Function too complex
    "D105",    # Missing docstring in magic method
    "D203",    # Blank line before class docstring
    "D205",    # Blank line between summary and description
    "D212",    # Multi-line docstring summary
    "D415",    # First line punctuation
    "ANN401",  # Dynamically typed expressions
    "FBT001",  # Boolean flag in function
    "FBT002",  # Default Boolean flag
    "PLR0913", # Too many arguments
    "G004",    # f-string in log
    "S101",    # Use of assert detected
]

[tool.ruff.lint.per-file-ignores]
"**/notebooks_extra/**" = ["ALL"]
"**.ipynb" = ["E501", "D100", "D103", "D101", "E402", "I002", "T201"]
"**/__init__.py" = ["D104", "F401"]
"tests/**" = ["S101", "D103", "D100", "D104", "SLF001", "B018"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.deptry]


# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
addopts = [
    "--cov=src",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=0", # Tune this value to your needs
    "-ra",
    "-q",
]
testpaths = ["tests"]
python_files = "test_*.py tests_*.py *_test.py"
python_classes = "*Test Test* Describe*"
python_functions = "test_* it_* should_* scenario_*"

# Coverage configuration
[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]

# Add executable scripts
[project.scripts]
ai-hello-world = "ai_circus.tools.hello_world:main"
ai-check-api-keys = "ai_circus.tools.check_api_keys:main"
ai-commit = "ai_circus.tools.generate_commits_messages:run_main"
