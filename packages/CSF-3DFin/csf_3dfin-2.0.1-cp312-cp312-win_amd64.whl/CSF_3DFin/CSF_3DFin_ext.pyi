from typing import Annotated

from numpy.typing import ArrayLike


class CSFParams:
    def __init__(self) -> None: ...

    @property
    def smooth_slope(self) -> bool: ...

    @smooth_slope.setter
    def smooth_slope(self, arg: bool, /) -> None: ...

    @property
    def time_step(self) -> float: ...

    @time_step.setter
    def time_step(self, arg: float, /) -> None: ...

    @property
    def class_threshold(self) -> float: ...

    @class_threshold.setter
    def class_threshold(self, arg: float, /) -> None: ...

    @property
    def cloth_resolution(self) -> float: ...

    @cloth_resolution.setter
    def cloth_resolution(self, arg: float, /) -> None: ...

    @property
    def rigidness(self) -> int: ...

    @rigidness.setter
    def rigidness(self, arg: int, /) -> None: ...

    @property
    def iterations(self) -> int: ...

    @iterations.setter
    def iterations(self, arg: int, /) -> None: ...

    @property
    def iter_tolerance(self) -> float: ...

    @iter_tolerance.setter
    def iter_tolerance(self, arg: float, /) -> None: ...

    @property
    def verbose(self) -> bool: ...

    @verbose.setter
    def verbose(self, arg: bool, /) -> None: ...

class CSF:
    def __init__(self) -> None: ...

    def set_point_cloud(self, point_cloud: Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3))]) -> None: ...

    def run_cloth_simulation(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3))]: ...

    def classify_ground(self) -> tuple[Annotated[ArrayLike, dict(dtype='int32')], Annotated[ArrayLike, dict(dtype='int32')]]: ...

    @property
    def params(self) -> CSFParams: ...

    @params.setter
    def params(self, arg: CSFParams, /) -> None: ...
