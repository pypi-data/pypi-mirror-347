###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "client<llm> OpenAI {\n  provider \"openai\"\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n  retry_policy Exponential\n}\n\nretry_policy Exponential {\n  max_retries 2\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../laoshu\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
    "prompt_clustering.baml": "class PromptCluster {\n  reasoning string\n  description string\n}\n\nclass Prompts {\n  content string[]\n}\n\nfunction DescribePromptsCluster(prompts: Prompts) -> PromptCluster {\n  client OpenAI\n  prompt #\"\n    Below you are given a list of user prompts. Your job is to describe the cluster of prompts.\n\n    The response should be a single paragraph that captures the facts. DO NOT include any interpretation of user intents.\n    The response should be in the same language as the prompts.\n\n    DO NOT quote the prompts in the response. Summarize them as a group.\n\n    Describe the cluster with the following content:\n    ---\n    {{ prompts.content }}\n    ---\n\n    {{ ctx.output_format }}\n\n    Example:\n    Input:\n    ---\n    What is the capital of France?\n    What is the biggest city in China?\n    What is the longest river in India?\n    ---\n\n    Output:\n    ---\n    {\n      \"reasoning\": \"The prompts are about cities and rivers which is a common topic in geography.\",\n      \"description\": \"questions about geography.\"\n    }\n    ---\n  \"#\n}\n\n\ntest single_cluster_description {\n  functions [DescribePromptsCluster]\n  args {\n    content [\n      \"I want to buy a new car\",\n      \"I want to buy a new house\",\n    ]\n  }\n}\n\nfunction DescribeMultiplePromptsClusters(prompts: Prompts[]) -> PromptCluster[] {\n  client OpenAI\n  prompt #\"\n    Below you are given a list of user prompts. Your job is to describe the cluster of prompts.\n    Each list contains multiple prompts. Return the classification in the same order as the prompt groups.\n\n    The response should be a single paragraph that captures the facts. DO NOT include any interpretation of user intents.\n    The response should be in the same language as the prompts.\n\n    DO NOT quote the prompts in the response. Summarize them as a group.\n\n    Describe the clusters with the following content:\n    ---\n    {{ prompts }}\n    ---\n\n    {{ ctx.output_format }}\n\n    Example:\n    Input:\n    ---\n    [\n      \"What is the capital of France?\",\n      \"What is the biggest city in China?\",\n      \"What is the longest river in India?\"\n    ],\n    [\n      \"What should I do if I have a headache?\",\n      \"I have a fever since yesterday, should I go to the hospital?\",\n      \"What is the best way to treat a cold?\"\n    ]\n    ---\n\n    Output:\n    ---\n    [\n      {\n        \"reasoning\": \"The prompts are about cities and rivers which is a common topic in geography.\",\n        \"description\": \"questions about geography.\"\n      },\n      {\n        \"reasoning\": \"The prompts are about health and medicine.\",\n        \"description\": \"questions about health and medicine.\"\n      }\n    ]\n    ---\n  \"#\n}\n\ntest multiple_clusters_description {\n  functions [DescribeMultiplePromptsClusters]\n  args {\n    prompts [\n      {\n        content [\"How do I replace a car battery?\", \"What are common causes of engine overheating?\", \"How often should I change my car's oil?\"]\n      },\n      {\n        content [\"How do I find food in Project Zomboid?\", \"What are the best weapons to use in Project Zomboid?\", \"How do I level up my skills in Project Zomboid?\"]\n      }\n    ]\n  }\n}\n",
}

def get_baml_files():
    return file_map
