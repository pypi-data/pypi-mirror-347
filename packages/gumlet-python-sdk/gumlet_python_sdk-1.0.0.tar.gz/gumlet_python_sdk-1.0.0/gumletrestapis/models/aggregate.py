# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Aggregate(object):

    """Implementation of the 'Aggregate' model.

    Attributes:
        metric (Metric1Enum): The metric to be aggregated for this request.
        function (FunctionEnum): Aggregation function which is to be used.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "metric": 'metric',
        "function": 'function'
    }

    def __init__(self,
                 metric=None,
                 function=None):
        """Constructor for the Aggregate class"""

        # Initialize members of the class
        self.metric = metric 
        self.function = function 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        metric = dictionary.get("metric") if dictionary.get("metric") else None
        function = dictionary.get("function") if dictionary.get("function") else None
        # Return an object of this model
        return cls(metric,
                   function)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'metric={self.metric!r}, '
                f'function={self.function!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'metric={self.metric!s}, '
                f'function={self.function!s})')
