# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.storage_details import StorageDetails


class Output2(object):

    """Implementation of the 'Output2' model.

    Attributes:
        format (str): The model property of type str.
        status_url (str): The model property of type str.
        playback_url (str): The model property of type str.
        dash_playback_url (str): The model property of type str.
        thumbnail_url (List[str]): The model property of type List[str].
        storage_details (StorageDetails): The model property of type
            StorageDetails.
        transcription_word_level_timestamps (str): The model property of type
            str.
        storage_bytes (int): The model property of type int.
        preview_thumbnails_url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "format": 'format',
        "status_url": 'status_url',
        "playback_url": 'playback_url',
        "dash_playback_url": 'dash_playback_url',
        "thumbnail_url": 'thumbnail_url',
        "storage_details": 'storage_details',
        "transcription_word_level_timestamps": 'transcription_word_level_timestamps',
        "storage_bytes": 'storage_bytes',
        "preview_thumbnails_url": 'preview_thumbnails_url'
    }

    _optionals = [
        'format',
        'status_url',
        'playback_url',
        'dash_playback_url',
        'thumbnail_url',
        'storage_details',
        'transcription_word_level_timestamps',
        'storage_bytes',
        'preview_thumbnails_url',
    ]

    def __init__(self,
                 format=APIHelper.SKIP,
                 status_url=APIHelper.SKIP,
                 playback_url=APIHelper.SKIP,
                 dash_playback_url=APIHelper.SKIP,
                 thumbnail_url=APIHelper.SKIP,
                 storage_details=APIHelper.SKIP,
                 transcription_word_level_timestamps=APIHelper.SKIP,
                 storage_bytes=0,
                 preview_thumbnails_url=APIHelper.SKIP):
        """Constructor for the Output2 class"""

        # Initialize members of the class
        if format is not APIHelper.SKIP:
            self.format = format 
        if status_url is not APIHelper.SKIP:
            self.status_url = status_url 
        if playback_url is not APIHelper.SKIP:
            self.playback_url = playback_url 
        if dash_playback_url is not APIHelper.SKIP:
            self.dash_playback_url = dash_playback_url 
        if thumbnail_url is not APIHelper.SKIP:
            self.thumbnail_url = thumbnail_url 
        if storage_details is not APIHelper.SKIP:
            self.storage_details = storage_details 
        if transcription_word_level_timestamps is not APIHelper.SKIP:
            self.transcription_word_level_timestamps = transcription_word_level_timestamps 
        self.storage_bytes = storage_bytes 
        if preview_thumbnails_url is not APIHelper.SKIP:
            self.preview_thumbnails_url = preview_thumbnails_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        format = dictionary.get("format") if dictionary.get("format") else APIHelper.SKIP
        status_url = dictionary.get("status_url") if dictionary.get("status_url") else APIHelper.SKIP
        playback_url = dictionary.get("playback_url") if dictionary.get("playback_url") else APIHelper.SKIP
        dash_playback_url = dictionary.get("dash_playback_url") if dictionary.get("dash_playback_url") else APIHelper.SKIP
        thumbnail_url = dictionary.get("thumbnail_url") if dictionary.get("thumbnail_url") else APIHelper.SKIP
        storage_details = StorageDetails.from_dictionary(dictionary.get('storage_details')) if 'storage_details' in dictionary.keys() else APIHelper.SKIP
        transcription_word_level_timestamps = dictionary.get("transcription_word_level_timestamps") if dictionary.get("transcription_word_level_timestamps") else APIHelper.SKIP
        storage_bytes = dictionary.get("storage_bytes") if dictionary.get("storage_bytes") else 0
        preview_thumbnails_url = dictionary.get("preview_thumbnails_url") if dictionary.get("preview_thumbnails_url") else APIHelper.SKIP
        # Return an object of this model
        return cls(format,
                   status_url,
                   playback_url,
                   dash_playback_url,
                   thumbnail_url,
                   storage_details,
                   transcription_word_level_timestamps,
                   storage_bytes,
                   preview_thumbnails_url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'format={(self.format if hasattr(self, "format") else None)!r}, '
                f'status_url={(self.status_url if hasattr(self, "status_url") else None)!r}, '
                f'playback_url={(self.playback_url if hasattr(self, "playback_url") else None)!r}, '
                f'dash_playback_url={(self.dash_playback_url if hasattr(self, "dash_playback_url") else None)!r}, '
                f'thumbnail_url={(self.thumbnail_url if hasattr(self, "thumbnail_url") else None)!r}, '
                f'storage_details={(self.storage_details if hasattr(self, "storage_details") else None)!r}, '
                f'transcription_word_level_timestamps={(self.transcription_word_level_timestamps if hasattr(self, "transcription_word_level_timestamps") else None)!r}, '
                f'storage_bytes={(self.storage_bytes if hasattr(self, "storage_bytes") else None)!r}, '
                f'preview_thumbnails_url={(self.preview_thumbnails_url if hasattr(self, "preview_thumbnails_url") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'format={(self.format if hasattr(self, "format") else None)!s}, '
                f'status_url={(self.status_url if hasattr(self, "status_url") else None)!s}, '
                f'playback_url={(self.playback_url if hasattr(self, "playback_url") else None)!s}, '
                f'dash_playback_url={(self.dash_playback_url if hasattr(self, "dash_playback_url") else None)!s}, '
                f'thumbnail_url={(self.thumbnail_url if hasattr(self, "thumbnail_url") else None)!s}, '
                f'storage_details={(self.storage_details if hasattr(self, "storage_details") else None)!s}, '
                f'transcription_word_level_timestamps={(self.transcription_word_level_timestamps if hasattr(self, "transcription_word_level_timestamps") else None)!s}, '
                f'storage_bytes={(self.storage_bytes if hasattr(self, "storage_bytes") else None)!s}, '
                f'preview_thumbnails_url={(self.preview_thumbnails_url if hasattr(self, "preview_thumbnails_url") else None)!s})')
