# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.input_2 import Input2
from gumletrestapis.models.output_2 import Output2


class VideoAssetsResponse1(object):

    """Implementation of the 'Video Assets Response1' model.

    Attributes:
        asset_id (str): The model property of type str.
        progress (int): The model property of type int.
        created_at (int): The model property of type int.
        updated_at (int): The model property of type int.
        status (str): The model property of type str.
        tag (List[str]): The model property of type List[str].
        source_id (str): The model property of type str.
        collection_id (str): The model property of type str.
        input (Input2): The model property of type Input2.
        output (Output2): The model property of type Output2.
        processed_at (int): The model property of type int.
        folder (str): The model property of type str.
        playlists (List[Any]): The model property of type List[Any].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asset_id": 'asset_id',
        "progress": 'progress',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "status": 'status',
        "tag": 'tag',
        "source_id": 'source_id',
        "collection_id": 'collection_id',
        "input": 'input',
        "output": 'output',
        "processed_at": 'processed_at',
        "folder": 'folder',
        "playlists": 'playlists'
    }

    _optionals = [
        'asset_id',
        'progress',
        'created_at',
        'updated_at',
        'status',
        'tag',
        'source_id',
        'collection_id',
        'input',
        'output',
        'processed_at',
        'folder',
        'playlists',
    ]

    def __init__(self,
                 asset_id=APIHelper.SKIP,
                 progress=0,
                 created_at=0,
                 updated_at=0,
                 status=APIHelper.SKIP,
                 tag=APIHelper.SKIP,
                 source_id=APIHelper.SKIP,
                 collection_id=APIHelper.SKIP,
                 input=APIHelper.SKIP,
                 output=APIHelper.SKIP,
                 processed_at=0,
                 folder=APIHelper.SKIP,
                 playlists=APIHelper.SKIP):
        """Constructor for the VideoAssetsResponse1 class"""

        # Initialize members of the class
        if asset_id is not APIHelper.SKIP:
            self.asset_id = asset_id 
        self.progress = progress 
        self.created_at = created_at 
        self.updated_at = updated_at 
        if status is not APIHelper.SKIP:
            self.status = status 
        if tag is not APIHelper.SKIP:
            self.tag = tag 
        if source_id is not APIHelper.SKIP:
            self.source_id = source_id 
        if collection_id is not APIHelper.SKIP:
            self.collection_id = collection_id 
        if input is not APIHelper.SKIP:
            self.input = input 
        if output is not APIHelper.SKIP:
            self.output = output 
        self.processed_at = processed_at 
        if folder is not APIHelper.SKIP:
            self.folder = folder 
        if playlists is not APIHelper.SKIP:
            self.playlists = playlists 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        asset_id = dictionary.get("asset_id") if dictionary.get("asset_id") else APIHelper.SKIP
        progress = dictionary.get("progress") if dictionary.get("progress") else 0
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else 0
        updated_at = dictionary.get("updated_at") if dictionary.get("updated_at") else 0
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        tag = dictionary.get("tag") if dictionary.get("tag") else APIHelper.SKIP
        source_id = dictionary.get("source_id") if dictionary.get("source_id") else APIHelper.SKIP
        collection_id = dictionary.get("collection_id") if dictionary.get("collection_id") else APIHelper.SKIP
        input = Input2.from_dictionary(dictionary.get('input')) if 'input' in dictionary.keys() else APIHelper.SKIP
        output = Output2.from_dictionary(dictionary.get('output')) if 'output' in dictionary.keys() else APIHelper.SKIP
        processed_at = dictionary.get("processed_at") if dictionary.get("processed_at") else 0
        folder = dictionary.get("folder") if dictionary.get("folder") else APIHelper.SKIP
        playlists = dictionary.get("playlists") if dictionary.get("playlists") else APIHelper.SKIP
        # Return an object of this model
        return cls(asset_id,
                   progress,
                   created_at,
                   updated_at,
                   status,
                   tag,
                   source_id,
                   collection_id,
                   input,
                   output,
                   processed_at,
                   folder,
                   playlists)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'asset_id={(self.asset_id if hasattr(self, "asset_id") else None)!r}, '
                f'progress={(self.progress if hasattr(self, "progress") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'tag={(self.tag if hasattr(self, "tag") else None)!r}, '
                f'source_id={(self.source_id if hasattr(self, "source_id") else None)!r}, '
                f'collection_id={(self.collection_id if hasattr(self, "collection_id") else None)!r}, '
                f'input={(self.input if hasattr(self, "input") else None)!r}, '
                f'output={(self.output if hasattr(self, "output") else None)!r}, '
                f'processed_at={(self.processed_at if hasattr(self, "processed_at") else None)!r}, '
                f'folder={(self.folder if hasattr(self, "folder") else None)!r}, '
                f'playlists={(self.playlists if hasattr(self, "playlists") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'asset_id={(self.asset_id if hasattr(self, "asset_id") else None)!s}, '
                f'progress={(self.progress if hasattr(self, "progress") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'tag={(self.tag if hasattr(self, "tag") else None)!s}, '
                f'source_id={(self.source_id if hasattr(self, "source_id") else None)!s}, '
                f'collection_id={(self.collection_id if hasattr(self, "collection_id") else None)!s}, '
                f'input={(self.input if hasattr(self, "input") else None)!s}, '
                f'output={(self.output if hasattr(self, "output") else None)!s}, '
                f'processed_at={(self.processed_at if hasattr(self, "processed_at") else None)!s}, '
                f'folder={(self.folder if hasattr(self, "folder") else None)!s}, '
                f'playlists={(self.playlists if hasattr(self, "playlists") else None)!s})')
