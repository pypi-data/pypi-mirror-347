# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class Aws(object):

    """Implementation of the 'Aws' model.

    Attributes:
        bucket_name (str): The model property of type str.
        bucket_region (str): The model property of type str.
        access_key (str): The model property of type str.
        secret (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bucket_name": 'bucket_name',
        "bucket_region": 'bucket_region',
        "access_key": 'access_key',
        "secret": 'secret'
    }

    _optionals = [
        'bucket_name',
        'bucket_region',
        'access_key',
        'secret',
    ]

    def __init__(self,
                 bucket_name=APIHelper.SKIP,
                 bucket_region=APIHelper.SKIP,
                 access_key=APIHelper.SKIP,
                 secret=APIHelper.SKIP):
        """Constructor for the Aws class"""

        # Initialize members of the class
        if bucket_name is not APIHelper.SKIP:
            self.bucket_name = bucket_name 
        if bucket_region is not APIHelper.SKIP:
            self.bucket_region = bucket_region 
        if access_key is not APIHelper.SKIP:
            self.access_key = access_key 
        if secret is not APIHelper.SKIP:
            self.secret = secret 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bucket_name = dictionary.get("bucket_name") if dictionary.get("bucket_name") else APIHelper.SKIP
        bucket_region = dictionary.get("bucket_region") if dictionary.get("bucket_region") else APIHelper.SKIP
        access_key = dictionary.get("access_key") if dictionary.get("access_key") else APIHelper.SKIP
        secret = dictionary.get("secret") if dictionary.get("secret") else APIHelper.SKIP
        # Return an object of this model
        return cls(bucket_name,
                   bucket_region,
                   access_key,
                   secret)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bucket_name={(self.bucket_name if hasattr(self, "bucket_name") else None)!r}, '
                f'bucket_region={(self.bucket_region if hasattr(self, "bucket_region") else None)!r}, '
                f'access_key={(self.access_key if hasattr(self, "access_key") else None)!r}, '
                f'secret={(self.secret if hasattr(self, "secret") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bucket_name={(self.bucket_name if hasattr(self, "bucket_name") else None)!s}, '
                f'bucket_region={(self.bucket_region if hasattr(self, "bucket_region") else None)!s}, '
                f'access_key={(self.access_key if hasattr(self, "access_key") else None)!s}, '
                f'secret={(self.secret if hasattr(self, "secret") else None)!s})')
