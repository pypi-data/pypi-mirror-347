# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class AnimatedGif(object):

    """Implementation of the 'AnimatedGif' model.

    Create an animated GIF from the video.

    Attributes:
        start_offset (str): The time (in seconds or `HH:MM:SS` format) of the
            video timeline where the animated gif should begin. **Default:
            `0`**
        end_offset (str): The time (in seconds or `HH:MM:SS` format) of the
            video timeline where the GIF ends. Defaults to `10` seconds after
            the start_offset. Maximum duration of GIF is limited to `10`
            seconds.
        width (str): The width in pixels (or in percentage value of asset
            width) of the animated GIF. Max width is `640px`.
        height (str): The height in pixels (or in percentage value of asset
            height) of the animated GIF. Max height is `640px`.
        fps (str): The frame rate of the generated GIF. Defaults to `15` fps.
            Max `30` fps.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "start_offset": 'start_offset',
        "end_offset": 'end_offset',
        "width": 'width',
        "height": 'height',
        "fps": 'fps'
    }

    _optionals = [
        'start_offset',
        'end_offset',
        'width',
        'height',
        'fps',
    ]

    def __init__(self,
                 start_offset=APIHelper.SKIP,
                 end_offset=APIHelper.SKIP,
                 width=APIHelper.SKIP,
                 height=APIHelper.SKIP,
                 fps=APIHelper.SKIP):
        """Constructor for the AnimatedGif class"""

        # Initialize members of the class
        if start_offset is not APIHelper.SKIP:
            self.start_offset = start_offset 
        if end_offset is not APIHelper.SKIP:
            self.end_offset = end_offset 
        if width is not APIHelper.SKIP:
            self.width = width 
        if height is not APIHelper.SKIP:
            self.height = height 
        if fps is not APIHelper.SKIP:
            self.fps = fps 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        start_offset = dictionary.get("start_offset") if dictionary.get("start_offset") else APIHelper.SKIP
        end_offset = dictionary.get("end_offset") if dictionary.get("end_offset") else APIHelper.SKIP
        width = dictionary.get("width") if dictionary.get("width") else APIHelper.SKIP
        height = dictionary.get("height") if dictionary.get("height") else APIHelper.SKIP
        fps = dictionary.get("fps") if dictionary.get("fps") else APIHelper.SKIP
        # Return an object of this model
        return cls(start_offset,
                   end_offset,
                   width,
                   height,
                   fps)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'start_offset={(self.start_offset if hasattr(self, "start_offset") else None)!r}, '
                f'end_offset={(self.end_offset if hasattr(self, "end_offset") else None)!r}, '
                f'width={(self.width if hasattr(self, "width") else None)!r}, '
                f'height={(self.height if hasattr(self, "height") else None)!r}, '
                f'fps={(self.fps if hasattr(self, "fps") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'start_offset={(self.start_offset if hasattr(self, "start_offset") else None)!s}, '
                f'end_offset={(self.end_offset if hasattr(self, "end_offset") else None)!s}, '
                f'width={(self.width if hasattr(self, "width") else None)!s}, '
                f'height={(self.height if hasattr(self, "height") else None)!s}, '
                f'fps={(self.fps if hasattr(self, "fps") else None)!s})')
