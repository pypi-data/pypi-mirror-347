# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class VideoAssetsSubtitleUploadRequest(object):

    """Implementation of the 'Video Assets Subtitle Upload Request' model.

    Attributes:
        language_codes (List[str]): List of language Code to upload subtitle
            file  (use <a
            href='https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes'
            > ISO 639-1 </a> Language Codes)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "language_codes": 'language_codes'
    }

    _optionals = [
        'language_codes',
    ]

    def __init__(self,
                 language_codes=APIHelper.SKIP):
        """Constructor for the VideoAssetsSubtitleUploadRequest class"""

        # Initialize members of the class
        if language_codes is not APIHelper.SKIP:
            self.language_codes = language_codes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        language_codes = dictionary.get("language_codes") if dictionary.get("language_codes") else APIHelper.SKIP
        # Return an object of this model
        return cls(language_codes)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'language_codes={(self.language_codes if hasattr(self, "language_codes") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'language_codes={(self.language_codes if hasattr(self, "language_codes") else None)!s})')
