# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class ImageOverlay(object):

    """Implementation of the 'ImageOverlay' model.

    Image overlay can be used to brand a video or add a visual label in the
    form of an image.

    Attributes:
        url (str): This is the required parameter for image overlay, it can be
            a URL to an image that needs to be overlayed.
        horizontal_margin (str): This parameter defines the horizontal
            coordinate value of the corner (determined by `horizontal_align`)
            of the overlay area. Values can be an absolute number of pixels or
            a percentage value relative to the video width. **Default: `0`**
        vertical_margin (str): This parameter defines the vertical coordinate
            value of the corner (determined by `vertical_align`) of the
            overlay area. Values can be an absolute number of pixels or a
            percentage value relative to the video height. **Default: `0`**
        horizontal_align (str): This parameter specifies the horizontal
            alignment of the overlayed image and can be either `left` or
            `right`. **Default: `right`**
        vertical_align (str): This parameter specifies the vertical alignment
            of the overlayed image and can be either `top` or `bottom`.
            **Default: `bottom`**
        width (str): Width of the overlayed image. **Default: `image width`**
        height (str): Height of the overlayed image. **Default: `image
            height`**

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url": 'url',
        "horizontal_margin": 'horizontal_margin',
        "vertical_margin": 'vertical_margin',
        "horizontal_align": 'horizontal_align',
        "vertical_align": 'vertical_align',
        "width": 'width',
        "height": 'height'
    }

    _optionals = [
        'horizontal_margin',
        'vertical_margin',
        'horizontal_align',
        'vertical_align',
        'width',
        'height',
    ]

    def __init__(self,
                 url=None,
                 horizontal_margin=APIHelper.SKIP,
                 vertical_margin=APIHelper.SKIP,
                 horizontal_align=APIHelper.SKIP,
                 vertical_align=APIHelper.SKIP,
                 width=APIHelper.SKIP,
                 height=APIHelper.SKIP):
        """Constructor for the ImageOverlay class"""

        # Initialize members of the class
        self.url = url 
        if horizontal_margin is not APIHelper.SKIP:
            self.horizontal_margin = horizontal_margin 
        if vertical_margin is not APIHelper.SKIP:
            self.vertical_margin = vertical_margin 
        if horizontal_align is not APIHelper.SKIP:
            self.horizontal_align = horizontal_align 
        if vertical_align is not APIHelper.SKIP:
            self.vertical_align = vertical_align 
        if width is not APIHelper.SKIP:
            self.width = width 
        if height is not APIHelper.SKIP:
            self.height = height 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url") if dictionary.get("url") else None
        horizontal_margin = dictionary.get("horizontal_margin") if dictionary.get("horizontal_margin") else APIHelper.SKIP
        vertical_margin = dictionary.get("vertical_margin") if dictionary.get("vertical_margin") else APIHelper.SKIP
        horizontal_align = dictionary.get("horizontal_align") if dictionary.get("horizontal_align") else APIHelper.SKIP
        vertical_align = dictionary.get("vertical_align") if dictionary.get("vertical_align") else APIHelper.SKIP
        width = dictionary.get("width") if dictionary.get("width") else APIHelper.SKIP
        height = dictionary.get("height") if dictionary.get("height") else APIHelper.SKIP
        # Return an object of this model
        return cls(url,
                   horizontal_margin,
                   vertical_margin,
                   horizontal_align,
                   vertical_align,
                   width,
                   height)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'url={self.url!r}, '
                f'horizontal_margin={(self.horizontal_margin if hasattr(self, "horizontal_margin") else None)!r}, '
                f'vertical_margin={(self.vertical_margin if hasattr(self, "vertical_margin") else None)!r}, '
                f'horizontal_align={(self.horizontal_align if hasattr(self, "horizontal_align") else None)!r}, '
                f'vertical_align={(self.vertical_align if hasattr(self, "vertical_align") else None)!r}, '
                f'width={(self.width if hasattr(self, "width") else None)!r}, '
                f'height={(self.height if hasattr(self, "height") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'url={self.url!s}, '
                f'horizontal_margin={(self.horizontal_margin if hasattr(self, "horizontal_margin") else None)!s}, '
                f'vertical_margin={(self.vertical_margin if hasattr(self, "vertical_margin") else None)!s}, '
                f'horizontal_align={(self.horizontal_align if hasattr(self, "horizontal_align") else None)!s}, '
                f'vertical_align={(self.vertical_align if hasattr(self, "vertical_align") else None)!s}, '
                f'width={(self.width if hasattr(self, "width") else None)!s}, '
                f'height={(self.height if hasattr(self, "height") else None)!s})')
