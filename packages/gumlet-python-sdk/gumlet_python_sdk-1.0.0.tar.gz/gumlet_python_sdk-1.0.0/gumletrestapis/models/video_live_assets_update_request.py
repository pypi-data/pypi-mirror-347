# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class VideoLiveAssetsUpdateRequest(object):

    """Implementation of the 'Video Live Assets Update Request' model.

    Attributes:
        live_asset_id (str): Gumlet live video asset id.
        title (str): Your live stream asset title

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "live_asset_id": 'live_asset_id',
        "title": 'title'
    }

    _optionals = [
        'title',
    ]

    def __init__(self,
                 live_asset_id=None,
                 title=APIHelper.SKIP):
        """Constructor for the VideoLiveAssetsUpdateRequest class"""

        # Initialize members of the class
        self.live_asset_id = live_asset_id 
        if title is not APIHelper.SKIP:
            self.title = title 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        live_asset_id = dictionary.get("live_asset_id") if dictionary.get("live_asset_id") else None
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        # Return an object of this model
        return cls(live_asset_id,
                   title)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'live_asset_id={self.live_asset_id!r}, '
                f'title={(self.title if hasattr(self, "title") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'live_asset_id={self.live_asset_id!s}, '
                f'title={(self.title if hasattr(self, "title") else None)!s})')
