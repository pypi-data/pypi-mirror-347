# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.models.date_range_1 import DateRange1


class ImageAnalyticsRequest(object):

    """Implementation of the 'Image Analytics Request' model.

    Attributes:
        metrics (List[str]): Define the metric you need the data for,
            currently we support "bandwidth_consumption",
            "requests_count","status_4xx","status_5xx","avg_response_time""
        date_range (DateRange1): The timeframe to get the data for. Currently
            we only support a maximum of 30 days between `start_at` and
            `end_at`.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "metrics": 'metrics',
        "date_range": 'date_range'
    }

    def __init__(self,
                 metrics=None,
                 date_range=None):
        """Constructor for the ImageAnalyticsRequest class"""

        # Initialize members of the class
        self.metrics = metrics 
        self.date_range = date_range 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        metrics = dictionary.get("metrics") if dictionary.get("metrics") else None
        date_range = DateRange1.from_dictionary(dictionary.get('date_range')) if dictionary.get('date_range') else None
        # Return an object of this model
        return cls(metrics,
                   date_range)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'metrics={self.metrics!r}, '
                f'date_range={self.date_range!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'metrics={self.metrics!s}, '
                f'date_range={self.date_range!s})')
