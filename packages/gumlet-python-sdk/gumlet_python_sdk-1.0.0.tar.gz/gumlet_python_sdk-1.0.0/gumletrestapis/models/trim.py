# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class Trim(object):

    """Implementation of the 'Trim' model.

    Trim transformation can be used to trim videos based on time duration.

    Attributes:
        start_offset (float): Start offset in number of seconds or in
            `HH:MM:SS` format.
        end_offset (float): End offset in number of seconds or in `HH:MM:SS`
            format.
        duration (float): Duration can be used in conjunction with
            `start_offset` parameter, can be specified in number of seconds.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "start_offset": 'start_offset',
        "end_offset": 'end_offset',
        "duration": 'duration'
    }

    _optionals = [
        'duration',
    ]

    def __init__(self,
                 start_offset=None,
                 end_offset=None,
                 duration=APIHelper.SKIP):
        """Constructor for the Trim class"""

        # Initialize members of the class
        self.start_offset = start_offset 
        self.end_offset = end_offset 
        if duration is not APIHelper.SKIP:
            self.duration = duration 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        start_offset = dictionary.get("start_offset") if dictionary.get("start_offset") else None
        end_offset = dictionary.get("end_offset") if dictionary.get("end_offset") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else APIHelper.SKIP
        # Return an object of this model
        return cls(start_offset,
                   end_offset,
                   duration)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'start_offset={self.start_offset!r}, '
                f'end_offset={self.end_offset!r}, '
                f'duration={(self.duration if hasattr(self, "duration") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'start_offset={self.start_offset!s}, '
                f'end_offset={self.end_offset!s}, '
                f'duration={(self.duration if hasattr(self, "duration") else None)!s})')
