# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.player_config import PlayerConfig


class VideoPlaylistResponse(object):

    """Implementation of the 'Video Playlist Response' model.

    Attributes:
        id (str): The model property of type str.
        collection_id (str): The model property of type str.
        title (str): The model property of type str.
        description (str): The model property of type str.
        player_config (PlayerConfig): The model property of type PlayerConfig.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "collection_id": 'collection_id',
        "title": 'title',
        "description": 'description',
        "player_config": 'player_config'
    }

    _optionals = [
        'id',
        'collection_id',
        'title',
        'description',
        'player_config',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 collection_id=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 player_config=APIHelper.SKIP):
        """Constructor for the VideoPlaylistResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if collection_id is not APIHelper.SKIP:
            self.collection_id = collection_id 
        if title is not APIHelper.SKIP:
            self.title = title 
        if description is not APIHelper.SKIP:
            self.description = description 
        if player_config is not APIHelper.SKIP:
            self.player_config = player_config 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        collection_id = dictionary.get("collection_id") if dictionary.get("collection_id") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        player_config = PlayerConfig.from_dictionary(dictionary.get('player_config')) if 'player_config' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   collection_id,
                   title,
                   description,
                   player_config)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'collection_id={(self.collection_id if hasattr(self, "collection_id") else None)!r}, '
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'player_config={(self.player_config if hasattr(self, "player_config") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'collection_id={(self.collection_id if hasattr(self, "collection_id") else None)!s}, '
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'player_config={(self.player_config if hasattr(self, "player_config") else None)!s})')
