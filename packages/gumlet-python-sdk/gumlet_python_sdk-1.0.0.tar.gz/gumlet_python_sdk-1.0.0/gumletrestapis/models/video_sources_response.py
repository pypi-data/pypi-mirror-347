# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.all_source import AllSource


class VideoSourcesResponse(object):

    """Implementation of the 'Video Sources Response' model.

    Attributes:
        all_sources (List[AllSource]): The model property of type
            List[AllSource].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "all_sources": 'all_sources'
    }

    _optionals = [
        'all_sources',
    ]

    def __init__(self,
                 all_sources=APIHelper.SKIP):
        """Constructor for the VideoSourcesResponse class"""

        # Initialize members of the class
        if all_sources is not APIHelper.SKIP:
            self.all_sources = all_sources 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        all_sources = None
        if dictionary.get('all_sources') is not None:
            all_sources = [AllSource.from_dictionary(x) for x in dictionary.get('all_sources')]
        else:
            all_sources = APIHelper.SKIP
        # Return an object of this model
        return cls(all_sources)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'all_sources={(self.all_sources if hasattr(self, "all_sources") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'all_sources={(self.all_sources if hasattr(self, "all_sources") else None)!s})')
