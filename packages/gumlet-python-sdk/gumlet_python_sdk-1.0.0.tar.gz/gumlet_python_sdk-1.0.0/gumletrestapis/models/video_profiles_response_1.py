# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.all_profile import AllProfile


class VideoProfilesResponse1(object):

    """Implementation of the 'Video Profiles Response1' model.

    Attributes:
        all_profiles (List[AllProfile]): The model property of type
            List[AllProfile].
        total_profile_count (int): The model property of type int.
        current_offset (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "all_profiles": 'all_profiles',
        "total_profile_count": 'total_profile_count',
        "current_offset": 'current_offset'
    }

    _optionals = [
        'all_profiles',
        'total_profile_count',
        'current_offset',
    ]

    def __init__(self,
                 all_profiles=APIHelper.SKIP,
                 total_profile_count=0,
                 current_offset=0):
        """Constructor for the VideoProfilesResponse1 class"""

        # Initialize members of the class
        if all_profiles is not APIHelper.SKIP:
            self.all_profiles = all_profiles 
        self.total_profile_count = total_profile_count 
        self.current_offset = current_offset 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        all_profiles = None
        if dictionary.get('all_profiles') is not None:
            all_profiles = [AllProfile.from_dictionary(x) for x in dictionary.get('all_profiles')]
        else:
            all_profiles = APIHelper.SKIP
        total_profile_count = dictionary.get("total_profile_count") if dictionary.get("total_profile_count") else 0
        current_offset = dictionary.get("current_offset") if dictionary.get("current_offset") else 0
        # Return an object of this model
        return cls(all_profiles,
                   total_profile_count,
                   current_offset)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'all_profiles={(self.all_profiles if hasattr(self, "all_profiles") else None)!r}, '
                f'total_profile_count={(self.total_profile_count if hasattr(self, "total_profile_count") else None)!r}, '
                f'current_offset={(self.current_offset if hasattr(self, "current_offset") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'all_profiles={(self.all_profiles if hasattr(self, "all_profiles") else None)!s}, '
                f'total_profile_count={(self.total_profile_count if hasattr(self, "total_profile_count") else None)!s}, '
                f'current_offset={(self.current_offset if hasattr(self, "current_offset") else None)!s})')
