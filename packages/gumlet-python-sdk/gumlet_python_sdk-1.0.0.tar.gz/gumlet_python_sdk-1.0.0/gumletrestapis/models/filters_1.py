# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class Filters1(object):

    """Implementation of the 'Filters1' model.

    Attributes:
        name (NameEnum): Name of the breakdown to filter data on.
        value (str): Value to be matched for the given filter name. Currently
            we support exact matches.
        operator (OperatorEnum): Operator to be used while filtering the data

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "value": 'value',
        "operator": 'operator'
    }

    _optionals = [
        'operator',
    ]

    def __init__(self,
                 name=None,
                 value=None,
                 operator='equals'):
        """Constructor for the Filters1 class"""

        # Initialize members of the class
        self.name = name 
        self.value = value 
        self.operator = operator 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        value = dictionary.get("value") if dictionary.get("value") else None
        operator = dictionary.get("operator") if dictionary.get("operator") else 'equals'
        # Return an object of this model
        return cls(name,
                   value,
                   operator)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'value={self.value!r}, '
                f'operator={(self.operator if hasattr(self, "operator") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'value={self.value!s}, '
                f'operator={(self.operator if hasattr(self, "operator") else None)!s})')
