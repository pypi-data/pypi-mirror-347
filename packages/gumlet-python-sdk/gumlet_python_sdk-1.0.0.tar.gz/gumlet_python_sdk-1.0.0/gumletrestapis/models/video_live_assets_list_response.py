# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.all_live_asset import AllLiveAsset


class VideoLiveAssetsListResponse(object):

    """Implementation of the 'Video Live Assets List Response' model.

    Attributes:
        all_live_assets (List[AllLiveAsset]): The model property of type
            List[AllLiveAsset].
        total_live_asset_count (int): The model property of type int.
        current_offset (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "all_live_assets": 'all_live_assets',
        "total_live_asset_count": 'total_live_asset_count',
        "current_offset": 'current_offset'
    }

    _optionals = [
        'all_live_assets',
        'total_live_asset_count',
        'current_offset',
    ]

    def __init__(self,
                 all_live_assets=APIHelper.SKIP,
                 total_live_asset_count=0,
                 current_offset=0):
        """Constructor for the VideoLiveAssetsListResponse class"""

        # Initialize members of the class
        if all_live_assets is not APIHelper.SKIP:
            self.all_live_assets = all_live_assets 
        self.total_live_asset_count = total_live_asset_count 
        self.current_offset = current_offset 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        all_live_assets = None
        if dictionary.get('all_live_assets') is not None:
            all_live_assets = [AllLiveAsset.from_dictionary(x) for x in dictionary.get('all_live_assets')]
        else:
            all_live_assets = APIHelper.SKIP
        total_live_asset_count = dictionary.get("total_live_asset_count") if dictionary.get("total_live_asset_count") else 0
        current_offset = dictionary.get("current_offset") if dictionary.get("current_offset") else 0
        # Return an object of this model
        return cls(all_live_assets,
                   total_live_asset_count,
                   current_offset)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'all_live_assets={(self.all_live_assets if hasattr(self, "all_live_assets") else None)!r}, '
                f'total_live_asset_count={(self.total_live_asset_count if hasattr(self, "total_live_asset_count") else None)!r}, '
                f'current_offset={(self.current_offset if hasattr(self, "current_offset") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'all_live_assets={(self.all_live_assets if hasattr(self, "all_live_assets") else None)!s}, '
                f'total_live_asset_count={(self.total_live_asset_count if hasattr(self, "total_live_asset_count") else None)!s}, '
                f'current_offset={(self.current_offset if hasattr(self, "current_offset") else None)!s})')
