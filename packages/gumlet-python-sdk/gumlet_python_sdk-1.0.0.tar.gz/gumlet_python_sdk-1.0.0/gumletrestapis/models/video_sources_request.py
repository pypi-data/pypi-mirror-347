# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.aws_1 import Aws1
from gumletrestapis.models.azure import Azure
from gumletrestapis.models.backblaze import Backblaze
from gumletrestapis.models.cloudflare import Cloudflare
from gumletrestapis.models.cloudinary import Cloudinary
from gumletrestapis.models.dostorage import Dostorage
from gumletrestapis.models.gcs import Gcs
from gumletrestapis.models.linode import Linode
from gumletrestapis.models.proxy import Proxy
from gumletrestapis.models.video_protection_1 import VideoProtection1
from gumletrestapis.models.wasabi import Wasabi
from gumletrestapis.models.zoom import Zoom


class VideoSourcesRequest(object):

    """Implementation of the 'Video Sources Request' model.

    Attributes:
        name (str): Specify a text string or identifier for the collection.
        mtype (TypeEnum): Video collections are top-level entities in Gumlet.
            You can use them to organize videos for different
            teams/departments or use cases.
        default_profile_id (str): Gumlet provides the functionality of
            creating multiple video assets using the same set of parameters.
        insight_property_id (str): The five to ten character unique identifier
            of the Gumlet Insight Property available on the dashboard.
        video_protection (VideoProtection1): Gumlet provides multiple options
            for securing your video playback.
        aws (Aws1): This is a required field if collection type is aws.
        proxy (Proxy): This is a required field if collection type is proxy.
        gcs (Gcs): This is a required field if collection type is gcs.
        dostorage (Dostorage): This is a required field if collection type is
            dostorage.
        wasabi (Wasabi): This is a required field if collection type is wasabi.
        cloudinary (Cloudinary): This is a required field if collection type
            is cloudinary.
        azure (Azure): This is a required field if collection type is azure.
        linode (Linode): This is a required field if collection type is linode.
        backblaze (Backblaze): This is a required field if collection type is
            backblaze.
        cloudflare (Cloudflare): This is a required field if collection type
            is cloudflare.
        zoom (Zoom): This is a required field if collection type is zoom.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "mtype": 'type',
        "default_profile_id": 'default_profile_id',
        "insight_property_id": 'insight_property_id',
        "video_protection": 'video_protection',
        "aws": 'aws',
        "proxy": 'proxy',
        "gcs": 'gcs',
        "dostorage": 'dostorage',
        "wasabi": 'wasabi',
        "cloudinary": 'cloudinary',
        "azure": 'azure',
        "linode": 'linode',
        "backblaze": 'backblaze',
        "cloudflare": 'cloudflare',
        "zoom": 'zoom'
    }

    _optionals = [
        'default_profile_id',
        'insight_property_id',
        'video_protection',
        'aws',
        'proxy',
        'gcs',
        'dostorage',
        'wasabi',
        'cloudinary',
        'azure',
        'linode',
        'backblaze',
        'cloudflare',
        'zoom',
    ]

    def __init__(self,
                 name=None,
                 mtype='direct-upload',
                 default_profile_id=APIHelper.SKIP,
                 insight_property_id=APIHelper.SKIP,
                 video_protection=APIHelper.SKIP,
                 aws=APIHelper.SKIP,
                 proxy=APIHelper.SKIP,
                 gcs=APIHelper.SKIP,
                 dostorage=APIHelper.SKIP,
                 wasabi=APIHelper.SKIP,
                 cloudinary=APIHelper.SKIP,
                 azure=APIHelper.SKIP,
                 linode=APIHelper.SKIP,
                 backblaze=APIHelper.SKIP,
                 cloudflare=APIHelper.SKIP,
                 zoom=APIHelper.SKIP):
        """Constructor for the VideoSourcesRequest class"""

        # Initialize members of the class
        self.name = name 
        self.mtype = mtype 
        if default_profile_id is not APIHelper.SKIP:
            self.default_profile_id = default_profile_id 
        if insight_property_id is not APIHelper.SKIP:
            self.insight_property_id = insight_property_id 
        if video_protection is not APIHelper.SKIP:
            self.video_protection = video_protection 
        if aws is not APIHelper.SKIP:
            self.aws = aws 
        if proxy is not APIHelper.SKIP:
            self.proxy = proxy 
        if gcs is not APIHelper.SKIP:
            self.gcs = gcs 
        if dostorage is not APIHelper.SKIP:
            self.dostorage = dostorage 
        if wasabi is not APIHelper.SKIP:
            self.wasabi = wasabi 
        if cloudinary is not APIHelper.SKIP:
            self.cloudinary = cloudinary 
        if azure is not APIHelper.SKIP:
            self.azure = azure 
        if linode is not APIHelper.SKIP:
            self.linode = linode 
        if backblaze is not APIHelper.SKIP:
            self.backblaze = backblaze 
        if cloudflare is not APIHelper.SKIP:
            self.cloudflare = cloudflare 
        if zoom is not APIHelper.SKIP:
            self.zoom = zoom 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        mtype = dictionary.get("type") if dictionary.get("type") else 'direct-upload'
        default_profile_id = dictionary.get("default_profile_id") if dictionary.get("default_profile_id") else APIHelper.SKIP
        insight_property_id = dictionary.get("insight_property_id") if dictionary.get("insight_property_id") else APIHelper.SKIP
        video_protection = VideoProtection1.from_dictionary(dictionary.get('video_protection')) if 'video_protection' in dictionary.keys() else APIHelper.SKIP
        aws = Aws1.from_dictionary(dictionary.get('aws')) if 'aws' in dictionary.keys() else APIHelper.SKIP
        proxy = Proxy.from_dictionary(dictionary.get('proxy')) if 'proxy' in dictionary.keys() else APIHelper.SKIP
        gcs = Gcs.from_dictionary(dictionary.get('gcs')) if 'gcs' in dictionary.keys() else APIHelper.SKIP
        dostorage = Dostorage.from_dictionary(dictionary.get('dostorage')) if 'dostorage' in dictionary.keys() else APIHelper.SKIP
        wasabi = Wasabi.from_dictionary(dictionary.get('wasabi')) if 'wasabi' in dictionary.keys() else APIHelper.SKIP
        cloudinary = Cloudinary.from_dictionary(dictionary.get('cloudinary')) if 'cloudinary' in dictionary.keys() else APIHelper.SKIP
        azure = Azure.from_dictionary(dictionary.get('azure')) if 'azure' in dictionary.keys() else APIHelper.SKIP
        linode = Linode.from_dictionary(dictionary.get('linode')) if 'linode' in dictionary.keys() else APIHelper.SKIP
        backblaze = Backblaze.from_dictionary(dictionary.get('backblaze')) if 'backblaze' in dictionary.keys() else APIHelper.SKIP
        cloudflare = Cloudflare.from_dictionary(dictionary.get('cloudflare')) if 'cloudflare' in dictionary.keys() else APIHelper.SKIP
        zoom = Zoom.from_dictionary(dictionary.get('zoom')) if 'zoom' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   mtype,
                   default_profile_id,
                   insight_property_id,
                   video_protection,
                   aws,
                   proxy,
                   gcs,
                   dostorage,
                   wasabi,
                   cloudinary,
                   azure,
                   linode,
                   backblaze,
                   cloudflare,
                   zoom)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'mtype={self.mtype!r}, '
                f'default_profile_id={(self.default_profile_id if hasattr(self, "default_profile_id") else None)!r}, '
                f'insight_property_id={(self.insight_property_id if hasattr(self, "insight_property_id") else None)!r}, '
                f'video_protection={(self.video_protection if hasattr(self, "video_protection") else None)!r}, '
                f'aws={(self.aws if hasattr(self, "aws") else None)!r}, '
                f'proxy={(self.proxy if hasattr(self, "proxy") else None)!r}, '
                f'gcs={(self.gcs if hasattr(self, "gcs") else None)!r}, '
                f'dostorage={(self.dostorage if hasattr(self, "dostorage") else None)!r}, '
                f'wasabi={(self.wasabi if hasattr(self, "wasabi") else None)!r}, '
                f'cloudinary={(self.cloudinary if hasattr(self, "cloudinary") else None)!r}, '
                f'azure={(self.azure if hasattr(self, "azure") else None)!r}, '
                f'linode={(self.linode if hasattr(self, "linode") else None)!r}, '
                f'backblaze={(self.backblaze if hasattr(self, "backblaze") else None)!r}, '
                f'cloudflare={(self.cloudflare if hasattr(self, "cloudflare") else None)!r}, '
                f'zoom={(self.zoom if hasattr(self, "zoom") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'mtype={self.mtype!s}, '
                f'default_profile_id={(self.default_profile_id if hasattr(self, "default_profile_id") else None)!s}, '
                f'insight_property_id={(self.insight_property_id if hasattr(self, "insight_property_id") else None)!s}, '
                f'video_protection={(self.video_protection if hasattr(self, "video_protection") else None)!s}, '
                f'aws={(self.aws if hasattr(self, "aws") else None)!s}, '
                f'proxy={(self.proxy if hasattr(self, "proxy") else None)!s}, '
                f'gcs={(self.gcs if hasattr(self, "gcs") else None)!s}, '
                f'dostorage={(self.dostorage if hasattr(self, "dostorage") else None)!s}, '
                f'wasabi={(self.wasabi if hasattr(self, "wasabi") else None)!s}, '
                f'cloudinary={(self.cloudinary if hasattr(self, "cloudinary") else None)!s}, '
                f'azure={(self.azure if hasattr(self, "azure") else None)!s}, '
                f'linode={(self.linode if hasattr(self, "linode") else None)!s}, '
                f'backblaze={(self.backblaze if hasattr(self, "backblaze") else None)!s}, '
                f'cloudflare={(self.cloudflare if hasattr(self, "cloudflare") else None)!s}, '
                f'zoom={(self.zoom if hasattr(self, "zoom") else None)!s})')
