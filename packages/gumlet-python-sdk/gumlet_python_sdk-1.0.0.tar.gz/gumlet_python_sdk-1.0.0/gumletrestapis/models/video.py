# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class Video(object):

    """Implementation of the 'Video' model.

    Attributes:
        file_name (str): The model property of type str.
        size (int): The model property of type int.
        resolution (str): The model property of type str.
        duration (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "file_name": 'fileName',
        "size": 'size',
        "resolution": 'resolution',
        "duration": 'duration'
    }

    _optionals = [
        'file_name',
        'size',
        'resolution',
        'duration',
    ]

    def __init__(self,
                 file_name=APIHelper.SKIP,
                 size=0,
                 resolution=APIHelper.SKIP,
                 duration=0):
        """Constructor for the Video class"""

        # Initialize members of the class
        if file_name is not APIHelper.SKIP:
            self.file_name = file_name 
        self.size = size 
        if resolution is not APIHelper.SKIP:
            self.resolution = resolution 
        self.duration = duration 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        file_name = dictionary.get("fileName") if dictionary.get("fileName") else APIHelper.SKIP
        size = dictionary.get("size") if dictionary.get("size") else 0
        resolution = dictionary.get("resolution") if dictionary.get("resolution") else APIHelper.SKIP
        duration = dictionary.get("duration") if dictionary.get("duration") else 0
        # Return an object of this model
        return cls(file_name,
                   size,
                   resolution,
                   duration)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'file_name={(self.file_name if hasattr(self, "file_name") else None)!r}, '
                f'size={(self.size if hasattr(self, "size") else None)!r}, '
                f'resolution={(self.resolution if hasattr(self, "resolution") else None)!r}, '
                f'duration={(self.duration if hasattr(self, "duration") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'file_name={(self.file_name if hasattr(self, "file_name") else None)!s}, '
                f'size={(self.size if hasattr(self, "size") else None)!s}, '
                f'resolution={(self.resolution if hasattr(self, "resolution") else None)!s}, '
                f'duration={(self.duration if hasattr(self, "duration") else None)!s})')
