# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.input_4 import Input4
from gumletrestapis.models.output_4 import Output4


class VideoLiveAssetsResponse(object):

    """Implementation of the 'Video Live Assets Response' model.

    Attributes:
        status (str): The model property of type str.
        stream_key (str): The model property of type str.
        live_asset_id (str): The model property of type str.
        live_video_source_id (str): The model property of type str.
        input (Input4): The model property of type Input4.
        stream_url (str): The model property of type str.
        output (Output4): The model property of type Output4.
        created_at (int): The model property of type int.
        updated_at (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "stream_key": 'stream_key',
        "live_asset_id": 'live_asset_id',
        "live_video_source_id": 'live_video_source_id',
        "input": 'input',
        "stream_url": 'stream_url',
        "output": 'output',
        "created_at": 'created_at',
        "updated_at": 'updated_at'
    }

    _optionals = [
        'status',
        'stream_key',
        'live_asset_id',
        'live_video_source_id',
        'input',
        'stream_url',
        'output',
        'created_at',
        'updated_at',
    ]

    def __init__(self,
                 status=APIHelper.SKIP,
                 stream_key=APIHelper.SKIP,
                 live_asset_id=APIHelper.SKIP,
                 live_video_source_id=APIHelper.SKIP,
                 input=APIHelper.SKIP,
                 stream_url=APIHelper.SKIP,
                 output=APIHelper.SKIP,
                 created_at=0,
                 updated_at=0):
        """Constructor for the VideoLiveAssetsResponse class"""

        # Initialize members of the class
        if status is not APIHelper.SKIP:
            self.status = status 
        if stream_key is not APIHelper.SKIP:
            self.stream_key = stream_key 
        if live_asset_id is not APIHelper.SKIP:
            self.live_asset_id = live_asset_id 
        if live_video_source_id is not APIHelper.SKIP:
            self.live_video_source_id = live_video_source_id 
        if input is not APIHelper.SKIP:
            self.input = input 
        if stream_url is not APIHelper.SKIP:
            self.stream_url = stream_url 
        if output is not APIHelper.SKIP:
            self.output = output 
        self.created_at = created_at 
        self.updated_at = updated_at 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        stream_key = dictionary.get("stream_key") if dictionary.get("stream_key") else APIHelper.SKIP
        live_asset_id = dictionary.get("live_asset_id") if dictionary.get("live_asset_id") else APIHelper.SKIP
        live_video_source_id = dictionary.get("live_video_source_id") if dictionary.get("live_video_source_id") else APIHelper.SKIP
        input = Input4.from_dictionary(dictionary.get('input')) if 'input' in dictionary.keys() else APIHelper.SKIP
        stream_url = dictionary.get("stream_url") if dictionary.get("stream_url") else APIHelper.SKIP
        output = Output4.from_dictionary(dictionary.get('output')) if 'output' in dictionary.keys() else APIHelper.SKIP
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else 0
        updated_at = dictionary.get("updated_at") if dictionary.get("updated_at") else 0
        # Return an object of this model
        return cls(status,
                   stream_key,
                   live_asset_id,
                   live_video_source_id,
                   input,
                   stream_url,
                   output,
                   created_at,
                   updated_at)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'stream_key={(self.stream_key if hasattr(self, "stream_key") else None)!r}, '
                f'live_asset_id={(self.live_asset_id if hasattr(self, "live_asset_id") else None)!r}, '
                f'live_video_source_id={(self.live_video_source_id if hasattr(self, "live_video_source_id") else None)!r}, '
                f'input={(self.input if hasattr(self, "input") else None)!r}, '
                f'stream_url={(self.stream_url if hasattr(self, "stream_url") else None)!r}, '
                f'output={(self.output if hasattr(self, "output") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'stream_key={(self.stream_key if hasattr(self, "stream_key") else None)!s}, '
                f'live_asset_id={(self.live_asset_id if hasattr(self, "live_asset_id") else None)!s}, '
                f'live_video_source_id={(self.live_video_source_id if hasattr(self, "live_video_source_id") else None)!s}, '
                f'input={(self.input if hasattr(self, "input") else None)!s}, '
                f'stream_url={(self.stream_url if hasattr(self, "stream_url") else None)!s}, '
                f'output={(self.output if hasattr(self, "output") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!s})')
