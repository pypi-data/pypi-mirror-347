# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class ChannelSettings(object):

    """Implementation of the 'ChannelSettings' model.

    Attributes:
        title (str): The model property of type str.
        active (bool): The model property of type bool.
        description (str): The model property of type str.
        privacy_type (str): The model property of type str.
        custom_logo (bool): The model property of type bool.
        logo_url (str): The model property of type str.
        cname (List[str]): The model property of type List[str].
        temp_cname (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "title": 'title',
        "active": 'active',
        "description": 'description',
        "privacy_type": 'privacy_type',
        "custom_logo": 'custom_logo',
        "logo_url": 'logo_url',
        "cname": 'cname',
        "temp_cname": 'temp_cname'
    }

    _optionals = [
        'title',
        'active',
        'description',
        'privacy_type',
        'custom_logo',
        'logo_url',
        'cname',
        'temp_cname',
    ]

    def __init__(self,
                 title=APIHelper.SKIP,
                 active=True,
                 description=APIHelper.SKIP,
                 privacy_type=APIHelper.SKIP,
                 custom_logo=True,
                 logo_url=APIHelper.SKIP,
                 cname=APIHelper.SKIP,
                 temp_cname=APIHelper.SKIP):
        """Constructor for the ChannelSettings class"""

        # Initialize members of the class
        if title is not APIHelper.SKIP:
            self.title = title 
        self.active = active 
        if description is not APIHelper.SKIP:
            self.description = description 
        if privacy_type is not APIHelper.SKIP:
            self.privacy_type = privacy_type 
        self.custom_logo = custom_logo 
        if logo_url is not APIHelper.SKIP:
            self.logo_url = logo_url 
        if cname is not APIHelper.SKIP:
            self.cname = cname 
        if temp_cname is not APIHelper.SKIP:
            self.temp_cname = temp_cname 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        active = dictionary.get("active") if dictionary.get("active") else True
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        privacy_type = dictionary.get("privacy_type") if dictionary.get("privacy_type") else APIHelper.SKIP
        custom_logo = dictionary.get("custom_logo") if dictionary.get("custom_logo") else True
        logo_url = dictionary.get("logo_url") if dictionary.get("logo_url") else APIHelper.SKIP
        cname = dictionary.get("cname") if dictionary.get("cname") else APIHelper.SKIP
        temp_cname = dictionary.get("temp_cname") if dictionary.get("temp_cname") else APIHelper.SKIP
        # Return an object of this model
        return cls(title,
                   active,
                   description,
                   privacy_type,
                   custom_logo,
                   logo_url,
                   cname,
                   temp_cname)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'active={(self.active if hasattr(self, "active") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'privacy_type={(self.privacy_type if hasattr(self, "privacy_type") else None)!r}, '
                f'custom_logo={(self.custom_logo if hasattr(self, "custom_logo") else None)!r}, '
                f'logo_url={(self.logo_url if hasattr(self, "logo_url") else None)!r}, '
                f'cname={(self.cname if hasattr(self, "cname") else None)!r}, '
                f'temp_cname={(self.temp_cname if hasattr(self, "temp_cname") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'active={(self.active if hasattr(self, "active") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'privacy_type={(self.privacy_type if hasattr(self, "privacy_type") else None)!s}, '
                f'custom_logo={(self.custom_logo if hasattr(self, "custom_logo") else None)!s}, '
                f'logo_url={(self.logo_url if hasattr(self, "logo_url") else None)!s}, '
                f'cname={(self.cname if hasattr(self, "cname") else None)!s}, '
                f'temp_cname={(self.temp_cname if hasattr(self, "temp_cname") else None)!s})')
