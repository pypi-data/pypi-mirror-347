# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.views import Views


class InsightsBreakdownDataResponse(object):

    """Implementation of the 'Insights Breakdown Data Response' model.

    Attributes:
        views (Views): The model property of type Views.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "views": 'views'
    }

    _optionals = [
        'views',
    ]

    def __init__(self,
                 views=APIHelper.SKIP):
        """Constructor for the InsightsBreakdownDataResponse class"""

        # Initialize members of the class
        if views is not APIHelper.SKIP:
            self.views = views 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        views = Views.from_dictionary(dictionary.get('views')) if 'views' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(views)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'views={(self.views if hasattr(self, "views") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'views={(self.views if hasattr(self, "views") else None)!s})')
