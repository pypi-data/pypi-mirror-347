# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.unique_view import UniqueView
from gumletrestapis.models.view import View


class InsightsChartDataResponse(object):

    """Implementation of the 'Insights Chart Data Response' model.

    Attributes:
        views (List[View]): The model property of type List[View].
        unique_views (List[UniqueView]): The model property of type
            List[UniqueView].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "views": 'views',
        "unique_views": 'unique_views'
    }

    _optionals = [
        'views',
        'unique_views',
    ]

    def __init__(self,
                 views=APIHelper.SKIP,
                 unique_views=APIHelper.SKIP):
        """Constructor for the InsightsChartDataResponse class"""

        # Initialize members of the class
        if views is not APIHelper.SKIP:
            self.views = views 
        if unique_views is not APIHelper.SKIP:
            self.unique_views = unique_views 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        views = None
        if dictionary.get('views') is not None:
            views = [View.from_dictionary(x) for x in dictionary.get('views')]
        else:
            views = APIHelper.SKIP
        unique_views = None
        if dictionary.get('unique_views') is not None:
            unique_views = [UniqueView.from_dictionary(x) for x in dictionary.get('unique_views')]
        else:
            unique_views = APIHelper.SKIP
        # Return an object of this model
        return cls(views,
                   unique_views)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'views={(self.views if hasattr(self, "views") else None)!r}, '
                f'unique_views={(self.unique_views if hasattr(self, "unique_views") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'views={(self.views if hasattr(self, "views") else None)!s}, '
                f'unique_views={(self.unique_views if hasattr(self, "unique_views") else None)!s})')
