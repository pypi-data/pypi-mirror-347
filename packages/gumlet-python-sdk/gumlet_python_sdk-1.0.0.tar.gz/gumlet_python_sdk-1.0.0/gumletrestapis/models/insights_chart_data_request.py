# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.filters_1 import Filters1
from gumletrestapis.models.timeframe import Timeframe


class InsightsChartDataRequest(object):

    """Implementation of the 'Insights Chart Data Request' model.

    Attributes:
        metrics (List[str]): Get data for one or more `metrics` in the same
            request. Please add any of these metrics. `views`, `unique_views`,
            `downscale_percentage`,`upscale_percentage`,
            `rebuffer_percentage`, `startup_time`, `player_startup_time`,
            `seek_latency`, `exits_before_startup`,
            `playback_failure_percentage`, `completion_percent`,
            `completion_percent_by_views`, `rebuffer_duration`,
            `playing_time`, `rebuffer_count`, `rebuffer_frequency`,
            `average_bitrate`, `concurrent_users`, `playback_rate`
        property_id (str): The five to ten character unique identifier of the
            Gumlet Insight Property available on the dashboard.
        timeframe (Timeframe): The timeframe to get the data for. Currently we
            only support a maximum of *60 days* between `start_at` and
            `end_at`. If `group_by` parameter is set as `hourly` then maximum
            difference between `start_at` and `end_at` can be *seven days*.
        filters (List[Filters1]): Build *segments* of users using multiple
            filters on the data, `value` should be an *exact match*
        group_by (GroupByEnum): Data can be grouped by `daily` or `hourly`.
            Metrics with histogram response (`completion_percent`,
            `completion_percent_by_views`) can not be grouped hourly

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "metrics": 'metrics',
        "property_id": 'property_id',
        "timeframe": 'timeframe',
        "filters": 'filters',
        "group_by": 'group_by'
    }

    _optionals = [
        'filters',
        'group_by',
    ]

    def __init__(self,
                 metrics=None,
                 property_id=None,
                 timeframe=None,
                 filters=APIHelper.SKIP,
                 group_by='daily'):
        """Constructor for the InsightsChartDataRequest class"""

        # Initialize members of the class
        self.metrics = metrics 
        self.property_id = property_id 
        self.timeframe = timeframe 
        if filters is not APIHelper.SKIP:
            self.filters = filters 
        self.group_by = group_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        metrics = dictionary.get("metrics") if dictionary.get("metrics") else None
        property_id = dictionary.get("property_id") if dictionary.get("property_id") else None
        timeframe = Timeframe.from_dictionary(dictionary.get('timeframe')) if dictionary.get('timeframe') else None
        filters = None
        if dictionary.get('filters') is not None:
            filters = [Filters1.from_dictionary(x) for x in dictionary.get('filters')]
        else:
            filters = APIHelper.SKIP
        group_by = dictionary.get("group_by") if dictionary.get("group_by") else 'daily'
        # Return an object of this model
        return cls(metrics,
                   property_id,
                   timeframe,
                   filters,
                   group_by)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'metrics={self.metrics!r}, '
                f'property_id={self.property_id!r}, '
                f'timeframe={self.timeframe!r}, '
                f'filters={(self.filters if hasattr(self, "filters") else None)!r}, '
                f'group_by={(self.group_by if hasattr(self, "group_by") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'metrics={self.metrics!s}, '
                f'property_id={self.property_id!s}, '
                f'timeframe={self.timeframe!s}, '
                f'filters={(self.filters if hasattr(self, "filters") else None)!s}, '
                f'group_by={(self.group_by if hasattr(self, "group_by") else None)!s})')
