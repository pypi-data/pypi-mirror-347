# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.generate_subtitles_2 import GenerateSubtitles2
from gumletrestapis.models.image_overlay_2 import ImageOverlay2
from gumletrestapis.models.preview_thumbnails import PreviewThumbnails


class Transformations2(object):

    """Implementation of the 'Transformations2' model.

    Attributes:
        format (str): The model property of type str.
        resolution (List[str]): The model property of type List[str].
        audio_codec (List[str]): The model property of type List[str].
        video_codec (List[str]): The model property of type List[str].
        image_overlay (ImageOverlay2): The model property of type
            ImageOverlay2.
        thumbnail (List[str]): The model property of type List[str].
        thumbnail_format (str): The model property of type str.
        mp_4_access (bool): The model property of type bool.
        audio_only (bool): The model property of type bool.
        original_deleted (bool): The model property of type bool.
        per_title_encoding (bool): The model property of type bool.
        generate_subtitles (GenerateSubtitles2): The model property of type
            GenerateSubtitles2.
        preview_thumbnails (PreviewThumbnails): The model property of type
            PreviewThumbnails.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "format": 'format',
        "resolution": 'resolution',
        "audio_codec": 'audio_codec',
        "video_codec": 'video_codec',
        "image_overlay": 'image_overlay',
        "thumbnail": 'thumbnail',
        "thumbnail_format": 'thumbnail_format',
        "mp_4_access": 'mp4_access',
        "audio_only": 'audio_only',
        "original_deleted": 'original_deleted',
        "per_title_encoding": 'per_title_encoding',
        "generate_subtitles": 'generate_subtitles',
        "preview_thumbnails": 'preview_thumbnails'
    }

    _optionals = [
        'format',
        'resolution',
        'audio_codec',
        'video_codec',
        'image_overlay',
        'thumbnail',
        'thumbnail_format',
        'mp_4_access',
        'audio_only',
        'original_deleted',
        'per_title_encoding',
        'generate_subtitles',
        'preview_thumbnails',
    ]

    def __init__(self,
                 format=APIHelper.SKIP,
                 resolution=APIHelper.SKIP,
                 audio_codec=APIHelper.SKIP,
                 video_codec=APIHelper.SKIP,
                 image_overlay=APIHelper.SKIP,
                 thumbnail=APIHelper.SKIP,
                 thumbnail_format=APIHelper.SKIP,
                 mp_4_access=True,
                 audio_only=True,
                 original_deleted=True,
                 per_title_encoding=True,
                 generate_subtitles=APIHelper.SKIP,
                 preview_thumbnails=APIHelper.SKIP):
        """Constructor for the Transformations2 class"""

        # Initialize members of the class
        if format is not APIHelper.SKIP:
            self.format = format 
        if resolution is not APIHelper.SKIP:
            self.resolution = resolution 
        if audio_codec is not APIHelper.SKIP:
            self.audio_codec = audio_codec 
        if video_codec is not APIHelper.SKIP:
            self.video_codec = video_codec 
        if image_overlay is not APIHelper.SKIP:
            self.image_overlay = image_overlay 
        if thumbnail is not APIHelper.SKIP:
            self.thumbnail = thumbnail 
        if thumbnail_format is not APIHelper.SKIP:
            self.thumbnail_format = thumbnail_format 
        self.mp_4_access = mp_4_access 
        self.audio_only = audio_only 
        self.original_deleted = original_deleted 
        self.per_title_encoding = per_title_encoding 
        if generate_subtitles is not APIHelper.SKIP:
            self.generate_subtitles = generate_subtitles 
        if preview_thumbnails is not APIHelper.SKIP:
            self.preview_thumbnails = preview_thumbnails 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        format = dictionary.get("format") if dictionary.get("format") else APIHelper.SKIP
        resolution = dictionary.get("resolution") if dictionary.get("resolution") else APIHelper.SKIP
        audio_codec = dictionary.get("audio_codec") if dictionary.get("audio_codec") else APIHelper.SKIP
        video_codec = dictionary.get("video_codec") if dictionary.get("video_codec") else APIHelper.SKIP
        image_overlay = ImageOverlay2.from_dictionary(dictionary.get('image_overlay')) if 'image_overlay' in dictionary.keys() else APIHelper.SKIP
        thumbnail = dictionary.get("thumbnail") if dictionary.get("thumbnail") else APIHelper.SKIP
        thumbnail_format = dictionary.get("thumbnail_format") if dictionary.get("thumbnail_format") else APIHelper.SKIP
        mp_4_access = dictionary.get("mp4_access") if dictionary.get("mp4_access") else True
        audio_only = dictionary.get("audio_only") if dictionary.get("audio_only") else True
        original_deleted = dictionary.get("original_deleted") if dictionary.get("original_deleted") else True
        per_title_encoding = dictionary.get("per_title_encoding") if dictionary.get("per_title_encoding") else True
        generate_subtitles = GenerateSubtitles2.from_dictionary(dictionary.get('generate_subtitles')) if 'generate_subtitles' in dictionary.keys() else APIHelper.SKIP
        preview_thumbnails = PreviewThumbnails.from_dictionary(dictionary.get('preview_thumbnails')) if 'preview_thumbnails' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(format,
                   resolution,
                   audio_codec,
                   video_codec,
                   image_overlay,
                   thumbnail,
                   thumbnail_format,
                   mp_4_access,
                   audio_only,
                   original_deleted,
                   per_title_encoding,
                   generate_subtitles,
                   preview_thumbnails)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'format={(self.format if hasattr(self, "format") else None)!r}, '
                f'resolution={(self.resolution if hasattr(self, "resolution") else None)!r}, '
                f'audio_codec={(self.audio_codec if hasattr(self, "audio_codec") else None)!r}, '
                f'video_codec={(self.video_codec if hasattr(self, "video_codec") else None)!r}, '
                f'image_overlay={(self.image_overlay if hasattr(self, "image_overlay") else None)!r}, '
                f'thumbnail={(self.thumbnail if hasattr(self, "thumbnail") else None)!r}, '
                f'thumbnail_format={(self.thumbnail_format if hasattr(self, "thumbnail_format") else None)!r}, '
                f'mp_4_access={(self.mp_4_access if hasattr(self, "mp_4_access") else None)!r}, '
                f'audio_only={(self.audio_only if hasattr(self, "audio_only") else None)!r}, '
                f'original_deleted={(self.original_deleted if hasattr(self, "original_deleted") else None)!r}, '
                f'per_title_encoding={(self.per_title_encoding if hasattr(self, "per_title_encoding") else None)!r}, '
                f'generate_subtitles={(self.generate_subtitles if hasattr(self, "generate_subtitles") else None)!r}, '
                f'preview_thumbnails={(self.preview_thumbnails if hasattr(self, "preview_thumbnails") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'format={(self.format if hasattr(self, "format") else None)!s}, '
                f'resolution={(self.resolution if hasattr(self, "resolution") else None)!s}, '
                f'audio_codec={(self.audio_codec if hasattr(self, "audio_codec") else None)!s}, '
                f'video_codec={(self.video_codec if hasattr(self, "video_codec") else None)!s}, '
                f'image_overlay={(self.image_overlay if hasattr(self, "image_overlay") else None)!s}, '
                f'thumbnail={(self.thumbnail if hasattr(self, "thumbnail") else None)!s}, '
                f'thumbnail_format={(self.thumbnail_format if hasattr(self, "thumbnail_format") else None)!s}, '
                f'mp_4_access={(self.mp_4_access if hasattr(self, "mp_4_access") else None)!s}, '
                f'audio_only={(self.audio_only if hasattr(self, "audio_only") else None)!s}, '
                f'original_deleted={(self.original_deleted if hasattr(self, "original_deleted") else None)!s}, '
                f'per_title_encoding={(self.per_title_encoding if hasattr(self, "per_title_encoding") else None)!s}, '
                f'generate_subtitles={(self.generate_subtitles if hasattr(self, "generate_subtitles") else None)!s}, '
                f'preview_thumbnails={(self.preview_thumbnails if hasattr(self, "preview_thumbnails") else None)!s})')
