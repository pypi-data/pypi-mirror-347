# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.audio import Audio
from gumletrestapis.models.playlist import Playlist
from gumletrestapis.models.preview_thumbnail import PreviewThumbnail
from gumletrestapis.models.subtitle import Subtitle
from gumletrestapis.models.thumbnail import Thumbnail
from gumletrestapis.models.video import Video


class StorageDetails(object):

    """Implementation of the 'StorageDetails' model.

    Attributes:
        video (List[Video]): The model property of type List[Video].
        audio (List[Audio]): The model property of type List[Audio].
        playlist (List[Playlist]): The model property of type List[Playlist].
        thumbnail (List[Thumbnail]): The model property of type
            List[Thumbnail].
        subtitle (List[Subtitle]): The model property of type List[Subtitle].
        preview_thumbnail (List[PreviewThumbnail]): The model property of type
            List[PreviewThumbnail].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "video": 'video',
        "audio": 'audio',
        "playlist": 'playlist',
        "thumbnail": 'thumbnail',
        "subtitle": 'subtitle',
        "preview_thumbnail": 'previewThumbnail'
    }

    _optionals = [
        'video',
        'audio',
        'playlist',
        'thumbnail',
        'subtitle',
        'preview_thumbnail',
    ]

    def __init__(self,
                 video=APIHelper.SKIP,
                 audio=APIHelper.SKIP,
                 playlist=APIHelper.SKIP,
                 thumbnail=APIHelper.SKIP,
                 subtitle=APIHelper.SKIP,
                 preview_thumbnail=APIHelper.SKIP):
        """Constructor for the StorageDetails class"""

        # Initialize members of the class
        if video is not APIHelper.SKIP:
            self.video = video 
        if audio is not APIHelper.SKIP:
            self.audio = audio 
        if playlist is not APIHelper.SKIP:
            self.playlist = playlist 
        if thumbnail is not APIHelper.SKIP:
            self.thumbnail = thumbnail 
        if subtitle is not APIHelper.SKIP:
            self.subtitle = subtitle 
        if preview_thumbnail is not APIHelper.SKIP:
            self.preview_thumbnail = preview_thumbnail 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        video = None
        if dictionary.get('video') is not None:
            video = [Video.from_dictionary(x) for x in dictionary.get('video')]
        else:
            video = APIHelper.SKIP
        audio = None
        if dictionary.get('audio') is not None:
            audio = [Audio.from_dictionary(x) for x in dictionary.get('audio')]
        else:
            audio = APIHelper.SKIP
        playlist = None
        if dictionary.get('playlist') is not None:
            playlist = [Playlist.from_dictionary(x) for x in dictionary.get('playlist')]
        else:
            playlist = APIHelper.SKIP
        thumbnail = None
        if dictionary.get('thumbnail') is not None:
            thumbnail = [Thumbnail.from_dictionary(x) for x in dictionary.get('thumbnail')]
        else:
            thumbnail = APIHelper.SKIP
        subtitle = None
        if dictionary.get('subtitle') is not None:
            subtitle = [Subtitle.from_dictionary(x) for x in dictionary.get('subtitle')]
        else:
            subtitle = APIHelper.SKIP
        preview_thumbnail = None
        if dictionary.get('previewThumbnail') is not None:
            preview_thumbnail = [PreviewThumbnail.from_dictionary(x) for x in dictionary.get('previewThumbnail')]
        else:
            preview_thumbnail = APIHelper.SKIP
        # Return an object of this model
        return cls(video,
                   audio,
                   playlist,
                   thumbnail,
                   subtitle,
                   preview_thumbnail)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'video={(self.video if hasattr(self, "video") else None)!r}, '
                f'audio={(self.audio if hasattr(self, "audio") else None)!r}, '
                f'playlist={(self.playlist if hasattr(self, "playlist") else None)!r}, '
                f'thumbnail={(self.thumbnail if hasattr(self, "thumbnail") else None)!r}, '
                f'subtitle={(self.subtitle if hasattr(self, "subtitle") else None)!r}, '
                f'preview_thumbnail={(self.preview_thumbnail if hasattr(self, "preview_thumbnail") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'video={(self.video if hasattr(self, "video") else None)!s}, '
                f'audio={(self.audio if hasattr(self, "audio") else None)!s}, '
                f'playlist={(self.playlist if hasattr(self, "playlist") else None)!s}, '
                f'thumbnail={(self.thumbnail if hasattr(self, "thumbnail") else None)!s}, '
                f'subtitle={(self.subtitle if hasattr(self, "subtitle") else None)!s}, '
                f'preview_thumbnail={(self.preview_thumbnail if hasattr(self, "preview_thumbnail") else None)!s})')
