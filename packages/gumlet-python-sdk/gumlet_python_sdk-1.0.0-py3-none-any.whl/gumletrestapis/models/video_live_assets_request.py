# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class VideoLiveAssetsRequest(object):

    """Implementation of the 'Video Live Assets Request' model.

    Attributes:
        live_source_id (str): Gumlet live video source/collection id.
        resolution (str): Required resolutions in HLS delivery format for live
            stream. Can be an array of string out of the following values: 
            `240p`, `360p`, `480p`, `540p`, `720p`, and `1080p`. Re-sized
            rendition will retain the input aspect ratio.
        title (str): Your live stream asset title
        mp_4_access (bool): Creates <code>MP4</code> version for download
            purpose.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "live_source_id": 'live_source_id',
        "resolution": 'resolution',
        "title": 'title',
        "mp_4_access": 'mp4_access'
    }

    _optionals = [
        'title',
        'mp_4_access',
    ]

    def __init__(self,
                 live_source_id=None,
                 resolution=None,
                 title=APIHelper.SKIP,
                 mp_4_access=APIHelper.SKIP):
        """Constructor for the VideoLiveAssetsRequest class"""

        # Initialize members of the class
        self.live_source_id = live_source_id 
        self.resolution = resolution 
        if title is not APIHelper.SKIP:
            self.title = title 
        if mp_4_access is not APIHelper.SKIP:
            self.mp_4_access = mp_4_access 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        live_source_id = dictionary.get("live_source_id") if dictionary.get("live_source_id") else None
        resolution = dictionary.get("resolution") if dictionary.get("resolution") else None
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        mp_4_access = dictionary.get("mp4_access") if "mp4_access" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(live_source_id,
                   resolution,
                   title,
                   mp_4_access)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'live_source_id={self.live_source_id!r}, '
                f'resolution={self.resolution!r}, '
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'mp_4_access={(self.mp_4_access if hasattr(self, "mp_4_access") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'live_source_id={self.live_source_id!s}, '
                f'resolution={self.resolution!s}, '
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'mp_4_access={(self.mp_4_access if hasattr(self, "mp_4_access") else None)!s})')
