# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class Part(object):

    """Implementation of the 'Part' model.

    Attributes:
        part_number (int): The model property of type int.
        e_tag (str): ETag received while uploading the part using PUT

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "part_number": 'PartNumber',
        "e_tag": 'ETag'
    }

    _optionals = [
        'part_number',
        'e_tag',
    ]

    def __init__(self,
                 part_number=APIHelper.SKIP,
                 e_tag=APIHelper.SKIP):
        """Constructor for the Part class"""

        # Initialize members of the class
        if part_number is not APIHelper.SKIP:
            self.part_number = part_number 
        if e_tag is not APIHelper.SKIP:
            self.e_tag = e_tag 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        part_number = dictionary.get("PartNumber") if dictionary.get("PartNumber") else APIHelper.SKIP
        e_tag = dictionary.get("ETag") if dictionary.get("ETag") else APIHelper.SKIP
        # Return an object of this model
        return cls(part_number,
                   e_tag)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'part_number={(self.part_number if hasattr(self, "part_number") else None)!r}, '
                f'e_tag={(self.e_tag if hasattr(self, "e_tag") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'part_number={(self.part_number if hasattr(self, "part_number") else None)!s}, '
                f'e_tag={(self.e_tag if hasattr(self, "e_tag") else None)!s})')
