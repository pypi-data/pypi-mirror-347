# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class TextOverlay(object):

    """Implementation of the 'TextOverlay' model.

    Text overlay can be used to brand a video or add a label in the form of
    text.

    Attributes:
        text (str): Text to be overlayed on video.
        horizontal_align (str): This parameter specifies the horizontal
            alignment of the overlayed image and can be either `left` or
            `right`. **Default: `right`**
        vertical_align (str): This parameter specifies the vertical alignment
            of the overlayed image and can be either `top` or `bottom`.
            **Default: `bottom`**
        horizontal_margin (str): This parameter defines the horizontal
            coordinate value of the corner (determined by `horizontal_align`)
            of the overlay area. Values can be an absolute number of pixels
            relative to the video width. **Default: `0`**
        vertical_margin (str): This parameter defines the vertical coordinate
            value of the corner (determined by vertical_align) of the overlay
            area. Values can be an absolute number of pixels relative to the
            video height. **Default: `0`**
        color (str): Font color for text. **Default: `black`**
        font (str): Font family type for text. **Default: `sans`**
        font_size (str): Font size in pixels. **Default: `16`**
        opacity (str): Overlay text opacity can be specified with opacity
            parameter where value can be between `0` and `100` where `0` is
            considered completely transparent and `100` is considered
            completely opaque. **Default: `100`**
        box (bool): This parameter allows rectangular drawing a box over the
            overlayed text. **Default: `false`**
        box_color (str): Box color can be specified with this parameter.
            **Default: `white`**
        box_opacity (str): Box opacity can be specified with this parameter.
            **Default: `100`**
        box_border (str): Padding between the box border and the text can be
            specified with this parameter in pixels. **Default: `0`**

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "text": 'text',
        "horizontal_align": 'horizontal_align',
        "vertical_align": 'vertical_align',
        "horizontal_margin": 'horizontal_margin',
        "vertical_margin": 'vertical_margin',
        "color": 'color',
        "font": 'font',
        "font_size": 'font_size',
        "opacity": 'opacity',
        "box": 'box',
        "box_color": 'box_color',
        "box_opacity": 'box_opacity',
        "box_border": 'box_border'
    }

    _optionals = [
        'horizontal_align',
        'vertical_align',
        'horizontal_margin',
        'vertical_margin',
        'color',
        'font',
        'font_size',
        'opacity',
        'box',
        'box_color',
        'box_opacity',
        'box_border',
    ]

    def __init__(self,
                 text=None,
                 horizontal_align=APIHelper.SKIP,
                 vertical_align=APIHelper.SKIP,
                 horizontal_margin=APIHelper.SKIP,
                 vertical_margin=APIHelper.SKIP,
                 color=APIHelper.SKIP,
                 font=APIHelper.SKIP,
                 font_size=APIHelper.SKIP,
                 opacity=APIHelper.SKIP,
                 box=APIHelper.SKIP,
                 box_color=APIHelper.SKIP,
                 box_opacity=APIHelper.SKIP,
                 box_border=APIHelper.SKIP):
        """Constructor for the TextOverlay class"""

        # Initialize members of the class
        self.text = text 
        if horizontal_align is not APIHelper.SKIP:
            self.horizontal_align = horizontal_align 
        if vertical_align is not APIHelper.SKIP:
            self.vertical_align = vertical_align 
        if horizontal_margin is not APIHelper.SKIP:
            self.horizontal_margin = horizontal_margin 
        if vertical_margin is not APIHelper.SKIP:
            self.vertical_margin = vertical_margin 
        if color is not APIHelper.SKIP:
            self.color = color 
        if font is not APIHelper.SKIP:
            self.font = font 
        if font_size is not APIHelper.SKIP:
            self.font_size = font_size 
        if opacity is not APIHelper.SKIP:
            self.opacity = opacity 
        if box is not APIHelper.SKIP:
            self.box = box 
        if box_color is not APIHelper.SKIP:
            self.box_color = box_color 
        if box_opacity is not APIHelper.SKIP:
            self.box_opacity = box_opacity 
        if box_border is not APIHelper.SKIP:
            self.box_border = box_border 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        text = dictionary.get("text") if dictionary.get("text") else None
        horizontal_align = dictionary.get("horizontal_align") if dictionary.get("horizontal_align") else APIHelper.SKIP
        vertical_align = dictionary.get("vertical_align") if dictionary.get("vertical_align") else APIHelper.SKIP
        horizontal_margin = dictionary.get("horizontal_margin") if dictionary.get("horizontal_margin") else APIHelper.SKIP
        vertical_margin = dictionary.get("vertical_margin") if dictionary.get("vertical_margin") else APIHelper.SKIP
        color = dictionary.get("color") if dictionary.get("color") else APIHelper.SKIP
        font = dictionary.get("font") if dictionary.get("font") else APIHelper.SKIP
        font_size = dictionary.get("font_size") if dictionary.get("font_size") else APIHelper.SKIP
        opacity = dictionary.get("opacity") if dictionary.get("opacity") else APIHelper.SKIP
        box = dictionary.get("box") if "box" in dictionary.keys() else APIHelper.SKIP
        box_color = dictionary.get("box_color") if dictionary.get("box_color") else APIHelper.SKIP
        box_opacity = dictionary.get("box_opacity") if dictionary.get("box_opacity") else APIHelper.SKIP
        box_border = dictionary.get("box_border") if dictionary.get("box_border") else APIHelper.SKIP
        # Return an object of this model
        return cls(text,
                   horizontal_align,
                   vertical_align,
                   horizontal_margin,
                   vertical_margin,
                   color,
                   font,
                   font_size,
                   opacity,
                   box,
                   box_color,
                   box_opacity,
                   box_border)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!r}, '
                f'horizontal_align={(self.horizontal_align if hasattr(self, "horizontal_align") else None)!r}, '
                f'vertical_align={(self.vertical_align if hasattr(self, "vertical_align") else None)!r}, '
                f'horizontal_margin={(self.horizontal_margin if hasattr(self, "horizontal_margin") else None)!r}, '
                f'vertical_margin={(self.vertical_margin if hasattr(self, "vertical_margin") else None)!r}, '
                f'color={(self.color if hasattr(self, "color") else None)!r}, '
                f'font={(self.font if hasattr(self, "font") else None)!r}, '
                f'font_size={(self.font_size if hasattr(self, "font_size") else None)!r}, '
                f'opacity={(self.opacity if hasattr(self, "opacity") else None)!r}, '
                f'box={(self.box if hasattr(self, "box") else None)!r}, '
                f'box_color={(self.box_color if hasattr(self, "box_color") else None)!r}, '
                f'box_opacity={(self.box_opacity if hasattr(self, "box_opacity") else None)!r}, '
                f'box_border={(self.box_border if hasattr(self, "box_border") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!s}, '
                f'horizontal_align={(self.horizontal_align if hasattr(self, "horizontal_align") else None)!s}, '
                f'vertical_align={(self.vertical_align if hasattr(self, "vertical_align") else None)!s}, '
                f'horizontal_margin={(self.horizontal_margin if hasattr(self, "horizontal_margin") else None)!s}, '
                f'vertical_margin={(self.vertical_margin if hasattr(self, "vertical_margin") else None)!s}, '
                f'color={(self.color if hasattr(self, "color") else None)!s}, '
                f'font={(self.font if hasattr(self, "font") else None)!s}, '
                f'font_size={(self.font_size if hasattr(self, "font_size") else None)!s}, '
                f'opacity={(self.opacity if hasattr(self, "opacity") else None)!s}, '
                f'box={(self.box if hasattr(self, "box") else None)!s}, '
                f'box_color={(self.box_color if hasattr(self, "box_color") else None)!s}, '
                f'box_opacity={(self.box_opacity if hasattr(self, "box_opacity") else None)!s}, '
                f'box_border={(self.box_border if hasattr(self, "box_border") else None)!s})')
