# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class ChannelSettings2(object):

    """Implementation of the 'ChannelSettings2' model.

    Configurations to set various channel settings.

    Attributes:
        active (bool): The model property of type bool.
        description (str): The model property of type str.
        title (str): The model property of type str.
        privacy_type (PrivacyTypeEnum): The model property of type
            PrivacyTypeEnum.
        featured_video (str): Video asset id, the asset should be in the same
            collection as channel
        password (str): under channel_settings privacy_type must be
            "password-protected". Password length should be greater than 5 and
            lesser than 100 characters.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "active": 'active',
        "description": 'description',
        "title": 'title',
        "privacy_type": 'privacy_type',
        "featured_video": 'featured_video',
        "password": 'password'
    }

    _optionals = [
        'active',
        'description',
        'title',
        'privacy_type',
        'featured_video',
        'password',
    ]

    def __init__(self,
                 active=False,
                 description=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 privacy_type=APIHelper.SKIP,
                 featured_video=APIHelper.SKIP,
                 password=APIHelper.SKIP):
        """Constructor for the ChannelSettings2 class"""

        # Initialize members of the class
        self.active = active 
        if description is not APIHelper.SKIP:
            self.description = description 
        if title is not APIHelper.SKIP:
            self.title = title 
        if privacy_type is not APIHelper.SKIP:
            self.privacy_type = privacy_type 
        if featured_video is not APIHelper.SKIP:
            self.featured_video = featured_video 
        if password is not APIHelper.SKIP:
            self.password = password 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        active = dictionary.get("active") if dictionary.get("active") else False
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        privacy_type = dictionary.get("privacy_type") if dictionary.get("privacy_type") else APIHelper.SKIP
        featured_video = dictionary.get("featured_video") if dictionary.get("featured_video") else APIHelper.SKIP
        password = dictionary.get("password") if dictionary.get("password") else APIHelper.SKIP
        # Return an object of this model
        return cls(active,
                   description,
                   title,
                   privacy_type,
                   featured_video,
                   password)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'active={(self.active if hasattr(self, "active") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'privacy_type={(self.privacy_type if hasattr(self, "privacy_type") else None)!r}, '
                f'featured_video={(self.featured_video if hasattr(self, "featured_video") else None)!r}, '
                f'password={(self.password if hasattr(self, "password") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'active={(self.active if hasattr(self, "active") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'privacy_type={(self.privacy_type if hasattr(self, "privacy_type") else None)!s}, '
                f'featured_video={(self.featured_video if hasattr(self, "featured_video") else None)!s}, '
                f'password={(self.password if hasattr(self, "password") else None)!s})')
