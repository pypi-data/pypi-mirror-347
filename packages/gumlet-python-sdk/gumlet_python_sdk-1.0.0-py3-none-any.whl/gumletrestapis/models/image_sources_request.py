# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.aws_4 import Aws4
from gumletrestapis.models.azure_2 import Azure2
from gumletrestapis.models.backblaze_2 import Backblaze2
from gumletrestapis.models.cloudflare_2 import Cloudflare2
from gumletrestapis.models.cloudinary_2 import Cloudinary2
from gumletrestapis.models.dostorage_2 import Dostorage2
from gumletrestapis.models.gcs_2 import Gcs2
from gumletrestapis.models.linode_2 import Linode2
from gumletrestapis.models.proxy_2 import Proxy2
from gumletrestapis.models.wasabi_2 import Wasabi2


class ImageSourcesRequest(object):

    """Implementation of the 'Image Sources Request' model.

    Attributes:
        namespace (str): unique subdomain associated with the image source
        mtype (Type2Enum): The model property of type Type2Enum.
        aws (Aws4): This is a required field if source type is aws.
        proxy (Proxy2): This is a required field if source type is proxy.
        gcs (Gcs2): This is a required field if source type is gcs.
        dostorage (Dostorage2): This is a required field if source type is
            dostorage.
        wasabi (Wasabi2): This is a required field if source type is wasabi.
        cloudinary (Cloudinary2): This is a required field if source type is
            cloudinary.
        azure (Azure2): This is a required field if source type is azure.
        linode (Linode2): This is a required field if source type is linode.
        backblaze (Backblaze2): This is a required field if source type is
            backblaze.
        cloudflare (Cloudflare2): This is a required field if source type is
            cloudflare.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "namespace": 'namespace',
        "mtype": 'type',
        "aws": 'aws',
        "proxy": 'proxy',
        "gcs": 'gcs',
        "dostorage": 'dostorage',
        "wasabi": 'wasabi',
        "cloudinary": 'cloudinary',
        "azure": 'azure',
        "linode": 'linode',
        "backblaze": 'backblaze',
        "cloudflare": 'cloudflare'
    }

    _optionals = [
        'aws',
        'proxy',
        'gcs',
        'dostorage',
        'wasabi',
        'cloudinary',
        'azure',
        'linode',
        'backblaze',
        'cloudflare',
    ]

    def __init__(self,
                 namespace=None,
                 mtype=None,
                 aws=APIHelper.SKIP,
                 proxy=APIHelper.SKIP,
                 gcs=APIHelper.SKIP,
                 dostorage=APIHelper.SKIP,
                 wasabi=APIHelper.SKIP,
                 cloudinary=APIHelper.SKIP,
                 azure=APIHelper.SKIP,
                 linode=APIHelper.SKIP,
                 backblaze=APIHelper.SKIP,
                 cloudflare=APIHelper.SKIP):
        """Constructor for the ImageSourcesRequest class"""

        # Initialize members of the class
        self.namespace = namespace 
        self.mtype = mtype 
        if aws is not APIHelper.SKIP:
            self.aws = aws 
        if proxy is not APIHelper.SKIP:
            self.proxy = proxy 
        if gcs is not APIHelper.SKIP:
            self.gcs = gcs 
        if dostorage is not APIHelper.SKIP:
            self.dostorage = dostorage 
        if wasabi is not APIHelper.SKIP:
            self.wasabi = wasabi 
        if cloudinary is not APIHelper.SKIP:
            self.cloudinary = cloudinary 
        if azure is not APIHelper.SKIP:
            self.azure = azure 
        if linode is not APIHelper.SKIP:
            self.linode = linode 
        if backblaze is not APIHelper.SKIP:
            self.backblaze = backblaze 
        if cloudflare is not APIHelper.SKIP:
            self.cloudflare = cloudflare 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        namespace = dictionary.get("namespace") if dictionary.get("namespace") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        aws = Aws4.from_dictionary(dictionary.get('aws')) if 'aws' in dictionary.keys() else APIHelper.SKIP
        proxy = Proxy2.from_dictionary(dictionary.get('proxy')) if 'proxy' in dictionary.keys() else APIHelper.SKIP
        gcs = Gcs2.from_dictionary(dictionary.get('gcs')) if 'gcs' in dictionary.keys() else APIHelper.SKIP
        dostorage = Dostorage2.from_dictionary(dictionary.get('dostorage')) if 'dostorage' in dictionary.keys() else APIHelper.SKIP
        wasabi = Wasabi2.from_dictionary(dictionary.get('wasabi')) if 'wasabi' in dictionary.keys() else APIHelper.SKIP
        cloudinary = Cloudinary2.from_dictionary(dictionary.get('cloudinary')) if 'cloudinary' in dictionary.keys() else APIHelper.SKIP
        azure = Azure2.from_dictionary(dictionary.get('azure')) if 'azure' in dictionary.keys() else APIHelper.SKIP
        linode = Linode2.from_dictionary(dictionary.get('linode')) if 'linode' in dictionary.keys() else APIHelper.SKIP
        backblaze = Backblaze2.from_dictionary(dictionary.get('backblaze')) if 'backblaze' in dictionary.keys() else APIHelper.SKIP
        cloudflare = Cloudflare2.from_dictionary(dictionary.get('cloudflare')) if 'cloudflare' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(namespace,
                   mtype,
                   aws,
                   proxy,
                   gcs,
                   dostorage,
                   wasabi,
                   cloudinary,
                   azure,
                   linode,
                   backblaze,
                   cloudflare)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'namespace={self.namespace!r}, '
                f'mtype={self.mtype!r}, '
                f'aws={(self.aws if hasattr(self, "aws") else None)!r}, '
                f'proxy={(self.proxy if hasattr(self, "proxy") else None)!r}, '
                f'gcs={(self.gcs if hasattr(self, "gcs") else None)!r}, '
                f'dostorage={(self.dostorage if hasattr(self, "dostorage") else None)!r}, '
                f'wasabi={(self.wasabi if hasattr(self, "wasabi") else None)!r}, '
                f'cloudinary={(self.cloudinary if hasattr(self, "cloudinary") else None)!r}, '
                f'azure={(self.azure if hasattr(self, "azure") else None)!r}, '
                f'linode={(self.linode if hasattr(self, "linode") else None)!r}, '
                f'backblaze={(self.backblaze if hasattr(self, "backblaze") else None)!r}, '
                f'cloudflare={(self.cloudflare if hasattr(self, "cloudflare") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'namespace={self.namespace!s}, '
                f'mtype={self.mtype!s}, '
                f'aws={(self.aws if hasattr(self, "aws") else None)!s}, '
                f'proxy={(self.proxy if hasattr(self, "proxy") else None)!s}, '
                f'gcs={(self.gcs if hasattr(self, "gcs") else None)!s}, '
                f'dostorage={(self.dostorage if hasattr(self, "dostorage") else None)!s}, '
                f'wasabi={(self.wasabi if hasattr(self, "wasabi") else None)!s}, '
                f'cloudinary={(self.cloudinary if hasattr(self, "cloudinary") else None)!s}, '
                f'azure={(self.azure if hasattr(self, "azure") else None)!s}, '
                f'linode={(self.linode if hasattr(self, "linode") else None)!s}, '
                f'backblaze={(self.backblaze if hasattr(self, "backblaze") else None)!s}, '
                f'cloudflare={(self.cloudflare if hasattr(self, "cloudflare") else None)!s})')
