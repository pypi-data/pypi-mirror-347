# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.channel_settings_1 import ChannelSettings1
from gumletrestapis.models.embed_details_1 import EmbedDetails1
from gumletrestapis.models.player_config import PlayerConfig
from gumletrestapis.models.zoom_1 import Zoom1


class ImageSourcesResponse(object):

    """Implementation of the 'Image Sources Response' model.

    Attributes:
        id (str): The model property of type str.
        name (str): The model property of type str.
        mtype (str): The model property of type str.
        created_at (str): The model property of type str.
        updated_at (str): The model property of type str.
        video_protection (Any): The model property of type Any.
        player_config (PlayerConfig): The model property of type PlayerConfig.
        default_profile_id (str): The model property of type str.
        insight_property_id (str): The model property of type str.
        zoom (Zoom1): The model property of type Zoom1.
        embed_details (EmbedDetails1): The model property of type
            EmbedDetails1.
        folders (List[Any]): The model property of type List[Any].
        channel_settings (ChannelSettings1): The model property of type
            ChannelSettings1.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "mtype": 'type',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "video_protection": 'video_protection',
        "player_config": 'player_config',
        "default_profile_id": 'default_profile_id',
        "insight_property_id": 'insight_property_id',
        "zoom": 'zoom',
        "embed_details": 'embed_details',
        "folders": 'folders',
        "channel_settings": 'channel_settings'
    }

    _optionals = [
        'id',
        'name',
        'mtype',
        'created_at',
        'updated_at',
        'video_protection',
        'player_config',
        'default_profile_id',
        'insight_property_id',
        'zoom',
        'embed_details',
        'folders',
        'channel_settings',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP,
                 video_protection=APIHelper.SKIP,
                 player_config=APIHelper.SKIP,
                 default_profile_id=APIHelper.SKIP,
                 insight_property_id=APIHelper.SKIP,
                 zoom=APIHelper.SKIP,
                 embed_details=APIHelper.SKIP,
                 folders=APIHelper.SKIP,
                 channel_settings=APIHelper.SKIP):
        """Constructor for the ImageSourcesResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if created_at is not APIHelper.SKIP:
            self.created_at = created_at 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = updated_at 
        if video_protection is not APIHelper.SKIP:
            self.video_protection = video_protection 
        if player_config is not APIHelper.SKIP:
            self.player_config = player_config 
        if default_profile_id is not APIHelper.SKIP:
            self.default_profile_id = default_profile_id 
        if insight_property_id is not APIHelper.SKIP:
            self.insight_property_id = insight_property_id 
        if zoom is not APIHelper.SKIP:
            self.zoom = zoom 
        if embed_details is not APIHelper.SKIP:
            self.embed_details = embed_details 
        if folders is not APIHelper.SKIP:
            self.folders = folders 
        if channel_settings is not APIHelper.SKIP:
            self.channel_settings = channel_settings 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else APIHelper.SKIP
        updated_at = dictionary.get("updated_at") if dictionary.get("updated_at") else APIHelper.SKIP
        video_protection = dictionary.get("video_protection") if dictionary.get("video_protection") else APIHelper.SKIP
        player_config = PlayerConfig.from_dictionary(dictionary.get('player_config')) if 'player_config' in dictionary.keys() else APIHelper.SKIP
        default_profile_id = dictionary.get("default_profile_id") if dictionary.get("default_profile_id") else APIHelper.SKIP
        insight_property_id = dictionary.get("insight_property_id") if dictionary.get("insight_property_id") else APIHelper.SKIP
        zoom = Zoom1.from_dictionary(dictionary.get('zoom')) if 'zoom' in dictionary.keys() else APIHelper.SKIP
        embed_details = EmbedDetails1.from_dictionary(dictionary.get('embed_details')) if 'embed_details' in dictionary.keys() else APIHelper.SKIP
        folders = dictionary.get("folders") if dictionary.get("folders") else APIHelper.SKIP
        channel_settings = ChannelSettings1.from_dictionary(dictionary.get('channel_settings')) if 'channel_settings' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   mtype,
                   created_at,
                   updated_at,
                   video_protection,
                   player_config,
                   default_profile_id,
                   insight_property_id,
                   zoom,
                   embed_details,
                   folders,
                   channel_settings)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!r}, '
                f'video_protection={(self.video_protection if hasattr(self, "video_protection") else None)!r}, '
                f'player_config={(self.player_config if hasattr(self, "player_config") else None)!r}, '
                f'default_profile_id={(self.default_profile_id if hasattr(self, "default_profile_id") else None)!r}, '
                f'insight_property_id={(self.insight_property_id if hasattr(self, "insight_property_id") else None)!r}, '
                f'zoom={(self.zoom if hasattr(self, "zoom") else None)!r}, '
                f'embed_details={(self.embed_details if hasattr(self, "embed_details") else None)!r}, '
                f'folders={(self.folders if hasattr(self, "folders") else None)!r}, '
                f'channel_settings={(self.channel_settings if hasattr(self, "channel_settings") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!s}, '
                f'video_protection={(self.video_protection if hasattr(self, "video_protection") else None)!s}, '
                f'player_config={(self.player_config if hasattr(self, "player_config") else None)!s}, '
                f'default_profile_id={(self.default_profile_id if hasattr(self, "default_profile_id") else None)!s}, '
                f'insight_property_id={(self.insight_property_id if hasattr(self, "insight_property_id") else None)!s}, '
                f'zoom={(self.zoom if hasattr(self, "zoom") else None)!s}, '
                f'embed_details={(self.embed_details if hasattr(self, "embed_details") else None)!s}, '
                f'folders={(self.folders if hasattr(self, "folders") else None)!s}, '
                f'channel_settings={(self.channel_settings if hasattr(self, "channel_settings") else None)!s})')
