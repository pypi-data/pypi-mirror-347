# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.upload_response import UploadResponse


class VideoAssetsSubtitleUploadEventRequest(object):

    """Implementation of the 'Video Assets Subtitle Upload Event Request' model.

    Attributes:
        upload_responses (List[UploadResponse]): The model property of type
            List[UploadResponse].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "upload_responses": 'upload_responses'
    }

    _optionals = [
        'upload_responses',
    ]

    def __init__(self,
                 upload_responses=APIHelper.SKIP):
        """Constructor for the VideoAssetsSubtitleUploadEventRequest class"""

        # Initialize members of the class
        if upload_responses is not APIHelper.SKIP:
            self.upload_responses = upload_responses 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        upload_responses = None
        if dictionary.get('upload_responses') is not None:
            upload_responses = [UploadResponse.from_dictionary(x) for x in dictionary.get('upload_responses')]
        else:
            upload_responses = APIHelper.SKIP
        # Return an object of this model
        return cls(upload_responses)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'upload_responses={(self.upload_responses if hasattr(self, "upload_responses") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'upload_responses={(self.upload_responses if hasattr(self, "upload_responses") else None)!s})')
