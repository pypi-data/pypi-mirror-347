# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class VideoProtection(object):

    """Implementation of the 'VideoProtection' model.

    Attributes:
        signed_url (bool): The model property of type bool.
        signed_url_secret (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "signed_url": 'signed_url',
        "signed_url_secret": 'signed_url_secret'
    }

    _optionals = [
        'signed_url',
        'signed_url_secret',
    ]

    def __init__(self,
                 signed_url=True,
                 signed_url_secret=APIHelper.SKIP):
        """Constructor for the VideoProtection class"""

        # Initialize members of the class
        self.signed_url = signed_url 
        if signed_url_secret is not APIHelper.SKIP:
            self.signed_url_secret = signed_url_secret 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        signed_url = dictionary.get("signed_url") if dictionary.get("signed_url") else True
        signed_url_secret = dictionary.get("signed_url_secret") if dictionary.get("signed_url_secret") else APIHelper.SKIP
        # Return an object of this model
        return cls(signed_url,
                   signed_url_secret)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'signed_url={(self.signed_url if hasattr(self, "signed_url") else None)!r}, '
                f'signed_url_secret={(self.signed_url_secret if hasattr(self, "signed_url_secret") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'signed_url={(self.signed_url if hasattr(self, "signed_url") else None)!s}, '
                f'signed_url_secret={(self.signed_url_secret if hasattr(self, "signed_url_secret") else None)!s})')
