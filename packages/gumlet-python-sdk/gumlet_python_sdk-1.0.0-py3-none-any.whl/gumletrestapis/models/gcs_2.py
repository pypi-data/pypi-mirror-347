# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Gcs2(object):

    """Implementation of the 'Gcs2' model.

    This is a required field if source type is gcs.

    Attributes:
        bucket_name (str): The model property of type str.
        service_account_key (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bucket_name": 'bucket_name',
        "service_account_key": 'service_account_key'
    }

    def __init__(self,
                 bucket_name=None,
                 service_account_key=None):
        """Constructor for the Gcs2 class"""

        # Initialize members of the class
        self.bucket_name = bucket_name 
        self.service_account_key = service_account_key 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bucket_name = dictionary.get("bucket_name") if dictionary.get("bucket_name") else None
        service_account_key = dictionary.get("service_account_key") if dictionary.get("service_account_key") else None
        # Return an object of this model
        return cls(bucket_name,
                   service_account_key)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bucket_name={self.bucket_name!r}, '
                f'service_account_key={self.service_account_key!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bucket_name={self.bucket_name!s}, '
                f'service_account_key={self.service_account_key!s})')
