# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.date_range import DateRange
from gumletrestapis.models.filters import Filters


class VideoAnalyticsRequest(object):

    """Implementation of the 'Video Analytics Request' model.

    Attributes:
        metrics (List[str]): Define the metric you need the data for,
            currently we only support `top_assets` and
            'bandwidth_consumption_by_collection'
        date_range (DateRange): The timeframe to get the data for. Currently
            we only support a maximum of 60 days between `start_at` and
            `end_at`.
        top_assets_count (int): Count of video assets that should be returned,
            by default top *five assets* are returned but at max *only 100
            assets* can be retrieved.
        filters (Filters): The model property of type Filters.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "metrics": 'metrics',
        "date_range": 'date_range',
        "top_assets_count": 'top_assets_count',
        "filters": 'filters'
    }

    _optionals = [
        'top_assets_count',
        'filters',
    ]

    def __init__(self,
                 metrics=None,
                 date_range=None,
                 top_assets_count=5,
                 filters=APIHelper.SKIP):
        """Constructor for the VideoAnalyticsRequest class"""

        # Initialize members of the class
        self.metrics = metrics 
        self.date_range = date_range 
        self.top_assets_count = top_assets_count 
        if filters is not APIHelper.SKIP:
            self.filters = filters 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        metrics = dictionary.get("metrics") if dictionary.get("metrics") else None
        date_range = DateRange.from_dictionary(dictionary.get('date_range')) if dictionary.get('date_range') else None
        top_assets_count = dictionary.get("top_assets_count") if dictionary.get("top_assets_count") else 5
        filters = Filters.from_dictionary(dictionary.get('filters')) if 'filters' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(metrics,
                   date_range,
                   top_assets_count,
                   filters)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'metrics={self.metrics!r}, '
                f'date_range={self.date_range!r}, '
                f'top_assets_count={(self.top_assets_count if hasattr(self, "top_assets_count") else None)!r}, '
                f'filters={(self.filters if hasattr(self, "filters") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'metrics={self.metrics!s}, '
                f'date_range={self.date_range!s}, '
                f'top_assets_count={(self.top_assets_count if hasattr(self, "top_assets_count") else None)!s}, '
                f'filters={(self.filters if hasattr(self, "filters") else None)!s})')
