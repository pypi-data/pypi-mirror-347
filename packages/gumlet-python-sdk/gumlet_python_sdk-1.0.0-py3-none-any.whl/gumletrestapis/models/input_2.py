# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.chapter import Chapter
from gumletrestapis.models.transformations_2 import Transformations2


class Input2(object):

    """Implementation of the 'Input2' model.

    Attributes:
        transformations (Transformations2): The model property of type
            Transformations2.
        profile_id (str): The model property of type str.
        title (str): The model property of type str.
        description (str): The model property of type str.
        chapters (List[Chapter]): The model property of type List[Chapter].
        source_url (str): The model property of type str.
        size (int): The model property of type int.
        duration (float): The model property of type float.
        aspect_ratio (str): The model property of type str.
        fps (float): The model property of type float.
        width (int): The model property of type int.
        height (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transformations": 'transformations',
        "profile_id": 'profile_id',
        "title": 'title',
        "description": 'description',
        "chapters": 'chapters',
        "source_url": 'source_url',
        "size": 'size',
        "duration": 'duration',
        "aspect_ratio": 'aspect_ratio',
        "fps": 'fps',
        "width": 'width',
        "height": 'height'
    }

    _optionals = [
        'transformations',
        'profile_id',
        'title',
        'description',
        'chapters',
        'source_url',
        'size',
        'duration',
        'aspect_ratio',
        'fps',
        'width',
        'height',
    ]

    def __init__(self,
                 transformations=APIHelper.SKIP,
                 profile_id=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 chapters=APIHelper.SKIP,
                 source_url=APIHelper.SKIP,
                 size=0,
                 duration=0,
                 aspect_ratio=APIHelper.SKIP,
                 fps=0,
                 width=0,
                 height=0):
        """Constructor for the Input2 class"""

        # Initialize members of the class
        if transformations is not APIHelper.SKIP:
            self.transformations = transformations 
        if profile_id is not APIHelper.SKIP:
            self.profile_id = profile_id 
        if title is not APIHelper.SKIP:
            self.title = title 
        if description is not APIHelper.SKIP:
            self.description = description 
        if chapters is not APIHelper.SKIP:
            self.chapters = chapters 
        if source_url is not APIHelper.SKIP:
            self.source_url = source_url 
        self.size = size 
        self.duration = duration 
        if aspect_ratio is not APIHelper.SKIP:
            self.aspect_ratio = aspect_ratio 
        self.fps = fps 
        self.width = width 
        self.height = height 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        transformations = Transformations2.from_dictionary(dictionary.get('transformations')) if 'transformations' in dictionary.keys() else APIHelper.SKIP
        profile_id = dictionary.get("profile_id") if dictionary.get("profile_id") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        chapters = None
        if dictionary.get('chapters') is not None:
            chapters = [Chapter.from_dictionary(x) for x in dictionary.get('chapters')]
        else:
            chapters = APIHelper.SKIP
        source_url = dictionary.get("source_url") if dictionary.get("source_url") else APIHelper.SKIP
        size = dictionary.get("size") if dictionary.get("size") else 0
        duration = dictionary.get("duration") if dictionary.get("duration") else 0
        aspect_ratio = dictionary.get("aspect_ratio") if dictionary.get("aspect_ratio") else APIHelper.SKIP
        fps = dictionary.get("fps") if dictionary.get("fps") else 0
        width = dictionary.get("width") if dictionary.get("width") else 0
        height = dictionary.get("height") if dictionary.get("height") else 0
        # Return an object of this model
        return cls(transformations,
                   profile_id,
                   title,
                   description,
                   chapters,
                   source_url,
                   size,
                   duration,
                   aspect_ratio,
                   fps,
                   width,
                   height)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'transformations={(self.transformations if hasattr(self, "transformations") else None)!r}, '
                f'profile_id={(self.profile_id if hasattr(self, "profile_id") else None)!r}, '
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'chapters={(self.chapters if hasattr(self, "chapters") else None)!r}, '
                f'source_url={(self.source_url if hasattr(self, "source_url") else None)!r}, '
                f'size={(self.size if hasattr(self, "size") else None)!r}, '
                f'duration={(self.duration if hasattr(self, "duration") else None)!r}, '
                f'aspect_ratio={(self.aspect_ratio if hasattr(self, "aspect_ratio") else None)!r}, '
                f'fps={(self.fps if hasattr(self, "fps") else None)!r}, '
                f'width={(self.width if hasattr(self, "width") else None)!r}, '
                f'height={(self.height if hasattr(self, "height") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'transformations={(self.transformations if hasattr(self, "transformations") else None)!s}, '
                f'profile_id={(self.profile_id if hasattr(self, "profile_id") else None)!s}, '
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'chapters={(self.chapters if hasattr(self, "chapters") else None)!s}, '
                f'source_url={(self.source_url if hasattr(self, "source_url") else None)!s}, '
                f'size={(self.size if hasattr(self, "size") else None)!s}, '
                f'duration={(self.duration if hasattr(self, "duration") else None)!s}, '
                f'aspect_ratio={(self.aspect_ratio if hasattr(self, "aspect_ratio") else None)!s}, '
                f'fps={(self.fps if hasattr(self, "fps") else None)!s}, '
                f'width={(self.width if hasattr(self, "width") else None)!s}, '
                f'height={(self.height if hasattr(self, "height") else None)!s})')
