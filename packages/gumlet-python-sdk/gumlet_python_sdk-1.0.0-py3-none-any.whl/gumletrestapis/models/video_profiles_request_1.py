# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.animated_gif_2 import AnimatedGif2
from gumletrestapis.models.crop import Crop
from gumletrestapis.models.generate_subtitles import GenerateSubtitles
from gumletrestapis.models.image_overlay import ImageOverlay
from gumletrestapis.models.pad import Pad
from gumletrestapis.models.text_overlay import TextOverlay
from gumletrestapis.models.trim import Trim


class VideoProfilesRequest1(object):

    """Implementation of the 'Video Profiles Request1' model.

    Attributes:
        profile_id (str): Profile id of the profile which needs to be deleted.
        name (str): Profile name or identifier.
        format (Format1Enum): Transcode and deliver the asset in the requested
            format. The options can be one of `ABR` (HLS + DASH) and `MP4`.
        width (str): Resize video with the given width. Can be an absolute
            value in pixels or a percentage value with the `%` suffix.
            Specified values greater than the original asset width will be
            ignored. Only applicable when specified `format` is `MP4`.
        height (str): Resize video with the given height. Can be an absolute
            value in pixels or a percentage value with the `%` suffix.
            Specified values greater than the original asset height will be
            ignored. Only applicable when specified `format` is `MP4`.
        resolution (str): Resize video with the given height. Can be an
            absolute value in pixels or a percentage value with the `%`
            suffix. Specified values greater than the original asset height
            will be ignored. Only applicable when specified `format` is `MP4`.
        crop (Crop): This transformation can be used to crop the video by
            defining a rectangular area within the dimensions of the output
            video.
        pad (Pad): This transformation can be used to add padding to the video.
        trim (Trim): Trim transformation can be used to trim videos based on
            time duration.
        image_overlay (ImageOverlay): Image overlay can be used to brand a
            video or add a visual label in the form of an image.
        text_overlay (TextOverlay): Text overlay can be used to brand a video
            or add a label in the form of text.
        animated_gif (AnimatedGif2): Create an animated GIF from a video.
        generate_subtitles (GenerateSubtitles): Gumlet allows to generate
            subtitles from the audio stream (use <a
            href='https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes'
            > ISO 639-1 </a> Language Codes)
        mp_4_access (bool): Creates `mp4` version for download purpose in case
            of `MPEG-DASH` or `HLS` delivery format. **Default: `false`**
        per_title_encoding (bool): Gumlet analyzes each input video on a wide
            range of visual aspects. Based on the analysis, it chooses a
            unique set of transcoding options for processing the video. This
            ensures that the output video is of optimal size and best quality.
            **Default: `true`**
        process_low_resolution_input (bool): Currently, the minimum supported
            frame size is `57600` (`240x240`) pixels for `HLS/DASH` and
            `21025` (`145x145`) pixels for `MP4` format. However, enabling
            this flag will allow Gumlet to simply put your video asset into
            the specified delivery format without transcoding and
            optimization. Enabling this flag will cause any kind of specified
            video transformation to be ignored if you input video asset frame
            size is lower than the minimum supported frame size for the
            specified format. **Default: `false`**
        audio_only (bool): This flag allows Gumlet to transcode and deliver
            audio-only in the specified format. In this case,This flag allows
            Gumlet to transcode and deliver audio-only in the specified
            format. In this case, video transformation and thumbnails/animated
            GIFs would not be created. **Default: `false`**
        enable_drm (bool): Enable DRM encryption for transcoded videos. Gumlet
            supports Widevine and Fairplay DRMs.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "profile_id": 'profile_id',
        "name": 'name',
        "format": 'format',
        "width": 'width',
        "height": 'height',
        "resolution": 'resolution',
        "crop": 'crop',
        "pad": 'pad',
        "trim": 'trim',
        "image_overlay": 'image_overlay',
        "text_overlay": 'text_overlay',
        "animated_gif": 'animated_gif',
        "generate_subtitles": 'generate_subtitles',
        "mp_4_access": 'mp4_access',
        "per_title_encoding": 'per_title_encoding',
        "process_low_resolution_input": 'process_low_resolution_input',
        "audio_only": 'audio_only',
        "enable_drm": 'enable_drm'
    }

    _optionals = [
        'name',
        'format',
        'width',
        'height',
        'resolution',
        'crop',
        'pad',
        'trim',
        'image_overlay',
        'text_overlay',
        'animated_gif',
        'generate_subtitles',
        'mp_4_access',
        'per_title_encoding',
        'process_low_resolution_input',
        'audio_only',
        'enable_drm',
    ]

    def __init__(self,
                 profile_id=None,
                 name=APIHelper.SKIP,
                 format='ABR',
                 width=APIHelper.SKIP,
                 height=APIHelper.SKIP,
                 resolution=APIHelper.SKIP,
                 crop=APIHelper.SKIP,
                 pad=APIHelper.SKIP,
                 trim=APIHelper.SKIP,
                 image_overlay=APIHelper.SKIP,
                 text_overlay=APIHelper.SKIP,
                 animated_gif=APIHelper.SKIP,
                 generate_subtitles=APIHelper.SKIP,
                 mp_4_access=APIHelper.SKIP,
                 per_title_encoding=APIHelper.SKIP,
                 process_low_resolution_input=APIHelper.SKIP,
                 audio_only=APIHelper.SKIP,
                 enable_drm=APIHelper.SKIP):
        """Constructor for the VideoProfilesRequest1 class"""

        # Initialize members of the class
        self.profile_id = profile_id 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.format = format 
        if width is not APIHelper.SKIP:
            self.width = width 
        if height is not APIHelper.SKIP:
            self.height = height 
        if resolution is not APIHelper.SKIP:
            self.resolution = resolution 
        if crop is not APIHelper.SKIP:
            self.crop = crop 
        if pad is not APIHelper.SKIP:
            self.pad = pad 
        if trim is not APIHelper.SKIP:
            self.trim = trim 
        if image_overlay is not APIHelper.SKIP:
            self.image_overlay = image_overlay 
        if text_overlay is not APIHelper.SKIP:
            self.text_overlay = text_overlay 
        if animated_gif is not APIHelper.SKIP:
            self.animated_gif = animated_gif 
        if generate_subtitles is not APIHelper.SKIP:
            self.generate_subtitles = generate_subtitles 
        if mp_4_access is not APIHelper.SKIP:
            self.mp_4_access = mp_4_access 
        if per_title_encoding is not APIHelper.SKIP:
            self.per_title_encoding = per_title_encoding 
        if process_low_resolution_input is not APIHelper.SKIP:
            self.process_low_resolution_input = process_low_resolution_input 
        if audio_only is not APIHelper.SKIP:
            self.audio_only = audio_only 
        if enable_drm is not APIHelper.SKIP:
            self.enable_drm = enable_drm 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        profile_id = dictionary.get("profile_id") if dictionary.get("profile_id") else None
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        format = dictionary.get("format") if dictionary.get("format") else 'ABR'
        width = dictionary.get("width") if dictionary.get("width") else APIHelper.SKIP
        height = dictionary.get("height") if dictionary.get("height") else APIHelper.SKIP
        resolution = dictionary.get("resolution") if dictionary.get("resolution") else APIHelper.SKIP
        crop = Crop.from_dictionary(dictionary.get('crop')) if 'crop' in dictionary.keys() else APIHelper.SKIP
        pad = Pad.from_dictionary(dictionary.get('pad')) if 'pad' in dictionary.keys() else APIHelper.SKIP
        trim = Trim.from_dictionary(dictionary.get('trim')) if 'trim' in dictionary.keys() else APIHelper.SKIP
        image_overlay = ImageOverlay.from_dictionary(dictionary.get('image_overlay')) if 'image_overlay' in dictionary.keys() else APIHelper.SKIP
        text_overlay = TextOverlay.from_dictionary(dictionary.get('text_overlay')) if 'text_overlay' in dictionary.keys() else APIHelper.SKIP
        animated_gif = AnimatedGif2.from_dictionary(dictionary.get('animated_gif')) if 'animated_gif' in dictionary.keys() else APIHelper.SKIP
        generate_subtitles = GenerateSubtitles.from_dictionary(dictionary.get('generate_subtitles')) if 'generate_subtitles' in dictionary.keys() else APIHelper.SKIP
        mp_4_access = dictionary.get("mp4_access") if "mp4_access" in dictionary.keys() else APIHelper.SKIP
        per_title_encoding = dictionary.get("per_title_encoding") if "per_title_encoding" in dictionary.keys() else APIHelper.SKIP
        process_low_resolution_input = dictionary.get("process_low_resolution_input") if "process_low_resolution_input" in dictionary.keys() else APIHelper.SKIP
        audio_only = dictionary.get("audio_only") if "audio_only" in dictionary.keys() else APIHelper.SKIP
        enable_drm = dictionary.get("enable_drm") if "enable_drm" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(profile_id,
                   name,
                   format,
                   width,
                   height,
                   resolution,
                   crop,
                   pad,
                   trim,
                   image_overlay,
                   text_overlay,
                   animated_gif,
                   generate_subtitles,
                   mp_4_access,
                   per_title_encoding,
                   process_low_resolution_input,
                   audio_only,
                   enable_drm)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'profile_id={self.profile_id!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'format={(self.format if hasattr(self, "format") else None)!r}, '
                f'width={(self.width if hasattr(self, "width") else None)!r}, '
                f'height={(self.height if hasattr(self, "height") else None)!r}, '
                f'resolution={(self.resolution if hasattr(self, "resolution") else None)!r}, '
                f'crop={(self.crop if hasattr(self, "crop") else None)!r}, '
                f'pad={(self.pad if hasattr(self, "pad") else None)!r}, '
                f'trim={(self.trim if hasattr(self, "trim") else None)!r}, '
                f'image_overlay={(self.image_overlay if hasattr(self, "image_overlay") else None)!r}, '
                f'text_overlay={(self.text_overlay if hasattr(self, "text_overlay") else None)!r}, '
                f'animated_gif={(self.animated_gif if hasattr(self, "animated_gif") else None)!r}, '
                f'generate_subtitles={(self.generate_subtitles if hasattr(self, "generate_subtitles") else None)!r}, '
                f'mp_4_access={(self.mp_4_access if hasattr(self, "mp_4_access") else None)!r}, '
                f'per_title_encoding={(self.per_title_encoding if hasattr(self, "per_title_encoding") else None)!r}, '
                f'process_low_resolution_input={(self.process_low_resolution_input if hasattr(self, "process_low_resolution_input") else None)!r}, '
                f'audio_only={(self.audio_only if hasattr(self, "audio_only") else None)!r}, '
                f'enable_drm={(self.enable_drm if hasattr(self, "enable_drm") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'profile_id={self.profile_id!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'format={(self.format if hasattr(self, "format") else None)!s}, '
                f'width={(self.width if hasattr(self, "width") else None)!s}, '
                f'height={(self.height if hasattr(self, "height") else None)!s}, '
                f'resolution={(self.resolution if hasattr(self, "resolution") else None)!s}, '
                f'crop={(self.crop if hasattr(self, "crop") else None)!s}, '
                f'pad={(self.pad if hasattr(self, "pad") else None)!s}, '
                f'trim={(self.trim if hasattr(self, "trim") else None)!s}, '
                f'image_overlay={(self.image_overlay if hasattr(self, "image_overlay") else None)!s}, '
                f'text_overlay={(self.text_overlay if hasattr(self, "text_overlay") else None)!s}, '
                f'animated_gif={(self.animated_gif if hasattr(self, "animated_gif") else None)!s}, '
                f'generate_subtitles={(self.generate_subtitles if hasattr(self, "generate_subtitles") else None)!s}, '
                f'mp_4_access={(self.mp_4_access if hasattr(self, "mp_4_access") else None)!s}, '
                f'per_title_encoding={(self.per_title_encoding if hasattr(self, "per_title_encoding") else None)!s}, '
                f'process_low_resolution_input={(self.process_low_resolution_input if hasattr(self, "process_low_resolution_input") else None)!s}, '
                f'audio_only={(self.audio_only if hasattr(self, "audio_only") else None)!s}, '
                f'enable_drm={(self.enable_drm if hasattr(self, "enable_drm") else None)!s})')
