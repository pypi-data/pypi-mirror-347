# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.asset_list_1 import AssetList1


class VideoPlaylistAssetsResponse(object):

    """Implementation of the 'Video Playlist Assets Response' model.

    Attributes:
        asset_list (List[AssetList1]): The model property of type
            List[AssetList1].
        has_next_page (bool): The model property of type bool.
        next_page (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asset_list": 'asset_list',
        "has_next_page": 'has_next_page',
        "next_page": 'next_page'
    }

    _optionals = [
        'asset_list',
        'has_next_page',
        'next_page',
    ]

    def __init__(self,
                 asset_list=APIHelper.SKIP,
                 has_next_page=True,
                 next_page=0):
        """Constructor for the VideoPlaylistAssetsResponse class"""

        # Initialize members of the class
        if asset_list is not APIHelper.SKIP:
            self.asset_list = asset_list 
        self.has_next_page = has_next_page 
        self.next_page = next_page 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        asset_list = None
        if dictionary.get('asset_list') is not None:
            asset_list = [AssetList1.from_dictionary(x) for x in dictionary.get('asset_list')]
        else:
            asset_list = APIHelper.SKIP
        has_next_page = dictionary.get("has_next_page") if dictionary.get("has_next_page") else True
        next_page = dictionary.get("next_page") if dictionary.get("next_page") else 0
        # Return an object of this model
        return cls(asset_list,
                   has_next_page,
                   next_page)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'asset_list={(self.asset_list if hasattr(self, "asset_list") else None)!r}, '
                f'has_next_page={(self.has_next_page if hasattr(self, "has_next_page") else None)!r}, '
                f'next_page={(self.next_page if hasattr(self, "next_page") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'asset_list={(self.asset_list if hasattr(self, "asset_list") else None)!s}, '
                f'has_next_page={(self.has_next_page if hasattr(self, "has_next_page") else None)!s}, '
                f'next_page={(self.next_page if hasattr(self, "next_page") else None)!s})')
