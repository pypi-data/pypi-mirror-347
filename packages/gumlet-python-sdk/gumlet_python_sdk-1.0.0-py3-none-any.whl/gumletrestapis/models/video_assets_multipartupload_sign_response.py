# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class VideoAssetsMultipartuploadSignResponse(object):

    """Implementation of the 'Video Assets Multipartupload Sign Response' model.

    Attributes:
        asset_id (str): The model property of type str.
        part_number (str): The model property of type str.
        part_upload_url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asset_id": 'asset_id',
        "part_number": 'part_number',
        "part_upload_url": 'part_upload_url'
    }

    _optionals = [
        'asset_id',
        'part_number',
        'part_upload_url',
    ]

    def __init__(self,
                 asset_id=APIHelper.SKIP,
                 part_number=APIHelper.SKIP,
                 part_upload_url=APIHelper.SKIP):
        """Constructor for the VideoAssetsMultipartuploadSignResponse class"""

        # Initialize members of the class
        if asset_id is not APIHelper.SKIP:
            self.asset_id = asset_id 
        if part_number is not APIHelper.SKIP:
            self.part_number = part_number 
        if part_upload_url is not APIHelper.SKIP:
            self.part_upload_url = part_upload_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        asset_id = dictionary.get("asset_id") if dictionary.get("asset_id") else APIHelper.SKIP
        part_number = dictionary.get("part_number") if dictionary.get("part_number") else APIHelper.SKIP
        part_upload_url = dictionary.get("part_upload_url") if dictionary.get("part_upload_url") else APIHelper.SKIP
        # Return an object of this model
        return cls(asset_id,
                   part_number,
                   part_upload_url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'asset_id={(self.asset_id if hasattr(self, "asset_id") else None)!r}, '
                f'part_number={(self.part_number if hasattr(self, "part_number") else None)!r}, '
                f'part_upload_url={(self.part_upload_url if hasattr(self, "part_upload_url") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'asset_id={(self.asset_id if hasattr(self, "asset_id") else None)!s}, '
                f'part_number={(self.part_number if hasattr(self, "part_number") else None)!s}, '
                f'part_upload_url={(self.part_upload_url if hasattr(self, "part_upload_url") else None)!s})')
