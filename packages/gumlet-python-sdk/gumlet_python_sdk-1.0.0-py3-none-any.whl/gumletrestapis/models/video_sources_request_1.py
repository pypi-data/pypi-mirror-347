# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.aws_1 import Aws1
from gumletrestapis.models.azure import Azure
from gumletrestapis.models.backblaze import Backblaze
from gumletrestapis.models.channel_settings_2 import ChannelSettings2
from gumletrestapis.models.cloudflare import Cloudflare
from gumletrestapis.models.cloudinary import Cloudinary
from gumletrestapis.models.dostorage import Dostorage
from gumletrestapis.models.gcs import Gcs
from gumletrestapis.models.linode import Linode
from gumletrestapis.models.player_config_2 import PlayerConfig2
from gumletrestapis.models.proxy import Proxy
from gumletrestapis.models.video_protection_1 import VideoProtection1
from gumletrestapis.models.wasabi import Wasabi
from gumletrestapis.models.webfolder import Webfolder
from gumletrestapis.models.zoom import Zoom


class VideoSourcesRequest1(object):

    """Implementation of the 'Video Sources Request1' model.

    Attributes:
        name (str): video collection name
        default_profile_id (str): Gumlet provides the functionality of
            creating multiple video assets using the same set of parameters.
        temp_cname (List[str]): cname for channel
        insight_property_id (str): The five to ten character unique identifier
            of the Gumlet Insight Property available on the dashboard.
        player_config (PlayerConfig2): Configure player settings for this
            playlist, it overrides the setting set on collection.
        video_protection (VideoProtection1): Gumlet provides multiple options
            for securing your video playback.
        channel_settings (ChannelSettings2): Configurations to set various
            channel settings.
        mtype (TypeEnum): Video collections are top-level entities in Gumlet.
            You can use them to organize videos for different
            teams/departments or use cases.
        webfolder (Webfolder): This is a required field if collection type is
            webfolder.
        aws (Aws1): This is a required field if collection type is aws.
        proxy (Proxy): This is a required field if collection type is proxy.
        gcs (Gcs): This is a required field if collection type is gcs.
        dostorage (Dostorage): This is a required field if collection type is
            dostorage.
        wasabi (Wasabi): This is a required field if collection type is wasabi.
        linode (Linode): This is a required field if collection type is linode.
        backblaze (Backblaze): This is a required field if collection type is
            backblaze.
        cloudflare (Cloudflare): This is a required field if collection type
            is cloudflare.
        cloudinary (Cloudinary): This is a required field if collection type
            is cloudinary.
        azure (Azure): This is a required field if collection type is azure.
        zoom (Zoom): This is a required field if collection type is zoom.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "default_profile_id": 'default_profile_id',
        "temp_cname": 'temp_cname',
        "insight_property_id": 'insight_property_id',
        "player_config": 'player_config',
        "video_protection": 'video_protection',
        "channel_settings": 'channel_settings',
        "mtype": 'type',
        "webfolder": 'webfolder',
        "aws": 'aws',
        "proxy": 'proxy',
        "gcs": 'gcs',
        "dostorage": 'dostorage',
        "wasabi": 'wasabi',
        "linode": 'linode',
        "backblaze": 'backblaze',
        "cloudflare": 'cloudflare',
        "cloudinary": 'cloudinary',
        "azure": 'azure',
        "zoom": 'zoom'
    }

    _optionals = [
        'name',
        'default_profile_id',
        'temp_cname',
        'insight_property_id',
        'player_config',
        'video_protection',
        'channel_settings',
        'mtype',
        'webfolder',
        'aws',
        'proxy',
        'gcs',
        'dostorage',
        'wasabi',
        'linode',
        'backblaze',
        'cloudflare',
        'cloudinary',
        'azure',
        'zoom',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 default_profile_id=APIHelper.SKIP,
                 temp_cname=APIHelper.SKIP,
                 insight_property_id=APIHelper.SKIP,
                 player_config=APIHelper.SKIP,
                 video_protection=APIHelper.SKIP,
                 channel_settings=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 webfolder=APIHelper.SKIP,
                 aws=APIHelper.SKIP,
                 proxy=APIHelper.SKIP,
                 gcs=APIHelper.SKIP,
                 dostorage=APIHelper.SKIP,
                 wasabi=APIHelper.SKIP,
                 linode=APIHelper.SKIP,
                 backblaze=APIHelper.SKIP,
                 cloudflare=APIHelper.SKIP,
                 cloudinary=APIHelper.SKIP,
                 azure=APIHelper.SKIP,
                 zoom=APIHelper.SKIP):
        """Constructor for the VideoSourcesRequest1 class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if default_profile_id is not APIHelper.SKIP:
            self.default_profile_id = default_profile_id 
        if temp_cname is not APIHelper.SKIP:
            self.temp_cname = temp_cname 
        if insight_property_id is not APIHelper.SKIP:
            self.insight_property_id = insight_property_id 
        if player_config is not APIHelper.SKIP:
            self.player_config = player_config 
        if video_protection is not APIHelper.SKIP:
            self.video_protection = video_protection 
        if channel_settings is not APIHelper.SKIP:
            self.channel_settings = channel_settings 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if webfolder is not APIHelper.SKIP:
            self.webfolder = webfolder 
        if aws is not APIHelper.SKIP:
            self.aws = aws 
        if proxy is not APIHelper.SKIP:
            self.proxy = proxy 
        if gcs is not APIHelper.SKIP:
            self.gcs = gcs 
        if dostorage is not APIHelper.SKIP:
            self.dostorage = dostorage 
        if wasabi is not APIHelper.SKIP:
            self.wasabi = wasabi 
        if linode is not APIHelper.SKIP:
            self.linode = linode 
        if backblaze is not APIHelper.SKIP:
            self.backblaze = backblaze 
        if cloudflare is not APIHelper.SKIP:
            self.cloudflare = cloudflare 
        if cloudinary is not APIHelper.SKIP:
            self.cloudinary = cloudinary 
        if azure is not APIHelper.SKIP:
            self.azure = azure 
        if zoom is not APIHelper.SKIP:
            self.zoom = zoom 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        default_profile_id = dictionary.get("default_profile_id") if dictionary.get("default_profile_id") else APIHelper.SKIP
        temp_cname = dictionary.get("temp_cname") if dictionary.get("temp_cname") else APIHelper.SKIP
        insight_property_id = dictionary.get("insight_property_id") if dictionary.get("insight_property_id") else APIHelper.SKIP
        player_config = PlayerConfig2.from_dictionary(dictionary.get('player_config')) if 'player_config' in dictionary.keys() else APIHelper.SKIP
        video_protection = VideoProtection1.from_dictionary(dictionary.get('video_protection')) if 'video_protection' in dictionary.keys() else APIHelper.SKIP
        channel_settings = ChannelSettings2.from_dictionary(dictionary.get('channel_settings')) if 'channel_settings' in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        webfolder = Webfolder.from_dictionary(dictionary.get('webfolder')) if 'webfolder' in dictionary.keys() else APIHelper.SKIP
        aws = Aws1.from_dictionary(dictionary.get('aws')) if 'aws' in dictionary.keys() else APIHelper.SKIP
        proxy = Proxy.from_dictionary(dictionary.get('proxy')) if 'proxy' in dictionary.keys() else APIHelper.SKIP
        gcs = Gcs.from_dictionary(dictionary.get('gcs')) if 'gcs' in dictionary.keys() else APIHelper.SKIP
        dostorage = Dostorage.from_dictionary(dictionary.get('dostorage')) if 'dostorage' in dictionary.keys() else APIHelper.SKIP
        wasabi = Wasabi.from_dictionary(dictionary.get('wasabi')) if 'wasabi' in dictionary.keys() else APIHelper.SKIP
        linode = Linode.from_dictionary(dictionary.get('linode')) if 'linode' in dictionary.keys() else APIHelper.SKIP
        backblaze = Backblaze.from_dictionary(dictionary.get('backblaze')) if 'backblaze' in dictionary.keys() else APIHelper.SKIP
        cloudflare = Cloudflare.from_dictionary(dictionary.get('cloudflare')) if 'cloudflare' in dictionary.keys() else APIHelper.SKIP
        cloudinary = Cloudinary.from_dictionary(dictionary.get('cloudinary')) if 'cloudinary' in dictionary.keys() else APIHelper.SKIP
        azure = Azure.from_dictionary(dictionary.get('azure')) if 'azure' in dictionary.keys() else APIHelper.SKIP
        zoom = Zoom.from_dictionary(dictionary.get('zoom')) if 'zoom' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   default_profile_id,
                   temp_cname,
                   insight_property_id,
                   player_config,
                   video_protection,
                   channel_settings,
                   mtype,
                   webfolder,
                   aws,
                   proxy,
                   gcs,
                   dostorage,
                   wasabi,
                   linode,
                   backblaze,
                   cloudflare,
                   cloudinary,
                   azure,
                   zoom)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'default_profile_id={(self.default_profile_id if hasattr(self, "default_profile_id") else None)!r}, '
                f'temp_cname={(self.temp_cname if hasattr(self, "temp_cname") else None)!r}, '
                f'insight_property_id={(self.insight_property_id if hasattr(self, "insight_property_id") else None)!r}, '
                f'player_config={(self.player_config if hasattr(self, "player_config") else None)!r}, '
                f'video_protection={(self.video_protection if hasattr(self, "video_protection") else None)!r}, '
                f'channel_settings={(self.channel_settings if hasattr(self, "channel_settings") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'webfolder={(self.webfolder if hasattr(self, "webfolder") else None)!r}, '
                f'aws={(self.aws if hasattr(self, "aws") else None)!r}, '
                f'proxy={(self.proxy if hasattr(self, "proxy") else None)!r}, '
                f'gcs={(self.gcs if hasattr(self, "gcs") else None)!r}, '
                f'dostorage={(self.dostorage if hasattr(self, "dostorage") else None)!r}, '
                f'wasabi={(self.wasabi if hasattr(self, "wasabi") else None)!r}, '
                f'linode={(self.linode if hasattr(self, "linode") else None)!r}, '
                f'backblaze={(self.backblaze if hasattr(self, "backblaze") else None)!r}, '
                f'cloudflare={(self.cloudflare if hasattr(self, "cloudflare") else None)!r}, '
                f'cloudinary={(self.cloudinary if hasattr(self, "cloudinary") else None)!r}, '
                f'azure={(self.azure if hasattr(self, "azure") else None)!r}, '
                f'zoom={(self.zoom if hasattr(self, "zoom") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'default_profile_id={(self.default_profile_id if hasattr(self, "default_profile_id") else None)!s}, '
                f'temp_cname={(self.temp_cname if hasattr(self, "temp_cname") else None)!s}, '
                f'insight_property_id={(self.insight_property_id if hasattr(self, "insight_property_id") else None)!s}, '
                f'player_config={(self.player_config if hasattr(self, "player_config") else None)!s}, '
                f'video_protection={(self.video_protection if hasattr(self, "video_protection") else None)!s}, '
                f'channel_settings={(self.channel_settings if hasattr(self, "channel_settings") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'webfolder={(self.webfolder if hasattr(self, "webfolder") else None)!s}, '
                f'aws={(self.aws if hasattr(self, "aws") else None)!s}, '
                f'proxy={(self.proxy if hasattr(self, "proxy") else None)!s}, '
                f'gcs={(self.gcs if hasattr(self, "gcs") else None)!s}, '
                f'dostorage={(self.dostorage if hasattr(self, "dostorage") else None)!s}, '
                f'wasabi={(self.wasabi if hasattr(self, "wasabi") else None)!s}, '
                f'linode={(self.linode if hasattr(self, "linode") else None)!s}, '
                f'backblaze={(self.backblaze if hasattr(self, "backblaze") else None)!s}, '
                f'cloudflare={(self.cloudflare if hasattr(self, "cloudflare") else None)!s}, '
                f'cloudinary={(self.cloudinary if hasattr(self, "cloudinary") else None)!s}, '
                f'azure={(self.azure if hasattr(self, "azure") else None)!s}, '
                f'zoom={(self.zoom if hasattr(self, "zoom") else None)!s})')
