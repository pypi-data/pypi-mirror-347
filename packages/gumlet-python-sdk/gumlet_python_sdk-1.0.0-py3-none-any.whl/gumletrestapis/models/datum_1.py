# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class Datum1(object):

    """Implementation of the 'Datum1' model.

    Attributes:
        key (str): The model property of type str.
        value (int): The model property of type int.
        unit (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "key": 'key',
        "value": 'value',
        "unit": 'unit'
    }

    _optionals = [
        'key',
        'value',
        'unit',
    ]

    def __init__(self,
                 key=APIHelper.SKIP,
                 value=0,
                 unit=APIHelper.SKIP):
        """Constructor for the Datum1 class"""

        # Initialize members of the class
        if key is not APIHelper.SKIP:
            self.key = key 
        self.value = value 
        if unit is not APIHelper.SKIP:
            self.unit = unit 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        key = dictionary.get("key") if dictionary.get("key") else APIHelper.SKIP
        value = dictionary.get("value") if dictionary.get("value") else 0
        unit = dictionary.get("unit") if dictionary.get("unit") else APIHelper.SKIP
        # Return an object of this model
        return cls(key,
                   value,
                   unit)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'key={(self.key if hasattr(self, "key") else None)!r}, '
                f'value={(self.value if hasattr(self, "value") else None)!r}, '
                f'unit={(self.unit if hasattr(self, "unit") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'key={(self.key if hasattr(self, "key") else None)!s}, '
                f'value={(self.value if hasattr(self, "value") else None)!s}, '
                f'unit={(self.unit if hasattr(self, "unit") else None)!s})')
