# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class ImageOverlay2(object):

    """Implementation of the 'ImageOverlay2' model.

    Attributes:
        url (str): The model property of type str.
        vertical_align (str): The model property of type str.
        horizontal_align (str): The model property of type str.
        vertical_margin (str): The model property of type str.
        horizontal_margin (str): The model property of type str.
        width (str): The model property of type str.
        height (str): The model property of type str.
        image_downloaded (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url": 'url',
        "vertical_align": 'vertical_align',
        "horizontal_align": 'horizontal_align',
        "vertical_margin": 'vertical_margin',
        "horizontal_margin": 'horizontal_margin',
        "width": 'width',
        "height": 'height',
        "image_downloaded": 'image_downloaded'
    }

    _optionals = [
        'url',
        'vertical_align',
        'horizontal_align',
        'vertical_margin',
        'horizontal_margin',
        'width',
        'height',
        'image_downloaded',
    ]

    def __init__(self,
                 url=APIHelper.SKIP,
                 vertical_align=APIHelper.SKIP,
                 horizontal_align=APIHelper.SKIP,
                 vertical_margin=APIHelper.SKIP,
                 horizontal_margin=APIHelper.SKIP,
                 width=APIHelper.SKIP,
                 height=APIHelper.SKIP,
                 image_downloaded=True):
        """Constructor for the ImageOverlay2 class"""

        # Initialize members of the class
        if url is not APIHelper.SKIP:
            self.url = url 
        if vertical_align is not APIHelper.SKIP:
            self.vertical_align = vertical_align 
        if horizontal_align is not APIHelper.SKIP:
            self.horizontal_align = horizontal_align 
        if vertical_margin is not APIHelper.SKIP:
            self.vertical_margin = vertical_margin 
        if horizontal_margin is not APIHelper.SKIP:
            self.horizontal_margin = horizontal_margin 
        if width is not APIHelper.SKIP:
            self.width = width 
        if height is not APIHelper.SKIP:
            self.height = height 
        self.image_downloaded = image_downloaded 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        vertical_align = dictionary.get("vertical_align") if dictionary.get("vertical_align") else APIHelper.SKIP
        horizontal_align = dictionary.get("horizontal_align") if dictionary.get("horizontal_align") else APIHelper.SKIP
        vertical_margin = dictionary.get("vertical_margin") if dictionary.get("vertical_margin") else APIHelper.SKIP
        horizontal_margin = dictionary.get("horizontal_margin") if dictionary.get("horizontal_margin") else APIHelper.SKIP
        width = dictionary.get("width") if dictionary.get("width") else APIHelper.SKIP
        height = dictionary.get("height") if dictionary.get("height") else APIHelper.SKIP
        image_downloaded = dictionary.get("image_downloaded") if dictionary.get("image_downloaded") else True
        # Return an object of this model
        return cls(url,
                   vertical_align,
                   horizontal_align,
                   vertical_margin,
                   horizontal_margin,
                   width,
                   height,
                   image_downloaded)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'url={(self.url if hasattr(self, "url") else None)!r}, '
                f'vertical_align={(self.vertical_align if hasattr(self, "vertical_align") else None)!r}, '
                f'horizontal_align={(self.horizontal_align if hasattr(self, "horizontal_align") else None)!r}, '
                f'vertical_margin={(self.vertical_margin if hasattr(self, "vertical_margin") else None)!r}, '
                f'horizontal_margin={(self.horizontal_margin if hasattr(self, "horizontal_margin") else None)!r}, '
                f'width={(self.width if hasattr(self, "width") else None)!r}, '
                f'height={(self.height if hasattr(self, "height") else None)!r}, '
                f'image_downloaded={(self.image_downloaded if hasattr(self, "image_downloaded") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'url={(self.url if hasattr(self, "url") else None)!s}, '
                f'vertical_align={(self.vertical_align if hasattr(self, "vertical_align") else None)!s}, '
                f'horizontal_align={(self.horizontal_align if hasattr(self, "horizontal_align") else None)!s}, '
                f'vertical_margin={(self.vertical_margin if hasattr(self, "vertical_margin") else None)!s}, '
                f'horizontal_margin={(self.horizontal_margin if hasattr(self, "horizontal_margin") else None)!s}, '
                f'width={(self.width if hasattr(self, "width") else None)!s}, '
                f'height={(self.height if hasattr(self, "height") else None)!s}, '
                f'image_downloaded={(self.image_downloaded if hasattr(self, "image_downloaded") else None)!s})')
