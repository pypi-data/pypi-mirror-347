# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class UploadResponse(object):

    """Implementation of the 'UploadResponse' model.

    Attributes:
        language_code (str): Language Code for uploadeds.srt file.
        uploaded (bool): Status of language uploaded .srt file. (If status
            code was 200, You can mark true else false)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "language_code": 'language_code',
        "uploaded": 'uploaded'
    }

    _optionals = [
        'language_code',
        'uploaded',
    ]

    def __init__(self,
                 language_code=APIHelper.SKIP,
                 uploaded=APIHelper.SKIP):
        """Constructor for the UploadResponse class"""

        # Initialize members of the class
        if language_code is not APIHelper.SKIP:
            self.language_code = language_code 
        if uploaded is not APIHelper.SKIP:
            self.uploaded = uploaded 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        language_code = dictionary.get("language_code") if dictionary.get("language_code") else APIHelper.SKIP
        uploaded = dictionary.get("uploaded") if "uploaded" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(language_code,
                   uploaded)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'language_code={(self.language_code if hasattr(self, "language_code") else None)!r}, '
                f'uploaded={(self.uploaded if hasattr(self, "uploaded") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'language_code={(self.language_code if hasattr(self, "language_code") else None)!s}, '
                f'uploaded={(self.uploaded if hasattr(self, "uploaded") else None)!s})')
