# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.call_to_action_3 import CallToAction3
from gumletrestapis.models.metadata import Metadata
from gumletrestapis.models.transformations_1 import Transformations1


class Input1(object):

    """Implementation of the 'Input1' model.

    Attributes:
        transformations (Transformations1): The model property of type
            Transformations1.
        profile_id (str): The model property of type str.
        title (str): The model property of type str.
        description (str): The model property of type str.
        metadata (Metadata): The model property of type Metadata.
        source_url (str): The model property of type str.
        call_to_actions (List[CallToAction3]): The model property of type
            List[CallToAction3].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transformations": 'transformations',
        "profile_id": 'profile_id',
        "title": 'title',
        "description": 'description',
        "metadata": 'metadata',
        "source_url": 'source_url',
        "call_to_actions": 'call_to_actions'
    }

    _optionals = [
        'transformations',
        'profile_id',
        'title',
        'description',
        'metadata',
        'source_url',
        'call_to_actions',
    ]

    def __init__(self,
                 transformations=APIHelper.SKIP,
                 profile_id=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 source_url=APIHelper.SKIP,
                 call_to_actions=APIHelper.SKIP):
        """Constructor for the Input1 class"""

        # Initialize members of the class
        if transformations is not APIHelper.SKIP:
            self.transformations = transformations 
        if profile_id is not APIHelper.SKIP:
            self.profile_id = profile_id 
        if title is not APIHelper.SKIP:
            self.title = title 
        if description is not APIHelper.SKIP:
            self.description = description 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if source_url is not APIHelper.SKIP:
            self.source_url = source_url 
        if call_to_actions is not APIHelper.SKIP:
            self.call_to_actions = call_to_actions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        transformations = Transformations1.from_dictionary(dictionary.get('transformations')) if 'transformations' in dictionary.keys() else APIHelper.SKIP
        profile_id = dictionary.get("profile_id") if dictionary.get("profile_id") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        metadata = Metadata.from_dictionary(dictionary.get('metadata')) if 'metadata' in dictionary.keys() else APIHelper.SKIP
        source_url = dictionary.get("source_url") if dictionary.get("source_url") else APIHelper.SKIP
        call_to_actions = None
        if dictionary.get('call_to_actions') is not None:
            call_to_actions = [CallToAction3.from_dictionary(x) for x in dictionary.get('call_to_actions')]
        else:
            call_to_actions = APIHelper.SKIP
        # Return an object of this model
        return cls(transformations,
                   profile_id,
                   title,
                   description,
                   metadata,
                   source_url,
                   call_to_actions)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'transformations={(self.transformations if hasattr(self, "transformations") else None)!r}, '
                f'profile_id={(self.profile_id if hasattr(self, "profile_id") else None)!r}, '
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'source_url={(self.source_url if hasattr(self, "source_url") else None)!r}, '
                f'call_to_actions={(self.call_to_actions if hasattr(self, "call_to_actions") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'transformations={(self.transformations if hasattr(self, "transformations") else None)!s}, '
                f'profile_id={(self.profile_id if hasattr(self, "profile_id") else None)!s}, '
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'source_url={(self.source_url if hasattr(self, "source_url") else None)!s}, '
                f'call_to_actions={(self.call_to_actions if hasattr(self, "call_to_actions") else None)!s})')
