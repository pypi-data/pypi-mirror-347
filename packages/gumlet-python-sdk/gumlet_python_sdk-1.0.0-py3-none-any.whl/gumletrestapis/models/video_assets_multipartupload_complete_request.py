# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.part import Part


class VideoAssetsMultipartuploadCompleteRequest(object):

    """Implementation of the 'Video Assets Multipartupload Complete Request' model.

    Attributes:
        parts (List[Part]): List of object containing part number with ETag
            received as a response header while uploading each part

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "parts": 'parts'
    }

    _optionals = [
        'parts',
    ]

    def __init__(self,
                 parts=APIHelper.SKIP):
        """Constructor for the VideoAssetsMultipartuploadCompleteRequest class"""

        # Initialize members of the class
        if parts is not APIHelper.SKIP:
            self.parts = parts 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        parts = None
        if dictionary.get('parts') is not None:
            parts = [Part.from_dictionary(x) for x in dictionary.get('parts')]
        else:
            parts = APIHelper.SKIP
        # Return an object of this model
        return cls(parts)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'parts={(self.parts if hasattr(self, "parts") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'parts={(self.parts if hasattr(self, "parts") else None)!s})')
