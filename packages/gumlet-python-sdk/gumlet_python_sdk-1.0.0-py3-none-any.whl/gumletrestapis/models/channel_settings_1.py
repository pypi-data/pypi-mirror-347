# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class ChannelSettings1(object):

    """Implementation of the 'ChannelSettings1' model.

    Attributes:
        active (bool): The model property of type bool.
        privacy_type (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "active": 'active',
        "privacy_type": 'privacy_type'
    }

    _optionals = [
        'active',
        'privacy_type',
    ]

    def __init__(self,
                 active=True,
                 privacy_type=APIHelper.SKIP):
        """Constructor for the ChannelSettings1 class"""

        # Initialize members of the class
        self.active = active 
        if privacy_type is not APIHelper.SKIP:
            self.privacy_type = privacy_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        active = dictionary.get("active") if dictionary.get("active") else True
        privacy_type = dictionary.get("privacy_type") if dictionary.get("privacy_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(active,
                   privacy_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'active={(self.active if hasattr(self, "active") else None)!r}, '
                f'privacy_type={(self.privacy_type if hasattr(self, "privacy_type") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'active={(self.active if hasattr(self, "active") else None)!s}, '
                f'privacy_type={(self.privacy_type if hasattr(self, "privacy_type") else None)!s})')
