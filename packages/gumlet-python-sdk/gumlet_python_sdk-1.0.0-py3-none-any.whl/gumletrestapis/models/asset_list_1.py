# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class AssetList1(object):

    """Implementation of the 'AssetList1' model.

    Attributes:
        id (str): The model property of type str.
        title (str): The model property of type str.
        description (str): The model property of type str.
        status (str): The model property of type str.
        created_at (str): The model property of type str.
        duration (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "title": 'title',
        "description": 'description',
        "status": 'status',
        "created_at": 'created_at',
        "duration": 'duration'
    }

    _optionals = [
        'id',
        'title',
        'description',
        'status',
        'created_at',
        'duration',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 title=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 duration=0):
        """Constructor for the AssetList1 class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if title is not APIHelper.SKIP:
            self.title = title 
        if description is not APIHelper.SKIP:
            self.description = description 
        if status is not APIHelper.SKIP:
            self.status = status 
        if created_at is not APIHelper.SKIP:
            self.created_at = created_at 
        self.duration = duration 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else APIHelper.SKIP
        duration = dictionary.get("duration") if dictionary.get("duration") else 0
        # Return an object of this model
        return cls(id,
                   title,
                   description,
                   status,
                   created_at,
                   duration)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'duration={(self.duration if hasattr(self, "duration") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'duration={(self.duration if hasattr(self, "duration") else None)!s})')
