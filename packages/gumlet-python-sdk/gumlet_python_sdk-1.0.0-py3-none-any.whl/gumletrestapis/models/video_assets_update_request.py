# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.call_to_action import CallToAction
from gumletrestapis.models.generate_subtitles_3 import GenerateSubtitles3


class VideoAssetsUpdateRequest(object):

    """Implementation of the 'Video Assets Update Request' model.

    Attributes:
        asset_id (str): Asset Id
        title (str): Specify a text string or identifier which can be used for
            filtering or searching the asset.
        description (str): Attach some textual data with the asset. This field
            is neither searchable nor filterable.
        tag (str): Specify a text string or identifier which can identify an
            asset or bunch of assets later. You can pass multiple comma
            separated values.
        call_to_actions (List[CallToAction]): CTA, is an explicit prompt
            within the video content encouraging viewers to take a particular
            action.
        metadata (str): Set of key-value pairs that you can attach to this
            Asset. This can be useful for storing additional information.<br/>
            Example: <br/> <code>  {  "internal_video_id" : "123Abc"  } 
            </code>
        remove_subtitles (List[str]): Comma separated string of language codes.
        generate_subtitles (GenerateSubtitles3): Gumlet allowes to generate
            subtitles from the audio stream (use <a
            href='https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes'
            > ISO 639-1 </a> Language Codes)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asset_id": 'asset_id',
        "title": 'title',
        "description": 'description',
        "tag": 'tag',
        "call_to_actions": 'call_to_actions',
        "metadata": 'metadata',
        "remove_subtitles": 'remove_subtitles',
        "generate_subtitles": 'generate_subtitles'
    }

    _optionals = [
        'title',
        'description',
        'tag',
        'call_to_actions',
        'metadata',
        'remove_subtitles',
        'generate_subtitles',
    ]

    def __init__(self,
                 asset_id=None,
                 title=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 tag=APIHelper.SKIP,
                 call_to_actions=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 remove_subtitles=APIHelper.SKIP,
                 generate_subtitles=APIHelper.SKIP):
        """Constructor for the VideoAssetsUpdateRequest class"""

        # Initialize members of the class
        self.asset_id = asset_id 
        if title is not APIHelper.SKIP:
            self.title = title 
        if description is not APIHelper.SKIP:
            self.description = description 
        if tag is not APIHelper.SKIP:
            self.tag = tag 
        if call_to_actions is not APIHelper.SKIP:
            self.call_to_actions = call_to_actions 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if remove_subtitles is not APIHelper.SKIP:
            self.remove_subtitles = remove_subtitles 
        if generate_subtitles is not APIHelper.SKIP:
            self.generate_subtitles = generate_subtitles 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        asset_id = dictionary.get("asset_id") if dictionary.get("asset_id") else None
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        tag = dictionary.get("tag") if dictionary.get("tag") else APIHelper.SKIP
        call_to_actions = None
        if dictionary.get('call_to_actions') is not None:
            call_to_actions = [CallToAction.from_dictionary(x) for x in dictionary.get('call_to_actions')]
        else:
            call_to_actions = APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        remove_subtitles = dictionary.get("remove_subtitles") if dictionary.get("remove_subtitles") else APIHelper.SKIP
        generate_subtitles = GenerateSubtitles3.from_dictionary(dictionary.get('generate_subtitles')) if 'generate_subtitles' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(asset_id,
                   title,
                   description,
                   tag,
                   call_to_actions,
                   metadata,
                   remove_subtitles,
                   generate_subtitles)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'asset_id={self.asset_id!r}, '
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'tag={(self.tag if hasattr(self, "tag") else None)!r}, '
                f'call_to_actions={(self.call_to_actions if hasattr(self, "call_to_actions") else None)!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'remove_subtitles={(self.remove_subtitles if hasattr(self, "remove_subtitles") else None)!r}, '
                f'generate_subtitles={(self.generate_subtitles if hasattr(self, "generate_subtitles") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'asset_id={self.asset_id!s}, '
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'tag={(self.tag if hasattr(self, "tag") else None)!s}, '
                f'call_to_actions={(self.call_to_actions if hasattr(self, "call_to_actions") else None)!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'remove_subtitles={(self.remove_subtitles if hasattr(self, "remove_subtitles") else None)!s}, '
                f'generate_subtitles={(self.generate_subtitles if hasattr(self, "generate_subtitles") else None)!s})')
