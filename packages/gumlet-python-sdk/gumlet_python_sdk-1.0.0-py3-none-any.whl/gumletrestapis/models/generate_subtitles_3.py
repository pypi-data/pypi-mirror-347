# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class GenerateSubtitles3(object):

    """Implementation of the 'GenerateSubtitles3' model.

    Gumlet allowes to generate subtitles from the audio stream (use <a
    href='https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes'> ISO
    639-1 </a> Language Codes)

    Attributes:
        audio_language (str): Language code for native language of the audio.
        subtitle_languages (str): Comma separated string of language codes for
            which subtitle needs to be generated. Maximum four language codes
            are allowed.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "audio_language": 'audio_language',
        "subtitle_languages": 'subtitle_languages'
    }

    _optionals = [
        'audio_language',
        'subtitle_languages',
    ]

    def __init__(self,
                 audio_language=APIHelper.SKIP,
                 subtitle_languages=APIHelper.SKIP):
        """Constructor for the GenerateSubtitles3 class"""

        # Initialize members of the class
        if audio_language is not APIHelper.SKIP:
            self.audio_language = audio_language 
        if subtitle_languages is not APIHelper.SKIP:
            self.subtitle_languages = subtitle_languages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        audio_language = dictionary.get("audio_language") if dictionary.get("audio_language") else APIHelper.SKIP
        subtitle_languages = dictionary.get("subtitle_languages") if dictionary.get("subtitle_languages") else APIHelper.SKIP
        # Return an object of this model
        return cls(audio_language,
                   subtitle_languages)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'audio_language={(self.audio_language if hasattr(self, "audio_language") else None)!r}, '
                f'subtitle_languages={(self.subtitle_languages if hasattr(self, "subtitle_languages") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'audio_language={(self.audio_language if hasattr(self, "audio_language") else None)!s}, '
                f'subtitle_languages={(self.subtitle_languages if hasattr(self, "subtitle_languages") else None)!s})')
