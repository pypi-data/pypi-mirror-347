# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.sum import Sum


class Views1(object):

    """Implementation of the 'Views1' model.

    Attributes:
        sum (Sum): The model property of type Sum.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sum": 'sum'
    }

    _optionals = [
        'sum',
    ]

    def __init__(self,
                 sum=APIHelper.SKIP):
        """Constructor for the Views1 class"""

        # Initialize members of the class
        if sum is not APIHelper.SKIP:
            self.sum = sum 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sum = Sum.from_dictionary(dictionary.get('sum')) if 'sum' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(sum)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sum={(self.sum if hasattr(self, "sum") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sum={(self.sum if hasattr(self, "sum") else None)!s})')
