# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OrgWebhooksRequest(object):

    """Implementation of the 'Org Webhooks Request' model.

    Attributes:
        url (str): URL from the application you want to send data to.
        secret_token (str): Authentication token to ensure legitimacy of
            Gumlet Webhook request on your application.
        triggers (List[str]): Triggers for the invocation of webhookos,
            supported option is `status`.
        sources (List[str]): List of video collection identifiers for which
            webhooks are needed to be invoked.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url": 'url',
        "secret_token": 'secret_token',
        "triggers": 'triggers',
        "sources": 'sources'
    }

    def __init__(self,
                 url=None,
                 secret_token=None,
                 triggers=None,
                 sources=None):
        """Constructor for the OrgWebhooksRequest class"""

        # Initialize members of the class
        self.url = url 
        self.secret_token = secret_token 
        self.triggers = triggers 
        self.sources = sources 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url") if dictionary.get("url") else None
        secret_token = dictionary.get("secret_token") if dictionary.get("secret_token") else None
        triggers = dictionary.get("triggers") if dictionary.get("triggers") else None
        sources = dictionary.get("sources") if dictionary.get("sources") else None
        # Return an object of this model
        return cls(url,
                   secret_token,
                   triggers,
                   sources)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'url={self.url!r}, '
                f'secret_token={self.secret_token!r}, '
                f'triggers={self.triggers!r}, '
                f'sources={self.sources!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'url={self.url!s}, '
                f'secret_token={self.secret_token!s}, '
                f'triggers={self.triggers!s}, '
                f'sources={self.sources!s})')
