# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class TopAsset(object):

    """Implementation of the 'TopAsset' model.

    Attributes:
        collection_id (str): The model property of type str.
        asset_id (str): The model property of type str.
        units (int): The model property of type int.
        collection_name (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "collection_id": 'collection_id',
        "asset_id": 'asset_id',
        "units": 'units',
        "collection_name": 'collection_name'
    }

    _optionals = [
        'collection_id',
        'asset_id',
        'units',
        'collection_name',
    ]

    def __init__(self,
                 collection_id=APIHelper.SKIP,
                 asset_id=APIHelper.SKIP,
                 units=0,
                 collection_name=APIHelper.SKIP):
        """Constructor for the TopAsset class"""

        # Initialize members of the class
        if collection_id is not APIHelper.SKIP:
            self.collection_id = collection_id 
        if asset_id is not APIHelper.SKIP:
            self.asset_id = asset_id 
        self.units = units 
        if collection_name is not APIHelper.SKIP:
            self.collection_name = collection_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        collection_id = dictionary.get("collection_id") if dictionary.get("collection_id") else APIHelper.SKIP
        asset_id = dictionary.get("asset_id") if dictionary.get("asset_id") else APIHelper.SKIP
        units = dictionary.get("units") if dictionary.get("units") else 0
        collection_name = dictionary.get("collection_name") if dictionary.get("collection_name") else APIHelper.SKIP
        # Return an object of this model
        return cls(collection_id,
                   asset_id,
                   units,
                   collection_name)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'collection_id={(self.collection_id if hasattr(self, "collection_id") else None)!r}, '
                f'asset_id={(self.asset_id if hasattr(self, "asset_id") else None)!r}, '
                f'units={(self.units if hasattr(self, "units") else None)!r}, '
                f'collection_name={(self.collection_name if hasattr(self, "collection_name") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'collection_id={(self.collection_id if hasattr(self, "collection_id") else None)!s}, '
                f'asset_id={(self.asset_id if hasattr(self, "asset_id") else None)!s}, '
                f'units={(self.units if hasattr(self, "units") else None)!s}, '
                f'collection_name={(self.collection_name if hasattr(self, "collection_name") else None)!s})')
