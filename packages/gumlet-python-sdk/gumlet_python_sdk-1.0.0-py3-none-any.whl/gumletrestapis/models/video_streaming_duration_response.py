# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.datum import Datum


class VideoStreamingDurationResponse(object):

    """Implementation of the 'Video Streaming Duration Response' model.

    Attributes:
        data (List[Datum]): The model property of type List[Datum].
        has_next_page (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "data": 'data',
        "has_next_page": 'has_next_page'
    }

    _optionals = [
        'data',
        'has_next_page',
    ]

    def __init__(self,
                 data=APIHelper.SKIP,
                 has_next_page=True):
        """Constructor for the VideoStreamingDurationResponse class"""

        # Initialize members of the class
        if data is not APIHelper.SKIP:
            self.data = data 
        self.has_next_page = has_next_page 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        data = None
        if dictionary.get('data') is not None:
            data = [Datum.from_dictionary(x) for x in dictionary.get('data')]
        else:
            data = APIHelper.SKIP
        has_next_page = dictionary.get("has_next_page") if dictionary.get("has_next_page") else True
        # Return an object of this model
        return cls(data,
                   has_next_page)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'data={(self.data if hasattr(self, "data") else None)!r}, '
                f'has_next_page={(self.has_next_page if hasattr(self, "has_next_page") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'data={(self.data if hasattr(self, "data") else None)!s}, '
                f'has_next_page={(self.has_next_page if hasattr(self, "has_next_page") else None)!s})')
