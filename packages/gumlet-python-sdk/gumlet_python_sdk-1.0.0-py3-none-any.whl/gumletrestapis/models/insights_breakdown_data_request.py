# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.breakdown import Breakdown
from gumletrestapis.models.filters_1 import Filters1
from gumletrestapis.models.timeframe_1 import Timeframe1


class InsightsBreakdownDataRequest(object):

    """Implementation of the 'Insights Breakdown Data Request' model.

    Attributes:
        breakdowns (List[Breakdown]): Gumlet API supports response for
            multiple breakdowns in a single API request.
        property_id (str): The five to ten character unique identifier of the
            Gumlet Insight Property available on the dashboard.
        timeframe (Timeframe1): The timeframe to get the data for. Currently
            we only support maximum difference between `start_at` and `end_at`
            to be *60 days*.
        filters (List[Filters1]): Drill down data in breakdowns with multiple
            filters, `value` should be an exact match

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "breakdowns": 'breakdowns',
        "property_id": 'property_id',
        "timeframe": 'timeframe',
        "filters": 'filters'
    }

    _optionals = [
        'filters',
    ]

    def __init__(self,
                 breakdowns=None,
                 property_id=None,
                 timeframe=None,
                 filters=APIHelper.SKIP):
        """Constructor for the InsightsBreakdownDataRequest class"""

        # Initialize members of the class
        self.breakdowns = breakdowns 
        self.property_id = property_id 
        self.timeframe = timeframe 
        if filters is not APIHelper.SKIP:
            self.filters = filters 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        breakdowns = None
        if dictionary.get('breakdowns') is not None:
            breakdowns = [Breakdown.from_dictionary(x) for x in dictionary.get('breakdowns')]
        property_id = dictionary.get("property_id") if dictionary.get("property_id") else None
        timeframe = Timeframe1.from_dictionary(dictionary.get('timeframe')) if dictionary.get('timeframe') else None
        filters = None
        if dictionary.get('filters') is not None:
            filters = [Filters1.from_dictionary(x) for x in dictionary.get('filters')]
        else:
            filters = APIHelper.SKIP
        # Return an object of this model
        return cls(breakdowns,
                   property_id,
                   timeframe,
                   filters)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'breakdowns={self.breakdowns!r}, '
                f'property_id={self.property_id!r}, '
                f'timeframe={self.timeframe!r}, '
                f'filters={(self.filters if hasattr(self, "filters") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'breakdowns={self.breakdowns!s}, '
                f'property_id={self.property_id!s}, '
                f'timeframe={self.timeframe!s}, '
                f'filters={(self.filters if hasattr(self, "filters") else None)!s})')
