# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class Pad(object):

    """Implementation of the 'Pad' model.

    This transformation can be used to add padding to the video.

    Attributes:
        top (str): Width of padding on the top side. Values can be an absolute
            number of pixels or a percentage value relative to the video
            height. **Default: `%5`**
        left (str): Width of padding on the left side. Values can be an
            absolute number of pixels or a percentage value relative to the
            video width. **Default: `0`**
        bottom (str): Width of padding on the bottom side. Values can be an
            absolute number of pixels or a percentage value relative to the
            video height. **Default: `%5`**
        right (str): Width of padding on the right side. Values can be an
            absolute number of pixels or a percentage value relative to the
            video width. **Default: `0`**
        color (str): Color of padding area. **Default: `black`**

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "top": 'top',
        "left": 'left',
        "bottom": 'bottom',
        "right": 'right',
        "color": 'color'
    }

    _optionals = [
        'top',
        'left',
        'bottom',
        'right',
        'color',
    ]

    def __init__(self,
                 top=APIHelper.SKIP,
                 left=APIHelper.SKIP,
                 bottom=APIHelper.SKIP,
                 right=APIHelper.SKIP,
                 color=APIHelper.SKIP):
        """Constructor for the Pad class"""

        # Initialize members of the class
        if top is not APIHelper.SKIP:
            self.top = top 
        if left is not APIHelper.SKIP:
            self.left = left 
        if bottom is not APIHelper.SKIP:
            self.bottom = bottom 
        if right is not APIHelper.SKIP:
            self.right = right 
        if color is not APIHelper.SKIP:
            self.color = color 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        top = dictionary.get("top") if dictionary.get("top") else APIHelper.SKIP
        left = dictionary.get("left") if dictionary.get("left") else APIHelper.SKIP
        bottom = dictionary.get("bottom") if dictionary.get("bottom") else APIHelper.SKIP
        right = dictionary.get("right") if dictionary.get("right") else APIHelper.SKIP
        color = dictionary.get("color") if dictionary.get("color") else APIHelper.SKIP
        # Return an object of this model
        return cls(top,
                   left,
                   bottom,
                   right,
                   color)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'top={(self.top if hasattr(self, "top") else None)!r}, '
                f'left={(self.left if hasattr(self, "left") else None)!r}, '
                f'bottom={(self.bottom if hasattr(self, "bottom") else None)!r}, '
                f'right={(self.right if hasattr(self, "right") else None)!r}, '
                f'color={(self.color if hasattr(self, "color") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'top={(self.top if hasattr(self, "top") else None)!s}, '
                f'left={(self.left if hasattr(self, "left") else None)!s}, '
                f'bottom={(self.bottom if hasattr(self, "bottom") else None)!s}, '
                f'right={(self.right if hasattr(self, "right") else None)!s}, '
                f'color={(self.color if hasattr(self, "color") else None)!s})')
