# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Azure(object):

    """Implementation of the 'Azure' model.

    This is a required field if collection type is azure.

    Attributes:
        azure_account_name (str): The model property of type str.
        azure_container_name (str): The model property of type str.
        azure_shared_token (str): The model property of type str.
        azure_path (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "azure_account_name": 'azure_account_name',
        "azure_container_name": 'azure_container_name',
        "azure_shared_token": 'azure_shared_token',
        "azure_path": 'azure_path'
    }

    def __init__(self,
                 azure_account_name=None,
                 azure_container_name=None,
                 azure_shared_token=None,
                 azure_path=None):
        """Constructor for the Azure class"""

        # Initialize members of the class
        self.azure_account_name = azure_account_name 
        self.azure_container_name = azure_container_name 
        self.azure_shared_token = azure_shared_token 
        self.azure_path = azure_path 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        azure_account_name = dictionary.get("azure_account_name") if dictionary.get("azure_account_name") else None
        azure_container_name = dictionary.get("azure_container_name") if dictionary.get("azure_container_name") else None
        azure_shared_token = dictionary.get("azure_shared_token") if dictionary.get("azure_shared_token") else None
        azure_path = dictionary.get("azure_path") if dictionary.get("azure_path") else None
        # Return an object of this model
        return cls(azure_account_name,
                   azure_container_name,
                   azure_shared_token,
                   azure_path)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'azure_account_name={self.azure_account_name!r}, '
                f'azure_container_name={self.azure_container_name!r}, '
                f'azure_shared_token={self.azure_shared_token!r}, '
                f'azure_path={self.azure_path!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'azure_account_name={self.azure_account_name!s}, '
                f'azure_container_name={self.azure_container_name!s}, '
                f'azure_shared_token={self.azure_shared_token!s}, '
                f'azure_path={self.azure_path!s})')
