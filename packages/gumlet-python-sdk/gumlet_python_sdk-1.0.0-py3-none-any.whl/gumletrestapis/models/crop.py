# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper


class Crop(object):

    """Implementation of the 'Crop' model.

    This transformation can be used to crop the video by defining a
    rectangular area within the dimensions of the output video.

    Attributes:
        horizontal_margin (str): This parameter defines the horizontal
            coordinate value of the upper-left corner of the cropping area.
            Values can be an absolute number of pixels or a percentage value
            relative to the video width. **Default: `0`**
        vertical_margin (str): This parameter defines the vertical coordinate
            value of the upper-left corner of the cropping area. Values can be
            an absolute number of pixels or a percentage value relative to the
            video height. **Default: `0`**
        width (str): Width of the cropping area in pixels.
        height (str): Height of the cropping area in pixels.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "width": 'width',
        "height": 'height',
        "horizontal_margin": 'horizontal_margin',
        "vertical_margin": 'vertical_margin'
    }

    _optionals = [
        'horizontal_margin',
        'vertical_margin',
    ]

    def __init__(self,
                 width=None,
                 height=None,
                 horizontal_margin=APIHelper.SKIP,
                 vertical_margin=APIHelper.SKIP):
        """Constructor for the Crop class"""

        # Initialize members of the class
        if horizontal_margin is not APIHelper.SKIP:
            self.horizontal_margin = horizontal_margin 
        if vertical_margin is not APIHelper.SKIP:
            self.vertical_margin = vertical_margin 
        self.width = width 
        self.height = height 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        width = dictionary.get("width") if dictionary.get("width") else None
        height = dictionary.get("height") if dictionary.get("height") else None
        horizontal_margin = dictionary.get("horizontal_margin") if dictionary.get("horizontal_margin") else APIHelper.SKIP
        vertical_margin = dictionary.get("vertical_margin") if dictionary.get("vertical_margin") else APIHelper.SKIP
        # Return an object of this model
        return cls(width,
                   height,
                   horizontal_margin,
                   vertical_margin)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'horizontal_margin={(self.horizontal_margin if hasattr(self, "horizontal_margin") else None)!r}, '
                f'vertical_margin={(self.vertical_margin if hasattr(self, "vertical_margin") else None)!r}, '
                f'width={self.width!r}, '
                f'height={self.height!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'horizontal_margin={(self.horizontal_margin if hasattr(self, "horizontal_margin") else None)!s}, '
                f'vertical_margin={(self.vertical_margin if hasattr(self, "vertical_margin") else None)!s}, '
                f'width={self.width!s}, '
                f'height={self.height!s})')
