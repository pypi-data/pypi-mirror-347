# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.player_config_2 import PlayerConfig2


class VideoPlaylistRequest1(object):

    """Implementation of the 'Video Playlist Request1' model.

    Attributes:
        title (str): The model property of type str.
        description (str): The model property of type str.
        position (int): Playlists have order in which they will be shown on
            the channel page.
        player_config (PlayerConfig2): Configure player settings for this
            playlist, it overrides the setting set on collection.
        channel_visibility (bool): If true then playlist will be visible on
            channel page.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "title": 'title',
        "description": 'description',
        "position": 'position',
        "player_config": 'player_config',
        "channel_visibility": 'channel_visibility'
    }

    _optionals = [
        'title',
        'description',
        'position',
        'player_config',
        'channel_visibility',
    ]

    def __init__(self,
                 title=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 position=APIHelper.SKIP,
                 player_config=APIHelper.SKIP,
                 channel_visibility=False):
        """Constructor for the VideoPlaylistRequest1 class"""

        # Initialize members of the class
        if title is not APIHelper.SKIP:
            self.title = title 
        if description is not APIHelper.SKIP:
            self.description = description 
        if position is not APIHelper.SKIP:
            self.position = position 
        if player_config is not APIHelper.SKIP:
            self.player_config = player_config 
        self.channel_visibility = channel_visibility 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        description = dictionary.get("description") if dictionary.get("description") else APIHelper.SKIP
        position = dictionary.get("position") if dictionary.get("position") else APIHelper.SKIP
        player_config = PlayerConfig2.from_dictionary(dictionary.get('player_config')) if 'player_config' in dictionary.keys() else APIHelper.SKIP
        channel_visibility = dictionary.get("channel_visibility") if dictionary.get("channel_visibility") else False
        # Return an object of this model
        return cls(title,
                   description,
                   position,
                   player_config,
                   channel_visibility)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'title={(self.title if hasattr(self, "title") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'position={(self.position if hasattr(self, "position") else None)!r}, '
                f'player_config={(self.player_config if hasattr(self, "player_config") else None)!r}, '
                f'channel_visibility={(self.channel_visibility if hasattr(self, "channel_visibility") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'title={(self.title if hasattr(self, "title") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'position={(self.position if hasattr(self, "position") else None)!s}, '
                f'player_config={(self.player_config if hasattr(self, "player_config") else None)!s}, '
                f'channel_visibility={(self.channel_visibility if hasattr(self, "channel_visibility") else None)!s})')
