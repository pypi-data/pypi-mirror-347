# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from gumletrestapis.api_helper import APIHelper
from gumletrestapis.models.sort import Sort


class Breakdown(object):

    """Implementation of the 'Breakdown' model.

    Attributes:
        name (Name1Enum): The name of a breakdown to get the data for.
        metric (MetricEnum): Metric for the breakdown data.
        page (int): Request a particular page number for the response.
        search (str): The API supports partially matching strings.
        sort (Sort): Sort the response data according to key or value
        page_size (int): The number of items returned in a single page.
            Maximum value can be 100

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "metric": 'metric',
        "page": 'page',
        "search": 'search',
        "sort": 'sort',
        "page_size": 'page_size'
    }

    _optionals = [
        'page',
        'search',
        'sort',
        'page_size',
    ]

    def __init__(self,
                 name=None,
                 metric=None,
                 page=1,
                 search=APIHelper.SKIP,
                 sort=APIHelper.SKIP,
                 page_size=10):
        """Constructor for the Breakdown class"""

        # Initialize members of the class
        self.name = name 
        self.metric = metric 
        self.page = page 
        if search is not APIHelper.SKIP:
            self.search = search 
        if sort is not APIHelper.SKIP:
            self.sort = sort 
        self.page_size = page_size 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        metric = dictionary.get("metric") if dictionary.get("metric") else None
        page = dictionary.get("page") if dictionary.get("page") else 1
        search = dictionary.get("search") if dictionary.get("search") else APIHelper.SKIP
        sort = Sort.from_dictionary(dictionary.get('sort')) if 'sort' in dictionary.keys() else APIHelper.SKIP
        page_size = dictionary.get("page_size") if dictionary.get("page_size") else 10
        # Return an object of this model
        return cls(name,
                   metric,
                   page,
                   search,
                   sort,
                   page_size)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'metric={self.metric!r}, '
                f'page={(self.page if hasattr(self, "page") else None)!r}, '
                f'search={(self.search if hasattr(self, "search") else None)!r}, '
                f'sort={(self.sort if hasattr(self, "sort") else None)!r}, '
                f'page_size={(self.page_size if hasattr(self, "page_size") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'metric={self.metric!s}, '
                f'page={(self.page if hasattr(self, "page") else None)!s}, '
                f'search={(self.search if hasattr(self, "search") else None)!s}, '
                f'sort={(self.sort if hasattr(self, "sort") else None)!s}, '
                f'page_size={(self.page_size if hasattr(self, "page_size") else None)!s})')
