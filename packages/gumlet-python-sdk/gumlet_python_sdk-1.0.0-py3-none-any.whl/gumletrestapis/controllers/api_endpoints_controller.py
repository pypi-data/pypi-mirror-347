# -*- coding: utf-8 -*-

"""
gumletrestapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from gumletrestapis.api_helper import APIHelper
from gumletrestapis.configuration import Server
from gumletrestapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from gumletrestapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from gumletrestapis.models.video_sources_response import VideoSourcesResponse
from gumletrestapis.models.video_sources_response_1 import VideoSourcesResponse1
from gumletrestapis.models.video_assets_response import VideoAssetsResponse
from gumletrestapis.models.video_assets_upload_response import VideoAssetsUploadResponse
from gumletrestapis.models.video_assets_response_1 import VideoAssetsResponse1
from gumletrestapis.models.video_assets_list_response import VideoAssetsListResponse
from gumletrestapis.models.video_analytics_response import VideoAnalyticsResponse
from gumletrestapis.models.video_streaming_duration_response import VideoStreamingDurationResponse
from gumletrestapis.models.video_assets_multipartupload_sign_response import VideoAssetsMultipartuploadSignResponse
from gumletrestapis.models.video_profiles_response import VideoProfilesResponse
from gumletrestapis.models.video_profiles_response_1 import VideoProfilesResponse1
from gumletrestapis.models.video_profiles_response_2 import VideoProfilesResponse2
from gumletrestapis.models.video_sources_response_2 import VideoSourcesResponse2
from gumletrestapis.models.video_playlist_response import VideoPlaylistResponse
from gumletrestapis.models.video_playlist_response_1 import VideoPlaylistResponse1
from gumletrestapis.models.video_playlist_asset_response import VideoPlaylistAssetResponse
from gumletrestapis.models.video_playlist_assets_response import VideoPlaylistAssetsResponse
from gumletrestapis.models.org_webhooks_response import OrgWebhooksResponse
from gumletrestapis.models.insights_chart_data_response import InsightsChartDataResponse
from gumletrestapis.models.insights_breakdown_data_response import InsightsBreakdownDataResponse
from gumletrestapis.models.insights_aggregated_data_response import InsightsAggregatedDataResponse
from gumletrestapis.models.image_sources_response import ImageSourcesResponse
from gumletrestapis.models.image_sources_response_1 import ImageSourcesResponse1
from gumletrestapis.models.image_sources_response_2 import ImageSourcesResponse2
from gumletrestapis.models.image_analytics_response import ImageAnalyticsResponse
from gumletrestapis.models.video_live_assets_response import VideoLiveAssetsResponse
from gumletrestapis.models.video_live_assets_update_response import VideoLiveAssetsUpdateResponse
from gumletrestapis.models.video_live_assets_list_response import VideoLiveAssetsListResponse
from gumletrestapis.models.video_live_assets_copy_response import VideoLiveAssetsCOPYResponse
from gumletrestapis.exceptions.api_exception import APIException
from gumletrestapis.exceptions.video_sources_400_error_exception import VideoSources400ErrorException
from gumletrestapis.exceptions.video_assets_400_error_exception import VideoAssets400ErrorException
from gumletrestapis.exceptions.video_assets_401_error_exception import VideoAssets401ErrorException
from gumletrestapis.exceptions.video_assets_upload_400_error_exception import VideoAssetsUpload400ErrorException
from gumletrestapis.exceptions.video_assets_upload_401_error_exception import VideoAssetsUpload401ErrorException
from gumletrestapis.exceptions.video_assets_list_400_error_exception import VideoAssetsList400ErrorException
from gumletrestapis.exceptions.video_assets_list_401_error_exception import VideoAssetsList401ErrorException
from gumletrestapis.exceptions.video_analytics_400_error_exception import VideoAnalytics400ErrorException
from gumletrestapis.exceptions.video_streaming_duration_400_error_exception import VideoStreamingDuration400ErrorException
from gumletrestapis.exceptions.video_profiles_400_error_exception import VideoProfiles400ErrorException
from gumletrestapis.exceptions.video_profiles_401_error_exception import VideoProfiles401ErrorException
from gumletrestapis.exceptions.video_sources_400_error_3_exception import VideoSources400Error3Exception
from gumletrestapis.exceptions.video_playlist_400_error_exception import VideoPlaylist400ErrorException
from gumletrestapis.exceptions.video_playlist_asset_400_error_exception import VideoPlaylistAsset400ErrorException
from gumletrestapis.exceptions.video_playlist_400_error_3_exception import VideoPlaylist400Error3Exception
from gumletrestapis.exceptions.video_playlist_assets_400_error_exception import VideoPlaylistAssets400ErrorException
from gumletrestapis.exceptions.insights_chart_data_400_error_exception import InsightsChartData400ErrorException
from gumletrestapis.exceptions.insights_chart_data_401_error_exception import InsightsChartData401ErrorException
from gumletrestapis.exceptions.insights_breakdown_data_400_error_exception import InsightsBreakdownData400ErrorException
from gumletrestapis.exceptions.insights_breakdown_data_401_error_exception import InsightsBreakdownData401ErrorException
from gumletrestapis.exceptions.insights_aggregated_data_400_error_exception import InsightsAggregatedData400ErrorException
from gumletrestapis.exceptions.insights_aggregated_data_401_error_exception import InsightsAggregatedData401ErrorException
from gumletrestapis.exceptions.image_sources_400_error_exception import ImageSources400ErrorException
from gumletrestapis.exceptions.image_sources_400_error_3_exception import ImageSources400Error3Exception
from gumletrestapis.exceptions.image_analytics_400_error_exception import ImageAnalytics400ErrorException
from gumletrestapis.exceptions.video_live_assets_400_error_exception import VideoLiveAssets400ErrorException
from gumletrestapis.exceptions.video_live_assets_401_error_exception import VideoLiveAssets401ErrorException
from gumletrestapis.exceptions.video_live_assets_update_400_error_exception import VideoLiveAssetsUpdate400ErrorException
from gumletrestapis.exceptions.video_live_assets_update_401_error_exception import VideoLiveAssetsUpdate401ErrorException
from gumletrestapis.exceptions.video_live_assets_complete_400_error_exception import VideoLiveAssetsComplete400ErrorException
from gumletrestapis.exceptions.video_live_assets_list_400_error_exception import VideoLiveAssetsList400ErrorException
from gumletrestapis.exceptions.video_live_assets_list_401_error_exception import VideoLiveAssetsList401ErrorException
from gumletrestapis.exceptions.video_live_assets_copy_400_error_exception import VideoLiveAssetsCOPY400ErrorException
from gumletrestapis.exceptions.video_live_assets_copy_401_error_exception import VideoLiveAssetsCOPY401ErrorException


class APIEndpointsController(BaseController):

    """A Controller to access Endpoints in the gumletrestapis API."""
    def __init__(self, config):
        super(APIEndpointsController, self).__init__(config)

    def list_collections(self):
        """Does a GET request to /video/sources.

        This endpoint list video collection which are assigned to the user or
        token.

        Returns:
            VideoSourcesResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/sources')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoSourcesResponse.from_dictionary)
            .local_error('400', '400', APIException)
        ).execute()

    def create_collection(self,
                          body=None):
        """Does a POST request to /video/sources.

        Video collections are top-level entities in Gumlet. You can use them
        to organize videos for different teams/departments or use cases.

        Args:
            body (VideoSourcesRequest, optional): The request body parameter.

        Returns:
            VideoSourcesResponse1: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/sources')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoSourcesResponse1.from_dictionary)
            .local_error('400', '400', VideoSources400ErrorException)
        ).execute()

    def create_asset(self,
                     body=None):
        """Does a POST request to /video/assets.

        An asset refers to a media content/video that is processed, stored,
        and delivered through Gumlet. This endpoint creates an asset allowing
        users to ingest media content into the Gumlet system for processing
        and delivery.

        Args:
            body (VideoAssetsRequest, optional): The request body parameter.

        Returns:
            VideoAssetsResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoAssetsResponse.from_dictionary)
            .local_error('400', '400', VideoAssets400ErrorException)
            .local_error('401', '401', VideoAssets401ErrorException)
        ).execute()

    def create_asset_direct_upload(self,
                                   body=None):
        """Does a POST request to /video/assets/upload.

        This endpoint creates a video asset allowing to upload of the video
        from the local file system and ingest media content into the Gumlet
        system for processing and delivery.Body Parameters are the same as the
        Create Asset Body Parameters except for the `input` parameter which
        this endpoint does not take.A successful response will be returned
        with `upload_url` field. You can make `PUT` request to that URL to
        upload video. To upload video using `upload_url` refer to
        [this](https://docs.gumlet.com/docs/direct-upload#2-use-the-url-to-uplo
        ad-a-file).

        Args:
            body (VideoAssetsUploadRequest, optional): The request body
                parameter.

        Returns:
            VideoAssetsUploadResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/upload')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoAssetsUploadResponse.from_dictionary)
            .local_error('400', '400', VideoAssetsUpload400ErrorException)
            .local_error('401', '401', VideoAssetsUpload401ErrorException)
        ).execute()

    def get_asset_status(self,
                         asset_id):
        """Does a GET request to /video/assets/{asset_id}.

        This endpoint retrieves the details of an asset that has previously
        been created.

        Args:
            asset_id (str): An asset id for the previously created asset.

        Returns:
            VideoAssetsResponse1: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoAssetsResponse1.from_dictionary)
            .local_error('400', '400', VideoAssets400ErrorException)
            .local_error('401', '401', VideoAssets401ErrorException)
        ).execute()

    def delete_asset(self,
                     asset_id):
        """Does a DELETE request to /video/assets/{asset_id}.

        This endpoint removes an asset given its unique asset id. The asset
        will be removed from storage as well, associated URLs will be
        inaccessible.

        Args:
            asset_id (str): Asset id of the video asset which needs to be
                deleted.

        Returns:
            Any: Response from the API. 204

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', '400', VideoAssets400ErrorException)
            .local_error('401', '401', VideoAssets401ErrorException)
        ).execute()

    def update_asset(self,
                     body=None):
        """Does a POST request to /video/assets/update.

        This endpoint allows users to update video asset that has previously
        been created.

        Args:
            body (VideoAssetsUpdateRequest, optional): The request body
                parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/update')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def list_assets(self,
                    collection_id,
                    status=None,
                    tag=None,
                    title=None,
                    folder=None,
                    offset=None,
                    size=None,
                    playlist_id=None,
                    sort_by=None,
                    order_by='desc'):
        """Does a GET request to /video/assets/list/{collection_id}.

        This endpoint list assets in video collection. You can also pass
        `status` and `tag` to filter assets.

        Args:
            collection_id (str): Gumlet video collection id.
            status (StatusEnum, optional): To filter assets on the basis of
                their current status. Can be specified as a single status
                value string or comma-separated status values. The status
                value can be one of `queued`, `processing`, `ready`,
                `errored`, and `deleted`.
            tag (str, optional): Input tag on the basis of which assets need
                to be filtered. To filter on multiple tags use comma-separated
                string.
            title (str, optional): Title on the basis of which assets need to
                be filtered.
            folder (str, optional): Folder name on the basis of which assets
                need to be filtered.
            offset (str, optional): Offset value for a paginated list of
                assets.
            size (str, optional): Page size for the paginated list. **Default:
                `10`** **Max Size: `100`**
            playlist_id (str, optional): filter assets from a playlist.
            sort_by (SortByEnum, optional): assets will be sorted based on the
                provided field.
            order_by (OrderByEnum, optional): assets will be sorted in the
                specified order based on provided sortBy field or by default
                createAt field.

        Returns:
            VideoAssetsListResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/list/{collection_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('collection_id')
                            .value(collection_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('tag')
                         .value(tag))
            .query_param(Parameter()
                         .key('title')
                         .value(title))
            .query_param(Parameter()
                         .key('folder')
                         .value(folder))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .query_param(Parameter()
                         .key('playlist_id')
                         .value(playlist_id))
            .query_param(Parameter()
                         .key('sortBy')
                         .value(sort_by))
            .query_param(Parameter()
                         .key('orderBy')
                         .value(order_by))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoAssetsListResponse.from_dictionary)
            .local_error('400', '400', VideoAssetsList400ErrorException)
            .local_error('401', '401', VideoAssetsList401ErrorException)
        ).execute()

    def select_from_video(self,
                          asset_id,
                          body=None):
        """Does a POST request to /video/assets/{asset_id}/thumbnail.

        Select frame from video to use as thumbnail

        Args:
            asset_id (str): Asset id of the video asset which needs to be
                deleted.
            body (VideoAssetsThumbnailRequest, optional): The request body
                parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_id}/thumbnail')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def select_from_image_file(self,
                               asset_id):
        """Does a POST request to /video/assets/{asset_ID}/thumbnail.

        Use any image file to use as thumbnail

        Args:
            asset_id (str): An asset id for the previously created asset.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_ID}/thumbnail')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('asset_ID')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def video_asset_upload_subtitle(self,
                                    asset_id,
                                    body=None):
        """Does a POST request to /video/assets/{asset_ID}/subtitle/upload.

        Upload your subtitled .srt file to your video asset.

        Args:
            asset_id (str): An asset id for the previously created asset.
            body (VideoAssetsSubtitleUploadRequest, optional): The request
                body parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_ID}/subtitle/upload')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('asset_ID')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def upload_subtitle_completion(self,
                                   asset_id,
                                   body=None):
        """Does a POST request to /video/assets/{asset_ID}/subtitle/upload/event.

        Args:
            asset_id (str): An asset id for the previously created asset.
            body (VideoAssetsSubtitleUploadEventRequest, optional): The
                request body parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_ID}/subtitle/upload/event')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('asset_ID')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def create_update_chapter(self,
                              asset_id,
                              body=None):
        """Does a POST request to /video/assets/{asset_id}/chapters.

        This endpoint will create/update video asset chapters.

        Args:
            asset_id (str): The request template parameter.
            body (VideoAssetsChaptersRequest, optional): The request body
                parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_id}/chapters')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def video_analytics(self,
                        body=None):
        """Does a POST request to /video/analytics.

        This endpoint gives usage analytics data of your videos. Ex - top
        assets, bandwidth consumption

        Args:
            body (VideoAnalyticsRequest, optional): The request body parameter.

        Returns:
            VideoAnalyticsResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/analytics')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoAnalyticsResponse.from_dictionary)
            .local_error('400', '400', VideoAnalytics400ErrorException)
        ).execute()

    def streaming_duration(self,
                           start_at,
                           end_at,
                           collection_id=None,
                           page=None,
                           page_size='1000'):
        """Does a GET request to /video/streaming-duration.

        This endpoint lists top streamed assets in a video collection

        Args:
            start_at (str): Date string in "yyyy-mm-dd" format
            end_at (str): Date string in "yyyy-mm-dd" format
            collection_id (str, optional): The request query parameter.
            page (str, optional): The request query parameter.
            page_size (str, optional): The request query parameter. Example:
                1000

        Returns:
            VideoStreamingDurationResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/streaming-duration')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('start_at')
                         .value(start_at))
            .query_param(Parameter()
                         .key('end_at')
                         .value(end_at))
            .query_param(Parameter()
                         .key('collection_id')
                         .value(collection_id))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('page_size')
                         .value(page_size))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoStreamingDurationResponse.from_dictionary)
            .local_error('400', '400', VideoStreamingDuration400ErrorException)
        ).execute()

    def sign_part(self,
                  asset_id,
                  part_number):
        """Does a GET request to /video/assets/{asset_id}/multipartupload/{part_number}/sign.

        Use this endpoint to retrieve pre-signed upload URL for each part.

        Args:
            asset_id (str): An asset id of the created asset for which you are
                uploading parts
            part_number (str): Part number of multiple parts of the original
                video which you you are uploading

        Returns:
            VideoAssetsMultipartuploadSignResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_id}/multipartupload/{part_number}/sign')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('part_number')
                            .value(part_number)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoAssetsMultipartuploadSignResponse.from_dictionary)
            .local_error('400', '400', APIException)
        ).execute()

    def complete_multipart_upload(self,
                                  asset_id,
                                  body=None):
        """Does a POST request to /video/assets/{asset_id}/multipartupload/complete.

        Once you upload all parts to S3 bucket via pre-signed URL, use this
        endpoint to complete the multipart upload.

        Args:
            asset_id (str): An asset id for which you are uploading original
                video via multipart
            body (VideoAssetsMultipartuploadCompleteRequest, optional): The
                request body parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/assets/{asset_id}/multipartupload/complete')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('asset_id')
                            .value(asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def create_profile(self,
                       body=None):
        """Does a POST request to /video/profiles.

        Gumlet provides the functionality of creating multiple video assets
        using the same set of parameters. A Video profile is a set of
        parameters that can be referenced/used while creating a video as a
        single parameter.

        Args:
            body (VideoProfilesRequest, optional): The request body parameter.

        Returns:
            VideoProfilesResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/profiles')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoProfilesResponse.from_dictionary)
            .local_error('400', '400', VideoProfiles400ErrorException)
            .local_error('401', '401', VideoProfiles401ErrorException)
        ).execute()

    def list_profiles(self,
                      offset=None,
                      size=None):
        """Does a GET request to /video/profiles.

        This endpoint retrieves the details of all profiles that have
        previously been created.

        Args:
            offset (int, optional): Offset value for a paginated list of
                profiles. Can be zero for the first time and `current_offset`
                value received from the last request afterwards.
            size (int, optional): Page size for the paginated list. **Default:
                `10`**

        Returns:
            VideoProfilesResponse1: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/profiles')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoProfilesResponse1.from_dictionary)
        ).execute()

    def update_profile(self,
                       profile_id,
                       body=None):
        """Does a POST request to /video/profiles/{profile_id}.

        Update an existing profile. Settings provided in body parameters will
        only be updated in the existing profile.

        Args:
            profile_id (str): Profile id of the profile which need to be
                updated.
            body (VideoProfilesRequest1, optional): The request body parameter.

        Returns:
            VideoProfilesResponse2: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/profiles/{profile_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('profile_id')
                            .value(profile_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoProfilesResponse2.from_dictionary)
            .local_error('400', '4XX', VideoProfiles400ErrorException)
            .local_error('401', '4XX', VideoProfiles400ErrorException)
            .local_error('402', '4XX', VideoProfiles400ErrorException)
            .local_error('403', '4XX', VideoProfiles400ErrorException)
            .local_error('404', '4XX', VideoProfiles400ErrorException)
            .local_error('405', '4XX', VideoProfiles400ErrorException)
            .local_error('406', '4XX', VideoProfiles400ErrorException)
            .local_error('407', '4XX', VideoProfiles400ErrorException)
            .local_error('408', '4XX', VideoProfiles400ErrorException)
            .local_error('409', '4XX', VideoProfiles400ErrorException)
            .local_error('410', '4XX', VideoProfiles400ErrorException)
            .local_error('411', '4XX', VideoProfiles400ErrorException)
            .local_error('412', '4XX', VideoProfiles400ErrorException)
            .local_error('413', '4XX', VideoProfiles400ErrorException)
            .local_error('414', '4XX', VideoProfiles400ErrorException)
            .local_error('415', '4XX', VideoProfiles400ErrorException)
            .local_error('416', '4XX', VideoProfiles400ErrorException)
            .local_error('417', '4XX', VideoProfiles400ErrorException)
            .local_error('418', '4XX', VideoProfiles400ErrorException)
            .local_error('419', '4XX', VideoProfiles400ErrorException)
            .local_error('420', '4XX', VideoProfiles400ErrorException)
            .local_error('421', '4XX', VideoProfiles400ErrorException)
            .local_error('422', '4XX', VideoProfiles400ErrorException)
            .local_error('423', '4XX', VideoProfiles400ErrorException)
            .local_error('424', '4XX', VideoProfiles400ErrorException)
            .local_error('425', '4XX', VideoProfiles400ErrorException)
            .local_error('426', '4XX', VideoProfiles400ErrorException)
            .local_error('427', '4XX', VideoProfiles400ErrorException)
            .local_error('428', '4XX', VideoProfiles400ErrorException)
            .local_error('429', '4XX', VideoProfiles400ErrorException)
            .local_error('430', '4XX', VideoProfiles400ErrorException)
            .local_error('431', '4XX', VideoProfiles400ErrorException)
            .local_error('432', '4XX', VideoProfiles400ErrorException)
            .local_error('433', '4XX', VideoProfiles400ErrorException)
            .local_error('434', '4XX', VideoProfiles400ErrorException)
            .local_error('435', '4XX', VideoProfiles400ErrorException)
            .local_error('436', '4XX', VideoProfiles400ErrorException)
            .local_error('437', '4XX', VideoProfiles400ErrorException)
            .local_error('438', '4XX', VideoProfiles400ErrorException)
            .local_error('439', '4XX', VideoProfiles400ErrorException)
            .local_error('440', '4XX', VideoProfiles400ErrorException)
            .local_error('441', '4XX', VideoProfiles400ErrorException)
            .local_error('442', '4XX', VideoProfiles400ErrorException)
            .local_error('443', '4XX', VideoProfiles400ErrorException)
            .local_error('444', '4XX', VideoProfiles400ErrorException)
            .local_error('445', '4XX', VideoProfiles400ErrorException)
            .local_error('446', '4XX', VideoProfiles400ErrorException)
            .local_error('447', '4XX', VideoProfiles400ErrorException)
            .local_error('448', '4XX', VideoProfiles400ErrorException)
            .local_error('449', '4XX', VideoProfiles400ErrorException)
            .local_error('450', '4XX', VideoProfiles400ErrorException)
            .local_error('451', '4XX', VideoProfiles400ErrorException)
            .local_error('452', '4XX', VideoProfiles400ErrorException)
            .local_error('453', '4XX', VideoProfiles400ErrorException)
            .local_error('454', '4XX', VideoProfiles400ErrorException)
            .local_error('455', '4XX', VideoProfiles400ErrorException)
            .local_error('456', '4XX', VideoProfiles400ErrorException)
            .local_error('457', '4XX', VideoProfiles400ErrorException)
            .local_error('458', '4XX', VideoProfiles400ErrorException)
            .local_error('459', '4XX', VideoProfiles400ErrorException)
            .local_error('460', '4XX', VideoProfiles400ErrorException)
            .local_error('461', '4XX', VideoProfiles400ErrorException)
            .local_error('462', '4XX', VideoProfiles400ErrorException)
            .local_error('463', '4XX', VideoProfiles400ErrorException)
            .local_error('464', '4XX', VideoProfiles400ErrorException)
            .local_error('465', '4XX', VideoProfiles400ErrorException)
            .local_error('466', '4XX', VideoProfiles400ErrorException)
            .local_error('467', '4XX', VideoProfiles400ErrorException)
            .local_error('468', '4XX', VideoProfiles400ErrorException)
            .local_error('469', '4XX', VideoProfiles400ErrorException)
            .local_error('470', '4XX', VideoProfiles400ErrorException)
            .local_error('471', '4XX', VideoProfiles400ErrorException)
            .local_error('472', '4XX', VideoProfiles400ErrorException)
            .local_error('473', '4XX', VideoProfiles400ErrorException)
            .local_error('474', '4XX', VideoProfiles400ErrorException)
            .local_error('475', '4XX', VideoProfiles400ErrorException)
            .local_error('476', '4XX', VideoProfiles400ErrorException)
            .local_error('477', '4XX', VideoProfiles400ErrorException)
            .local_error('478', '4XX', VideoProfiles400ErrorException)
            .local_error('479', '4XX', VideoProfiles400ErrorException)
            .local_error('480', '4XX', VideoProfiles400ErrorException)
            .local_error('481', '4XX', VideoProfiles400ErrorException)
            .local_error('482', '4XX', VideoProfiles400ErrorException)
            .local_error('483', '4XX', VideoProfiles400ErrorException)
            .local_error('484', '4XX', VideoProfiles400ErrorException)
            .local_error('485', '4XX', VideoProfiles400ErrorException)
            .local_error('486', '4XX', VideoProfiles400ErrorException)
            .local_error('487', '4XX', VideoProfiles400ErrorException)
            .local_error('488', '4XX', VideoProfiles400ErrorException)
            .local_error('489', '4XX', VideoProfiles400ErrorException)
            .local_error('490', '4XX', VideoProfiles400ErrorException)
            .local_error('491', '4XX', VideoProfiles400ErrorException)
            .local_error('492', '4XX', VideoProfiles400ErrorException)
            .local_error('493', '4XX', VideoProfiles400ErrorException)
            .local_error('494', '4XX', VideoProfiles400ErrorException)
            .local_error('495', '4XX', VideoProfiles400ErrorException)
            .local_error('496', '4XX', VideoProfiles400ErrorException)
            .local_error('497', '4XX', VideoProfiles400ErrorException)
            .local_error('498', '4XX', VideoProfiles400ErrorException)
            .local_error('499', '4XX', VideoProfiles400ErrorException)
        ).execute()

    def get_profile(self,
                    profile_id):
        """Does a GET request to /video/profiles/{profile_id}.

        This endpoint retrieves the details of a video profile that has
        previously been created.

        Args:
            profile_id (str): Profile id of the profile which needs to be
                retrieved.

        Returns:
            VideoProfilesResponse2: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/profiles/{profile_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('profile_id')
                            .value(profile_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoProfilesResponse2.from_dictionary)
            .local_error('400', '400', VideoProfiles400ErrorException)
            .local_error('401', '401', VideoProfiles401ErrorException)
        ).execute()

    def delete_profile(self,
                       profile_id):
        """Does a DELETE request to /video/profiles/{profile_id}.

        This endpoint removes a profile given its unique `profile_id`. The
        profile will be removed but video assets created using the profile
        will remain as it is.

        Args:
            profile_id (str): Profile id of the profile which needs to be
                deleted.

        Returns:
            Any: Response from the API. 204

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/profiles/{profile_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('profile_id')
                            .value(profile_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', VideoProfiles400ErrorException)
            .local_error('401', '401', VideoProfiles401ErrorException)
        ).execute()

    def update_collection(self,
                          video_source_id,
                          body=None):
        """Does a POST request to /video/sources/{video_source_id}.

        This endpoint allows users to update video collection that has
        previously been created.

        Args:
            video_source_id (str): The request template parameter.
            body (VideoSourcesRequest1, optional): The request body parameter.

        Returns:
            VideoSourcesResponse2: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/sources/{video_source_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('video_source_id')
                            .value(video_source_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoSourcesResponse2.from_dictionary)
            .local_error('400', '400', VideoSources400ErrorException)
        ).execute()

    def get_collection(self,
                       video_source_id):
        """Does a GET request to /video/sources/{video_source_id}.

        This endpoint get all the data of video collection that has previously
        been created.

        Args:
            video_source_id (str): The request template parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/sources/{video_source_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('video_source_id')
                            .value(video_source_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def delete_collection(self,
                          video_source_id):
        """Does a DELETE request to /video/sources/{video_source_id}.

        This endpoint removes a video collection given its unique asset id.
        All the asset in collection will be removed from storage as well,
        associated URLs will be inaccessible.

        Args:
            video_source_id (str): The request template parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/sources/{video_source_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('video_source_id')
                            .value(video_source_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', VideoSources400Error3Exception)
        ).execute()

    def create_playlist(self,
                        body=None):
        """Does a POST request to /video/playlist.

        Args:
            body (VideoPlaylistRequest, optional): The request body parameter.

        Returns:
            VideoPlaylistResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/playlist')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoPlaylistResponse.from_dictionary)
            .local_error('400', '400', VideoPlaylist400ErrorException)
        ).execute()

    def get_all_playlists(self,
                          collection_id=None):
        """Does a GET request to /video/playlist.

        Args:
            collection_id (str, optional): Video Collection ID

        Returns:
            List[VideoPlaylistResponse1]: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/playlist')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('collection_id')
                         .value(collection_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoPlaylistResponse1.from_dictionary)
            .local_error('400', '400', VideoPlaylist400ErrorException)
        ).execute()

    def add_asset_to_playlist(self,
                              playlist_id,
                              body=None):
        """Does a POST request to /video/playlist/{playlist_id}/asset.

        Args:
            playlist_id (str): The request template parameter.
            body (VideoPlaylistAssetRequest, optional): The request body
                parameter.

        Returns:
            VideoPlaylistAssetResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/playlist/{playlist_id}/asset')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('playlist_id')
                            .value(playlist_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoPlaylistAssetResponse.from_dictionary)
            .local_error('400', '400', VideoPlaylistAsset400ErrorException)
        ).execute()

    def remove_asset_from_playlist(self,
                                   playlist_id,
                                   body=None):
        """Does a DELETE request to /video/playlist/{playlist_id}/asset.

        Args:
            playlist_id (str): The request template parameter.
            body (VideoPlaylistAssetRequest1, optional): The request body
                parameter.

        Returns:
            VideoPlaylistAssetResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/playlist/{playlist_id}/asset')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('playlist_id')
                            .value(playlist_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoPlaylistAssetResponse.from_dictionary)
            .local_error('400', '400', VideoPlaylistAsset400ErrorException)
        ).execute()

    def update_playlist(self,
                        playlist_id,
                        body=None):
        """Does a POST request to /video/playlist/{playlist_id}.

        Args:
            playlist_id (str): The request template parameter.
            body (VideoPlaylistRequest1, optional): The request body parameter.

        Returns:
            VideoPlaylistResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/playlist/{playlist_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('playlist_id')
                            .value(playlist_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoPlaylistResponse.from_dictionary)
            .local_error('400', '400', VideoPlaylist400Error3Exception)
        ).execute()

    def get_playlist_assets(self,
                            playlist_id,
                            sort_by=None,
                            sort_order=1,
                            page_number=1,
                            page_size='10'):
        """Does a GET request to /video/playlist/{playlist_id}/assets.

        Args:
            playlist_id (str): The request template parameter.
            sort_by (str, optional): Optional, if sort_by is set to
                asset_title it will sorted by title name. Otherwise order in
                which user added the assets in playlist.
            sort_order (int, optional): -1 or 1
            page_number (int, optional): Optional, Minimun 1
            page_size (str, optional): Optional, Minimun 10

        Returns:
            VideoPlaylistAssetsResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/playlist/{playlist_id}/assets')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('playlist_id')
                            .value(playlist_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('sort_by')
                         .value(sort_by))
            .query_param(Parameter()
                         .key('sort_order')
                         .value(sort_order))
            .query_param(Parameter()
                         .key('page_number')
                         .value(page_number))
            .query_param(Parameter()
                         .key('page_size')
                         .value(page_size))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoPlaylistAssetsResponse.from_dictionary)
            .local_error('400', '400', VideoPlaylistAssets400ErrorException)
        ).execute()

    def create_webhook(self,
                       body=None):
        """Does a POST request to /org/webhooks.

        Args:
            body (OrgWebhooksRequest, optional): The request body parameter.

        Returns:
            OrgWebhooksResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/org/webhooks')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrgWebhooksResponse.from_dictionary)
            .local_error('400', '400', APIException)
        ).execute()

    def update_webhook(self,
                       webhook_id,
                       body=None):
        """Does a POST request to /org/webhooks/{webhook_id}.

        Args:
            webhook_id (str): Unique identifier for the Gumlet Webhook which
                needs to be updated.
            body (OrgWebhooksRequest1, optional): The request body parameter.

        Returns:
            OrgWebhooksResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/org/webhooks/{webhook_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('webhook_id')
                            .value(webhook_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OrgWebhooksResponse.from_dictionary)
            .local_error('400', '400', APIException)
        ).execute()

    def delete_webhook(self,
                       webhook_id):
        """Does a DELETE request to /org/webhooks/{webhook_id}.

        Args:
            webhook_id (str): Unique identifier for the Gumlet Webhook which
                needs to be deleted.

        Returns:
            Any: Response from the API. 204

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/org/webhooks/{webhook_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('webhook_id')
                            .value(webhook_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def insights_chart_data(self,
                            body=None):
        """Does a POST request to /insights/chart-data.

        This endpoint retrieves metrics data to plot the chart.

        Args:
            body (InsightsChartDataRequest, optional): The request body
                parameter.

        Returns:
            InsightsChartDataResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/chart-data')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(InsightsChartDataResponse.from_dictionary)
            .local_error('400', '400', InsightsChartData400ErrorException)
            .local_error('401', '401', InsightsChartData401ErrorException)
        ).execute()

    def insights_breakdown_data(self,
                                body=None):
        """Does a POST request to /insights/breakdown-data.

        This endpoint retrieves distribution data of a given breakdown value
        for a given metric.

        Args:
            body (InsightsBreakdownDataRequest, optional): The request body
                parameter.

        Returns:
            InsightsBreakdownDataResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/breakdown-data')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(InsightsBreakdownDataResponse.from_dictionary)
            .local_error('400', '400', InsightsBreakdownData400ErrorException)
            .local_error('401', '401', InsightsBreakdownData401ErrorException)
        ).execute()

    def insights_aggregated_data(self,
                                 body=None):
        """Does a POST request to /insights/aggregated-data.

        This endpoint retrieves aggregated data of the given metrics.

        Args:
            body (InsightsAggregatedDataRequest, optional): The request body
                parameter.

        Returns:
            InsightsAggregatedDataResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/insights/aggregated-data')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(InsightsAggregatedDataResponse.from_dictionary)
            .local_error('400', '400', InsightsAggregatedData400ErrorException)
            .local_error('401', '401', InsightsAggregatedData401ErrorException)
        ).execute()

    def create_image_source(self,
                            body=None):
        """Does a POST request to /image/sources.

        This endpoint allows users to create image source.

        Args:
            body (ImageSourcesRequest, optional): The request body parameter.

        Returns:
            ImageSourcesResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/image/sources')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ImageSourcesResponse.from_dictionary)
            .local_error('400', '400', ImageSources400ErrorException)
        ).execute()

    def list_sources(self):
        """Does a GET request to /image/sources.

        This endpoint list image sources which are assigned to the user or
        token.

        Returns:
            ImageSourcesResponse1: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/image/sources')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ImageSourcesResponse1.from_dictionary)
            .local_error('400', '400', APIException)
        ).execute()

    def update_image_source(self,
                            image_source_id,
                            body=None):
        """Does a POST request to /image/sources/{image_source_id}.

        This endpoint allows users to update image source that has previously
        been created.

        Args:
            image_source_id (str): image source id which you want to update
            body (ImageSourcesRequest1, optional): The request body parameter.

        Returns:
            ImageSourcesResponse2: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/image/sources/{image_source_id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('image_source_id')
                            .value(image_source_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ImageSourcesResponse2.from_dictionary)
            .local_error('400', '400', ImageSources400ErrorException)
        ).execute()

    def delete_source(self,
                      image_source_id):
        """Does a DELETE request to /image/sources/{image_source_id}.

        This endpoint removes a image source. All image delivery using this
        subdomain will be stopped.

        Args:
            image_source_id (str): The request template parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/image/sources/{image_source_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('image_source_id')
                            .value(image_source_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', ImageSources400Error3Exception)
        ).execute()

    def purge_image_cache(self,
                          subdomain,
                          body=None):
        """Does a POST request to /purge/{subdomain}.

        You can purge cache for any image by using our cache purge API.

        Args:
            subdomain (str): Subdomain is same subdomain you created while
                creating source. If you serve image from example.gumlet.com,
                please enter only 'example' for this parameter.
            body (PurgeRequest, optional): The request body parameter.

        Returns:
            Any: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/purge/{subdomain}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('subdomain')
                            .value(subdomain)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def image_analytics(self,
                        body=None):
        """Does a POST request to /image/analytics.

        This endpoint help you get analytics data.

        Args:
            body (ImageAnalyticsRequest, optional): The request body parameter.

        Returns:
            ImageAnalyticsResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/image/analytics')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ImageAnalyticsResponse.from_dictionary)
            .local_error('400', '400', ImageAnalytics400ErrorException)
        ).execute()

    def create_live_asset(self,
                          body=None):
        """Does a POST request to /video/live/assets.

        A live asset refers to a media content/video that is live-streamed
        through Gumlet. This endpoint creates a live streaming asset allowing
        users to live stream a video that will be pushed to Gumlet.

        Args:
            body (VideoLiveAssetsRequest, optional): The request body
                parameter.

        Returns:
            VideoLiveAssetsResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/live/assets')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoLiveAssetsResponse.from_dictionary)
            .local_error('400', '400', VideoLiveAssets400ErrorException)
            .local_error('401', '401', VideoLiveAssets401ErrorException)
        ).execute()

    def create_live_asset_copy(self,
                               body=None):
        """Does a POST request to /video/live/assets/update.

        A live asset refers to a media content/video that is live-streamed
        through Gumlet. This endpoint allows user to update a live streaming
        asset.

        Args:
            body (VideoLiveAssetsUpdateRequest, optional): The request body
                parameter.

        Returns:
            VideoLiveAssetsUpdateResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/live/assets/update')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoLiveAssetsUpdateResponse.from_dictionary)
            .local_error('400', '400', VideoLiveAssetsUpdate400ErrorException)
            .local_error('401', '401', VideoLiveAssetsUpdate401ErrorException)
        ).execute()

    def get_live_asset_status(self,
                              live_asset_id):
        """Does a GET request to /video/live/assets/{live_asset_id}.

        This endpoint retrieves the details of a live video asset that has
        previously been created.

        Args:
            live_asset_id (str): An live asset id for the previously created
                asset.

        Returns:
            VideoLiveAssetsResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/live/assets/{live_asset_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('live_asset_id')
                            .value(live_asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoLiveAssetsResponse.from_dictionary)
            .local_error('400', '400', VideoLiveAssets400ErrorException)
            .local_error('401', '401', VideoLiveAssets401ErrorException)
        ).execute()

    def delete_live_asset(self,
                          live_asset_id):
        """Does a DELETE request to /video/live/assets/{live_asset_id}.

        This endpoint removes a live asset given its unique live asset id. The
        live asset will be removed from storage as well, associated URLs will
        be inaccessible.

        Args:
            live_asset_id (str): Live asset id of the live asset which needs
                to be deleted.

        Returns:
            Any: Response from the API. 204

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/live/assets/{live_asset_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('live_asset_id')
                            .value(live_asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', APIException)
        ).execute()

    def complete_live_stream(self,
                             live_asset_id):
        """Does a POST request to /video/live/assets/{live_asset_id}/complete.

        This endpoint allows marking live assets complete. Once the live asset
        is marked complete, it can no longer be used to ingest the live stream
        on Gumlet.

        Args:
            live_asset_id (str): Live asset id of the live stream which needs
                to be completed.

        Returns:
            Any: Response from the API. 204

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/live/assets/{live_asset_id}/complete')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('live_asset_id')
                            .value(live_asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', '400', VideoLiveAssetsComplete400ErrorException)
        ).execute()

    def filter_live_assets(self,
                           live_source_id,
                           status=None,
                           offset=None,
                           size=None):
        """Does a GET request to /video/live/assets/list/{live_source_id}.

        This endpoint lists live assets on the basis of `status` for the given
        `live_source_id`.

        Args:
            live_source_id (str): Gumlet live source/collection id.
            status (str, optional): To filter live assets on the basis of
                their current status. Can be specified as a single status
                value string or comma-separated status values. The status
                value can be one of `created`, `active`, `complete`,
                `disconnected`, `errored`, and `deleted`.
            offset (int, optional): Offset value for a paginated list of
                assets.
            size (int, optional): Page size for the paginated list.

        Returns:
            VideoLiveAssetsListResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/live/assets/list/{live_source_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('live_source_id')
                            .value(live_source_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoLiveAssetsListResponse.from_dictionary)
            .local_error('400', '400', VideoLiveAssetsList400ErrorException)
            .local_error('401', '401', VideoLiveAssetsList401ErrorException)
        ).execute()

    def get_live_asset_status_copy(self,
                                   live_asset_id):
        """Does a GET request to /video/live/assets/{live_asset_id} (COPY).

        This endpoint retrieves the history of a live video asset that has
        previously been created.

        Args:
            live_asset_id (str): An live asset id for the previously created
                asset.

        Returns:
            VideoLiveAssetsCOPYResponse: Response from the API. 200

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/video/live/assets/{live_asset_id} (COPY)')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('live_asset_id')
                            .value(live_asset_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('sec0'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(VideoLiveAssetsCOPYResponse.from_dictionary)
            .local_error('400', '400', VideoLiveAssetsCOPY400ErrorException)
            .local_error('401', '401', VideoLiveAssetsCOPY401ErrorException)
        ).execute()
