{
  "generators": {
    "pattern": {
      "class_type": "MultiValueGenerator",
      "name": "pattern",
      "model": "meta-llama/Llama-3.1-8B-Instruct",
      "role": null,
      "output_type": {
        "q1": "string",
        "q2": "string"
      },
      "subkey_output_type": "question",
      "instruction": "\nTask: Given the following original question, SQL query, schema, and glossary, generate 2 new questions that follow a similar structure and can be answered using the provided schema. The output SQL should be syntactically valid and correspond to the business context.\n\nInput Format:\n\n    Original Question: {question}\n    Original SQL: {sql}\n    Schema: {schema}\n    Glossary: {glossary}\n\nGuidelines for Generating New Questions:\n\n    Contextual Relevance: Ensure that the new questions reflect a business context similar to the original question. The context may be different but should stay within the realm of the schema's purpose.\n    SQL Query Validity: Ensure that the SQL queries generated are syntactically correct and align with the schema provided. Only valid queries should be generated.\n    Complexity Level: The new questions should have a similar complexity level to the original question. Keep in mind the difficulty of the query when generating the new questions.\n    Answerability with Schema: The generated questions should be answerable with the available schema, and you should only use the tables and columns described in the schema to generate your queries.\n\nPlease provide ONLY the new questions (in a clear, concise format) without any explanation or markdown formatting."
    },
    "variation": {
      "class_type": "MultiValueGenerator",
      "name": "variation",
      "model": "meta-llama/Llama-3.1-8B-Instruct",
      "role": null,
      "output_type": {
        "q1": "string",
        "q2": "string"
      },
      "subkey_output_type": "question",
      "instruction": "\nTask: Given the following original question, SQL query, schema, and glossary, create 2 variations of the question by modifying certain aspects of the query.\n\nInput Format:\n\n    Original Question: {question}\n    Original SQL: {sql}\n    Schema: {schema}\n    Glossary: {glossary}\n\nGuidelines for Generating Variations:\n\n    Time Periods or Date Ranges: Adjust the time periods or date ranges in the question to change its scope (e.g., last month, this quarter, specific dates).\n    Add or Remove Conditions: Introduce new conditions or remove existing ones to alter the question's focus (e.g., adding filters or eliminating restrictions).\n    Change Aggregation Requirements: Modify how data is aggregated (e.g., switching from a count to a sum, or altering the way averages are calculated).\n    Adjust Grouping Criteria: Change the grouping or partitioning logic, such as grouping by a different attribute or adding/removing grouping columns.\n\nEnsure that:\n\n    The variations are consistent with the original intent of the question.\n    Terminology from the glossary is used where applicable.\n    The variations are answerable using the available schema.\n\nPlease provide ONLY the variations (in a clear, concise format) without any explanation or markdown formatting.\n"
    },
    "decomposer": {
      "class_type": "MultiValueGenerator",
      "name": "decomposer",
      "model": "meta-llama/Llama-3.1-8B-Instruct",
      "role": null,
      "output_type": {
        "q1": "str",
        "q2": "str",
        "q3": "str"
      },
      "subkey_output_type": "question",
      "instruction": "Task: Given the following database schema, glossary, original complex question, and SQL query, break down the original question into 3 distinct sub-questions. These sub-questions should help answer the original question when combined.\n\nInput Format:\n\n    Database Schema: {schema}\n    Glossary Terms and Definitions: {glossary}\n    Original Complex Question: {question}\n    Original SQL Query: {sql}\n\nGuidelines for Sub-Questions:\n\n    Self-contained and Specific: Each sub-question should be self-contained and focused on a specific part of the problem. Avoid overly broad or general questions.\n    Consistency with Original Intent: The sub-questions should maintain the original question's intent and objectives. They should be logically connected and contribute to solving the original query.\n    Use Glossary Terminology: Where applicable, use the glossary terms and definitions to ensure the language is consistent with the provided schema.\n    Answerability with Schema: Ensure each sub-question can be answered using the available schema. Refer only to the tables and columns described in the schema when formulating the sub-questions.\n    Avoid Complex Logic in Single Sub-Questions: Keep the logic of each sub-question simple. Do not combine multiple conditions or complex logic in a single sub-question.\n\nPlease provide ONLY the sub-questions (in a clear, concise format) without any explanation or markdown formatting."
    },
    "debugger": {
      "class_type": "SQLDebuggerGenerator",
      "name": "debugger",
      "model": "meta-llama/Llama-3.1-8B-Instruct",
      "role": "You are a SQL debugging expert. Output only the corrected SQL query without any explanation.",
      "output_type": {
        "corrected_sql": "str"
      },
      "instruction": "SQL Query Debugger: You are provided with a user's question, SQL query, error information, schema, and glossary. Question: {question} The query to fix is: {sql} Error Message: {error_message} Error Explanation: {error_explanation} Database Schema: {schema} Glossary: {glossary} Please provide ONLY the corrected SQL query without any explanation or markdown formatting. The query should reference only schema columns where applicable.",
      "db_type": "sqlite",
      "db_params": "projects/flights/data/flight.sqlite",
      "schema": "Schema for table 'customers':\nColumn: Id | Type: INTEGER | Sample Value: 1\nColumn: LastName | Type: TEXT | Sample Value: LOGAN\nColumn: FirstName | Type: TEXT | Sample Value: JULIET\n\nSchema for table 'goods':\nColumn: Id | Type: TEXT | Sample Value: 20-BC-C-10\nColumn: Flavor | Type: TEXT | Sample Value: Chocolate\nColumn: Food | Type: TEXT | Sample Value: Cake\nColumn: Price | Type: REAL | Sample Value: 8.95\n\nSchema for table 'items':\nColumn: Receipt | Type: INTEGER | Sample Value: 18129\nColumn: Ordinal | Type: INTEGER | Sample Value: 1\nColumn: Item | Type: TEXT | Sample Value: 70-TU\n\nSchema for table 'receipts':\nColumn: ReceiptNumber | Type: INTEGER | Sample Value: 10013\nColumn: Date | Type: TEXT | Sample Value: 17-Oct-2007\nColumn: CustomerId | Type: INTEGER | Sample Value: 15\n\n"
    }
  },
  "validators": {
    "validator": {
      "class_type": "SQLValidator",
      "name": "validator",
      "model": "meta-llama/Llama-3.1-8B-Instruct",
      "role": "",
      "sql_key": "sql",
      "output_type": {
        "error": "str",
        "explanation": "str",
        "is_valid": "bool"
      },
      "instruction": "\n    Query to validate: {sql}\n    Schema: {schema}\n    Glossary: {glossary}\n    \n    Validate this SQL query against the provided schema.\n    ",
      "db_type": "sqlite",
      "db_params": "projects/flights/data/flight.sqlite",
      "schema": "Schema for table 'customers':\nColumn: Id | Type: INTEGER | Sample Value: 1\nColumn: LastName | Type: TEXT | Sample Value: LOGAN\nColumn: FirstName | Type: TEXT | Sample Value: JULIET\n\nSchema for table 'goods':\nColumn: Id | Type: TEXT | Sample Value: 20-BC-C-10\nColumn: Flavor | Type: TEXT | Sample Value: Chocolate\nColumn: Food | Type: TEXT | Sample Value: Cake\nColumn: Price | Type: REAL | Sample Value: 8.95\n\nSchema for table 'items':\nColumn: Receipt | Type: INTEGER | Sample Value: 18129\nColumn: Ordinal | Type: INTEGER | Sample Value: 1\nColumn: Item | Type: TEXT | Sample Value: 70-TU\n\nSchema for table 'receipts':\nColumn: ReceiptNumber | Type: INTEGER | Sample Value: 10013\nColumn: Date | Type: TEXT | Sample Value: 17-Oct-2007\nColumn: CustomerId | Type: INTEGER | Sample Value: 15\n\n"
    }
  },
  "execution_order": [
    "pattern",
    "variation",
    "decomposer",
    "validator",
    "debugger"
  ],
  "record_directory": "results_agentic_pipeline/experiment_20250512_094556",
  "record_step": true,
  "record_results": true
}
