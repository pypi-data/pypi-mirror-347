# coding: utf-8

"""
    ExKoin API Documentation

    API documentation for ExKoin Crypto exchange

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from exapi_client_python.models.public_exk_config_get200_response import PublicExkConfigGet200Response

class TestPublicExkConfigGet200Response(unittest.TestCase):
    """PublicExkConfigGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PublicExkConfigGet200Response:
        """Test PublicExkConfigGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PublicExkConfigGet200Response`
        """
        model = PublicExkConfigGet200Response()
        if include_optional:
            return PublicExkConfigGet200Response(
                circulating_supply = 1.337,
                last_reserve_value_usd = 1.337,
                mint_rate = 1.337,
                lp_share_percent_to_exk = 1.337,
                routes = {
                    'key' : exapi_client_python.models._public_exk_config_get_200_response_routes_value._public_exk_config_get_200_response_routes_value(
                        weight = 1.337, 
                        description = '', 
                        free_amount = 1.337, 
                        locked_amount = 1.337, 
                        logs = [
                            exapi_client_python.models._public_exk_config_get_200_response_routes_value_logs_inner._public_exk_config_get_200_response_routes_value_logs_inner(
                                t = 1.337, 
                                v = '', )
                            ], )
                    },
                user_levels = [
                    exapi_client_python.models._public_exk_config_get_200_response_user_levels_inner._public_exk_config_get_200_response_user_levels_inner(
                        points_factor = 1.337, 
                        name = '', 
                        description = '', 
                        icon = '', 
                        required_points = 1.337, 
                        benefits = [
                            ''
                            ], )
                    ],
                weekly_dist = exapi_client_python.models._public_exk_config_get_200_response_weekly_dist._public_exk_config_get_200_response_weekly_dist(
                    cycle_id = 1.337, 
                    timestamp_to_next_dist = 1.337, 
                    total_points = 1.337, 
                    points_for = {
                        'key' : 1.337
                        }, )
            )
        else:
            return PublicExkConfigGet200Response(
                circulating_supply = 1.337,
                last_reserve_value_usd = 1.337,
                mint_rate = 1.337,
                lp_share_percent_to_exk = 1.337,
                routes = {
                    'key' : exapi_client_python.models._public_exk_config_get_200_response_routes_value._public_exk_config_get_200_response_routes_value(
                        weight = 1.337, 
                        description = '', 
                        free_amount = 1.337, 
                        locked_amount = 1.337, 
                        logs = [
                            exapi_client_python.models._public_exk_config_get_200_response_routes_value_logs_inner._public_exk_config_get_200_response_routes_value_logs_inner(
                                t = 1.337, 
                                v = '', )
                            ], )
                    },
                user_levels = [
                    exapi_client_python.models._public_exk_config_get_200_response_user_levels_inner._public_exk_config_get_200_response_user_levels_inner(
                        points_factor = 1.337, 
                        name = '', 
                        description = '', 
                        icon = '', 
                        required_points = 1.337, 
                        benefits = [
                            ''
                            ], )
                    ],
                weekly_dist = exapi_client_python.models._public_exk_config_get_200_response_weekly_dist._public_exk_config_get_200_response_weekly_dist(
                    cycle_id = 1.337, 
                    timestamp_to_next_dist = 1.337, 
                    total_points = 1.337, 
                    points_for = {
                        'key' : 1.337
                        }, ),
        )
        """

    def testPublicExkConfigGet200Response(self):
        """Test PublicExkConfigGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
