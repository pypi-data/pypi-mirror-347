[build-system]
requires = ["scikit-build-core", "pybind11"]
build-backend = "scikit_build_core.build"

[project]
name = "bungee-python"
requires-python = ">=3.9"
version = "0.2.1"
description = "Python bindings for the Bungee time/pitch stretching library"
readme = "README.md"
license = { text = "MPL-2.0" }

[tool.scikit-build]
cmake.source-dir = "."
wheel.packages = ["src/bungee_python"]
wheel.exclude = []
# Ensure RPATH is set correctly for manylinux wheels
cmake.define = { CMAKE_INSTALL_RPATH = "$ORIGIN", CMAKE_BUILD_WITH_INSTALL_RPATH = "ON", SKBUILD_PROJECT_NAME = "bungee_python" }

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[tool.pixi.feature.build.dependencies]
cmake = ">=3.15,<4"
python = ">=3.9,<4"
cxx-compiler = ">=1.5,<2"
# make is not strictly necessary when ninja is used, but keep for broader compatibility
make = ">=4.4.1,<5"
ninja = ">=1.12.1,<2"                # cibuildwheel uses ninja by default on Linux
scikit-build-core = ">=0.10.7,<0.11"
uv = ">=0.4.25,<0.5"

[tool.pixi.feature.build.tasks.build]
cmd = ["uv", "build"]

[tool.pixi.feature.dev.dependencies]
ipython = ">=7.31.0,<8"
numpy = "*"
ipykernel = "*"
pysoundfile = "*"

[tool.pixi.environments]
build = ["build"]
default = ["build", "dev"]

[tool.pixi.dependencies]
pip = ">=25.1.1,<26"
matplotlib = ">=3.10.1,<4"

[tool.cibuildwheel]
# Skip builds for Python versions older than 3.9, as specified in requires-python
# Also skip PyPy builds for now, unless specifically tested/required.
# For manylinux, we will target manylinux2014
skip = ["cp37-*", "cp38-*", "pp*", "*-musllinux_*"]

# For Linux, ensure CMAKE_INSTALL_LIBDIR is set, which is a good practice.
# Use manylinux2014_x86_64 image for wider compatibility.
# Other images like manylinux_2_28 could be used for newer features if needed.
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
# Pass SKBUILD_PROJECT_NAME to CMake via environment for cibuildwheel
[tool.cibuildwheel.environment]
CMAKE_ARGS = "-DSKBUILD_PROJECT_NAME=bungee_python -DCMAKE_INSTALL_LIBDIR=lib"

# Specific overrides for Linux if needed, though the global environment usually suffices
# [tool.cibuildwheel.linux]
# environment = { CMAKE_ARGS = "-DSKBUILD_PROJECT_NAME=bungee_python -DCMAKE_INSTALL_LIBDIR=lib" }

# Ensure that the repair command is executed to bundle external libraries
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

# If you have specific build verbosity needs or other options:
# build-verbosity = 1
