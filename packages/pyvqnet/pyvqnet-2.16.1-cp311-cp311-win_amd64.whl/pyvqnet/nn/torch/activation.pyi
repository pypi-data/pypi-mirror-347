from ...tensor import to_tensor as to_tensor
from ..parameter import Parameter as Parameter
from .module import TorchModule as TorchModule
from _typeshed import Incomplete

class Gelu(TorchModule):
    name: Incomplete
    def __init__(self, approximate: str = 'tanh', name: str = '') -> None: ...
    def forward(self, x): ...

class SiLU(TorchModule):
    name: Incomplete
    def __init__(self, name: str = '') -> None: ...
    def forward(self, x): ...

class Sigmoid(TorchModule):
    name: Incomplete
    def __init__(self, name: str = '') -> None: ...
    def forward(self, x): ...

class Softsign(TorchModule):
    name: Incomplete
    def __init__(self, name: str = '') -> None: ...
    def forward(self, x): ...

class Softplus(TorchModule):
    name: Incomplete
    def __init__(self, name: str = '') -> None: ...
    def forward(self, x): ...

class Softmax(TorchModule):
    name: Incomplete
    axis: Incomplete
    def __init__(self, axis: int = -1, name: str = '') -> None: ...
    def forward(self, x): ...

class HardSigmoid(TorchModule):
    name: Incomplete
    def __init__(self, name: str = '') -> None: ...
    def forward(self, x): ...

class ReLu(TorchModule):
    name: Incomplete
    def __init__(self, name: str = '') -> None: ...
    def forward(self, x): ...

class LeakyReLu(TorchModule):
    name: Incomplete
    alpha: Incomplete
    def __init__(self, alpha: float = 0.01, name: str = '') -> None: ...
    def forward(self, x): ...

class ELU(TorchModule):
    name: Incomplete
    alpha: Incomplete
    def __init__(self, alpha: float = 1.0, name: str = '') -> None: ...
    def forward(self, x): ...

class Tanh(TorchModule):
    name: Incomplete
    def __init__(self, name: str = '') -> None: ...
    def forward(self, x): ...
