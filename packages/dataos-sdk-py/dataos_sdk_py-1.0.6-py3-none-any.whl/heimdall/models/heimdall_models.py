# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2024-11-21T12:27:46+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class AccessPolicyConfig(BaseModel):
    default_allow: Optional[bool] = None


class AuthorizationAtomValues(BaseModel):
    authorization_atom_id: Optional[str] = None
    variable_values: Optional[List[Dict[str, str]]] = None


class AuthorizationResultData(BaseModel):
    data: Optional[Any] = None
    id: Optional[str] = None
    tags: Optional[List[str]] = None


class AuthorizationResultError(BaseModel):
    message: Optional[str] = None
    status: Optional[int] = None


class Avatar(BaseModel):
    image_base64: Optional[str] = None


class Change(BaseModel):
    created_at: Optional[str] = None
    details: Optional[str] = None
    id: Optional[str] = None
    object_id: Optional[str] = None
    object_type: Optional[str] = None
    subject_id: Optional[str] = None
    what: Optional[str] = None


class CidrCondition(BaseModel):
    cidr: Optional[str] = None
    name: Optional[str] = None


class Collection(BaseModel):
    access_policy_config: Optional[AccessPolicyConfig] = None
    description: Optional[str] = None
    flavor: Optional[str] = None
    name: Optional[str] = None


class ContextObject(BaseModel):
    paths: Optional[List[str]] = None
    tags: Optional[List[str]] = None


class EqualsSubjectCondition(BaseModel):
    name: Optional[str] = None


class KeyValue(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class Links(BaseModel):
    avatars: Optional[str] = None
    changes: Optional[str] = None
    download_avatars: Optional[str] = None
    grants: Optional[str] = None
    policies: Optional[str] = None
    self: Optional[str] = None
    tags: Optional[str] = None
    tokens: Optional[str] = None
    user: Optional[str] = None


class LoginRequest(BaseModel):
    secret: Optional[str] = None


class LoginResult(BaseModel):
    access_token: Optional[str] = None
    refresh_token: Optional[str] = None


class LoginTicket(BaseModel):
    id: Optional[str] = None
    login_result: Optional[LoginResult] = None
    login_url: Optional[str] = None


class MapMapSliceValues(RootModel[Optional[Dict[str, List[Dict[str, str]]]]]):
    root: Optional[Dict[str, List[Dict[str, str]]]] = None


class MapValues(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class Objects(BaseModel):
    paths: Optional[List[str]] = Field(
        None,
        description='Paths is an array representing all the paths this Policy applies to.\nin: body',
    )
    tags: Optional[List[List[str]]] = Field(
        None,
        description='Tags is an array representing all the tags this Policy applies to.\nin: body',
    )


class PolicyEnforcementProviderContext(BaseModel):
    authorization_atom_id: Optional[str] = None
    user_agent: Optional[str] = None


class PolicyEnforcementProviderThinResponse(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    created_at: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    updated_at: Optional[str] = None
    version: Optional[str] = None


class PolicyPersistence(BaseModel):
    id: Optional[str] = None


class PolicyThinResponse(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    collection: Optional[str] = Field(
        None,
        description='Collection is the group of Access Policies that this Policy should be included and evaluated with.',
    )
    description: Optional[str] = Field(
        None, description='Description is an optional, human-readable description.'
    )
    name: Optional[str] = Field(
        None,
        description='Name is the unique identifier of the Policy. It is used to query, update, and remove the Policy.',
    )


class PolicyUseCaseGrant(BaseModel):
    collection: Optional[str] = None
    id: Optional[str] = None
    policies: Optional[List[PolicyPersistence]] = None
    policy_use_case_id: Optional[str] = None
    subjectGranters: Optional[MapValues] = None
    subjects: Optional[List[str]] = None
    values: Optional[List[AuthorizationAtomValues]] = None


class PolicyUseCaseGrantRequest(BaseModel):
    collection: Optional[str] = None
    notes: Optional[str] = None
    policy_use_case_id: Optional[str] = None
    requester: Optional[str] = None
    source: Optional[str] = None
    subjects: Optional[List[str]] = None
    values: Optional[MapMapSliceValues] = None


class PolicyUseCaseGrantRequestDB(BaseModel):
    collection: Optional[str] = None
    creator: Optional[str] = None
    decision: Optional[str] = None
    id: Optional[str] = None
    notes: Optional[str] = None
    policy_use_case_grant_id: Optional[str] = None
    policy_use_case_id: Optional[str] = None
    requester: Optional[str] = None
    source: Optional[str] = None
    state: Optional[str] = None
    subjects: Optional[List[str]] = None
    values: Optional[MapMapSliceValues] = None


class PolicyUseCaseGrantResponse(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    collection: Optional[str] = None
    created_at: Optional[str] = None
    id: Optional[str] = None
    policies: Optional[List[PolicyPersistence]] = None
    policy_use_case_id: Optional[str] = None
    subjectGranters: Optional[MapValues] = None
    subjects: Optional[List[str]] = None
    updated_at: Optional[str] = None
    values: Optional[List[AuthorizationAtomValues]] = None


class PolicyUseCaseGrantThinResponse(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    collection: Optional[str] = None
    created_at: Optional[str] = None
    id: Optional[str] = None
    policy_use_case_id: Optional[str] = None
    subjectGranters: Optional[MapValues] = None
    subjects: Optional[List[str]] = None
    updated_at: Optional[str] = None


class Role(BaseModel):
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    tag: Optional[str] = None


class RotateTokenRequest(BaseModel):
    duration: Optional[str] = Field(None, description='in: body')
    token: Optional[str] = Field(None, description='in: body\nrequired: true')
    user_id: Optional[str] = Field(None, description='in: body')


class Search(BaseModel):
    cid: Optional[str] = None
    id: Optional[str] = None
    tag: Optional[str] = None


class SecretEntry(BaseModel):
    base64Value: Optional[str] = None
    key: Optional[str] = None


class StringEqualCondition(BaseModel):
    expected_value: Optional[str] = None
    name: Optional[str] = None


class StringMatchCondition(BaseModel):
    match_regular_expression: Optional[str] = None
    name: Optional[str] = None


class StringPairsEqualCondition(BaseModel):
    name: Optional[str] = None


class Subjects(BaseModel):
    tags: Optional[List[List[str]]] = Field(
        None,
        description='Tags is an array representing all the tags this Policy applies to.\nin: body',
    )


class Tag(BaseModel):
    label: Optional[str] = None


class TagGroup(BaseModel):
    name: Optional[str] = None
    tags: Optional[List[Tag]] = None


class TagNamespace(BaseModel):
    description: Optional[str] = None
    glob: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None


class TagResponse(BaseModel):
    label: Optional[str] = None
    type: Optional[str] = None


class ThinSecret(BaseModel):
    id: Optional[str] = None


class TokenRequest(BaseModel):
    description: Optional[str] = Field(None, description='in: body')
    duration: Optional[str] = Field(None, description='in: body')
    name: Optional[str] = Field(None, description='in: body')
    type: Optional[str] = Field(None, description='in: body\nrequired: true')
    use_existing: Optional[bool] = Field(None, description='in: body')
    user_id: Optional[str] = Field(None, description='in: body')


class TokenV2(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    data: Optional[Dict[str, str]] = None
    description: Optional[str] = None
    expiration: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None
    user_id: Optional[str] = None


class User(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    cid: Optional[str] = None
    email: Optional[str] = None
    federated_connector_id: Optional[str] = None
    federated_user_id: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    properties: Optional[List[KeyValue]] = None
    tags: Optional[List[str]] = None
    tokens: Optional[List[TokenV2]] = None
    type: Optional[str] = None


class UserRequest(BaseModel):
    email: Optional[str] = None
    federated_connector_id: Optional[str] = None
    federated_user_id: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    properties: Optional[List[KeyValue]] = None
    tokens: Optional[Dict[str, str]] = None
    type: Optional[str] = None
    user_id: Optional[str] = None


class UserTagsRequest(BaseModel):
    tags: Optional[List[str]] = None
    user_id: Optional[str] = None


class UserThinResponse(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    email: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    tags: Optional[List[str]] = None
    type: Optional[str] = None


class AuthorizationRequestContext(BaseModel):
    collection: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    object: Optional[ContextObject] = None
    predicate: Optional[str] = None


class AuthorizationResult(BaseModel):
    allow: Optional[bool] = None
    error: Optional[AuthorizationResultError] = None
    result: Optional[AuthorizationResultData] = None
    valid: Optional[bool] = None


class AuthorizationResultBatchSingle(BaseModel):
    allow: Optional[bool] = None
    data: Optional[Any] = None
    error: Optional[AuthorizationResultError] = None
    valid: Optional[bool] = None


class PolicyConditions(BaseModel):
    cidr_condition: Optional[CidrCondition] = None
    equals_subject_condition: Optional[EqualsSubjectCondition] = None
    string_equal_condition: Optional[StringEqualCondition] = None
    string_match_condition: Optional[StringMatchCondition] = None
    string_pairs_equal_condition: Optional[StringPairsEqualCondition] = None


class PolicyList(BaseModel):
    page: Optional[int] = None
    policies: Optional[List[PolicyThinResponse]] = None
    size: Optional[int] = None
    total_pages: Optional[int] = None
    total_records: Optional[int] = None


class PolicyUseCase(BaseModel):
    authorization_atoms: Optional[List[str]] = None
    category: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    policy_use_case_grants: Optional[List[PolicyUseCaseGrant]] = None
    values: Optional[List[AuthorizationAtomValues]] = None


class Secret(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    data: Optional[List[SecretEntry]] = None
    id: Optional[str] = None


class UserIdAuthorizationRequest(BaseModel):
    context: Optional[AuthorizationRequestContext] = None
    pep_context: Optional[PolicyEnforcementProviderContext] = None
    user_id: Optional[str] = None


class UserList(BaseModel):
    page: Optional[int] = None
    size: Optional[int] = None
    total_pages: Optional[int] = None
    total_records: Optional[int] = None
    users: Optional[List[UserThinResponse]] = None


class AuthorizationAtom(BaseModel):
    conditions: Optional[List[PolicyConditions]] = None
    description: Optional[str] = None
    id: Optional[str] = None
    paths: Optional[List[str]] = None
    predicate: Optional[str] = None
    tags: Optional[List[str]] = None


class AuthorizationAtomResponse(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    conditions: Optional[List[PolicyConditions]] = None
    created_at: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    paths: Optional[List[str]] = None
    policy_enforcement_provider_id: Optional[str] = None
    predicate: Optional[str] = None
    tags: Optional[List[str]] = None
    updated_at: Optional[str] = None
    variables: Optional[List[str]] = None


class AuthorizationRequest(BaseModel):
    context: Optional[AuthorizationRequestContext] = None
    pep_context: Optional[PolicyEnforcementProviderContext] = None
    token: Optional[str] = None


class AuthorizationRequestBatch(BaseModel):
    contexts: Optional[Dict[str, AuthorizationRequestContext]] = None
    token: Optional[str] = None


class AuthorizationResultBatch(BaseModel):
    id: Optional[str] = None
    results: Optional[Dict[str, AuthorizationResultBatchSingle]] = None
    tags: Optional[List[str]] = None


class Policy(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    allow: Optional[bool] = Field(
        None,
        description='Allow is the effect of this Policy. It can be "true" or "false".',
    )
    collection: Optional[str] = Field(
        None,
        description='Collection is the group of Access Policies that this Policy should be included and evaluated with.',
    )
    conditions: Optional[List[PolicyConditions]] = Field(
        None,
        description='Conditions represents a set of conditions under which this Policy is active.',
    )
    description: Optional[str] = Field(
        None, description='Description is an optional, human-readable description.'
    )
    name: Optional[str] = Field(
        None,
        description='Name is the unique identifier of the Policy. It is used to query, update, and remove the Policy.',
    )
    objects: Optional[Objects] = Field(
        None,
        description='Objects is a struct representing all the targets this Policy applies to.',
    )
    predicates: Optional[List[str]] = Field(
        None,
        description='Predicates is an array representing all the actions this Policy applies to.',
    )
    subjects: Optional[Subjects] = Field(
        None,
        description='Subjects is a struct representing all the tags or tag-groups this Policy applies to.',
    )


class PolicyEnforcementProvider(BaseModel):
    authorization_atoms: Optional[List[AuthorizationAtom]] = None
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    version: Optional[str] = None


class PolicyEnforcementProviderResponse(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    authorization_atoms: Optional[List[AuthorizationAtom]] = None
    created_at: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    updated_at: Optional[str] = None
    version: Optional[str] = None


class PolicyUseCaseResponse(BaseModel):
    field_links: Optional[Links] = Field(None, alias='_links')
    authorization_atoms: Optional[List[AuthorizationAtomResponse]] = None
    category: Optional[str] = None
    created_at: Optional[str] = None
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    policy_use_case_grants: Optional[List[PolicyUseCaseGrantResponse]] = None
    updated_at: Optional[str] = None
    values: Optional[List[AuthorizationAtomValues]] = None
