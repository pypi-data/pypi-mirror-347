import dataclasses
import enum
import logging
import threading
from _typeshed import Incomplete
from typing import Callable, ClassVar

import _ctypes
import _cython_3_0_11

from ok.gui.Communicate import communicate as communicate

DWMWA_EXTENDED_FRAME_BOUNDS: int
MAXBYTE: int
MDT_EFFECTIVE_DPI: int
PW_RENDERFULLCONTENT: int
SystemProcessIdInformation: int
WGC_MIN_BUILD: int
WGC_NO_BORDER_MIN_BUILD: int
WINDOWS_BUILD_NUMBER: int
__test__: dict
adjust_coordinates: _cython_3_0_11.cython_function_or_method
all_pids: _cython_3_0_11.cython_function_or_method
average_width: _cython_3_0_11.cython_function_or_method
base64_to_data: _cython_3_0_11.cython_function_or_method
bytes_to_readable_size: _cython_3_0_11.cython_function_or_method
calculate_color_percentage: _cython_3_0_11.cython_function_or_method
calculate_colorfulness: _cython_3_0_11.cython_function_or_method
check_mutex: _cython_3_0_11.cython_function_or_method
check_pos: _cython_3_0_11.cython_function_or_method
clear_folder: _cython_3_0_11.cython_function_or_method
color_range_to_bound: _cython_3_0_11.cython_function_or_method
config_logger: _cython_3_0_11.cython_function_or_method
crop_image: _cython_3_0_11.cython_function_or_method
d: _cython_3_0_11.cython_function_or_method
data_to_base64: _cython_3_0_11.cython_function_or_method
decimal: _cython_3_0_11.cython_function_or_method
deep_get: _cython_3_0_11.cython_function_or_method
delete_folders_starts_with: _cython_3_0_11.cython_function_or_method
delete_if_exists: _cython_3_0_11.cython_function_or_method
dir_checksum: _cython_3_0_11.cython_function_or_method
e: _cython_3_0_11.cython_function_or_method
ensure_dir: _cython_3_0_11.cython_function_or_method
ensure_dir_for_file: _cython_3_0_11.cython_function_or_method
enum_child_windows: _cython_3_0_11.cython_function_or_method
execute: _cython_3_0_11.cython_function_or_method
filter_and_sort_matches: _cython_3_0_11.cython_function_or_method
find_box_by_name: _cython_3_0_11.cython_function_or_method
find_boxes_by_name: _cython_3_0_11.cython_function_or_method
find_boxes_within_boundary: _cython_3_0_11.cython_function_or_method
find_color_rectangles: _cython_3_0_11.cython_function_or_method
find_first_existing_file: _cython_3_0_11.cython_function_or_method
find_folder_with_file: _cython_3_0_11.cython_function_or_method
find_highest_confidence_box: _cython_3_0_11.cython_function_or_method
find_hwnd: _cython_3_0_11.cython_function_or_method
find_index_in_list: _cython_3_0_11.cython_function_or_method
get_bios_serial_number: _cython_3_0_11.cython_function_or_method
get_bounding_box: _cython_3_0_11.cython_function_or_method
get_capture: _cython_3_0_11.cython_function_or_method
get_connected_area_by_color: _cython_3_0_11.cython_function_or_method
get_crop_point: _cython_3_0_11.cython_function_or_method
get_exe_by_hwnd: _cython_3_0_11.cython_function_or_method
get_first_item: _cython_3_0_11.cython_function_or_method
get_folder_size: _cython_3_0_11.cython_function_or_method
get_mask_in_color_range: _cython_3_0_11.cython_function_or_method
get_monitors_bounds: _cython_3_0_11.cython_function_or_method
get_mute_state: _cython_3_0_11.cython_function_or_method
get_my_id: _cython_3_0_11.cython_function_or_method
get_path_in_package: _cython_3_0_11.cython_function_or_method
get_path_relative_to_exe: _cython_3_0_11.cython_function_or_method
get_player_id_from_cmdline: _cython_3_0_11.cython_function_or_method
get_readable_file_size: _cython_3_0_11.cython_function_or_method
get_relative_path: _cython_3_0_11.cython_function_or_method
get_saturation: _cython_3_0_11.cython_function_or_method
get_screen_resolution: _cython_3_0_11.cython_function_or_method
get_win_graphics_capture: _cython_3_0_11.cython_function_or_method
get_window_bounds: _cython_3_0_11.cython_function_or_method
handle_remove_error: _cython_3_0_11.cython_function_or_method
hash_dict_keys_values: _cython_3_0_11.cython_function_or_method
init_class_by_name: _cython_3_0_11.cython_function_or_method
install_path_isascii: _cython_3_0_11.cython_function_or_method
is_admin: _cython_3_0_11.cython_function_or_method
is_blank: _cython_3_0_11.cython_function_or_method
is_close_to_pure_color: _cython_3_0_11.cython_function_or_method
is_digit: _cython_3_0_11.cython_function_or_method
is_foreground_window: _cython_3_0_11.cython_function_or_method
is_pure_black: _cython_3_0_11.cython_function_or_method
is_valid_hwnd: _cython_3_0_11.cython_function_or_method
is_window_in_screen_bounds: _cython_3_0_11.cython_function_or_method
is_window_minimized: _cython_3_0_11.cython_function_or_method
k: None
list_or_obj_to_str: _cython_3_0_11.cython_function_or_method
load_json: _cython_3_0_11.cython_function_or_method
mask_white: _cython_3_0_11.cython_function_or_method
og: OkGlobals
parse_ratio: _cython_3_0_11.cython_function_or_method
prevent_sleeping: _cython_3_0_11.cython_function_or_method
public_key: None
r: _cython_3_0_11.cython_function_or_method
random_number: _cython_3_0_11.cython_function_or_method
ratio_text_to_number: _cython_3_0_11.cython_function_or_method
read_from_json: _cython_3_0_11.cython_function_or_method
read_json_file: _cython_3_0_11.cython_function_or_method
relative_box: _cython_3_0_11.cython_function_or_method
replace_extension: _cython_3_0_11.cython_function_or_method
resize_window: _cython_3_0_11.cython_function_or_method
resource_path: _cython_3_0_11.cython_function_or_method
rgb_to_gray: _cython_3_0_11.cython_function_or_method
run_in_new_thread: _cython_3_0_11.cython_function_or_method
safe_get: _cython_3_0_11.cython_function_or_method
sanitize_filename: _cython_3_0_11.cython_function_or_method
scale_by_anchor: _cython_3_0_11.cython_function_or_method
set_mute_state: _cython_3_0_11.cython_function_or_method
sort_boxes: _cython_3_0_11.cython_function_or_method
try_delete_dc: _cython_3_0_11.cython_function_or_method
un_fk_label_studio_path: _cython_3_0_11.cython_function_or_method
update_capture_method: _cython_3_0_11.cython_function_or_method
windows_graphics_available: _cython_3_0_11.cython_function_or_method
write_json_file: _cython_3_0_11.cython_function_or_method


class ADBCaptureMethod(BaseCaptureMethod):
    description: ClassVar[str] = ...
    name: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def connected(self, *args, **kwargs): ...

    def do_get_frame(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class Analytics:
    def __init__(self, *args, **kwargs) -> None: ...

    def get_unique_client_id(self, *args, **kwargs): ...

    def send_alive(self, *args, **kwargs): ...

    @property
    def client_id(self): ...

    @property
    def user_properties(self): ...


class App:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    about: Incomplete
    app: Incomplete
    auth_config: Incomplete
    config: Incomplete
    exit_event: Incomplete
    fire_base_analytics: Incomplete
    icon: Incomplete
    loading_window: Incomplete
    locale: Incomplete
    main_window: Incomplete
    ok_config: Incomplete
    overlay: Incomplete
    overlay_window: Incomplete
    po_translation: Incomplete
    start_controller: Incomplete
    title: Incomplete
    to_translate: Incomplete
    updater: Incomplete
    version: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def check_auth(self, *args, **kwargs): ...

    def do_show_main(self, *args, **kwargs): ...

    def exec(self, *args, **kwargs): ...

    def gen_tr_po_files(self, *args, **kwargs): ...

    def quit(self, *args, **kwargs): ...

    def request(self, *args, **kwargs): ...

    def show_already_running_error(self, *args, **kwargs): ...

    def show_main_window(self, *args, **kwargs): ...

    def show_message_window(self, *args, **kwargs): ...

    def show_path_ascii_error(self, *args, **kwargs): ...

    def tr(self, *args, **kwargs): ...

    def update_overlay(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class BaseCaptureMethod:
    description: ClassVar[str] = ...
    name: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    exit_event: Incomplete
    height: Incomplete
    width: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def clickable(self, *args, **kwargs): ...

    def close(self, *args, **kwargs): ...

    def connected(self, *args, **kwargs): ...

    def do_get_frame(self, *args, **kwargs): ...

    def draw_rectangle(self, *args, **kwargs): ...

    def get_frame(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class BaseTask(FindFeature):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    config: Incomplete
    config_description: Incomplete
    config_type: Incomplete
    default_config: Incomplete
    description: Incomplete
    enabled: Incomplete
    handler: Incomplete
    hwnd_title: Incomplete
    icon: Incomplete
    info: Incomplete
    last_trigger_time: Incomplete
    lock: Incomplete
    name: Incomplete
    paused: Incomplete
    running: Incomplete
    start_time: Incomplete
    trigger_interval: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def disable(self, *args, **kwargs): ...

    def enable(self, *args, **kwargs): ...

    def get_status(self, *args, **kwargs): ...

    def info_add(self, *args, **kwargs): ...

    def info_add_to_list(self, *args, **kwargs): ...

    def info_clear(self, *args, **kwargs): ...

    def info_get(self, *args, **kwargs): ...

    def info_incr(self, *args, **kwargs): ...

    def info_set(self, *args, **kwargs): ...

    def load_config(self, *args, **kwargs): ...

    def log_debug(self, *args, **kwargs): ...

    def log_error(self, *args, **kwargs): ...

    def log_info(self, *args, **kwargs): ...

    def notification(self, *args, **kwargs): ...

    def on_create(self, *args, **kwargs): ...

    def on_destroy(self, *args, **kwargs): ...

    def pause(self, *args, **kwargs): ...

    def run(self, *args, **kwargs): ...

    def set_executor(self, *args, **kwargs): ...

    def find_boxes(self, boxes, match=None, boundary=None): ...

    def should_trigger(self, *args, **kwargs): ...

    def trigger(self, *args, **kwargs): ...

    def unpause(self, *args, **kwargs): ...

    def validate(self, *args, **kwargs): ...

    def validate_config(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class BaseWindowsCaptureMethod(BaseCaptureMethod):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    hwnd_window: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def clickable(self, *args, **kwargs): ...

    def connected(self, *args, **kwargs): ...

    def get_abs_cords(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class BitBltCaptureMethod(BaseWindowsCaptureMethod):
    description: ClassVar[str] = ...
    name: ClassVar[str] = ...
    short_description: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...

    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

    def do_get_frame(self, *args, **kwargs): ...

    def test_exclusive_full_screen(self, *args, **kwargs): ...

    def test_is_not_pure_color(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class Box:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    confidence: Incomplete
    height: Incomplete
    name: Incomplete
    width: Incomplete
    x: Incomplete
    y: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def center(self, *args, **kwargs): ...

    def closest_distance(self, *args, **kwargs): ...

    def copy(self, *args, **kwargs): ...

    def crop_frame(self, *args, **kwargs): ...

    def find_closest_box(self, *args, **kwargs): ...

    def in_boundary(self, *args, **kwargs): ...

    def relative_with_variance(self, *args, **kwargs): ...

    def scale(self, *args, **kwargs): ...

    def __eq__(self, other: object) -> bool: ...

    def __ge__(self, other: object) -> bool: ...

    def __gt__(self, other: object) -> bool: ...

    def __le__(self, other: object) -> bool: ...

    def __lt__(self, other: object) -> bool: ...

    def __ne__(self, other: object) -> bool: ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class CannotFindException(Exception): ...


class CaptureException(Exception): ...


class ColorChannel(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    Alpha: ClassVar[ColorChannel] = ...
    Blue: ClassVar[ColorChannel] = ...
    Green: ClassVar[ColorChannel] = ...
    Red: ClassVar[ColorChannel] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...

    def __format__(self, *args, **kwargs) -> str: ...


class CommunicateHandler(logging.Handler):
    def __init__(self, *args, **kwargs) -> None: ...

    def emit(self, *args, **kwargs): ...


class Config(dict):
    config_folder: ClassVar[str] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def clear(self, *args, **kwargs): ...

    def has_user_config(self, *args, **kwargs): ...

    def pop(self, *args, **kwargs): ...

    def popitem(self, *args, **kwargs): ...

    def reset_to_default(self, *args, **kwargs): ...

    def save_file(self, *args, **kwargs): ...

    def validate(self, *args, **kwargs): ...

    def verify_config(self, *args, **kwargs): ...

    def __getitem__(self, index): ...

    def __setitem__(self, index, object) -> None: ...


class ConfigOption:
    def __init__(self, *args, **kwargs) -> None: ...


class DesktopDuplicationCaptureMethod(BaseWindowsCaptureMethod):
    description: ClassVar[str] = ...
    name: ClassVar[str] = ...
    short_description: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def close(self, *args, **kwargs): ...

    def do_get_frame(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class DeviceManager:
    def __init__(self, *args, **kwargs) -> None: ...

    def adb_check_in_front(self, *args, **kwargs): ...

    def adb_check_installed(self, *args, **kwargs): ...

    def adb_connect(self, *args, **kwargs): ...

    def adb_ensure_in_front(self, *args, **kwargs): ...

    def adb_get_imei(self, *args, **kwargs): ...

    def adb_kill_server(self, *args, **kwargs): ...

    def adb_start_package(self, *args, **kwargs): ...

    def device_connected(self, *args, **kwargs): ...

    def do_refresh(self, *args, **kwargs): ...

    def do_screencap(self, *args, **kwargs): ...

    def do_start(self, *args, **kwargs): ...

    def ensure_hwnd(self, *args, **kwargs): ...

    def get_devices(self, *args, **kwargs): ...

    def get_exe_path(self, *args, **kwargs): ...

    def get_hwnd_name(self, *args, **kwargs): ...

    def get_preferred_capture(self, *args, **kwargs): ...

    def get_preferred_device(self, *args, **kwargs): ...

    def get_resolution(self, *args, **kwargs): ...

    def refresh(self, *args, **kwargs): ...

    def refresh_emulators(self, *args, **kwargs): ...

    def refresh_phones(self, *args, **kwargs): ...

    def set_capture(self, *args, **kwargs): ...

    def set_hwnd_name(self, *args, **kwargs): ...

    def set_preferred_device(self, *args, **kwargs): ...

    def shell(self, *args, **kwargs): ...

    def shell_device(self, *args, **kwargs): ...

    def start(self, *args, **kwargs): ...

    def try_kill_adb(self, *args, **kwargs): ...

    def update_device_list(self, *args, **kwargs): ...

    def update_pc_device(self, *args, **kwargs): ...

    def update_resolution_for_hwnd(self, *args, **kwargs): ...

    def use_windows_capture(self, *args, **kwargs): ...

    @property
    def adb(self): ...

    @property
    def device(self): ...

    @property
    def height(self): ...

    @property
    def width(self): ...


class DoNothingInteraction:
    pass


class ExecutorOperation:
    debug: Incomplete
    executor: Incomplete
    frame: Incomplete
    height: Incomplete
    hwnd: Incomplete
    logger: Incomplete
    scene: Incomplete
    screen_height: Incomplete
    screen_width: Incomplete
    width: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def adb_shell(self, *args, **kwargs): ...

    def box_in_horizontal_center(self, *args, **kwargs): ...

    def box_of_screen(self, *args, **kwargs): ...

    def box_of_screen_scaled(self, *args, **kwargs): ...

    def calculate_color_percentage(self, *args, **kwargs): ...

    def check_interval(self, *args, **kwargs): ...

    def is_adb(self): ...

    def click(self, *args, **kwargs): ...

    def click_box(self, *args, **kwargs): ...

    def click_box_if_name_match(self, *args, **kwargs): ...

    def click_relative(self, *args, **kwargs): ...

    @staticmethod
    def draw_boxes(*args, **kwargs): ...

    def exit_is_set(self, *args, **kwargs): ...

    def get_global_config(self, *args, **kwargs): ...

    def height_of_screen(self, *args, **kwargs): ...

    def is_scene(self, *args, **kwargs): ...

    def middle_click(self, *args, **kwargs): ...

    def middle_click_relative(self, *args, **kwargs): ...

    def mouse_down(self, *args, **kwargs): ...

    def mouse_up(self, *args, **kwargs): ...

    def move(self, *args, **kwargs): ...

    def move_relative(self, *args, **kwargs): ...

    def next_frame(self, *args, **kwargs): ...

    def out_of_ratio(self, *args, **kwargs): ...

    def reset_scene(self, *args, **kwargs): ...

    def right_click(self, *args, **kwargs): ...

    def screenshot(self, *args, **kwargs): ...

    def scroll(self, *args, **kwargs): ...

    def scroll_relative(self, *args, **kwargs): ...

    def send_key(self, *args, **kwargs): ...

    def send_key_down(self, *args, **kwargs): ...

    def send_key_up(self, *args, **kwargs): ...

    def sleep(self, *args, **kwargs): ...

    def swipe(self, *args, **kwargs): ...

    def swipe_relative(self, *args, **kwargs): ...

    def wait_click_box(self, *args, **kwargs): ...

    def wait_scene(self, *args, **kwargs): ...

    def wait_until(self, *args, **kwargs): ...

    def width_of_screen(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class ExitEvent(threading.Event):
    queues: ClassVar[set] = ...
    to_stops: ClassVar[set] = ...

    def bind_queue(self, *args, **kwargs): ...

    def bind_stop(self, *args, **kwargs): ...

    def set(self, *args, **kwargs): ...


class Feature:
    def __init__(self, *args, **kwargs) -> None: ...

    def scaling(self, *args, **kwargs): ...

    @property
    def height(self): ...

    @property
    def width(self): ...


class FeatureSet:
    box_dict: ClassVar[dict] = ...
    feature_dict: ClassVar[dict] = ...
    load_success: ClassVar[bool] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def check_size(self, *args, **kwargs): ...

    def empty(self, *args, **kwargs): ...

    def feature_exists(self, *args, **kwargs): ...

    def find_feature(self, *args, **kwargs): ...

    def find_one_feature(self, *args, **kwargs): ...

    def get_box_by_name(self, *args, **kwargs): ...

    def get_feature_by_name(self, *args, **kwargs): ...

    def process_data(self, *args, **kwargs): ...

    def save_images(self, *args, **kwargs): ...


class FindFeature(OCR):
    __pyx_vtable__: ClassVar[PyCapsule] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def feature_exists(self, *args, **kwargs): ...

    def find_best_match_in_box(self, *args, **kwargs): ...

    def find_feature(self, *args, **kwargs): ...

    def find_feature_and_set(self, *args, **kwargs): ...

    def find_one(self, *args, **kwargs): ...

    def get_box_by_name(self, *args, **kwargs): ...

    def on_feature(self, *args, **kwargs): ...

    def wait_click_feature(self, *args, **kwargs): ...

    def wait_feature(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class FinishedException(Exception): ...


class GlobalConfig:
    def __init__(self, *args, **kwargs) -> None: ...

    def get_all_visible_configs(self, *args, **kwargs): ...

    def get_config(self, *args, **kwargs): ...


class Handler:
    def __init__(self, *args, **kwargs) -> None: ...

    def post(self, *args, **kwargs): ...

    def stop(self, *args, **kwargs): ...


class HwndWindow:
    app_exit_event: Incomplete
    device_manager: Incomplete
    exe_full_path: Incomplete
    exe_name: Incomplete
    exists: Incomplete
    frame_aspect_ratio: Incomplete
    frame_height: Incomplete
    frame_width: Incomplete
    height: Incomplete
    hwnd: Incomplete
    hwnd_class: Incomplete
    hwnd_title: Incomplete
    monitors_bounds: Incomplete
    mute_option: Incomplete
    player_id: Incomplete
    pos_valid: Incomplete
    real_height: Incomplete
    real_width: Incomplete
    real_x_offset: Incomplete
    real_y_offset: Incomplete
    scaling: Incomplete
    stop_event: Incomplete
    thread: Incomplete
    title: Incomplete
    visible: Incomplete
    width: Incomplete
    window_height: Incomplete
    window_width: Incomplete
    x: Incomplete
    y: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def bring_to_front(self, *args, **kwargs): ...

    def do_update_window_size(self, *args, **kwargs): ...

    def frame_ratio(self, *args, **kwargs): ...

    def get_abs_cords(self, *args, **kwargs): ...

    def handle_mute(self, *args, **kwargs): ...

    def stop(self, *args, **kwargs): ...

    def try_resize_to(self, *args, **kwargs): ...

    def update_frame_size(self, *args, **kwargs): ...

    def update_window(self, *args, **kwargs): ...

    def update_window_size(self, *args, **kwargs): ...

    def validate_mute_config(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class ImageCaptureMethod(BaseCaptureMethod):
    description: ClassVar[str] = ...
    name: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def connected(self, *args, **kwargs): ...

    def do_get_frame(self, *args, **kwargs): ...

    def set_images(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class ImageShape(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    Channels: ClassVar[ImageShape] = ...
    X: ClassVar[ImageShape] = ...
    Y: ClassVar[ImageShape] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...

    def __format__(self, *args, **kwargs) -> str: ...


class InfoDict(dict):
    def clear(self, *args, **kwargs): ...

    def __delitem__(self, other) -> None: ...

    def __setitem__(self, index, object) -> None: ...


class Logger:
    __pyx_vtable__: ClassVar[PyCapsule] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    @staticmethod
    def call_stack(*args, **kwargs): ...

    def critical(self, *args, **kwargs): ...

    def debug(self, *args, **kwargs): ...

    def error(self, *args, **kwargs): ...

    @staticmethod
    def exception_to_str(*args, **kwargs): ...

    @staticmethod
    def get_logger(*args, **kwargs): ...

    def info(self, *args, **kwargs): ...

    def warning(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class NemuIpcCaptureMethod(BaseCaptureMethod):
    description: ClassVar[str] = ...
    name: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def base_folder(self, *args, **kwargs): ...

    def check_mumu_app_keep_alive_400(self, *args, **kwargs): ...

    def close(self, *args, **kwargs): ...

    def connected(self, *args, **kwargs): ...

    def do_get_frame(self, *args, **kwargs): ...

    def init_nemu(self, *args, **kwargs): ...

    def update_emulator(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class OCR(ExecutorOperation):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    ocr_default_threshold: Incomplete
    ocr_lib: Incomplete
    ocr_target_height: Incomplete
    text_fix: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def add_text_fix(self, *args, **kwargs): ...

    def ocr(self, *args, **kwargs): ...

    def wait_click_ocr(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class OK:
    adb: ClassVar[None] = ...
    adb_device: ClassVar[None] = ...
    device_manager: ClassVar[None] = ...
    executor: ClassVar[None] = ...
    exit_event: ClassVar[ExitEvent] = ...
    feature_set: ClassVar[None] = ...
    hwnd: ClassVar[None] = ...
    init_error: ClassVar[None] = ...
    ocr: ClassVar[None] = ...
    overlay_window: ClassVar[None] = ...
    screenshot: ClassVar[None] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def console_handler(self, *args, **kwargs): ...

    def do_init(self, *args, **kwargs): ...

    def init_device_manager(self, *args, **kwargs): ...

    def quit(self, *args, **kwargs): ...

    def start(self, *args, **kwargs): ...

    def wait_task(self, *args, **kwargs): ...

    @property
    def app(self): ...


class OkGlobals:
    def __init__(self, *args, **kwargs) -> None: ...

    def get_expire_util_str(self, *args, **kwargs): ...

    def set_dpi_scaling(self, *args, **kwargs): ...


class Response:
    code: Incomplete
    data: Incomplete
    message: Incomplete

    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class SYSTEM_PROCESS_ID_INFORMATION(_ctypes.Structure):
    _fields_: ClassVar[list] = ...
    ImageName: Incomplete
    ProcessId: Incomplete


class ScheduledTask:
    __init__: ClassVar[Callable] = ...
    __dataclass_fields__: ClassVar[dict] = ...
    __dataclass_params__: ClassVar[dataclasses._DataclassParams] = ...
    __eq__: ClassVar[Callable] = ...
    __ge__: ClassVar[Callable] = ...
    __gt__: ClassVar[Callable] = ...
    __le__: ClassVar[Callable] = ...
    __lt__: ClassVar[Callable] = ...
    __match_args__: ClassVar[tuple] = ...


class TaskDisabledException(Exception): ...


class TaskExecutor:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    current_task: Incomplete
    debug: Incomplete
    debug_mode: Incomplete
    device_manager: Incomplete
    exit_event: Incomplete
    feature_set: Incomplete
    frame: Incomplete
    global_config: Incomplete
    interaction: Incomplete
    method: Incomplete
    ocr_lib: Incomplete
    onetime_tasks: Incomplete
    paused: Incomplete
    trigger_tasks: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def active_trigger_task_count(self, *args, **kwargs): ...

    def can_capture(self, *args, **kwargs): ...

    def check_frame_and_resolution(self, *args, **kwargs): ...

    def connected(self, *args, **kwargs): ...

    def execute(self, *args, **kwargs): ...

    def get_all_tasks(self, *args, **kwargs): ...

    def get_task_by_class(self, *args, **kwargs): ...

    def get_task_by_class_name(self, *args, **kwargs): ...

    def init_tasks(self, *args, **kwargs): ...

    def is_executor_thread(self, *args, **kwargs): ...

    def next_frame(self, *args, **kwargs): ...

    def nullable_frame(self, *args, **kwargs): ...

    def pause(self, *args, **kwargs): ...

    def reset_scene(self, *args, **kwargs): ...

    def sleep(self, *args, **kwargs): ...

    def start(self, *args, **kwargs): ...

    def stop(self, *args, **kwargs): ...

    def wait_condition(self, *args, **kwargs): ...

    def wait_until_done(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class TriggerTask(BaseTask):
    __pyx_vtable__: ClassVar[PyCapsule] = ...

    def __init__(self, *args, **kwargs) -> None: ...

    def disable(self, *args, **kwargs): ...

    def enable(self, *args, **kwargs): ...

    def get_status(self, *args, **kwargs): ...

    def on_create(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...


class UNICODE_STRING(_ctypes.Structure):
    _fields_: ClassVar[list] = ...
    create: ClassVar[method] = ...
    Buffer: Incomplete
    Length: Incomplete
    MaximumLength: Incomplete


class WaitFailedException(Exception): ...


class WindowsGraphicsCaptureMethod(BaseWindowsCaptureMethod):
    description: ClassVar[str] = ...
    name: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    hwnd_window: Incomplete

    def __init__(self, *args, **kwargs) -> None: ...

    def close(self, *args, **kwargs): ...

    def connected(self, *args, **kwargs): ...

    def create_device(self, *args, **kwargs): ...

    def crop_image(self, *args, **kwargs): ...

    def crop_image_border_title(self, *args, **kwargs): ...

    def do_get_frame(self, *args, **kwargs): ...

    def reset_framepool(self, *args, **kwargs): ...

    def start_or_stop(self, *args, **kwargs): ...

    def __reduce__(self): ...

    def __reduce_cython__(self, *args, **kwargs): ...

    def __setstate_cython__(self, *args, **kwargs): ...
