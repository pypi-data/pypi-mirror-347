from typing import Generic, Iterable, List, Optional, Tuple, TypeVar, Union

### -------- Typing for non-generated classes ---------  ###

class Factory:
    @staticmethod
    def produce(key: Union[int, str]) -> Message: ...
    @staticmethod
    def abbrev_from_id(mgid: int) -> str: ...
    @staticmethod
    def id_from_abbrev(name: str) -> int: ...

class Message:
    def clone(self) -> Message: ...
    def clear(self) -> None: ...
    def validate(self) -> int: ...
    def set_timestamp_now(self) -> float: ...
    @property
    def msg_name(self) -> str: ...
    @property
    def msg_id(self) -> int: ...
    def serialize(self) -> bytes: ...
    def serialize_fields(self) -> bytes: ...
    def fields_equal(self, other: Message) -> bool: ...
    def __init__(self):
        self.timestamp: float = 0.0
        self.src: int = 0
        self.src_ent: int = 0
        self.dst: int = 0
        self.dst_ent: int = 0
        self.sub_id: int = 0

T = TypeVar('T')

class MessageList(Generic[T]):
    def set_parent(self, parent: Message) -> None: ...
    def clear(self) -> None: ...
    @property
    def size(self) -> int: ...
    def append(self, msg: T) -> None: ...
    def set_timestamp(self, value: float) -> None: ...
    def extend(self, iterable: Iterable[T]) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterable[T]: ...
    def __getitem__(self, item) -> Union[T, Iterable[T]]: ...
    def __contains__(self, item) -> bool: ...

class Packet:
    @staticmethod
    def deserialize(b: bytes) -> Message: ...
    @staticmethod
    def serialize(msg: Message) -> bytes: ...

class Parser:
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    def parse(self, b: bytes) -> Tuple[Optional[Message], int]: ...

### -------- Typing for generated bindings ---------  ###
