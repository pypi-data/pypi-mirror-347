import logging
import os.path
import tempfile

import pytest
import simplejson

from hutch_python.happi import DeviceLoadLevel, get_happi_objs, get_lightpath

from . import conftest

logger = logging.getLogger(__name__)


@conftest.requires_lightpath
def test_happi_objs():
    logger.debug("test_happi_objs")
    db = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                      'happi_db.json')
    # Only select active objects
    lc = get_lightpath(db, 'tst')
    objs = get_happi_objs(db, lc, 'tst')
    assert len(objs) == 4
    assert all([obj.md.active for obj in objs.values()])
    # Make sure we can handle an empty JSON file
    with tempfile.NamedTemporaryFile('w+') as tmp:
        simplejson.dump(dict(), tmp)
        tmp.seek(0)
        with pytest.raises(ValueError):
            # light controller will raise if no devices are found
            lc = get_lightpath(tmp.name, 'tst')


@pytest.mark.parametrize('load_level, num_devices', [
    (DeviceLoadLevel.UPSTREAM, 3),
    (DeviceLoadLevel.STANDARD, 4),
    (DeviceLoadLevel.ALL, 5)
])
@conftest.requires_lightpath
def test_load_level(load_level: DeviceLoadLevel, num_devices: int):
    logger.debug("test_load_level")
    db = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                      'happi_db.json')
    # Only select active objects
    lc = get_lightpath(db, 'tst')
    objs = get_happi_objs(db, lc, 'tst', load_level=load_level)
    assert len(objs) == num_devices


@conftest.requires_lightpath
def test_get_lightpath():
    logger.debug("test_get_lightpath")
    db = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                      'happi_db.json')
    lc = get_lightpath(db, 'tst')
    obj = lc.active_path('tst'.upper())
    # Check that we created a valid BeamPath with no inactive objects
    assert obj.name == 'TST'
    assert len(obj.devices) == 3


# run test_happi_objs() with exclude_devices
@conftest.requires_lightpath
def test_happi_objs_with_exclude_devices():
    # This test checks whether devices from exclude_devices have been removed from the
    # output of get_happi_objs(). For comparison, get_happi_objs() is first called without
    # exclude_devices and then called again with exclude_devices.
    exclude_devices = ['tst_device_5', 'tst_device_1']

    logger.debug("test_happi_objs")
    db = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                      'happi_db.json')
    # Only select active objects
    lc = get_lightpath(db, 'tst')

    # Call get_happi_objs() without exclude_devices
    objs = get_happi_objs(db, lc, 'tst', DeviceLoadLevel.STANDARD)
    assert len(objs) == 4

    # Call get_happi_objs() with exclude_devices
    objs_exclude_devices = get_happi_objs(
        db, lc, 'tst', DeviceLoadLevel.STANDARD, exclude_devices=exclude_devices)
    assert len(objs_exclude_devices) == 2

    # Check that none of the loaded devices are in the exclude_devices list
    for obj in objs_exclude_devices:
        assert obj not in exclude_devices


# Test ability to add additional devices using multiple happi search criteria
@conftest.requires_lightpath
def test_happi_objs_with_additional_devices_using_multiple_search_criteria():
    # Check if the user can load additional devices generated by happi's
    # search_parser() function. This test checks for cases where multiple
    # search criteria are passed to search_parser(). For comparison,
    # get_happi_objs() is first called without the 'additional_devices'
    # variable and then called again with 'additional_devices'.

    additional_devices = {
        'beamline_test': {'beamline': 'ZZZ'},
        'tst_device_3_test': {'name': 'tst_device_3'}
    }

    logger.debug("test_happi_objs")
    db = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                      'happi_db.json')
    # Only select active objects
    lc = get_lightpath(db, 'tst')

    # Call get_happi_objs() without additional_devices
    objs = get_happi_objs(db, lc, 'tst', DeviceLoadLevel.STANDARD)
    assert len(objs) == 4

    # Call get_happi_objs() with additional_devices
    objs_additional_devices = get_happi_objs(
        db, lc, 'tst', DeviceLoadLevel.STANDARD, additional_devices=additional_devices)

    # Check that the loaded devices include additional_devices
    assert len(objs_additional_devices) == 6


# Test ability to add additional devices using happi search with globs
@conftest.requires_lightpath
def test_happi_objs_with_additional_devices_using_globs():
    # This test checks for cases where a search criterion with globs is passed
    # to happi's search_parser(). For comparison, get_happi_objs() is first
    # called without the 'additional_devices' variable and then called again
    # with 'additional_devices'.

    additional_devices = {'globs_test': {'name': 'tst_device_*'}}

    logger.debug("test_happi_objs")
    db = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                      'happi_db.json')
    # Only select active objects
    lc = get_lightpath(db, 'tst')

    # Call get_happi_objs() without additional_devices
    objs = get_happi_objs(db, lc, 'tst', DeviceLoadLevel.STANDARD)
    assert len(objs) == 4

    # Call get_happi_objs() with additional_devices
    objs_additional_devices = get_happi_objs(
        db, lc, 'tst', DeviceLoadLevel.STANDARD, additional_devices=additional_devices)

    # Check that the loaded devices include additional_devices
    assert len(objs_additional_devices) == 6
