"use strict";(self.webpackChunk_jupyterlite_xeus_extension=self.webpackChunk_jupyterlite_xeus_extension||[]).push([[961],{961:(e,n,t)=>{t.r(n),t.d(n,{IEmpackEnvMetaFile:()=>c,default:()=>g});var s=t(240),r=t(367),o=t(425),a=t(363),i=t(658);const c=new(t(262).Token)("@jupyterlite/xeus:IEmpackEnvMetaFile");async function l(e){const n=r.URLExt.join(r.PageConfig.getBaseUrl(),e),t=await fetch(n,{method:"GET"});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}const u={id:"@jupyterlite/xeus-kernel:register",autoStart:!0,requires:[a.IKernelSpecs],optional:[o.IServiceWorkerManager,c,s.ILoggerRegistry],activate:async(e,n,t,s,o)=>{let a=[];try{a=await l("xeus/kernels.json")}catch(e){throw console.log(`Could not fetch xeus/kernels.json: ${e}`),e}const c=e.serviceManager.contents;for(const e of a){const o=await l("xeus/kernels/"+e+"/kernel.json");o.name=e,o.dir=e;for(const[e,n]of Object.entries(o.resources))o.resources[e]=r.URLExt.join(r.PageConfig.getBaseUrl(),n);n.register({spec:o,create:async e=>{const n=!(!(null==t?void 0:t.enabled)&&!crossOriginIsolated);n?console.info(`${o.name} contents will be synced with Jupyter Contents`):console.warn(`${o.name} contents will NOT be synced with Jupyter Contents`);const r=s?await s.getLink(o):"";return new i.WebWorkerKernel({...e,contentsManager:c,mountDrive:n,kernelSpec:o,empackEnvMetaLink:r,browsingContextId:(null==t?void 0:t.browsingContextId)||""})}})}await e.serviceManager.kernelspecs.refreshSpecs(),o&&(new BroadcastChannel("/xeus-kernel-logs-broadcast").onmessage=n=>{var t;const{kernelId:s,payload:r}=n.data,{sessions:a}=e.serviceManager;let i="";for(const e of a.running())if((null===(t=e.kernel)||void 0===t?void 0:t.id)===s){i=e.path;break}o.getLogger(i).log(r)})}},g=[{id:"@jupyterlite/xeus:empack-env-meta",autoStart:!0,provides:c,activate:()=>({getLink:async e=>{const n=e.name;return`${r.URLExt.join(r.PageConfig.getBaseUrl(),`xeus/kernels/${n}`)}`}})},u]}}]);