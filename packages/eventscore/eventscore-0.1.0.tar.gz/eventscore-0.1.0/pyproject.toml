[project]
name = "eventscore"
version = "0.1.0"
authors = [
    { name = "Matvey Ivanov", email = "cool.matvey250301@gmail.com" },
]
description = "Power up your application with event-driven design!"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]
license = "MIT"
license-files = ["LICEN[CS]E*"]

[project.urls]
Homepage = "https://github.com/MatveyIvanov/eventscore"
Issues = "https://github.com/MatveyIvanov/eventscore/issues"

[tool.poetry]
name = "eventscore"
version = "0.1.0"
description = "Power up your application with event-driven design!"
authors = ["MatveyIvanov <cool.matvey250301@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
redis = "5.2.1"
kafka-python = "2.1.5"

[tool.poetry.group.dev.dependencies]
pytest = "8.3.5"
pytest-cov = "5.0.0"
pytest-mock = "3.14.0"
pytest-asyncio = "0.23.5"
flake8 = "7.1.0"
mypy = "1.10.0"
black = "24.4.2"
pre-commit = "3.7.1"
isort = "5.13.2"
sphinx = "8.2.3"
tox = "4.24.2"
ruff = "0.11.2"
pyright = "^1.1.400"
python-dotenv = "^1.1.0"

[tool.pytest.ini_options]
pythonpath = [
    "."
]
python_files = "test_*.py"
filterwarnings = [
    "ignore::RuntimeWarning"
]
markers = [
    "unit: marks tests as unit-tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration-tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow-tests (deselect with '-m \"not slow\"')",
    "concurrency: marks tests as concurrency-tests (deselect with '-m \"not concurrency\"')",
    "redis: marks tests as redis-tests (deselect with '-m \"not redis\"')",
    "e2e: marks tests as e2e-tests (deselect with '-m \"not e2e\"')",
]
addopts = [
    "-v",
    "-rfxP",
    "--cov",
    "--log-level=CRITICAL",
]

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
show_missing = true
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
omit = [
    "*conftest.py",
    "*abstract.py",
    "*__init__*",
    "*test*",
    "*.tox*",
]

[tool.black]
exclude = '''
    .tox*
'''

[tool.isort]
profile = "black"
py_version = 311
line_length = 88
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
skip_glob = [
    ".tox*"
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 88
indent-width = 4
target-version = "py311"
output-format = "full"
respect-gitignore = true

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F"]
ignore = []
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88


[tool.mypy]
python_version = 3.11
exclude = [
    "tests",
    "tests\\.py",
    "examples",
]
ignore_missing_imports = false
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
extra_checks = true
strict_equality = true
show_error_context = true
show_column_numbers = false
show_error_code_links = true
pretty = true
color_output = true
error_summary = true
force_uppercase_builtins = true
force_union_syntax = false
plugins = [

]

[tool.pyright]
include = ["eventscore"]
exclude = [
    "**/__pycache__",
    ".tox",
    "docs",
    "examples",
]
ignore = [
    ".tox",
    "docs",
    "examples",
    "tests",
]
defineConstant = { DEBUG = true }
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
deprecateTypingAliases = true
enableReachabilityAnalysis = true
disableBytesTypePromotions = true
typeCheckingMode = "strict"
reportMissingImports = "error"
reportGeneralTypeIssues = "error"
reportFunctionMemberAccess = "error"
reportMissingModuleSource = "error"
reportInvalidTypeForm = "error"
reportMissingTypeStubs = "error"
reportImportCycles = "error"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportDuplicateImport = "error"
reportWildcardImportFromLibrary = "error"
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallIssue = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidTypeArguments = "error"
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportRedeclaration = "error"
reportReturnType = "error"
reportTypedDictNotRequiredAccess = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
reportPrivateUsage = "error"
reportTypeCommentUsage = "error"
reportPrivateImportUsage = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"
reportMissingSuperCall = "none"
reportUninitializedInstanceVariable = "error"
reportInvalidStringEscapeSequence = "error"
reportUnknownParameterType = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownVariableType = "error"
reportUnknownMemberType = "error"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportAssertAlwaysTrue = "error"
reportSelfClsParameterName = "error"
reportImplicitStringConcatenation = "error"
reportUndefinedVariable = "error"
reportUnboundVariable = "error"
reportUnhashable = "error"
reportInvalidStubStatement = "error"
reportIncompleteStub = "error"
reportUnsupportedDunderAll = "error"
reportUnusedCallResult = "error"
reportUnusedCoroutine = "error"
reportUnusedExcept = "error"
reportUnusedExpression = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportMatchNotExhaustive = "error"
reportImplicitOverride = "none"
reportShadowedImports = "error"
pythonVersion = "3.11"
pythonPlatform = "Linux"
executionEnvironments = [
    { root = "." },
]

[tool.tox]
requires = ["tox>=4.24.2"]
env_list = [
    "3.13",
    "3.12",
    "3.11",
    "lint",
    "format",
    "sort",
    "analyze",
    "coveralls",
]

[tool.tox.env_run_base]
description = "Run test under {base_python}"
deps = [
    "pytest==8.2.1",
    "pytest-cov==5.0.0",
    "pytest-mock==3.14.0",
    "pytest-asyncio==0.23.5",
    "redis==5.2.1",
    "kafka-python==2.1.5",
    "python-dotenv>=1.1.0",
    "requests",
]
commands = [["pytest", "tests", "-m", "not redis and not slow and not e2e"]]  # FIXME

[tool.tox.env.lint]
description = "Run linters on code base"
deps = [
    "flake8==7.1.0",
    "ruff==0.11.2",
]
commands = [
    ["flake8", "--config", ".flake8", "."],
    ["ruff", "--config", "pyproject.toml", "check"],
]

[tool.tox.env.format]
description = "Run formatters on code base"
deps = [
    "black==24.4.2",
    "ruff==0.11.2",
]
commands = [
    ["black", "--config", "pyproject.toml", "--check", "."],
    #    ["ruff", "--config", "pyproject.toml", "format", "--check"],
]

[tool.tox.env.sort]
description = "Run sorters on code base"
deps = [
    "isort==5.13.2",
]
commands = [
    ["isort", "--profile", "black", "--filter-files", "--check", "."],
]

[tool.tox.env.analyze]
description = "Run analizers on code base"
deps = [
    "mypy==1.10.0",
    "pyright>=1.1.400",
    "redis==5.2.1",
    "kafka-python==2.1.5",
]
commands = [
    ["mypy", "--config-file", "pyproject.toml", "eventscore"],
    ["pyright", "eventscore"],
]

[tool.tox.env.coveralls]
passenv = [
    "GITHUB_*",
    "COVERALLS_*",
]
basepython = [
    "py312",
]
deps = [
    "{[env_run_base]deps}",
    "coverage==7.6.12",
    "coveralls==4.0.1",
]
commands = [
    ["coverage", "erase"],
    ["pytest", "tests", "-m", "not redis and not slow and not e2e"], # FIXME
    ["coverage", "report"],
    ["python", "-m", "pip", "install", "coveralls==4.0.1"],
    ["coveralls"],
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
