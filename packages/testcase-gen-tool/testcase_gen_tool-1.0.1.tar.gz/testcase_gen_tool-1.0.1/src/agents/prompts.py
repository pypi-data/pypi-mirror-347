# Chapter merging prompt
CHAPTER_MERGING_PROMPT = """请分析以下章节列表, 根据要求删减章节.

输入章节列表：
{chapters}

要求：
1. 如果这个章节和它的子章节都不涉及需求描述, 则仅保留最顶层章节.
2. 如果这个章节和它的子章节一起描述了同一个特性, 则仅保留最顶层章节.
3. 保持原有的JSON格式: [{{"title": "章节标题", "level": "章节级别"}}]
4. 确保返回的是合法的JSON格式
5. 请直接返回合并后的章节列表，不要包含其他说明文字。

章节级别定义示例:
{{title: "2.	前言", level: "2"}}
{{title: "2.1.	目的和对象", level: "2.1"}}
{{title: "2.2.	名词说明（非必填）", level: "2.2"}}
{{title: "2.3.	相关链接", level: "2.3"}}

合并过程示例：
给定下面章节列表(有省略)
2.	前言
2.1.	目的和对象
2.2.	名词说明（非必填）
2.3.	相关链接
...
5.7.	通话共享功能
5.7.1.	功能推荐栏提示
5.7.2.	电话接听和拨打
	5.7.2.1.	通话焦点
	5.7.2.2.	拨打逻辑
	5.7.2.3.	通话过程逻辑
	5.7.2.4.	接听逻辑
	5.7.2.5.	骚扰拦截相关
5.7.3.	功能适配和裁剪
5.7.4.	三方兼容

合并考虑
2.1, 2.2, 2.3 都不涉及需求描述, 所以删除, 只保留2. 前言
5.7.2.1, 5.7.2.2, 5.7.2.3, 5.7.2.4, 5.7.2.5 描述了同一个特性, 所以删除, 只保留5.7.2. 电话接听和拨打
5.7.1, 5.7.3, 5.7.4 涉及需求特性的描述, 所以保留
5.7 下面有需求特性子章节，所以保留

所以合并后的章节列表为：
2. 前言
5.7. 通话共享功能
5.7.1. 功能推荐栏提示
5.7.2. 电话接听和拨打
5.7.3. 功能适配和裁剪
5.7.4. 三方兼容
"""

# Prompts for requirement extraction and test case generation
EXTRACT_FORMALIZE_REQUIREMENT_PROMPT = """
你是一个需求分析专家. 你的任务是分析[章节]小节中的需求描述, 将其转换为形式化的需求清单(这些需求可能是功能性的、非功能性的, 或者包含约束条件). 在转换的过程中，你可以参考[全文摘要]中的内容。

[输出要求]
1. 如果无法从[章节]小节中识别出需求，请直接输出空列表 []
2. 如果可以从[章节]小节中识别出需求, 则将每个需求转换为形式化的规范, 直接输出JSON对象列表, 不要包含任何其他说明文字
3. 每个需求对象必须包含以下字段:
   - "title": 需求标题, 简明扼要地表达该需求的核心内容
   - "original": 原始需求描述, 保持原文不变
   - "formal": 形式化描述, 使用以下三种方法之一. 在选择的时候, 你要分别评估三种方式, 然后选择最优的.
     * 判定表: 适用于描述"多条件组合下的输出或行为"
     * 流程图: 适用于描述"顺序操作、分支、循环等流程"
     * 状态机: 适用于描述"系统状态的变化、事件驱动的行为"
     注意: 
      判定表采用markdown表格语法, 并说明哪些是输入参数, 哪些是输出参数, 以及他们的取值范围
      流程图和状态机用用mermaid语法, 并放在markdown代码块中, 并说明是流程图还是状态机
      换行采用\n符号, 不要直接换行, 避免JSON格式错误
   - "clarification_questions": 待澄清问题列表, 基于"五可六性"原则提出
   - "method": 选择的形式化方法
   - "reason": 选择该方法的理由
4. 遇到JSON字典中有换行符, 请使用\n表示换行符

[JSON格式要求]:
1. 输出必须是一个完整的JSON数组, 以 [ 开始, 以 ] 结束
2. 确保所有JSON对象和数组都正确闭合
3. 每个对象之间使用逗号分隔
4. 最后一个对象后不要加逗号
5. 确保所有字符串都使用双引号
6. 确保所有字段名都使用双引号
7. 确保所有数组元素都正确分隔
8. 不要包含任何非JSON格式的说明文字
9. 不要包含任何额外的换行或空格

[示例输出格式]
[
    {{
        "id": "REQ-001",
        "title": "用户登录",
        "original": "用户应能通过用户名和密码登录系统.",
        "formal": "```mermaid\nstateDiagram\n  [*] --> 输入用户名和密码\n  输入用户名和密码 --> 验证成功: 验证通过\n  验证成功 --> [*]: 进入系统\n```",
        "clarification_questions": [
            "如果用户输入错误的用户名或密码, 系统应如何反馈?",
            "登录失败是否有限制次数?",
            "是否支持多种登录方式(如手机号, 邮箱)?"
        ],
        "method": "状态机",
        "reason": "因为该需求描述了用户登录过程中的不同状态及其转换"
    }}
]

[章节]
章节标题：
{title}
章节内容: 
{content}

[全文摘要]
{overall_summary}
"""

# Test design method selection prompt
TEST_DESIGN_METHOD_SELECTION_PROMPT = """
基于以下形式化需求, 从以下三种测试设计方法中选择最合适的一种:
1. Flowchart (流程图)
2. State Machine (状态机)
3. Decision Table (判定表)

选择指南:
- Flowchart: 适用于描述顺序操作、分支、循环等流程
- State Machine: 适用于描述系统状态变化、事件驱动的行为
- Decision Table: 适用于描述多条件组合下的输出或行为

示例:
1. 流程图示例:
   ```mermaid
   flowchart TD
     A[开始] --> B[输入用户名密码]
     B --> C
     C -->|成功| D[登录]
     C -->|失败| B
     D --> E[结束]
   ```
   选择: Flowchart

2. 状态机示例:
   ```mermaid
   stateDiagram
     [*] --> 未登录
     未登录 --> 已登录: 登录成功
     已登录 --> 未登录: 登出
     已登录 --> [*]: 退出系统
   ```
   选择: State Machine

3. 判定表示例:
   ```
    # 输入参数
    | 参数名 | 取值范围 | 说明       |
    |--------|----------|------------|
    | a      | {0, 1}   | 控制标志位 |
    | b      | {Y, N}   | 状态标识   |
    
    # 输出参数
    | 参数名 | 取值范围         | 说明       |
    |--------|------------------|------------|
    | d      | {成功, 失败, 待定} | 执行结果   |

    # 判定表
    | a | b | d    |
    |---|---|------|
    | 0 | Y | 成功 |
    | 0 | N | 失败 |
    | 1 | Y | 待定 |
    | 1 | N | 失败 |
   ```
   选择: Decision Table

需求:
{requirement}

请只输出以下三个选项之一:
- Decision Table
- Flowchart
- State Machine

不要输出任何其他内容.
"""

TEST_CASE_GENERATION_PROMPT = """
使用 {method} 测试设计方法为以下需求生成测试用例.
请以JSON数组的形式输出测试用例, 每个测试用例对象必须包含以下字段:
1. "id": 用例编号, 格式为"TC-<需求ID{reqId}中的数字编号>-<用例编号>", 用例编号从001开始递增
2. "title": 测试用例标题, 反映测试意图
3. "preconditions": 预置条件列表, 每个条件包含序号和描述
4. "steps": 测试步骤列表, 每个步骤包含序号和描述
5. "expected_results": 预期结果列表, 每个结果必须与对应步骤的序号一致
6. "related_requirement": 关联的需求信息, 包含需求ID和标题
7. "strategy": 用例生成的策略

[用例设计指导]
- 如果形式化需求采用"流程图", 请根据流程的每一条主路径, 分支, 循环等, 设计覆盖所有流程分支和异常路径的测试用例.
- 如果形式化需求采用"状态机", 请根据所有状态及状态转移, 设计覆盖每个状态变化, 边界状态, 异常状态的测试用例.
- 如果形式化需求采用"判定表", 请根据判定表中的每一组条件组合, 设计覆盖所有条件组合和输出的测试用例.


[预期结果编号规则]
- 每个预期结果必须与对应步骤的序号完全一致
- 如果一个步骤有多个预期结果, 使用相同的步骤序号
- 预期结果的序号必须与步骤的序号一一对应

[JSON格式要求]
1. 输出必须是一个完整的JSON数组, 以 [ 开始, 以 ] 结束
2. 确保所有JSON对象和数组都正确闭合
3. 每个对象之间使用逗号分隔
4. 最后一个对象后不要加逗号
5. 确保所有字符串都使用双引号
6. 确保所有字段名都使用双引号
7. 确保所有数组元素都正确分隔
8. 不要包含任何非JSON格式的说明文字
9. 不要包含任何markdown格式标记
10. 不要包含任何额外的换行或空格

[示例输出]
[
  {{
    "id": "TC-001-002",
    "title": "验证用户登录功能",
    "preconditions": ["1. 用户已注册"],
    "steps": [
      "1. 输入正确的用户名和密码",
      "2. 点击登录按钮"
    ],
    "expected_results": [
      "1. 用户名和密码输入框显示输入的内容",
      "2. 系统验证通过, 用户成功登录并进入主页"
    ],
    "related_requirement": {{
      "id": "REQ-001",
      "title": "用户登录"
    }},
    "strategy": "流程图"
  }},
  {{
    "id": "TC-001-002",
    "title": "验证登录失败场景",
    "preconditions": ["1. 用户已注册"],
    "steps": [
      "1. 输入错误的用户名和密码",
      "2. 点击登录按钮"
    ],
    "expected_results": [
      "1. 用户名和密码输入框显示输入的内容",
      "2. 系统显示登录失败提示信息"
    ],
    "related_requirement": {{
      "id": "REQ-001",
      "title": "用户登录"
    }},
    "strategy": "流程图"
  }}
]

[要生成用例的需求]
需求ID: 
{reqId}
需求标题: 
{reqTitle}
需求形式化描述:
{reqFormal}

[测试用例]
请确保输出完整的JSON数组, 包含所有测试用例, 并确保JSON格式正确. 不要包含任何其他说明文字.
"""

# Prompt for extracting chapter titles and levels
CHAPTER_EXTRACTION_PROMPT = """
请从下方文本中识别所有章节标题及其层级(如1, 1.1, 2等), 并以结构化JSON数组返回. 每个元素包含:
- "title": 章节标题(必须与原文完全一致, 不得有任何改动, 修饰或补充)
- "level": 章节层级编号(如"1", "1.1", "2"等)

要求:
- 只提取章节标题和层级, 不要正文内容.
- "title" 字段内容必须与原文一模一样, 不能有任何改动, 补充或省略.
- 保持顺序与原文一致, 去重.
- 支持中英文章节标题.

[示例输出]:
[
  {{"title": "1 总则", "level": "1"}},
  {{"title": "1.1 范围", "level": "1.1"}},
  {{"title": "2 技术要求", "level": "2"}},
  {{"title": "3 General", "level": "3"}},
  {{"title": "3.1 Scope", "level": "3.1"}}
]

[输入文本]:
{chunk}

[章节输出]:
直接输出JSON数组, 不要包含任何其他说明文字.
"""

# Prompt for generating summary
SUMMARY_PROMPT = """
理解给定的章节内容, 生成该章节想要表述的需求内容概述.
如果涉及到多个需求表述, 则一条条列出.

[示例输入]:


[示例输出]:
支持用户凭用户名和密码登录, 登录后可访问个人主页和设置.

[输入内容]:
{content}

[摘要输出]:
直接输出理解的需求内容, 不要包含任何其他说明文字.
""" 