# Generated by ariadne-codegen
# Source: http://api:8080/v1/graphql

from enum import Enum


class agent_shift_generated_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    ended_at = "ended_at"
    hash = "hash"
    organization_name = "organization_name"
    started_at = "started_at"
    total_hours = "total_hours"
    updated_at = "updated_at"


class agent_shift_overrides_constraint(str, Enum):
    agent_shift_overrides_pkey = "agent_shift_overrides_pkey"
    agent_shift_overrides_unique = "agent_shift_overrides_unique"


class agent_shift_overrides_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    ended_at = "ended_at"
    hash = "hash"
    id = "id"
    organization_name = "organization_name"
    started_at = "started_at"
    total_hours = "total_hours"
    updated_at = "updated_at"


class agent_shift_overrides_update_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    ended_at = "ended_at"
    id = "id"
    organization_name = "organization_name"
    started_at = "started_at"
    updated_at = "updated_at"


class agent_shifts_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    ended_at = "ended_at"
    hash = "hash"
    organization_name = "organization_name"
    override_id = "override_id"
    started_at = "started_at"
    total_hours = "total_hours"
    updated_at = "updated_at"


class announcements_constraint(str, Enum):
    announcements_pkey = "announcements_pkey"


class announcements_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    ends_at = "ends_at"
    id = "id"
    is_dismissable = "is_dismissable"
    message_desktop = "message_desktop"
    message_mobile = "message_mobile"
    starts_at = "starts_at"
    theme = "theme"


class announcements_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    ends_at = "ends_at"
    id = "id"
    is_dismissable = "is_dismissable"
    message_desktop = "message_desktop"
    message_mobile = "message_mobile"
    starts_at = "starts_at"
    theme = "theme"


class auth_api_keys_constraint(str, Enum):
    api_keys_pkey = "api_keys_pkey"


class auth_api_keys_select_column(str, Enum):
    access_key_id = "access_key_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    expires_at = "expires_at"
    last_used_at = "last_used_at"
    notes = "notes"
    organization_name = "organization_name"
    secret_access_key = "secret_access_key"
    user_id = "user_id"


class auth_api_keys_update_column(str, Enum):
    access_key_id = "access_key_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    expires_at = "expires_at"
    last_used_at = "last_used_at"
    notes = "notes"
    organization_name = "organization_name"
    secret_access_key = "secret_access_key"
    user_id = "user_id"


class billing_units_constraint(str, Enum):
    billing_units_pkey = "billing_units_pkey"


class billing_units_select_column(str, Enum):
    comment = "comment"
    label = "label"
    label_abbrev = "label_abbrev"
    label_plural = "label_plural"
    label_singular = "label_singular"
    value = "value"


class billing_units_update_column(str, Enum):
    comment = "comment"
    label = "label"
    label_abbrev = "label_abbrev"
    label_plural = "label_plural"
    label_singular = "label_singular"
    value = "value"


class catalogs_constraint(str, Enum):
    catalogs_organization_id_title_idx = "catalogs_organization_id_title_idx"
    catalogs_pkey = "catalogs_pkey"


class catalogs_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class catalogs_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    notesj = "notesj"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class combined_logs_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    ended_at = "ended_at"
    expense_log_id = "expense_log_id"
    expense_total_cents = "expense_total_cents"
    expensed_at = "expensed_at"
    id = "id"
    invoice_id = "invoice_id"
    notesj = "notesj"
    product_id = "product_id"
    started_at = "started_at"
    ticket_id = "ticket_id"
    travel_ended_at = "travel_ended_at"
    travel_hours = "travel_hours"
    travel_hours_unit_price_cents = "travel_hours_unit_price_cents"
    travel_log_id = "travel_log_id"
    travel_miles = "travel_miles"
    travel_miles_unit_price_cents = "travel_miles_unit_price_cents"
    travel_started_at = "travel_started_at"
    updated_at = "updated_at"
    work_ended_at = "work_ended_at"
    work_hours = "work_hours"
    work_log_id = "work_log_id"
    work_site_id = "work_site_id"
    work_started_at = "work_started_at"


class cursor_ordering(str, Enum):
    ASC = "ASC"
    DESC = "DESC"


class custom_form_definitions_constraint(str, Enum):
    custom_form_definitions_organization_id_component_name_idx = (
        "custom_form_definitions_organization_id_component_name_idx"
    )
    custom_form_definitions_organization_id_title_key = (
        "custom_form_definitions_organization_id_title_key"
    )
    custom_form_definitions_pkey = "custom_form_definitions_pkey"


class custom_form_definitions_select_column(str, Enum):
    author_id = "author_id"
    can_import_from_definition_id = "can_import_from_definition_id"
    component_name = "component_name"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class custom_form_definitions_update_column(str, Enum):
    author_id = "author_id"
    can_import_from_definition_id = "can_import_from_definition_id"
    component_name = "component_name"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class custom_form_domains_constraint(str, Enum):
    custom_form_domains_pkey = "custom_form_domains_pkey"


class custom_form_domains_select_column(str, Enum):
    created_at = "created_at"
    domain = "domain"
    last_used_at = "last_used_at"
    organization_name = "organization_name"
    token = "token"


class custom_form_domains_update_column(str, Enum):
    created_at = "created_at"
    domain = "domain"
    last_used_at = "last_used_at"
    organization_name = "organization_name"
    token = "token"


class customer_agents_constraint(str, Enum):
    customer_agents_pkey = "customer_agents_pkey"


class customer_agents_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    dedicated_since = "dedicated_since"
    deleted_at = "deleted_at"
    updated_at = "updated_at"


class customer_agents_update_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    dedicated_since = "dedicated_since"
    deleted_at = "deleted_at"
    updated_at = "updated_at"


class customer_contacts_constraint(str, Enum):
    customer_contacts_pkey = "customer_contacts_pkey"


class customer_contacts_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    job_title = "job_title"
    updated_at = "updated_at"
    user_id = "user_id"


class customer_contacts_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    job_title = "job_title"
    updated_at = "updated_at"
    user_id = "user_id"


class customer_contracts_constraint(str, Enum):
    customer_contracts_pkey = "customer_contracts_pkey"


class customer_contracts_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    id = "id"
    ruleset_id = "ruleset_id"
    title = "title"
    updated_at = "updated_at"
    valid_from = "valid_from"


class customer_contracts_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    id = "id"
    ruleset_id = "ruleset_id"
    title = "title"
    updated_at = "updated_at"
    valid_from = "valid_from"


class customer_ledgers_constraint(str, Enum):
    customer_ledgers_pkey = "customer_ledgers_pkey"


class customer_ledgers_select_column(str, Enum):
    cents_credit = "cents_credit"
    cents_debit = "cents_debit"
    created_at = "created_at"
    customer_id = "customer_id"
    id = "id"


class customer_ledgers_update_column(str, Enum):
    cents_credit = "cents_credit"
    cents_debit = "cents_debit"
    created_at = "created_at"
    customer_id = "customer_id"
    id = "id"


class customer_payments_constraint(str, Enum):
    payments_pkey = "payments_pkey"


class customer_payments_select_column(str, Enum):
    amount_in_cents = "amount_in_cents"
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    paid_at = "paid_at"
    updated_at = "updated_at"


class customer_payments_update_column(str, Enum):
    amount_in_cents = "amount_in_cents"
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    id = "id"
    notesj = "notesj"
    paid_at = "paid_at"
    updated_at = "updated_at"


class customer_timezone_history_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    timezone_name = "timezone_name"
    valid_from = "valid_from"


class customers_constraint(str, Enum):
    customers_organization_id_title_idx = "customers_organization_id_title_idx"
    customers_pkey = "customers_pkey"
    customers_unique_abbreviations = "customers_unique_abbreviations"
    customers_unique_external_ids = "customers_unique_external_ids"


class customers_select_column(str, Enum):
    abbreviation = "abbreviation"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    external_id = "external_id"
    id = "id"
    invoice_pivot = "invoice_pivot"
    invoice_terms = "invoice_terms"
    mailing_address = "mailing_address"
    organization_name = "organization_name"
    price_book_id = "price_book_id"
    requires_signature = "requires_signature"
    title = "title"
    updated_at = "updated_at"


class customers_select_column_customers_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    requires_signature = "requires_signature"


class customers_select_column_customers_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    requires_signature = "requires_signature"


class customers_update_column(str, Enum):
    abbreviation = "abbreviation"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    external_id = "external_id"
    id = "id"
    invoice_pivot = "invoice_pivot"
    invoice_terms = "invoice_terms"
    mailing_address = "mailing_address"
    organization_name = "organization_name"
    price_book_id = "price_book_id"
    requires_signature = "requires_signature"
    title = "title"
    updated_at = "updated_at"


class customers_xref_work_sites_constraint(str, Enum):
    customers_xref_work_sites_pkey = "customers_xref_work_sites_pkey"


class customers_xref_work_sites_select_column(str, Enum):
    accounting_id = "accounting_id"
    created_at = "created_at"
    customer_id = "customer_id"
    ended_at = "ended_at"
    id = "id"
    started_at = "started_at"
    work_site_id = "work_site_id"


class customers_xref_work_sites_update_column(str, Enum):
    accounting_id = "accounting_id"
    created_at = "created_at"
    customer_id = "customer_id"
    ended_at = "ended_at"
    id = "id"
    started_at = "started_at"
    work_site_id = "work_site_id"


class delivery_statuses_constraint(str, Enum):
    delivery_statuses_pkey = "delivery_statuses_pkey"


class delivery_statuses_enum(str, Enum):
    DRAFT = "DRAFT"
    SENT = "SENT"
    WILL_NOT_SEND = "WILL_NOT_SEND"


class delivery_statuses_select_column(str, Enum):
    comment = "comment"
    value = "value"


class delivery_statuses_update_column(str, Enum):
    comment = "comment"
    value = "value"


class demand_order_event_types_constraint(str, Enum):
    order_event_types_pkey = "order_event_types_pkey"


class demand_order_event_types_select_column(str, Enum):
    comment = "comment"
    value = "value"


class demand_order_event_types_update_column(str, Enum):
    comment = "comment"
    value = "value"


class demand_order_events_constraint(str, Enum):
    order_events_pkey = "order_events_pkey"


class demand_order_events_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    event_type = "event_type"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    order_id = "order_id"


class demand_order_events_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    event_type = "event_type"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    order_id = "order_id"


class demand_order_items_constraint(str, Enum):
    order_items_pkey = "order_items_pkey"


class demand_order_items_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    notes = "notes"
    order_id = "order_id"
    product_id = "product_id"
    product_unconfirmed = "product_unconfirmed"
    requires_signature = "requires_signature"
    updated_at = "updated_at"
    work_site_id = "work_site_id"


class demand_order_items_select_column_demand_order_items_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    requires_signature = "requires_signature"


class demand_order_items_select_column_demand_order_items_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    requires_signature = "requires_signature"


class demand_order_items_update_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    notes = "notes"
    order_id = "order_id"
    product_id = "product_id"
    product_unconfirmed = "product_unconfirmed"
    requires_signature = "requires_signature"
    updated_at = "updated_at"
    work_site_id = "work_site_id"


class demand_orders_constraint(str, Enum):
    work_orders_organization_id_ref_idx = "work_orders_organization_id_ref_idx"
    work_orders_pkey = "work_orders_pkey"


class demand_orders_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    created_from_quote_id = "created_from_quote_id"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    id = "id"
    lifecycle_status = "lifecycle_status"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    ref = "ref"
    requesting_party = "requesting_party"
    service_date_end = "service_date_end"
    service_date_start = "service_date_start"
    updated_at = "updated_at"


class demand_orders_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    created_from_quote_id = "created_from_quote_id"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    id = "id"
    lifecycle_status = "lifecycle_status"
    notesj = "notesj"
    organization_name = "organization_name"
    ref = "ref"
    requesting_party = "requesting_party"
    service_date_end = "service_date_end"
    service_date_start = "service_date_start"
    updated_at = "updated_at"


class event_notifications_constraint(str, Enum):
    event_notifications_pkey = "event_notifications_pkey"


class event_notifications_select_column(str, Enum):
    context = "context"
    created_at = "created_at"
    event_id = "event_id"
    event_type = "event_type"
    organization_name = "organization_name"
    payload = "payload"


class event_notifications_update_column(str, Enum):
    context = "context"
    created_at = "created_at"
    event_id = "event_id"
    organization_name = "organization_name"
    payload = "payload"


class event_types_constraint(str, Enum):
    event_types_pkey = "event_types_pkey"


class event_types_select_column(str, Enum):
    comment = "comment"
    feature_flag = "feature_flag"
    value = "value"


class event_types_update_column(str, Enum):
    comment = "comment"
    feature_flag = "feature_flag"
    value = "value"


class expense_logs_constraint(str, Enum):
    expense_logs_pkey = "expense_logs_pkey"


class expense_logs_select_column(str, Enum):
    author_id = "author_id"
    cents_recorded = "cents_recorded"
    created_at = "created_at"
    deleted_at = "deleted_at"
    expense_type = "expense_type"
    expensed_at = "expensed_at"
    id = "id"
    invoice_id = "invoice_id"
    is_external = "is_external"
    notes = "notes"
    notesj = "notesj"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class expense_logs_select_column_expense_logs_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    is_external = "is_external"


class expense_logs_select_column_expense_logs_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    is_external = "is_external"


class expense_logs_update_column(str, Enum):
    author_id = "author_id"
    cents_recorded = "cents_recorded"
    created_at = "created_at"
    deleted_at = "deleted_at"
    expense_type = "expense_type"
    expensed_at = "expensed_at"
    id = "id"
    invoice_id = "invoice_id"
    is_external = "is_external"
    notesj = "notesj"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class expense_types_constraint(str, Enum):
    expense_types_pkey = "expense_types_pkey"


class expense_types_enum(str, Enum):
    FOOD = "FOOD"
    LODGING = "LODGING"
    PARTS = "PARTS"
    PER_DIEM = "PER_DIEM"
    TRAVEL = "TRAVEL"


class expense_types_select_column(str, Enum):
    comment = "comment"
    value = "value"


class expense_types_update_column(str, Enum):
    comment = "comment"
    value = "value"


class feature_flags_constraint(str, Enum):
    flags_comment_key = "flags_comment_key"
    flags_pkey = "flags_pkey"


class feature_flags_enum(str, Enum):
    API_ACCESS = "API_ACCESS"
    CUSTOMER_ACCESS = "CUSTOMER_ACCESS"
    QUOTE = "QUOTE"


class feature_flags_select_column(str, Enum):
    comment = "comment"
    value = "value"


class feature_flags_update_column(str, Enum):
    comment = "comment"
    value = "value"


class interfaces_activity_day_totals_select_column(str, Enum):
    day = "day"
    dow = "dow"
    expense_total_cents = "expense_total_cents"
    logs = "logs"
    total_hours = "total_hours"
    travel_hours = "travel_hours"
    travel_miles = "travel_miles"
    work_hours = "work_hours"


class interfaces_api_token_pair_constraint(str, Enum):
    api_token_pair_pkey = "api_token_pair_pkey"


class interfaces_api_token_pair_select_column(str, Enum):
    access_key = "access_key"
    secret_key = "secret_key"


class interfaces_api_token_pair_update_column(str, Enum):
    access_key = "access_key"
    secret_key = "secret_key"


class interfaces_billing_totals_select_column(str, Enum):
    day_rate_cents = "day_rate_cents"
    labor_hour_cents = "labor_hour_cents"
    mileage_cents = "mileage_cents"
    overtime_hour_cents = "overtime_hour_cents"
    subtotal_cents = "subtotal_cents"
    travel_hour_cents = "travel_hour_cents"


class interfaces_daily_logs_summary_select_column(str, Enum):
    author_id = "author_id"
    day_of_week = "day_of_week"
    day_started_at = "day_started_at"
    expense_log_ids = "expense_log_ids"
    expense_total_cents = "expense_total_cents"
    ticket_ids = "ticket_ids"
    total_hours = "total_hours"
    travel_hours = "travel_hours"
    travel_log_ids = "travel_log_ids"
    travel_miles = "travel_miles"
    work_hours = "work_hours"
    work_log_ids = "work_log_ids"


class interfaces_logs_by_interval_select_column(str, Enum):
    author_id = "author_id"
    billing_timezone = "billing_timezone"
    created_at = "created_at"
    customer_id = "customer_id"
    day_of_week = "day_of_week"
    deleted_at = "deleted_at"
    ended_at = "ended_at"
    expense_log_id = "expense_log_id"
    expense_total_cents = "expense_total_cents"
    expensed_at = "expensed_at"
    id = "id"
    log_ended_at = "log_ended_at"
    log_hours = "log_hours"
    log_started_at = "log_started_at"
    organization_name = "organization_name"
    product_id = "product_id"
    span_ended_at = "span_ended_at"
    span_hours = "span_hours"
    span_started_at = "span_started_at"
    started_at = "started_at"
    ticket_id = "ticket_id"
    total_hours = "total_hours"
    travel_ended_at = "travel_ended_at"
    travel_hours = "travel_hours"
    travel_log_id = "travel_log_id"
    travel_miles = "travel_miles"
    travel_started_at = "travel_started_at"
    updated_at = "updated_at"
    work_ended_at = "work_ended_at"
    work_hours = "work_hours"
    work_log_id = "work_log_id"
    work_site_id = "work_site_id"
    work_started_at = "work_started_at"


class interfaces_time_sheet_entries_select_column(str, Enum):
    afe_numbers = "afe_numbers"
    author_id = "author_id"
    cost_center = "cost_center"
    customer_id = "customer_id"
    ended_at = "ended_at"
    invoice_days = "invoice_days"
    overtime_hours = "overtime_hours"
    product_id = "product_id"
    started_at = "started_at"
    ticket_ids = "ticket_ids"
    total_hours = "total_hours"
    travel_log_ids = "travel_log_ids"
    travel_miles = "travel_miles"
    work_log_ids = "work_log_ids"
    work_site_id = "work_site_id"


class invoice_ledgers_constraint(str, Enum):
    invoice_ledgers_pkey = "invoice_ledgers_pkey"


class invoice_ledgers_select_column(str, Enum):
    cents_credit = "cents_credit"
    cents_debit = "cents_debit"
    created_at = "created_at"
    id = "id"
    invoice_id = "invoice_id"


class invoice_ledgers_update_column(str, Enum):
    cents_credit = "cents_credit"
    cents_debit = "cents_debit"
    created_at = "created_at"
    id = "id"
    invoice_id = "invoice_id"


class invoice_line_items_constraint(str, Enum):
    invoice_line_items_pkey = "invoice_line_items_pkey"


class invoice_line_items_select_column(str, Enum):
    author_id = "author_id"
    cents_calculated = "cents_calculated"
    cents_invoiced = "cents_invoiced"
    created_at = "created_at"
    deleted_at = "deleted_at"
    description = "description"
    details = "details"
    id = "id"
    invoice_id = "invoice_id"
    label = "label"
    updated_at = "updated_at"


class invoice_line_items_update_column(str, Enum):
    author_id = "author_id"
    cents_calculated = "cents_calculated"
    cents_invoiced = "cents_invoiced"
    created_at = "created_at"
    deleted_at = "deleted_at"
    description = "description"
    details = "details"
    id = "id"
    invoice_id = "invoice_id"
    label = "label"
    updated_at = "updated_at"


class invoice_payments_constraint(str, Enum):
    invoice_payments_pkey = "invoice_payments_pkey"


class invoice_payments_select_column(str, Enum):
    amount_in_cents = "amount_in_cents"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    invoice_id = "invoice_id"
    notes = "notes"
    notesj = "notesj"
    paid_at = "paid_at"
    updated_at = "updated_at"


class invoice_payments_update_column(str, Enum):
    amount_in_cents = "amount_in_cents"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    invoice_id = "invoice_id"
    notesj = "notesj"
    paid_at = "paid_at"
    updated_at = "updated_at"


class invoice_pivot_options_constraint(str, Enum):
    invoice_pivot_options_pkey = "invoice_pivot_options_pkey"


class invoice_pivot_options_enum(str, Enum):
    BY_AGENT = "BY_AGENT"
    BY_TICKET = "BY_TICKET"
    BY_WORK_ORDER = "BY_WORK_ORDER"
    NONE = "NONE"


class invoice_pivot_options_select_column(str, Enum):
    comment = "comment"
    value = "value"


class invoice_pivot_options_update_column(str, Enum):
    comment = "comment"
    value = "value"


class invoices_constraint(str, Enum):
    invoices_organization_id_ref_idx = "invoices_organization_id_ref_idx"
    invoices_pkey = "invoices_pkey"


class invoices_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    delivery_status = "delivery_status"
    due_at = "due_at"
    due_in = "due_in"
    id = "id"
    issued_at = "issued_at"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    paid_at = "paid_at"
    payment_status = "payment_status"
    po_number = "po_number"
    ref = "ref"
    sent_at = "sent_at"
    subject = "subject"
    total_cost_in_cents = "total_cost_in_cents"
    updated_at = "updated_at"


class invoices_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    delivery_status = "delivery_status"
    due_in = "due_in"
    id = "id"
    issued_at = "issued_at"
    notesj = "notesj"
    organization_name = "organization_name"
    paid_at = "paid_at"
    payment_status = "payment_status"
    po_number = "po_number"
    ref = "ref"
    sent_at = "sent_at"
    subject = "subject"
    total_cost_in_cents = "total_cost_in_cents"
    updated_at = "updated_at"


class lifecycle_statuses_constraint(str, Enum):
    work_order_statuses_pkey = "work_order_statuses_pkey"


class lifecycle_statuses_enum(str, Enum):
    CLOSED = "CLOSED"
    EXPIRING = "EXPIRING"
    GRACE = "GRACE"
    OPEN = "OPEN"
    PENDING = "PENDING"


class lifecycle_statuses_select_column(str, Enum):
    comment = "comment"
    value = "value"


class lifecycle_statuses_update_column(str, Enum):
    comment = "comment"
    value = "value"


class media_uploads_constraint(str, Enum):
    media_upload_author_id_url_key = "media_upload_author_id_url_key"
    media_upload_pkey = "media_upload_pkey"


class media_uploads_select_column(str, Enum):
    author_id = "author_id"
    caption = "caption"
    content_size = "content_size"
    content_type = "content_type"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    expense_log_id = "expense_log_id"
    id = "id"
    invoice_id = "invoice_id"
    organization_name = "organization_name"
    orig_filename = "orig_filename"
    product_id = "product_id"
    quote_event_id = "quote_event_id"
    quote_id = "quote_id"
    ticket_custom_form_entry_id = "ticket_custom_form_entry_id"
    ticket_id = "ticket_id"
    travel_log_id = "travel_log_id"
    updated_at = "updated_at"
    url = "url"
    work_log_id = "work_log_id"
    work_order_id = "work_order_id"
    work_site_id = "work_site_id"


class media_uploads_update_column(str, Enum):
    author_id = "author_id"
    caption = "caption"
    content_size = "content_size"
    content_type = "content_type"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    expense_log_id = "expense_log_id"
    id = "id"
    invoice_id = "invoice_id"
    organization_name = "organization_name"
    orig_filename = "orig_filename"
    product_id = "product_id"
    quote_event_id = "quote_event_id"
    quote_id = "quote_id"
    ticket_custom_form_entry_id = "ticket_custom_form_entry_id"
    ticket_id = "ticket_id"
    travel_log_id = "travel_log_id"
    updated_at = "updated_at"
    url = "url"
    work_log_id = "work_log_id"
    work_order_id = "work_order_id"
    work_site_id = "work_site_id"


class media_xref_expense_logs_constraint(str, Enum):
    xref_expense_logs_pkey = "xref_expense_logs_pkey"


class media_xref_expense_logs_select_column(str, Enum):
    expense_log_id = "expense_log_id"
    upload_id = "upload_id"


class media_xref_expense_logs_update_column(str, Enum):
    expense_log_id = "expense_log_id"
    upload_id = "upload_id"


class media_xref_invoices_constraint(str, Enum):
    xref_invoices_pkey = "xref_invoices_pkey"


class media_xref_invoices_select_column(str, Enum):
    invoice_id = "invoice_id"
    upload_id = "upload_id"


class media_xref_invoices_update_column(str, Enum):
    invoice_id = "invoice_id"
    upload_id = "upload_id"


class media_xref_products_constraint(str, Enum):
    xref_products_pkey = "xref_products_pkey"


class media_xref_products_select_column(str, Enum):
    product_id = "product_id"
    upload_id = "upload_id"


class media_xref_products_update_column(str, Enum):
    product_id = "product_id"
    upload_id = "upload_id"


class media_xref_quote_events_constraint(str, Enum):
    xref_quote_events_pkey = "xref_quote_events_pkey"


class media_xref_quote_events_select_column(str, Enum):
    quote_event_id = "quote_event_id"
    upload_id = "upload_id"


class media_xref_quote_events_update_column(str, Enum):
    quote_event_id = "quote_event_id"
    upload_id = "upload_id"


class media_xref_quotes_constraint(str, Enum):
    xref_quotes_pkey = "xref_quotes_pkey"


class media_xref_quotes_select_column(str, Enum):
    quote_id = "quote_id"
    upload_id = "upload_id"


class media_xref_quotes_update_column(str, Enum):
    quote_id = "quote_id"
    upload_id = "upload_id"


class media_xref_ticket_custom_form_entries_constraint(str, Enum):
    xref_ticket_custom_form_entries_pkey = "xref_ticket_custom_form_entries_pkey"


class media_xref_ticket_custom_form_entries_select_column(str, Enum):
    ticket_custom_form_entry_id = "ticket_custom_form_entry_id"
    upload_id = "upload_id"


class media_xref_ticket_custom_form_entries_update_column(str, Enum):
    ticket_custom_form_entry_id = "ticket_custom_form_entry_id"
    upload_id = "upload_id"


class media_xref_tickets_constraint(str, Enum):
    xref_tickets_pkey = "xref_tickets_pkey"


class media_xref_tickets_select_column(str, Enum):
    ticket_id = "ticket_id"
    upload_id = "upload_id"


class media_xref_tickets_update_column(str, Enum):
    ticket_id = "ticket_id"
    upload_id = "upload_id"


class media_xref_travel_logs_constraint(str, Enum):
    xref_travel_logs_pkey = "xref_travel_logs_pkey"


class media_xref_travel_logs_select_column(str, Enum):
    travel_log_id = "travel_log_id"
    upload_id = "upload_id"


class media_xref_travel_logs_update_column(str, Enum):
    travel_log_id = "travel_log_id"
    upload_id = "upload_id"


class media_xref_work_logs_constraint(str, Enum):
    xref_work_logs_pkey = "xref_work_logs_pkey"


class media_xref_work_logs_select_column(str, Enum):
    upload_id = "upload_id"
    work_log_id = "work_log_id"


class media_xref_work_logs_update_column(str, Enum):
    upload_id = "upload_id"
    work_log_id = "work_log_id"


class media_xref_work_orders_constraint(str, Enum):
    xref_work_orders_pkey = "xref_work_orders_pkey"


class media_xref_work_orders_select_column(str, Enum):
    upload_id = "upload_id"
    work_order_id = "work_order_id"


class media_xref_work_orders_update_column(str, Enum):
    upload_id = "upload_id"
    work_order_id = "work_order_id"


class notification_prefs_constraint(str, Enum):
    notification_prefs_pkey = "notification_prefs_pkey"
    notification_prefs_user_id_notif_type_key = (
        "notification_prefs_user_id_notif_type_key"
    )


class notification_prefs_select_column(str, Enum):
    created_at = "created_at"
    deleted_at = "deleted_at"
    email_enabled = "email_enabled"
    id = "id"
    push_enabled = "push_enabled"
    type = "type"
    updated_at = "updated_at"
    user_id = "user_id"


class notification_prefs_select_column_notification_prefs_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    email_enabled = "email_enabled"
    push_enabled = "push_enabled"


class notification_prefs_select_column_notification_prefs_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    email_enabled = "email_enabled"
    push_enabled = "push_enabled"


class notification_prefs_update_column(str, Enum):
    created_at = "created_at"
    deleted_at = "deleted_at"
    email_enabled = "email_enabled"
    id = "id"
    push_enabled = "push_enabled"
    type = "type"
    updated_at = "updated_at"
    user_id = "user_id"


class oauth_providers_constraint(str, Enum):
    oauth_providers_pkey = "oauth_providers_pkey"


class oauth_providers_enum(str, Enum):
    quickbooks = "quickbooks"


class oauth_providers_select_column(str, Enum):
    comment = "comment"
    value = "value"


class oauth_providers_update_column(str, Enum):
    comment = "comment"
    value = "value"


class order_by(str, Enum):
    asc = "asc"
    asc_nulls_first = "asc_nulls_first"
    asc_nulls_last = "asc_nulls_last"
    desc = "desc"
    desc_nulls_first = "desc_nulls_first"
    desc_nulls_last = "desc_nulls_last"


class org_roles_constraint(str, Enum):
    roles_organization_name_title_key = "roles_organization_name_title_key"
    roles_pkey = "roles_pkey"


class org_roles_select_column(str, Enum):
    created_at = "created_at"
    customer_contacts_only = "customer_contacts_only"
    id = "id"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class org_roles_update_column(str, Enum):
    created_at = "created_at"
    customer_contacts_only = "customer_contacts_only"
    id = "id"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class org_users_xref_roles_constraint(str, Enum):
    users_xref_roles_pkey = "users_xref_roles_pkey"


class org_users_xref_roles_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    organization_name = "organization_name"
    role_id = "role_id"
    user_id = "user_id"


class org_users_xref_roles_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    organization_name = "organization_name"
    role_id = "role_id"
    user_id = "user_id"


class org_xref_feature_flags_constraint(str, Enum):
    xref_feature_flags_pkey = "xref_feature_flags_pkey"


class org_xref_feature_flags_select_column(str, Enum):
    feature_flag = "feature_flag"
    organization_name = "organization_name"


class org_xref_feature_flags_update_column(str, Enum):
    feature_flag = "feature_flag"
    organization_name = "organization_name"


class organization_agent_prices_constraint(str, Enum):
    organization_agent_prices_organization_name_agent_id_valid__key = (
        "organization_agent_prices_organization_name_agent_id_valid__key"
    )
    organization_agent_prices_pkey = "organization_agent_prices_pkey"


class organization_agent_prices_select_column(str, Enum):
    agent_id = "agent_id"
    created_at = "created_at"
    day_rate_cents = "day_rate_cents"
    hourly_rate_cents = "hourly_rate_cents"
    id = "id"
    organization_name = "organization_name"
    valid_from = "valid_from"


class organization_agent_prices_update_column(str, Enum):
    agent_id = "agent_id"
    created_at = "created_at"
    day_rate_cents = "day_rate_cents"
    hourly_rate_cents = "hourly_rate_cents"
    id = "id"
    organization_name = "organization_name"
    valid_from = "valid_from"


class organization_agents_constraint(str, Enum):
    organization_agents_pkey = "organization_agents_pkey"


class organization_agents_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    drivers_license_expiration = "drivers_license_expiration"
    drivers_license_number = "drivers_license_number"
    drivers_license_state = "drivers_license_state"
    employee_id = "employee_id"
    eula_accepted_at = "eula_accepted_at"
    member_type = "member_type"
    organization_name = "organization_name"
    updated_at = "updated_at"


class organization_agents_update_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    drivers_license_expiration = "drivers_license_expiration"
    drivers_license_number = "drivers_license_number"
    drivers_license_state = "drivers_license_state"
    employee_id = "employee_id"
    eula_accepted_at = "eula_accepted_at"
    member_type = "member_type"
    organization_name = "organization_name"
    updated_at = "updated_at"


class organization_timezone_history_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    organization_name = "organization_name"
    timezone_name = "timezone_name"
    valid_from = "valid_from"


class organizations_constraint(str, Enum):
    organizations_pkey = "organizations_pkey"
    organizations_short_name_key = "organizations_short_name_key"
    organizations_title_key = "organizations_title_key"


class organizations_select_column(str, Enum):
    accent_color = "accent_color"
    created_at = "created_at"
    default_agent_day_rate_cents = "default_agent_day_rate_cents"
    default_invoice_net_term = "default_invoice_net_term"
    default_invoice_pivot = "default_invoice_pivot"
    deleted_at = "deleted_at"
    id = "id"
    invoice_template_above_line_items = "invoice_template_above_line_items"
    invoice_template_below_line_items = "invoice_template_below_line_items"
    last_invoice_number = "last_invoice_number"
    last_order_number = "last_order_number"
    last_quote_number = "last_quote_number"
    last_ticket_number = "last_ticket_number"
    logo_square_dark_url = "logo_square_dark_url"
    logo_square_light_url = "logo_square_light_url"
    logo_wide_dark_url = "logo_wide_dark_url"
    logo_wide_light_url = "logo_wide_light_url"
    max_break_minutes = "max_break_minutes"
    postal_address = "postal_address"
    reply_to_address = "reply_to_address"
    short_name = "short_name"
    title = "title"
    updated_at = "updated_at"


class organizations_update_column(str, Enum):
    accent_color = "accent_color"
    created_at = "created_at"
    default_agent_day_rate_cents = "default_agent_day_rate_cents"
    default_invoice_net_term = "default_invoice_net_term"
    default_invoice_pivot = "default_invoice_pivot"
    deleted_at = "deleted_at"
    id = "id"
    invoice_template_above_line_items = "invoice_template_above_line_items"
    invoice_template_below_line_items = "invoice_template_below_line_items"
    last_invoice_number = "last_invoice_number"
    last_order_number = "last_order_number"
    last_quote_number = "last_quote_number"
    last_ticket_number = "last_ticket_number"
    logo_square_dark_url = "logo_square_dark_url"
    logo_square_light_url = "logo_square_light_url"
    logo_wide_dark_url = "logo_wide_dark_url"
    logo_wide_light_url = "logo_wide_light_url"
    max_break_minutes = "max_break_minutes"
    postal_address = "postal_address"
    reply_to_address = "reply_to_address"
    short_name = "short_name"
    title = "title"
    updated_at = "updated_at"


class organizations_xref_oauth_constraint(str, Enum):
    organizations_xref_oauth_pkey = "organizations_xref_oauth_pkey"


class organizations_xref_oauth_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    oauth_provider = "oauth_provider"
    organization_id = "organization_id"
    realm_id = "realm_id"
    refresh_token = "refresh_token"
    updated_at = "updated_at"


class organizations_xref_oauth_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    oauth_provider = "oauth_provider"
    organization_id = "organization_id"
    realm_id = "realm_id"
    refresh_token = "refresh_token"
    updated_at = "updated_at"


class payment_statuses_constraint(str, Enum):
    payment_statuses_pkey = "payment_statuses_pkey"


class payment_statuses_enum(str, Enum):
    INAPPLICABLE = "INAPPLICABLE"
    PAID = "PAID"
    PARTIAL = "PARTIAL"
    PENDING = "PENDING"
    VOID = "VOID"
    WRITTEN_OFF = "WRITTEN_OFF"


class payment_statuses_select_column(str, Enum):
    comment = "comment"
    value = "value"


class payment_statuses_update_column(str, Enum):
    comment = "comment"
    value = "value"


class price_book_agent_prices_constraint(str, Enum):
    price_book_agent_prices_pkey = "price_book_agent_prices_pkey"
    price_book_agent_prices_price_book_id_agent_id_valid_from_key = (
        "price_book_agent_prices_price_book_id_agent_id_valid_from_key"
    )


class price_book_agent_prices_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    day_rate_cents = "day_rate_cents"
    id = "id"
    labor_hour_rate_cents = "labor_hour_rate_cents"
    mile_rate_cents = "mile_rate_cents"
    overtime_hour_rate_cents = "overtime_hour_rate_cents"
    price_book_id = "price_book_id"
    travel_hour_rate_cents = "travel_hour_rate_cents"
    valid_from = "valid_from"


class price_book_agent_prices_update_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    day_rate_cents = "day_rate_cents"
    id = "id"
    labor_hour_rate_cents = "labor_hour_rate_cents"
    mile_rate_cents = "mile_rate_cents"
    overtime_hour_rate_cents = "overtime_hour_rate_cents"
    price_book_id = "price_book_id"
    travel_hour_rate_cents = "travel_hour_rate_cents"
    valid_from = "valid_from"


class price_books_constraint(str, Enum):
    price_books_organization_id_title_idx = "price_books_organization_id_title_idx"
    price_books_pkey = "price_books_pkey"


class price_books_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class price_books_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    notesj = "notesj"
    organization_name = "organization_name"
    title = "title"
    updated_at = "updated_at"


class product_prices_constraint(str, Enum):
    product_prices_pkey = "product_prices_pkey"


class product_prices_select_column(str, Enum):
    author_id = "author_id"
    billing_unit = "billing_unit"
    cents_per_unit = "cents_per_unit"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    price_book_id = "price_book_id"
    product_id = "product_id"
    updated_at = "updated_at"
    valid_from = "valid_from"


class product_prices_update_column(str, Enum):
    author_id = "author_id"
    billing_unit = "billing_unit"
    cents_per_unit = "cents_per_unit"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    price_book_id = "price_book_id"
    product_id = "product_id"
    updated_at = "updated_at"
    valid_from = "valid_from"


class product_types_constraint(str, Enum):
    product_types_pkey = "product_types_pkey"


class product_types_enum(str, Enum):
    GOOD = "GOOD"
    SERVICE = "SERVICE"


class product_types_select_column(str, Enum):
    comment = "comment"
    value = "value"


class product_types_update_column(str, Enum):
    comment = "comment"
    value = "value"


class products_constraint(str, Enum):
    products_catalog_id_title_idx = "products_catalog_id_title_idx"
    products_pkey = "products_pkey"


class products_select_column(str, Enum):
    author_id = "author_id"
    catalog_id = "catalog_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    description = "description"
    external_id = "external_id"
    id = "id"
    product_type = "product_type"
    title = "title"
    updated_at = "updated_at"


class products_update_column(str, Enum):
    author_id = "author_id"
    catalog_id = "catalog_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    description = "description"
    external_id = "external_id"
    id = "id"
    product_type = "product_type"
    title = "title"
    updated_at = "updated_at"


class products_xref_custom_forms_constraint(str, Enum):
    products_xref_custom_forms_pkey = "products_xref_custom_forms_pkey"
    products_xref_custom_forms_product_id_custom_form_definitio_idx = (
        "products_xref_custom_forms_product_id_custom_form_definitio_idx"
    )


class products_xref_custom_forms_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    custom_form_definition_id = "custom_form_definition_id"
    id = "id"
    is_required = "is_required"
    product_id = "product_id"


class products_xref_custom_forms_select_column_products_xref_custom_forms_aggregate_bool_exp_bool_and_arguments_columns(
    str, Enum
):
    is_required = "is_required"


class products_xref_custom_forms_select_column_products_xref_custom_forms_aggregate_bool_exp_bool_or_arguments_columns(
    str, Enum
):
    is_required = "is_required"


class products_xref_custom_forms_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    custom_form_definition_id = "custom_form_definition_id"
    id = "id"
    is_required = "is_required"
    product_id = "product_id"


class quote_event_types_constraint(str, Enum):
    event_types_pkey = "event_types_pkey"


class quote_event_types_enum(str, Enum):
    ACCEPTED = "ACCEPTED"
    ARCHIVED = "ARCHIVED"
    CANCELED = "CANCELED"
    CLONED = "CLONED"
    COMMENTED = "COMMENTED"
    CREATED = "CREATED"
    CREATED_AS_CLONE = "CREATED_AS_CLONE"
    ORDER_CREATED = "ORDER_CREATED"
    REJECTED = "REJECTED"
    REQUESTED = "REQUESTED"
    UNARCHIVED = "UNARCHIVED"
    UPDATED = "UPDATED"


class quote_event_types_select_column(str, Enum):
    comment = "comment"
    value = "value"


class quote_event_types_update_column(str, Enum):
    comment = "comment"
    value = "value"


class quote_events_constraint(str, Enum):
    events_pkey = "events_pkey"


class quote_events_select_column(str, Enum):
    author_id = "author_id"
    cloned_from_quote_id = "cloned_from_quote_id"
    cloned_to_quote_id = "cloned_to_quote_id"
    created_at = "created_at"
    desired_reviewer_id = "desired_reviewer_id"
    event_type = "event_type"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    order_id = "order_id"
    quote_id = "quote_id"


class quote_events_update_column(str, Enum):
    author_id = "author_id"
    cloned_from_quote_id = "cloned_from_quote_id"
    cloned_to_quote_id = "cloned_to_quote_id"
    created_at = "created_at"
    desired_reviewer_id = "desired_reviewer_id"
    event_type = "event_type"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    order_id = "order_id"
    quote_id = "quote_id"


class quote_items_constraint(str, Enum):
    items_pkey = "items_pkey"


class quote_items_select_column(str, Enum):
    agent_id = "agent_id"
    agent_unconfirmed = "agent_unconfirmed"
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    product_id = "product_id"
    product_unconfirmed = "product_unconfirmed"
    qty = "qty"
    quote_id = "quote_id"
    subtotal_cents = "subtotal_cents"
    subtotal_override_cents = "subtotal_override_cents"
    unit_price_cents = "unit_price_cents"
    unit_price_override_cents = "unit_price_override_cents"
    updated_at = "updated_at"
    work_site_id = "work_site_id"
    work_site_unconfirmed = "work_site_unconfirmed"


class quote_items_update_column(str, Enum):
    agent_id = "agent_id"
    agent_unconfirmed = "agent_unconfirmed"
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    notesj = "notesj"
    product_id = "product_id"
    product_unconfirmed = "product_unconfirmed"
    qty = "qty"
    quote_id = "quote_id"
    subtotal_cents = "subtotal_cents"
    subtotal_override_cents = "subtotal_override_cents"
    unit_price_cents = "unit_price_cents"
    unit_price_override_cents = "unit_price_override_cents"
    updated_at = "updated_at"
    work_site_id = "work_site_id"
    work_site_unconfirmed = "work_site_unconfirmed"


class quote_quotes_constraint(str, Enum):
    quotes_organization_name_ref_key = "quotes_organization_name_ref_key"
    quotes_pkey = "quotes_pkey"


class quote_quotes_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    delivery_status = "delivery_status"
    id = "id"
    lifecycle_status = "lifecycle_status"
    notes = "notes"
    notesj = "notesj"
    organization_name = "organization_name"
    ref = "ref"
    review_status = "review_status"
    service_date_end = "service_date_end"
    service_date_start = "service_date_start"
    updated_at = "updated_at"
    valid_until = "valid_until"


class quote_quotes_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    delivery_status = "delivery_status"
    id = "id"
    lifecycle_status = "lifecycle_status"
    notesj = "notesj"
    organization_name = "organization_name"
    ref = "ref"
    review_status = "review_status"
    service_date_end = "service_date_end"
    service_date_start = "service_date_start"
    updated_at = "updated_at"
    valid_until = "valid_until"


class report_uploads_constraint(str, Enum):
    report_uploads_pkey = "report_uploads_pkey"


class report_uploads_select_column(str, Enum):
    author_id = "author_id"
    content_size = "content_size"
    content_type = "content_type"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    filename = "filename"
    id = "id"
    organization_name = "organization_name"
    report_params = "report_params"
    report_type = "report_type"
    ticket_id = "ticket_id"
    updated_at = "updated_at"
    url = "url"
    user_id = "user_id"
    work_site_id = "work_site_id"


class report_uploads_update_column(str, Enum):
    author_id = "author_id"
    content_size = "content_size"
    content_type = "content_type"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    filename = "filename"
    id = "id"
    organization_name = "organization_name"
    report_params = "report_params"
    report_type = "report_type"
    ticket_id = "ticket_id"
    updated_at = "updated_at"
    url = "url"
    user_id = "user_id"
    work_site_id = "work_site_id"


class review_statuses_constraint(str, Enum):
    review_statuses_pkey = "review_statuses_pkey"


class review_statuses_enum(str, Enum):
    ACCEPTED = "ACCEPTED"
    INAPPLICABLE = "INAPPLICABLE"
    PENDING = "PENDING"
    REJECTED = "REJECTED"
    REQUESTED = "REQUESTED"


class review_statuses_select_column(str, Enum):
    comment = "comment"
    value = "value"


class review_statuses_update_column(str, Enum):
    comment = "comment"
    value = "value"


class signatures_constraint(str, Enum):
    signatures_pkey = "signatures_pkey"


class signatures_select_column(str, Enum):
    author_email = "author_email"
    author_name = "author_name"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    id = "id"
    requester_id = "requester_id"
    url = "url"


class signatures_update_column(str, Enum):
    author_email = "author_email"
    author_name = "author_name"
    created_at = "created_at"
    customer_id = "customer_id"
    deleted_at = "deleted_at"
    id = "id"
    requester_id = "requester_id"
    url = "url"


class ticket_activity_select_column(str, Enum):
    author_id = "author_id"
    ended_at = "ended_at"
    expense_log_id = "expense_log_id"
    started_at = "started_at"
    ticket_custom_form_entry_id = "ticket_custom_form_entry_id"
    ticket_id = "ticket_id"
    ticket_review_event_id = "ticket_review_event_id"
    travel_log_id = "travel_log_id"
    work_log_id = "work_log_id"


class ticket_agents_constraint(str, Enum):
    dedupe_assignees = "dedupe_assignees"
    ticket_agents_pkey = "ticket_agents_pkey"


class ticket_agents_select_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class ticket_agents_update_column(str, Enum):
    agent_id = "agent_id"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class ticket_aggregates_all_select_column(str, Enum):
    calloff_total = "calloff_total"
    dedicated_total = "dedicated_total"
    organization_name = "organization_name"
    ticket_status = "ticket_status"
    total = "total"


class ticket_aggregates_by_agent_select_column(str, Enum):
    assigned_agent_id = "assigned_agent_id"
    calloff_total = "calloff_total"
    dedicated_total = "dedicated_total"
    organization_name = "organization_name"
    ticket_status = "ticket_status"
    total = "total"


class ticket_custom_form_entries_constraint(str, Enum):
    ticket_custom_form_entries_pkey = "ticket_custom_form_entries_pkey"


class ticket_custom_form_entries_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    custom_form_definition_id = "custom_form_definition_id"
    id = "id"
    original_payload = "original_payload"
    payload = "payload"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class ticket_custom_form_entries_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    custom_form_definition_id = "custom_form_definition_id"
    id = "id"
    original_payload = "original_payload"
    payload = "payload"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class ticket_dates_select_column(str, Enum):
    first_work = "first_work"
    last_work = "last_work"
    ticket_id = "ticket_id"


class ticket_review_event_types_constraint(str, Enum):
    ticket_review_event_types_pkey = "ticket_review_event_types_pkey"


class ticket_review_event_types_enum(str, Enum):
    ACCEPT = "ACCEPT"
    CANCEL = "CANCEL"
    COMMENT = "COMMENT"
    REJECT = "REJECT"
    REQUEST = "REQUEST"


class ticket_review_event_types_select_column(str, Enum):
    comment = "comment"
    value = "value"


class ticket_review_event_types_update_column(str, Enum):
    comment = "comment"
    value = "value"


class ticket_review_events_constraint(str, Enum):
    ticket_review_events_pkey = "ticket_review_events_pkey"


class ticket_review_events_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    desired_reviewer_id = "desired_reviewer_id"
    id = "id"
    notes = "notes"
    notesj = "notesj"
    ticket_id = "ticket_id"
    ticket_review_event_type = "ticket_review_event_type"


class ticket_review_events_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    desired_reviewer_id = "desired_reviewer_id"
    id = "id"
    notesj = "notesj"
    ticket_id = "ticket_id"
    ticket_review_event_type = "ticket_review_event_type"


class ticket_statuses_constraint(str, Enum):
    ticket_statuses_pkey = "ticket_statuses_pkey"


class ticket_statuses_enum(str, Enum):
    CLOSED = "CLOSED"
    IN_PROGRESS = "IN_PROGRESS"
    IN_REVIEW = "IN_REVIEW"
    OPEN = "OPEN"


class ticket_statuses_select_column(str, Enum):
    comment = "comment"
    value = "value"


class ticket_statuses_update_column(str, Enum):
    comment = "comment"
    value = "value"


class tickets_constraint(str, Enum):
    refs_unique_in_org = "refs_unique_in_org"
    tickets_pkey = "tickets_pkey"


class tickets_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    manually_scheduled_at = "manually_scheduled_at"
    notes = "notes"
    notesj = "notesj"
    order_item_id = "order_item_id"
    organization_name = "organization_name"
    ref = "ref"
    review_status = "review_status"
    reviewer_id = "reviewer_id"
    signature_id = "signature_id"
    ticket_status = "ticket_status"
    updated_at = "updated_at"


class tickets_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    manually_scheduled_at = "manually_scheduled_at"
    notesj = "notesj"
    order_item_id = "order_item_id"
    organization_name = "organization_name"
    ref = "ref"
    review_status = "review_status"
    reviewer_id = "reviewer_id"
    signature_id = "signature_id"
    ticket_status = "ticket_status"
    updated_at = "updated_at"


class time_sheet_billing_intervals_constraint(str, Enum):
    time_sheet_billing_intervals_pkey = "time_sheet_billing_intervals_pkey"


class time_sheet_billing_intervals_enum(str, Enum):
    month = "month"
    shift = "shift"


class time_sheet_billing_intervals_select_column(str, Enum):
    comment = "comment"
    value = "value"


class time_sheet_billing_intervals_update_column(str, Enum):
    comment = "comment"
    value = "value"


class time_sheet_rules_constraint(str, Enum):
    time_sheet_rules_pkey = "time_sheet_rules_pkey"


class time_sheet_rules_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    modifier = "modifier"
    ruleset_id = "ruleset_id"
    threshold_hours = "threshold_hours"
    time_unit = "time_unit"
    title = "title"
    updated_at = "updated_at"


class time_sheet_rules_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    id = "id"
    modifier = "modifier"
    ruleset_id = "ruleset_id"
    threshold_hours = "threshold_hours"
    time_unit = "time_unit"
    title = "title"
    updated_at = "updated_at"


class time_sheet_rulesets_constraint(str, Enum):
    time_sheet_rulesets_pkey = "time_sheet_rulesets_pkey"


class time_sheet_rulesets_select_column(str, Enum):
    author_id = "author_id"
    billing_interval = "billing_interval"
    created_at = "created_at"
    id = "id"
    notesj = "notesj"
    title = "title"
    updated_at = "updated_at"


class time_sheet_rulesets_update_column(str, Enum):
    author_id = "author_id"
    billing_interval = "billing_interval"
    created_at = "created_at"
    id = "id"
    notesj = "notesj"
    title = "title"
    updated_at = "updated_at"


class time_units_constraint(str, Enum):
    time_units_pkey = "time_units_pkey"


class time_units_enum(str, Enum):
    day = "day"
    hour = "hour"


class time_units_select_column(str, Enum):
    comment = "comment"
    value = "value"


class time_units_update_column(str, Enum):
    comment = "comment"
    value = "value"


class travel_logs_constraint(str, Enum):
    travel_logs_pkey = "travel_logs_pkey"


class travel_logs_select_column(str, Enum):
    arrived_at = "arrived_at"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    departed_at = "departed_at"
    from_work_site_id = "from_work_site_id"
    id = "id"
    invoice_id = "invoice_id"
    miles_traveled = "miles_traveled"
    notes = "notes"
    notesj = "notesj"
    ticket_id = "ticket_id"
    to_work_site_id = "to_work_site_id"
    updated_at = "updated_at"


class travel_logs_update_column(str, Enum):
    arrived_at = "arrived_at"
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    departed_at = "departed_at"
    from_work_site_id = "from_work_site_id"
    id = "id"
    invoice_id = "invoice_id"
    miles_traveled = "miles_traveled"
    notesj = "notesj"
    ticket_id = "ticket_id"
    to_work_site_id = "to_work_site_id"
    updated_at = "updated_at"


class travel_prices_constraint(str, Enum):
    travel_prices_pkey = "travel_prices_pkey"
    travel_prices_price_book_id_valid_from_idx = (
        "travel_prices_price_book_id_valid_from_idx"
    )


class travel_prices_select_column(str, Enum):
    author_id = "author_id"
    cents_per_hour = "cents_per_hour"
    cents_per_mile = "cents_per_mile"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    price_book_id = "price_book_id"
    updated_at = "updated_at"
    valid_from = "valid_from"


class travel_prices_update_column(str, Enum):
    author_id = "author_id"
    cents_per_hour = "cents_per_hour"
    cents_per_mile = "cents_per_mile"
    created_at = "created_at"
    deleted_at = "deleted_at"
    id = "id"
    price_book_id = "price_book_id"
    updated_at = "updated_at"
    valid_from = "valid_from"


class user_subs_constraint(str, Enum):
    user_subs_pkey = "user_subs_pkey"


class user_subs_select_column(str, Enum):
    created_at = "created_at"
    id = "id"
    subscription = "subscription"
    user_id = "user_id"


class user_subs_update_column(str, Enum):
    created_at = "created_at"
    id = "id"
    subscription = "subscription"
    user_id = "user_id"


class users_constraint(str, Enum):
    users_email_key = "users_email_key"
    users_pkey = "users_pkey"


class users_select_column(str, Enum):
    avatar_id = "avatar_id"
    city = "city"
    created_at = "created_at"
    deleted_at = "deleted_at"
    email = "email"
    first_seen_at = "first_seen_at"
    fname = "fname"
    full_name = "full_name"
    id = "id"
    last_seen_at = "last_seen_at"
    lname = "lname"
    phone_number = "phone_number"
    staff_since = "staff_since"
    state = "state"
    updated_at = "updated_at"


class users_update_column(str, Enum):
    avatar_id = "avatar_id"
    city = "city"
    created_at = "created_at"
    deleted_at = "deleted_at"
    email = "email"
    first_seen_at = "first_seen_at"
    fname = "fname"
    id = "id"
    last_seen_at = "last_seen_at"
    lname = "lname"
    phone_number = "phone_number"
    staff_since = "staff_since"
    state = "state"
    updated_at = "updated_at"


class work_logs_constraint(str, Enum):
    work_logs_pkey = "work_logs_pkey"


class work_logs_select_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    ended_at = "ended_at"
    id = "id"
    invoice_id = "invoice_id"
    notes = "notes"
    notesj = "notesj"
    started_at = "started_at"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class work_logs_update_column(str, Enum):
    author_id = "author_id"
    created_at = "created_at"
    deleted_at = "deleted_at"
    ended_at = "ended_at"
    id = "id"
    invoice_id = "invoice_id"
    notesj = "notesj"
    started_at = "started_at"
    ticket_id = "ticket_id"
    updated_at = "updated_at"


class work_sites_constraint(str, Enum):
    unique_api = "unique_api"
    work_sites_pkey = "work_sites_pkey"


class work_sites_select_column(str, Enum):
    api = "api"
    author_id = "author_id"
    confirmed_at = "confirmed_at"
    county = "county"
    created_at = "created_at"
    deleted_at = "deleted_at"
    external_id = "external_id"
    id = "id"
    lat = "lat"
    lng = "lng"
    organization_name = "organization_name"
    standardized_title = "standardized_title"
    state = "state"
    title = "title"
    updated_at = "updated_at"


class work_sites_update_column(str, Enum):
    api = "api"
    author_id = "author_id"
    confirmed_at = "confirmed_at"
    county = "county"
    created_at = "created_at"
    deleted_at = "deleted_at"
    external_id = "external_id"
    id = "id"
    lat = "lat"
    lng = "lng"
    organization_name = "organization_name"
    standardized_title = "standardized_title"
    state = "state"
    title = "title"
    updated_at = "updated_at"
