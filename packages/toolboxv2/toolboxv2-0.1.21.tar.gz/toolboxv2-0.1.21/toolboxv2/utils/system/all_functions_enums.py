"""Automatic generated by ToolBox v = 0.1.21"""
from dataclasses import dataclass
from enum import Enum


@dataclass
class DASHPROVIDER(Enum):
    NAME = 'DashProvider'
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_CONTROLLER = 'get_controller' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    GETSMSG = 'getsMSG' # Input: (['app']), Output: <class 'inspect._empty'>
    GETSINSIGHTSWIDGET = 'getsInsightsWidget' # Input: (['app']), Output: <class 'inspect._empty'>
    GETTEXTWIDGET = 'getTextWidget' # Input: (['app']), Output: <class 'inspect._empty'>
    GETPATHWIDGET = 'getPathWidget' # Input: (['app']), Output: <class 'inspect._empty'>
    GETWIDGETNAVE = 'getWidgetNave' # Input: (['app']), Output: <class 'inspect._empty'>
    GETDRAG = 'getDrag' # Input: (['app']), Output: <class 'inspect._empty'>
    GETCONTROLS = 'getControls' # Input: (['app']), Output: <class 'inspect._empty'>
    SERVICEWORKER = 'serviceWorker' # Input: (['app']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class CODEVERIFICATION(Enum):
    NAME = 'CodeVerification'
    INIT_SCOPE = 'init_scope' # Input: (['app', 'scope']), Output: <class 'inspect._empty'>
    ADD_TEMPLATE = 'add_template' # Input: (['app', 'scope', 'name', 'usage_type', 'max_uses', 'valid_duration', 'kwargs']), Output: <class 'inspect._empty'>
    GENERATE = 'generate' # Input: (['app', 'scope', 'template_id']), Output: <class 'inspect._empty'>
    GENERATE_API = 'generate_api' # Input: (['app', 'scope', 'template_id']), Output: <class 'inspect._empty'>
    VALIDATE_API = 'validate_api' # Input: (['app', 'scope', 'code']), Output: <class 'inspect._empty'>
    VALIDATE = 'validate' # Input: (['app', 'scope', 'code']), Output: <class 'inspect._empty'>
    ALL_TEMPLATES = 'all_templates' # Input: (['app', 'scope']), Output: <class 'inspect._empty'>
    RESET_TEMPLATES = 'reset_templates' # Input: (['app', 'scope']), Output: <class 'inspect._empty'>
    PANNEL = 'pannel' # Input: (['app', 'request', 'scope']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class DONEXT(Enum):
    NAME = 'DoNext'
    INIT = 'init' # Input: (['app']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    NEWACTION = 'new-action' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    CURRENTACTION = 'current-action' # Input: (['app', 'request', 'actionId']), Output: <class 'inspect._empty'>
    REMOVEACTION = 'remove-action' # Input: (['app', 'request', 'actionId']), Output: <class 'inspect._empty'>
    GETCURRENTACTION = 'get-current-action' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    SUGGESTIONS = 'suggestions' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    HISTORY = 'history' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    ALLACTIONS = 'all-actions' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    COMPLETECURRENT = 'complete-current' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    MAIN_WEB_DONEXT_ENTRY = 'main_web_DoNext_entry' # Input: (['app']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class SETUP(Enum):
    NAME = 'setup'
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class PROCESSMANAGER(Enum):
    NAME = 'ProcessManager'
    STARTDBUG = 'startDbug' # Input: (['p1_command', 'p2_command']), Output: <class 'inspect._empty'>
    STARTDEV = 'startDev' # Input: (['p1_command', 'p2_command']), Output: <class 'inspect._empty'>
    START = 'start' # Input: (['p1_command', 'p2_command']), Output: <class 'inspect._empty'>
    START_CLIENT = 'start_client' # Input: (['p0_command', 'p1_command', 'p2_command']), Output: <class 'inspect._empty'>
    CUSTOM = 'custom' # Input: (['commands', 'monitor']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class FILEWIDGET(Enum):
    NAME = 'FileWidget'
    GET_WIDGET = 'get_widget' # Input: (['request', 'kwargs']), Output: <class 'inspect._empty'>
    UPLOAD = 'upload' # Input: (['request']), Output: <class 'inspect._empty'>
    DOWNLOAD = 'download' # Input: (['request', 'path']), Output: <class 'inspect._empty'>
    FILES = 'files' # Input: (['request']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class MINIMALHTML(Enum):
    NAME = 'MinimalHtml'
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    ADD_GROUP = 'add_group' # Input: (['command']), Output: <class 'inspect._empty'>
    ADD_COLLECTION_TO_GROUP = 'add_collection_to_group' # Input: (['group_name', 'collection']), Output: <class 'inspect._empty'>
    GENERATE_HTML = 'generate_html' # Input: (['group_name', 'collection_name']), Output: <class 'inspect._empty'>
    FUSE_TO_STRING = 'fuse_to_string' # Input: (['html_elements', 'join_chat']), Output: <class 'inspect._empty'>


@dataclass
class TRUTHSEEKER(Enum):
    NAME = 'TruthSeeker'
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class TALK(Enum):
    NAME = 'talk'
    START = 'start' # Input: (['app']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    TALK_WEBSOCKET_ECHO = 'talk_websocket_echo' # Input: (['websocket']), Output: <class 'inspect._empty'>
    TALK_WEBSOCKET_CONTEXT = 'talk_websocket_context' # Input: (['websocket']), Output: <class 'inspect._empty'>
    TALK_WEBSOCKET = 'talk_websocket' # Input: (['websocket', 'context', 'all_c', 'v_name', 'v_index', 'provider', 'f']), Output: <class 'inspect._empty'>
    MAIN_WEB_TALK_ENTRY = 'main_web_talk_entry' # Input: (['app', 'request', 'modi']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class WHATSAPPTB(Enum):
    NAME = 'WhatsAppTb'
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class WELCOME(Enum):
    NAME = 'welcome'
    VERSION = 'Version' # Input: (['_']), Output: <class 'inspect._empty'>
    PRINTT = 'printT' # Input: ([]), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    ANIMATION1 = 'Animation1' # Input: ([]), Output: <class 'inspect._empty'>
    ANIMATION = 'Animation' # Input: ([]), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class TESTWIDGET(Enum):
    NAME = 'TestWidget'
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    ADD = 'add' # Input: (['request']), Output: <class 'inspect._empty'>
    ADDM = 'addM' # Input: (['value', 'request']), Output: <class 'inspect._empty'>
    RESET = 'reset' # Input: (['request']), Output: <class 'inspect._empty'>
    SYNC = 'sync' # Input: (['request', 'counter', 'id']), Output: <class 'inspect._empty'>
    GET_WIDGET = 'get_widget' # Input: (['app', 'request', 'kwargs']), Output: <class 'inspect._empty'>
    GET_WIDGET_R = 'get_widget_r' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class SOCKETMANAGER(Enum):
    NAME = 'SocketManager'
    CREATE_SOCKET = 'create_socket' # Input: (['self', 'name', 'host', 'port', 'type_id', 'max_connections', 'endpoint_port', 'return_full_object', 'keepalive_interval', 'test_override', 'package_size', 'start_keep_alive', 'unix_file', 'do_async']), Output: <class 'toolboxv2.utils.system.types.Result'>
    RUN_AS_IP_ECHO_SERVER_A = 'run_as_ip_echo_server_a' # Input: (['self', 'name', 'host', 'port', 'max_connections', 'test_override']), Output: <class 'inspect._empty'>
    RUN_AS_SINGLE_COMMUNICATION_SERVER = 'run_as_single_communication_server' # Input: (['self', 'name', 'host', 'port', 'test_override']), Output: <class 'inspect._empty'>
    SEND_FILE_TO_SEVER = 'send_file_to_sever' # Input: (['self', 'filepath', 'host', 'port']), Output: <class 'inspect._empty'>
    RECEIVE_AND_DECOMPRESS_FILE_AS_SERVER = 'receive_and_decompress_file_as_server' # Input: (['self', 'save_path', 'listening_port']), Output: <class 'inspect._empty'>
    SEND_FILE_TO_PEER = 'send_file_to_peer' # Input: (['self', 'filepath', 'host', 'port']), Output: <class 'inspect._empty'>
    RECEIVE_AND_DECOMPRESS_FILE = 'receive_and_decompress_file' # Input: (['self', 'save_path', 'listening_port', 'sender_ip']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    TBSOCKETCONTROLLER = 'tbSocketController' # Input: (['name', 'host', 'port', 'test_override']), Output: <class 'inspect._empty'>
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>


@dataclass
class EMAIL_WAITING_LIST(Enum):
    NAME = 'email_waiting_list'
    ADD = 'add' # Input: (['app', 'email']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    SEND_EMAIL_TO_ALL = 'send_email_to_all' # Input: ([]), Output: <class 'inspect._empty'>
    SEND_EMAIL = 'send_email' # Input: (['data']), Output: <class 'inspect._empty'>
    CRATE_SING_IN_EMAIL = 'crate_sing_in_email' # Input: (['user_email', 'user_name']), Output: <class 'inspect._empty'>
    CRATE_MAGIC_LICK_DEVICE_EMAIL = 'crate_magic_lick_device_email' # Input: (['user_email', 'user_name', 'link_id', 'nl']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class EVENTMANAGER(Enum):
    NAME = 'EventManager'
    STARTWEBEVENTS = 'startWebEvents' # Input: (['self']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    STARTEVENTMANAGER = 'startEventManager' # Input: ([]), Output: <class 'inspect._empty'>
    CLOSEEVENTMANAGER = 'closeEventManager' # Input: ([]), Output: <class 'inspect._empty'>
    GETEVENTMANAGERC = 'getEventManagerC' # Input: ([]), Output: <class 'toolboxv2.mods.EventManager.module.EventManagerClass'>


@dataclass
class SCHEDULERMANAGER(Enum):
    NAME = 'SchedulerManager'
    VERSION = 'Version' # Input: (['self']), Output: <class 'inspect._empty'>
    INIT = 'init' # Input: (['self']), Output: <class 'inspect._empty'>
    ON_START = 'on_start' # Input: (), Output: None
    CLOS_MANAGER = 'clos_manager' # Input: (['self']), Output: <class 'inspect._empty'>
    ON_EXIT = 'on_exit' # Input: (), Output: None
    INSTANCE = 'instance' # Input: (['self']), Output: <class 'inspect._empty'>
    START = 'start' # Input: (['self']), Output: <class 'inspect._empty'>
    STOP = 'stop' # Input: (['self']), Output: <class 'inspect._empty'>
    CANCEL = 'cancel' # Input: (['self', 'job_id']), Output: <class 'inspect._empty'>
    DEALT = 'dealt' # Input: (['self', 'job_id']), Output: <class 'inspect._empty'>
    ADD = 'add' # Input: (['self', 'job_data']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class WEBSOCKETMANAGER(Enum):
    NAME = 'WebSocketManager'
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    CONNECT = 'connect' # Input: (['websocket', 'websocket_id']), Output: <class 'inspect._empty'>
    GET_POOLS_MANAGER = 'get_pools_manager' # Input: ([]), Output: <class 'inspect._empty'>
    DISCONNECT = 'disconnect' # Input: (['websocket', 'websocket_id']), Output: <class 'inspect._empty'>
    SEND_MESSAGE = 'send_message' # Input: (['message', 'websocket', 'websocket_id']), Output: <class 'inspect._empty'>
    LIST = 'list' # Input: ([]), Output: <class 'inspect._empty'>
    GET = 'get' # Input: (['name']), Output: <class 'inspect._empty'>
    SRQW = 'srqw' # Input: (['url', 'websocket_id']), Output: <class 'inspect._empty'>
    CONSTRUCT_RENDER = 'construct_render' # Input: (['content', 'element_id', 'externals', 'placeholder_content', 'from_file', 'to_str']), Output: <class 'inspect._empty'>


@dataclass
class DB(Enum):
    NAME = 'DB'
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    GET = 'get' # Input: (['self', 'query']), Output: <class 'toolboxv2.utils.system.types.Result'>
    IF_EXIST = 'if_exist' # Input: (['self', 'query']), Output: <class 'toolboxv2.utils.system.types.Result'>
    SET = 'set' # Input: (['self', 'query', 'data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    DELETE = 'delete' # Input: (['self', 'query', 'matching']), Output: <class 'toolboxv2.utils.system.types.Result'>
    APPEND_ON_SET = 'append_on_set' # Input: (['self', 'query', 'data']), Output: <class 'toolboxv2.utils.system.types.Result'>
    EDIT_PROGRAMMABLE = 'edit_programmable' # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    EDIT_CLI = 'edit_cli' # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    EDIT_DEV_WEB_UI = 'edit_dev_web_ui' # Input: (['self', 'mode']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class CLI_FUNCTIONS(Enum):
    NAME = 'cli_functions'
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_CHARACTER = 'get_character' # Input: ([]), Output: <class 'inspect._empty'>
    GET_GENERATOR = 'get_generator' # Input: ([]), Output: <class 'inspect._empty'>
    UPDATE_AUTOCOMPLETION_MODS = 'update_autocompletion_mods' # Input: (['app', 'autocompletion_dict']), Output: <class 'inspect._empty'>
    UPDATE_AUTOCOMPLETION_LIST_OR_KEY = 'update_autocompletion_list_or_key' # Input: (['list_or_key', 'autocompletion_dict', 'raise_e', 'do_lower']), Output: <class 'inspect._empty'>
    USER_INPUT = 'user_input' # Input: (['app', 'completer_dict', 'get_rprompt', 'bottom_toolbar', 'active_modul', 'password', 'bindings', 'message', 'fh']), Output: <class 'toolboxv2.utils.system.types.CallingObject'>
    CO_EVALUATE = 'co_evaluate' # Input: (['app', 'obj', 'build_in_commands', 'threaded', 'helper', 'return_parm']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class FASTAPI(Enum):
    NAME = 'FastApi'
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'str'>
    EDITAPI = 'edit-api' # Input: (['api_name', 'host', 'port']), Output: None
    STOPAPI = 'stop-api' # Input: (['api_name', 'delete']), Output: <class 'str'>
    START = 'start' # Input: (['api_name']), Output: str | None
    STARTE = 'startE' # Input: (['api_name', 'live', 'reload', 'test_override', 'host']), Output: str | None
    STARTDEV = 'startDev' # Input: (['api_name', 'modules', 'kwargs']), Output: str | None
    STARTDUG = 'startDUG' # Input: (['api_name']), Output: str | None
    INFO = 'info' # Input: ([]), Output: list[str]
    RESTARTAPI = 'restart-api' # Input: (['api_name']), Output: <class 'str'>


@dataclass
class CLOUDM_AUTHMANAGER(Enum):
    NAME = 'CloudM.AuthManager'
    GET_USER_BY_NAME = 'get_user_by_name' # Input: (['app', 'username', 'uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    CREATE_USER = 'create_user' # Input: (['app', 'data', 'username', 'email', 'pub_key', 'invitation', 'web_data', 'as_base64']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    GET_MAGIC_LINK_EMAIL = 'get_magic_link_email' # Input: (['app', 'username']), Output: <class 'inspect._empty'>
    ADD_USER_DEVICE = 'add_user_device' # Input: (['app', 'data', 'username', 'pub_key', 'invitation', 'web_data', 'as_base64']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    REGISTER_USER_PERSONAL_KEY = 'register_user_personal_key' # Input: (['app', 'data']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    CRATE_LOCAL_ACCOUNT = 'crate_local_account' # Input: (['app', 'username', 'email', 'invitation', 'create']), Output: <class 'toolboxv2.utils.system.types.Result'>
    LOCAL_LOGIN = 'local_login' # Input: (['app', 'username']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_TO_SING_DATA = 'get_to_sing_data' # Input: (['app', 'username', 'personal_key']), Output: <class 'inspect._empty'>
    GET_INVITATION = 'get_invitation' # Input: (['app']), Output: <class 'toolboxv2.utils.system.types.Result'>
    VALIDATE_PERSONA = 'validate_persona' # Input: (['app', 'data']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    VALIDATE_DEVICE = 'validate_device' # Input: (['app', 'data']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    AUTHENTICATE_USER_GET_SYNC_KEY = 'authenticate_user_get_sync_key' # Input: (['app', 'username', 'signature', 'get_user', 'web']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    GET_USER_SYNC_KEY_LOCAL = 'get_user_sync_key_local' # Input: (['app', 'username', 'ausk']), Output: <class 'toolboxv2.utils.system.types.Result'>
    JWT_GET_CLAIM = 'jwt_get_claim' # Input: (['app', 'username', 'signature', 'web']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>
    JWT_CLAIM_LOCAL_DECRYPT = 'jwt_claim_local_decrypt' # Input: (['app', 'username', 'crypt_sing_jwt_claim', 'aud']), Output: <class 'toolboxv2.utils.system.types.Result'>
    JWT_CHECK_CLAIM_SERVER_SIDE = 'jwt_check_claim_server_side' # Input: (['app', 'username', 'jwt_claim']), Output: <class 'toolboxv2.utils.system.types.ApiResult'>


@dataclass
class CLOUDM(Enum):
    NAME = 'CloudM'
    ADD_UI = 'add_ui' # Input: (['name', 'title', 'path', 'description', 'auth']), Output: <class 'inspect._empty'>
    OPENUI = 'openui' # Input: ([]), Output: <class 'inspect._empty'>
    OPENVERSION = 'openVersion' # Input: (['self']), Output: <class 'inspect._empty'>
    NEW_MODULE = 'new_module' # Input: (['self', 'mod_name', 'options']), Output: <class 'inspect._empty'>
    CREATE_ACCOUNT = 'create_account' # Input: (['self']), Output: <class 'inspect._empty'>
    INIT_GIT = 'init_git' # Input: (['_']), Output: <class 'inspect._empty'>
    UPDATE_CORE = 'update_core' # Input: (['self', 'backup', 'name']), Output: <class 'inspect._empty'>
    CREATE_MAGIC_LOG_IN = 'create_magic_log_in' # Input: (['app', 'username']), Output: <class 'inspect._empty'>
    REGISTER_INITIAL_LOOT_USER = 'register_initial_loot_user' # Input: (['app', 'email', 'user_name']), Output: <class 'inspect._empty'>
    CLEAR_DB = 'clear_db' # Input: (['self', 'do_root']), Output: <class 'inspect._empty'>
    SHOW_VERSION = 'show_version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_ECO = 'get_eco' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    LOGIN = 'login' # Input: (['m_link', 'app']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_MOD_SNAPSHOT = 'get_mod_snapshot' # Input: (['mod_name']), Output: <class 'inspect._empty'>


@dataclass
class CLOUDM_USERINSTANCES(Enum):
    NAME = 'CloudM.UserInstances'
    GET_SI_ID = 'get_si_id' # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_VT_ID = 'get_vt_id' # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    GET_WEB_SOCKET_ID = 'get_web_socket_id' # Input: (['uid']), Output: <class 'toolboxv2.utils.system.types.Result'>
    CLOSE_USER_INSTANCE = 'close_user_instance' # Input: (['uid']), Output: <class 'inspect._empty'>
    VALIDATE_WS_ID = 'validate_ws_id' # Input: (['ws_id']), Output: <class 'inspect._empty'>
    DELETE_USER_INSTANCE = 'delete_user_instance' # Input: (['uid']), Output: <class 'inspect._empty'>
    SAVE_USER_INSTANCES = 'save_user_instances' # Input: (['instance']), Output: <class 'inspect._empty'>
    GET_INSTANCE_SI_ID = 'get_instance_si_id' # Input: (['si_id']), Output: <class 'inspect._empty'>
    GET_USER_INSTANCE = 'get_user_instance' # Input: (['uid', 'hydrate']), Output: <class 'inspect._empty'>
    HYDRATE_INSTANCE = 'hydrate_instance' # Input: (['instance']), Output: <class 'inspect._empty'>
    SAVE_CLOSE_USER_INSTANCE = 'save_close_user_instance' # Input: (['ws_id']), Output: <class 'inspect._empty'>


@dataclass
class CLOUDM_UI_WIDGET(Enum):
    NAME = 'CloudM.UI.widget'
    REMOVED = 'removed' # Input: (['app', 'index', 'request']), Output: <class 'inspect._empty'>
    DANGER = 'danger' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    STOP = 'stop' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    RESET = 'reset' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    LINK = 'link' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    INFO = 'info' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    DELETEUSER = 'deleteUser' # Input: (['app', 'user', 'request']), Output: <class 'inspect._empty'>
    SENDMAGICLINK = 'sendMagicLink' # Input: (['app', 'user', 'request']), Output: <class 'inspect._empty'>
    SETUSERLEVEL = 'setUserLevel' # Input: (['app', 'user', 'request']), Output: <class 'inspect._empty'>
    MODS = 'mods' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    ADDMOD = 'addMod' # Input: (['app', 'modId', 'request']), Output: <class 'inspect._empty'>
    REMOVE = 'remove' # Input: (['app', 'modId', 'request']), Output: <class 'inspect._empty'>
    GET_WIDGET = 'get_widget' # Input: (['app', 'request', 'kwargs']), Output: <class 'inspect._empty'>


@dataclass
class WIDGETSPROVIDER(Enum):
    NAME = 'WidgetsProvider'
    GET_ALL_WIDGET_MODS = 'get_all_widget_mods' # Input: (['app']), Output: <class 'inspect._empty'>
    GET_USER_FROM_REQUEST = 'get_user_from_request' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    OPEN_WIDGET = 'open_widget' # Input: (['app', 'request', 'name', 'kwargs']), Output: <class 'inspect._empty'>
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    GET_NAMES = 'get_names' # Input: (['app', 'request']), Output: <class 'inspect._empty'>
    GET_STO = 'get_sto' # Input: (['app', 'sto_name', 'request']), Output: <class 'inspect._empty'>
    SET_STO = 'set_sto' # Input: (['app', 'sto_name', 'request']), Output: <class 'inspect._empty'>
    ADD_STO = 'add_sto' # Input: (['app', 'sto_name', 'request']), Output: <class 'inspect._empty'>
    DELETE_STO = 'delete_sto' # Input: (['app', 'sto_name', 'request']), Output: <class 'inspect._empty'>


@dataclass
class WIDGETSPROVIDER_BOARDWIDGET(Enum):
    NAME = 'WidgetsProvider.BoardWidget'
    GET_WIDGET = 'get_widget' # Input: (['request', 'kwargs']), Output: <class 'inspect._empty'>
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None


@dataclass
class ISAA(Enum):
    NAME = 'isaa'
    APP_INSTANCE = 'app_instance' # Input: (), Output: None
    APP_INSTANCE_TYPE = 'app_instance_type' # Input: (), Output: None
    VERSION = 'Version' # Input: ([]), Output: <class 'inspect._empty'>
    ADD_TASK = 'add_task' # Input: (['name', 'task']), Output: <class 'inspect._empty'>
    SAVE_TASK = 'save_task' # Input: (['name']), Output: <class 'inspect._empty'>
    LOAD_TASK = 'load_task' # Input: (['name']), Output: <class 'inspect._empty'>
    GET_TASK = 'get_task' # Input: (['name']), Output: <class 'inspect._empty'>
    LIST_TASK = 'list_task' # Input: ([]), Output: <class 'inspect._empty'>
    SAVE_TO_MEM = 'save_to_mem' # Input: ([]), Output: <class 'inspect._empty'>
    GET_AGENT = 'get_agent' # Input: (['agent_name', 'model']), Output: <class 'toolboxv2.mods.isaa.base.Agents.Agent'>
    RUN_TASK = 'run_task' # Input: (['task', 'name', 'sum_up']), Output: <class 'inspect._empty'>
    CRATE_TASK_CHAIN = 'crate_task_chain' # Input: (['prompt']), Output: <class 'inspect._empty'>
    FORMAT_CLASS = 'format_class' # Input: (['format_class', 'task', 'agent_name']), Output: <class 'inspect._empty'>
    GET_MEMORY = 'get_memory' # Input: (['name']), Output: <class 'toolboxv2.mods.isaa.base.AgentUtils.AISemanticMemory'>
    GET_PIPE = 'get_pipe' # Input: (['agent_name', 'args', 'kwargs']), Output: <class 'toolboxv2.mods.isaa.CodingAgent.live.Pipeline'>
    RUN_PIPE = 'run_pipe' # Input: (['agent_name', 'task', 'do_continue']), Output: <class 'inspect._empty'>
    RGET_MODE = 'rget_mode' # Input: (['mode']), Output: <class 'inspect._empty'>
    SET_LOCAL_FILES_TOOLS = 'set_local_files_tools' # Input: (['local_files_tools']), Output: <class 'inspect._empty'>
