# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cg_pytest_reporter']

package_data = \
{'': ['*']}

install_requires = \
['pytest>=7.0.0']

entry_points = \
{'pytest11': ['cg_pytest_reporter = cg_pytest_reporter.plugin']}

setup_kwargs = {
    'name': 'cg-pytest-reporter',
    'version': '1!1.1.1',
    'description': '',
    'long_description': '# cg-pytest-reporter\n\nA Pytest reporter plugin for CodeGrade AutoTest v2.\n\nThis plugin writes messages to CodeGrade AutoTest v2\'s structured output channel.\nFor each test that was run a `unit-test` message is written as described in\nCodeGrade\'s documentation. When all tests have finished running, a final message\nis written with the amount of points that were achieved in the test run.\n\n## Utility functions\n\nThis plugin comes with a few utility functions to easily modify certain aspects\nof each test case or test suite. All of these are decorators that you can apply\ndirectly to your test functions or classes.\n\n### Test suite decorators\n\nThese decorators change properties of an entire test suite. In terms of Pytest\nthat is a single file containing test functions, or a single class within such a\nfile.\n\n#### `suite_name`\n\nWith the `suite_name` you can modify the name of a test suite that will be\ndisplayed in the AutoTest v2 UI.\n\n```python\nfrom cg_pytest_reporter import suite_name\n\n\n@suite_name(\'My Test Suite\')\nclass TestSuite:\n    def test_function():\n        assert True\n```\n\nBecause it is not possible to decorate an entire module, it is possible to\nchange the name of the module-level suite by setting the `__cg_suite_name__`\nvariable on the module.\n\n```python\n__cg_suite_name__ = \'My Test Suite\'\n\n\ndef test_function():\n    assert True\n```\n\n#### `suite_weight`\n\nUse the `suite_weight` decorator to change the weight of an entire suite\nrelative to other suites in your test run.\n\nYou can use strings, integers, floats and fractions.Fraction as\nweight. For the best precision strings, integers and fractions are\nrecommended.\n\n```python\nfrom cg_pytest_reporter import suite_weight\n\n\n@suite_weight(\'2.1\')\nclass TestSuite:\n    def test_function():\n        assert True\n```\n\nSimilar to the suite name, you can set the weight of the module-level suite with\nthe `__cg_suite_weight__` variable.\n\n```python\nimport fractions\n\n__cg_suite_weight__ = fractions.Fraction(2, 1)\n# Or:\n# __cg_suite_weight__ = 2\n\n\ndef test_function():\n    assert True\n```\n\n### Test function decorators\n\nThese decorators modify the behaviour of a single test case.\n\nAlthough they work on the test case level, they can be applied to a class\ncontaining test functions. This works as if the decorator was applied to each\ntest function individually, but each decorator can still be overridden on\nindividual test cases. It is mentioned on each of the decorators where this\nmight be useful.\n\n#### `name`\n\nWith the `name` decorator you can change the name of a single test case.\n\n```python\nfrom cg_pytest_reporter import name\n\n\n@name(\'My Cool Test\')\ndef test_function():\n    assert True\n```\n\n#### `description`\n\nWith the `description` decorator you can set a description for a single test\ncase. This can be useful if the name of the test function is not descriptive\nenough.\n\n```python\nfrom cg_pytest_reporter import description\n\n\n@description(\'A somewhat longer description of what is being tested.\')\ndef test_function():\n    assert True\n```\n\n#### `weight`\n\nChange the weight of a single test function relative to other test functions\nwithin the same suite.\n\nYou can use strings, integers, floats and fractions.Fraction as\nweight. For the best precision strings, integers and fractions are\nrecommended.\n\n```python\nfrom cg_pytest_reporter import weight\n\n\n@weight(2)\ndef test_function():\n    assert True\n```\n\nThis decorator can also be applied to a test class, in which case it will set a\ndefault weight for all tests within that class which can still be overridden for\nindividual tests within that class. This can be useful for example if you want\nmost tests within a class not to count towards the score.\n\n```python\nfrom cg_pytest_reporter import weight\n\n\n@weight(0)\nclass TestClass:\n    # This test case will have a weight of 0 applied, and as such will not count\n    # towards the achieved score.\n    def test_function():\n        assert True\n\n    # This test case will still count towards the score with the default weight\n    # of 1.\n    @weight(1)\n    def test_something_else():\n        assert True\n```\n\n#### `reason`\n\nChange the reason of failure of the test case. This can be used to give students\na hint where their code is likely to break.\n\n```python\nfrom cg_pytest_reporter import reason\n\nfrom fibonacci import fibonacci\n\n\n@reason(\'Did you start counting at the correct index? (off-by-one error)\')\ndef test_fibonacci():\n    assert fibonacci(10) == 55\n```\n\n#### `hide_stdout`\n\nWhen a test fails, the `stdout` that was written while the test was running is\nsent along with the result. With the `hide_stdout` decorator you can prevent the\n`stdout` from being sent.\n\n```python\nfrom cg_pytest_reporter import hide_stdout\n\n\n# The string "Hello World!" that was printed to `stdout` will not be sent along\n# with the results.\n@hide_stdout\ndef test_failure():\n    print(\'Hello World!\')\n    assert False\n```\n\nThis decorator can also be applied to a test class to hide the `stdout` of each\ntest case within it.\n\n```python\nfrom cg_pytest_reporter import hide_stdout\n\n\n@hide_stdout\nclass TestClass:\n    def test_failure():\n        print(\'Hello World!\')\n        assert False\n\n    def test_ok():\n        print(\'Hello World!\')\n```\n\n#### `hide_stderr`\n\nThis works the same as `hide_stdout` except that it will hide the `stderr`\nchannel instead.\n\n```python\nimport sys\n\nfrom cg_pytest_reporter import hide_stderr\n\n\n# The string "Hello World!" that was printed to `stderr` will not be sent along\n# with the results.\n@hide_stderr\ndef test_failure():\n    print(\'Hello World!\', file=sys.stderr)\n    assert False\n```\n\nThis decorator can also be applied to a test class to hide the `stderr` of each\ntest case within it.\n\n```python\nimport sys\n\nfrom cg_pytest_reporter import hide_stderr\n\n\n@hide_stderr\nclass TestClass:\n    def test_failure():\n        print(\'Hello World!\', file=sys.stderr)\n        assert False\n\n    def test_ok():\n        print(\'Hello World!\', file=sys.stderr)\n```\n\n#### `hide_output`\n\nA combined version of `hide_stdout` and `hide_stderr`.\n\n```python\nimport sys\n\nfrom cg_pytest_reporter import hide_output\n\n\n# The string "Hello World!" that was printed to `stdout` or `stderr` will not be\n# sent along with the results.\n@hide_output\ndef test_failure():\n    print(\'Hello World!\')\n    print(\'Hello World!\', file=sys.stderr)\n    assert False\n```\n\nThis decorator can also be applied to a test class to hide the output of each\ntest case within it.\n\n```python\nimport sys\n\nfrom cg_pytest_reporter import hide_output\n\n\n@hide_output\nclass TestClass:\n    def test_failure():\n        print(\'Hello World!\', file=sys.stderr)\n        assert False\n\n    def test_ok():\n        print(\'Hello World!\')\n```\n',
    'author': 'CodeGrade',
    'author_email': 'info@codegrade.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
