# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"

# read more about configuring hatch at:
# https://hatch.pypa.io/latest/config/build/
[tool.hatch.build.targets.wheel]
packages = ["src/fractal_lif_converters"]

# Project metadata (see https://peps.python.org/pep-0621)
[project]
name = "fractal-lif-converters"
dynamic = ["version"]
description = "Converter from the Lif files (Leica Microscope) to OME-Zarr format."
readme = "README.md"
license = { text = "GPL-3.0" }
authors = [{ name = "Lorenzo Cerrone", email = "lorenzo.cerrone@uzh.ch" }]
requires-python = ">=3.11,<3.13"

dependencies = [
    "fractal-converters-tools >= 0.5.0,<0.6.0",
    "fractal-task-tools==0.0.12",
    "ngio >= 0.2.8",
    "numpy",
    "pydantic",
    "readlif",
]

# Required Python version and dependencies
# Optional dependencies (e.g. for `pip install -e ".[dev]"`, see
# https://peps.python.org/pep-0621/#dependencies-optional-dependencies)
[project.optional-dependencies]
dev = [
    "notebook",
    "matplotlib",
    "devtools",
    "hatch",
    "pytest",
    "pytest-cov",
    "requests",
    "jsonschema",
    "ruff",
    "pre-commit",
]

# https://docs.astral.sh/ruff
[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src"]

# https://docs.astral.sh/ruff/rules
[tool.ruff.lint]
pydocstyle = { convention = "google" }
select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "D",    # pydocstyle
    "D417", # Missing argument descriptions in Docstrings
    "I",    # isort
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
]
ignore = [
    "D401", # First line should be in imperative mood (remove to opt in)
    "D415", # First line should end with a period (remove to opt in)
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "S"]

# https://docs.astral.sh/ruff/formatter/
[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 89
skip-magic-trailing-comma = false # default is false

# https://docs.pytest.org/
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "--color=yes",
    "--cov",
    "--cov-report=term-missing",
    "--cov-report=xml",
]

# https://coverage.readthedocs.io/
[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
    "pass",
]
[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64"]

[tool.pixi.pypi-dependencies]
fractal-lif-converters = { path = ".", editable = true }
# fractal-converters-tools = { path = "../fractal-converters-tools/", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }

[tool.pixi.feature.dev.tasks]
#manifest = { cmd = "python src/fractal_lif_converters/dev/create_manifest.py" }
ruff-fix-imports = { cmd = "ruff check --select I --fix" }
ruff = { cmd = "ruff format", depends-on = ["ruff-fix-imports"] }
test = { cmd = "pytest", depends-on = ["ruff"] }
