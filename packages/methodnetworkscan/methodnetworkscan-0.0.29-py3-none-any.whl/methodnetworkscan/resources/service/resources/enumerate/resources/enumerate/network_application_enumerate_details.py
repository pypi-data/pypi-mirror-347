# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .......core.pydantic_utilities import UniversalBaseModel
import typing
from ..ssh.resources.ssh.auth_method import AuthMethod
import pydantic
from ..ssh.resources.ssh.key_exchange_algorithm import KeyExchangeAlgorithm
from ..ssh.resources.ssh.host_key_algorithm import HostKeyAlgorithm
from ..ssh.resources.ssh.cipher_algorithm import CipherAlgorithm
from ..ssh.resources.ssh.mac_algorithm import MacAlgorithm
from .......core.pydantic_utilities import IS_PYDANTIC_V2
from ..smtp.resources.smtp.auth_command import AuthCommand


class NetworkApplicationEnumerateDetails_SshEnumerateDetails(UniversalBaseModel):
    type: typing.Literal["SSHEnumerateDetails"] = "SSHEnumerateDetails"
    target: str
    version: typing.Optional[str] = None
    auth_methods: typing.Optional[typing.List[AuthMethod]] = pydantic.Field(alias="authMethods", default=None)
    key_exchange_algos: typing.Optional[typing.List[KeyExchangeAlgorithm]] = pydantic.Field(
        alias="keyExchangeAlgos", default=None
    )
    host_key_algos: typing.Optional[typing.List[HostKeyAlgorithm]] = pydantic.Field(alias="hostKeyAlgos", default=None)
    ciphers: typing.Optional[typing.List[CipherAlgorithm]] = None
    macs: typing.Optional[typing.List[MacAlgorithm]] = None
    raw_ascii: typing.Optional[str] = pydantic.Field(alias="rawASCII", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class NetworkApplicationEnumerateDetails_FtpEnumerateDetails(UniversalBaseModel):
    type: typing.Literal["FTPEnumerateDetails"] = "FTPEnumerateDetails"
    target: str
    successful_connection: typing.Optional[bool] = pydantic.Field(alias="SuccessfulConnection", default=None)
    banner: typing.Optional[str] = pydantic.Field(alias="Banner", default=None)
    tls_implemented: typing.Optional[bool] = pydantic.Field(alias="TLSImplemented", default=None)
    tls_forced: typing.Optional[bool] = pydantic.Field(alias="TLSForced", default=None)
    allows_anonymous_login: typing.Optional[bool] = pydantic.Field(alias="AllowsAnonymousLogin", default=None)
    error: typing.Optional[str] = pydantic.Field(alias="Error", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class NetworkApplicationEnumerateDetails_SmtpEnumerateDetails(UniversalBaseModel):
    type: typing.Literal["SMTPEnumerateDetails"] = "SMTPEnumerateDetails"
    target: str
    can_connect: typing.Optional[bool] = pydantic.Field(alias="CanConnect", default=None)
    tls_supported: typing.Optional[bool] = pydantic.Field(alias="TLSSupported", default=None)
    force_tls: typing.Optional[bool] = pydantic.Field(alias="ForceTLS", default=None)
    auth_commands: typing.Optional[typing.List[AuthCommand]] = pydantic.Field(alias="AuthCommands", default=None)
    allows_unauthenticated_email: typing.Optional[bool] = pydantic.Field(
        alias="AllowsUnauthenticatedEmail", default=None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


NetworkApplicationEnumerateDetails = typing.Union[
    NetworkApplicationEnumerateDetails_SshEnumerateDetails,
    NetworkApplicationEnumerateDetails_FtpEnumerateDetails,
    NetworkApplicationEnumerateDetails_SmtpEnumerateDetails,
]
