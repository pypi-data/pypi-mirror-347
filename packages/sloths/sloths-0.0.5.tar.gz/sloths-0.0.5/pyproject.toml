[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sloths"
license = "MIT"
license-files = ["LICENSE"]
description = "Lazy generator pipelines"
readme = "README.md"
authors = [{ name = "Charles Lirsac", email = "code@lirsac.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dynamic = ["version"]

requires-python = ">=3.10"

dependencies = []

[project.urls]
Homepage = "https://github.com/lirsacc/sloths-py"
Repository = "https://github.com/lirsacc/sloths-py.git"
Documentation = "https://sloths-py.readthedocs.io/en/latest/"
Changelog = "https://github.com/lirsacc/sloths-py/blob/main/CHANGELOG.md"

[dependency-groups]
dev = [
    "coverage[toml]>=7.8.0",
    "ipython>=8.36.0",
    "nox[toml]>=2025.5.1",
    "pyright>=1.1.400",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "ruff>=0.11.8",
]
docs = [
    "codespell>=2.4.1",
    "myst-parser>=4.0.1",
    "shibuya>=2025.4.25",
    "sphinx>=8.1.3",
    "sphinx-autoapi>=3.6.0",
    "sphinx-autodoc-typehints>=3.0.1",
]
examples = ["tqdm>=4.67.1", "types-tqdm>=4.67.0.20250417"]

[tool.hatch.version]
path = "src/sloths/__init__.py"

[tool.uv]
managed = true
required-version = ">=0.6.12"
default-groups = ["dev", "docs", "examples"]

[tool.ruff]
line-length = 80
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
extend-ignore = [
    "ANN",
    "C901",
    "D105",
    "D107",
    "D200",
    "D203",
    "D212",
    "PGH003",
    "PLR0912",
    "PLR0913",
]

unfixable = [
    "B", # Avoid trying to fix flake8-bugbear (`B`) violations.
]

[tool.ruff.lint.per-file-ignores]
"{tests,docs,examples}/**/*" = ["D", "SIM300", "S", "PLR2004", "N801", "TC"]
"noxfile.py" = ["S", "D"]
"{docs,examples}/**/*" = ["A001", "INP001", "T2"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.pyright]
diagnosticMode = "workspace"
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--doctest-modules",
    "--doctest-continue-on-failure",
    "--doctest-glob=**/*.rst",
    "--doctest-glob=**/*.md",
    "--import-mode=importlib",
]

doctest_optionflags = [
    "IGNORE_EXCEPTION_DETAIL",
    "ALLOW_UNICODE",
    "ELLIPSIS",
    "NORMALIZE_WHITESPACE",
]

testpaths = ["src", "tests", "docs", "README.md"]

junit_family = "xunit2"

[tool.coverage.run]
parallel = true
branch = true
source = ["sloths"]
omit = ["*_test.py"]
[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
show_missing = false
precision = 2
ignore_errors = false

exclude_lines = [
    "pragma: no cover",
    "assert False",
    "raise AssertionError",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if 0:",
    "if __name__ == .__main__.:",
    "def __repr__",
    "def __str__",
    "if TYPE_CHECKING:",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
