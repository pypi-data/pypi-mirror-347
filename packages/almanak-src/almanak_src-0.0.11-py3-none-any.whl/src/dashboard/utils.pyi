from _typeshed import Incomplete
from google.cloud import storage as storage
from src.almanak_library.enums import Chain as Chain
from src.almanak_library.metrics.metrics_actions import MetricActionType as MetricActionType, MetricsActionHandler as MetricsActionHandler
from src.almanak_library.metrics.metrics_agg import METRICS_DB_CONNECTION_STRING as METRICS_DB_CONNECTION_STRING, MetricAggType as MetricAggType, MetricsAggHandler as MetricsAggHandler
from src.almanak_library.profiler.utils import get_cached_metrics_handler as get_cached_metrics_handler
from src.strategy.strategy_factory import StrategyFactory as StrategyFactory
from src.utils.utils import retry_get_block as retry_get_block

ENABLE_DEBUG: bool
CONFIG_FILENAME: str
PERSISTENT_STATE_FILENAME: str
BLOCK_TIME: Incomplete
metrics_action_handler: Incomplete
metrics_agg_handler: Incomplete
time_block_handler: Incomplete

def get_strategy_class_from_name(strategy_class_name): ...
def get_strategy_class_from_config(config): ...
def load_metrics_agg(strategy_id: str, metric_agg_type: MetricAggType = None): ...
def load_metrics_action(strategy_id: str, metric_action_type: MetricActionType = None): ...
def load_gas_metrics_df(strategy_id: str): ...
def load_fees_metrics_df(strategy_id: str, drop_incomplete_rows: bool = False): ...
def load_open_position_metrics_df(strategy_id: str, drop_incomplete_rows: bool = False): ...
def load_close_position_metrics_df(strategy_id: str, drop_incomplete_rows: bool = False): ...
def load_swap_metrics_df(strategy_id: str): ...
def load_snapshot_metrics_df(strategy_id: str): ...
def load_strategy_balance_metrics_df(strategy_id: str, drop_incomplete_rows: bool = False): ...
def load_initialization_metrics_df(strategy_id: str): ...
def load_teardown_metrics_df(strategy_id: str): ...
def load_rebalance_trigger_metrics_df(strategy_id: str): ...
def convert_to_decimal(data): ...
def to_base10(value, decimals): ...
def format_amount_str(amount, decimals, max_decimals: int = 6): ...
def get_explorer_url(chain: str): ...
def get_block_timestamp(web3, block_number): ...
def get_positions_over_time(opens, closes, fees: Incomplete | None = None, strat_balances: Incomplete | None = None, uniswap_sdk: Incomplete | None = None, token0_decimals: int = None, token1_decimals: int = None, strategy_id: str = None) -> list: ...
