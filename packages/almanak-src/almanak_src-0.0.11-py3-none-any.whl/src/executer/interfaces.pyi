import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from src.almanak_library.models.action_bundle import ActionBundle as ActionBundle
from src.executer.ethereum_mainnet_execution import execute_transaction_bundle_ethereum_mainnet as execute_transaction_bundle_ethereum_mainnet, get_executed_bundle_status_ethereum_mainnet as get_executed_bundle_status_ethereum_mainnet
from src.executer.evm_public_execution import execute_transaction_bundle_evm_public as execute_transaction_bundle_evm_public, get_executed_bundle_status_evm_public as get_executed_bundle_status_evm_public

class ExecutionInterface(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, manager): ...
    @abstractmethod
    def execute_transaction_bundle(self, action_bundle: ActionBundle) -> ActionBundle: ...
    @abstractmethod
    def get_executed_bundle_status(self, action_bundle: ActionBundle) -> ActionBundle: ...

class ExecutionEthereumMainnet(ExecutionInterface):
    manager: Incomplete
    def __init__(self, manager) -> None: ...
    def execute_transaction_bundle(self, action_bundle: ActionBundle) -> ActionBundle: ...
    def get_executed_bundle_status(self, action_bundle: ActionBundle) -> ActionBundle: ...

class ExecutionEthereumPublic(ExecutionInterface):
    manager: Incomplete
    def __init__(self, manager) -> None: ...
    def execute_transaction_bundle(self, action_bundle: ActionBundle) -> ActionBundle: ...
    def get_executed_bundle_status(self, action_bundle: ActionBundle) -> ActionBundle: ...
