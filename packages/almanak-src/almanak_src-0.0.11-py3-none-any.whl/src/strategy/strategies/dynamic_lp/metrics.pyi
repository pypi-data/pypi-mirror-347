from .strategy import StrategyDynamicLP as StrategyDynamicLP
from pprint import pprint as pprint
from src.almanak_library.constants import ETH_ADDRESS as ETH_ADDRESS
from src.almanak_library.enums import ActionType as ActionType
from src.almanak_library.metrics.metrics_agg import MetricAggType as MetricAggType, MetricsAggTable as MetricsAggTable
from src.almanak_library.models.receipt import Receipt as Receipt
from src.strategy.utils.price_volatility import get_current_price as get_current_price

def log_strategy_balance_metrics(strat: StrategyDynamicLP, action_bundle_id: str): ...
def log_swap_metrics(strat: StrategyDynamicLP, token_index: int, swap_executed: Receipt | None, swap_action_id: str, wrap_executed: Receipt | None, wrap_action_id: str, bundle_id: str, context: str): ...
def log_open_metrics(strat: StrategyDynamicLP, position_opened: Receipt, action_id: str, bundle_id: str, context: str): ...
def log_close_metrics(strat: StrategyDynamicLP, position_closed: Receipt, action_id: str, bundle_id: str, context: str): ...
def log_unwrap_metrics(strat: StrategyDynamicLP, unwrap: Receipt, action_id: str, bundle_id: str, context: str): ...
def log_initialization_metrics(strat: StrategyDynamicLP, init_details: dict, substate: bool, action_id: str = None, bundle_id: str = None, block_number: int = None): ...
def log_teardown_metrics(strat: StrategyDynamicLP, teardown_details: dict, substate: bool, action_id: str = None, bundle_id: str = None, block_number: int = None): ...
def log_rebalance_trigger_metrics(strat: StrategyDynamicLP, details: dict): ...
