# coding: utf-8

"""
    Selling Partner API for Orders

    Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

    The version of the OpenAPI document: v0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import pprint
import re  # noqa: F401

import six

from spapi.configuration import Configuration


class ExportInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_charge': 'Money',
        'export_charge_model': 'str',
    }

    attribute_map = {
        'export_charge': 'ExportCharge',
        'export_charge_model': 'ExportChargeModel',
    }

    def __init__(self, export_charge=None, export_charge_model=None, _configuration=None):  # noqa: E501
        """ExportInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._export_charge = None
        self._export_charge_model = None
        self.discriminator = None

        if export_charge is not None:
            self.export_charge = export_charge
        if export_charge_model is not None:
            self.export_charge_model = export_charge_model

    @property
    def export_charge(self):
        """Gets the export_charge of this ExportInfo.  # noqa: E501


        :return: The export_charge of this ExportInfo.  # noqa: E501
        :rtype: Money
        """
        return self._export_charge

    @export_charge.setter
    def export_charge(self, export_charge):
        """Sets the export_charge of this ExportInfo.


        :param export_charge: The export_charge of this ExportInfo.  # noqa: E501
        :type: Money
        """

        self._export_charge = export_charge

    @property
    def export_charge_model(self):
        """Gets the export_charge_model of this ExportInfo.  # noqa: E501

        Holds the `ExportCharge` collection model that is associated with the specified order item.\\n\\n**Possible values**: `AMAZON_FACILITATED`: Import/export charge is withheld by Amazon and remitted to the customs authority by the carrier on behalf of the buyer/seller.  # noqa: E501

        :return: The export_charge_model of this ExportInfo.  # noqa: E501
        :rtype: str
        """
        return self._export_charge_model

    @export_charge_model.setter
    def export_charge_model(self, export_charge_model):
        """Sets the export_charge_model of this ExportInfo.

        Holds the `ExportCharge` collection model that is associated with the specified order item.\\n\\n**Possible values**: `AMAZON_FACILITATED`: Import/export charge is withheld by Amazon and remitted to the customs authority by the carrier on behalf of the buyer/seller.  # noqa: E501

        :param export_charge_model: The export_charge_model of this ExportInfo.  # noqa: E501
        :type: str
        """

        self._export_charge_model = export_charge_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExportInfo):
            return True

        return self.to_dict() != other.to_dict()
