Metadata-Version: 2.4
Name: lazynwb
Version: 0.2.51
Summary: An attempt to speed-up access to large NWB (Neurodata Without Borders) files stored in the cloud.
Author-email: Ben Hardcastle <ben.hardcastle@alleninstitue.org>
License: MIT
Project-URL: Repository, https://github.com/bjhardcastle/lazynwb
Project-URL: Issues, https://github.com/bjhardcastle/lazynwb/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: npc-io>=0.1.32
Requires-Dist: h5py>=3.10.0
Requires-Dist: zarr>=2.17.0
Requires-Dist: remfile>=0.1.10
Requires-Dist: tqdm>=4.66.2
Requires-Dist: pandas>=2.0.0
Requires-Dist: polars[pandas]>=1.26.0
Dynamic: license-file

# lazynwb



[![PyPI](https://img.shields.io/pypi/v/lazynwb.svg?label=PyPI&color=blue)](https://pypi.org/project/lazynwb/)
[![Python version](https://img.shields.io/pypi/pyversions/lazynwb)](https://pypi.org/project/lazynwb/)

[![Coverage](https://img.shields.io/codecov/c/github/AllenInstitute/lazynwb?logo=codecov)](https://app.codecov.io/github/AllenInstitute/lazynwb)
[![CI/CD](https://img.shields.io/github/actions/workflow/status/AllenInstitute/lazynwb/publish.yml?label=CI/CD&logo=github)](https://github.com/bjhardcastle/lazynwb/actions/workflows/publish.yml)
[![GitHub issues](https://img.shields.io/github/issues/AllenInstitute/lazynwb?logo=github)](https://github.com/bjhardcastle/lazynwb/issues)

# Usage
```bash
uv add lazynwb
```

## Python
```python
>>> import lazynwb
```

# Development
See instructions in https://github.com/bjhardcastle/lazynwb/CONTRIBUTING.md and the original template: https://github.com/bjhardcastle/copier-pdm-npc/blob/main/README.md

## notes

- hdf5 access seems to have a mutex lock that threads spend a long time waiting to
  acquire (with remfile)
- seems to slow down over time in single-threaded loop
    - on laptop, first 5 are fast (2-3 s per iteration) - successive iterations
      are much slower (>60 s)
