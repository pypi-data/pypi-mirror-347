external def print_string(str : <u8>, len: u32) : u8;

EXIT_SUCCESS: u8 = 0 #u8|0|

def space():u8 {
    space:u8 = ' '
    print_string(>space<,1)
    return 0
}

def print_digit(digit:u8) :u8 {
    zero:u8 = '0';
    digit_out :u8 = zero + u8|digit|
    print_string(>digit_out<, 1)
}

def print_nl() :u8 {
    new_line: u8 = 10
    print_string(>new_line<,1)
}

def print_number(number: u64) :u8{
    if number == 0 {
	#print_digit(0)
	#print_nl()
	return 0
    }
    funky: <u32>
    funky_content:u32=42
    funky = >funky_content<;

    base:u64 = 100000000
    underway:u8 = false
    end:u16 = u16|7| + 3 - u16|<funky>| + 42;

    for 1..u8|end| as d:u8 {
	place:u64 = number / base;
	if place {
	    underway=true
	}

	if underway {
	    #print_digit(u8|place|)
        }
	number = number % base
	base = base/10
    }
    print_nl()
    return 0;
}

