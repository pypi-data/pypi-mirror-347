# expected_exit_code = 99
#
# ***ld_flag*** -lc
# ***ld_flag*** -dynamic-linker /lib64/ld-linux-x86-64.so.2
#
# NOTE in the expected output 1.3 < 1.3 - this is rounding error.
# ***expected output***
# ****
# The value is 103.400000
# The value is 1.100000
# The value is 0.997870
# The value is 19.600000
# The value is 4.900000
# The value is 1.800000
# 1.100000 is < 1.300000
# 1.200000 is < 1.300000
# 1.300000 is > 1.300000
# 0.000000 is <= 0.100000
# 0.000000 is != 0.100000
# 0.100000 is >= 0.100000
# 0.100000 is <= 0.100000
# 0.100000 is == 0.100000
# 0.200000 is >= 0.100000
# 0.200000 is != 0.100000
# ****

external def printf(fmt: <u8>, ...) : u32;
external stdout : <u8>
external def fflush(out: <u8>) : u32


def main(): u64 {
    value:f64 = 99.99 + 2.9
    value2:f64 = value + 0.01 + 0.9 - 0.4
    frmt: u8[24] = "The value is %f\n"
    printf(>frmt<, value2)
    printf(>frmt<, 0.2 + 0.9, 1.2)
    printf(>frmt<, 0.99787, 1.3)

    mult:f64 = 9.8 * 2.0
    printf(>frmt<, mult)

    div:f64 = 9.8 / 2.0
    printf(>frmt<, div)

    mod:f64 = 9.8 % 2.0
    printf(>frmt<, mod)

    frmt_gt: u8[30] = "%f is > %f\n"
    frmt_lt: u8[30] = "%f is < %f\n"
    frmt_lte: u8[30] = "%f is <= %f\n"
    frmt_gte: u8[30] = "%f is >= %f\n"
    frmt_eq: u8[30] = "%f is == %f\n"
    frmt_neq: u8[30] = "%f is != %f\n"

    v:f64 = 1.0
    targ:f64 = 1.3
    while true {
       v = v + 0.1
       # printf(>frmt<, v)
       if v > targ:
          printf(>frmt_gt<,v,targ)
       if v < targ:
          printf(>frmt_lt<,v,targ)

       if v > targ:
         break

   }

   v=0.0
   targ=0.1
   if v >= targ:
      printf(>frmt_gte<,v,targ)
   if v <= targ:
      printf(>frmt_lte<,v,targ)
   if v == targ:
      printf(>frmt_eq<,v,targ)
   if v != targ:
      printf(>frmt_neq<,v,targ)

   v=0.1
   targ=0.1
   if v >= targ:
      printf(>frmt_gte<,v,targ)
   if v <= targ:
      printf(>frmt_lte<,v,targ)
   if v == targ:
      printf(>frmt_eq<,v,targ)
   if v != targ:
      printf(>frmt_neq<,v,targ)

   v=0.2
   targ=0.1
   if v >= targ:
      printf(>frmt_gte<,v,targ)
   if v <= targ:
      printf(>frmt_lte<,v,targ)
   if v == targ:
      printf(>frmt_eq<,v,targ)
   if v != targ:
      printf(>frmt_neq<,v,targ)

    fflush(stdout)
    return 99
}

def ftest():f64 {
    a:f64 = 1.0
    b:f64 = 2.0
    c:f64 = a + b
    return c
}
