"""A uniform, backend-agnostic contract for any camera driver in your photonics lab software. By subclassing the abstract base class, you can swap in different SDKs (FliSdk, Flir/spinaker, or even a test stub) without changing your acquisition pipeline."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/00_core.ipynb 8
# bring forth **kwargs from an inherited class for documentation
from fastcore.meta import delegates
from fastcore.foundation import patch

from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any, Optional, Tuple, Union
import numpy as np


# %% ../nbs/00_core.ipynb 9
@delegates()
class BaseCameraInterface(ABC):
    """
    Abstract camera interface defining standard operations
    for different camera backends,  with
    context-manager support for Pythonâ€™s `with` statement.
    """

    def __init__(
        self,
        camera_index=0,
        camera_id=None,
        verbose=False,
        cam_settings=None,
        cropdims=None,
        darkpath="./",
        darkfile=None,
        **kwargs
    ):
        """
        Initialise the camera with given parameters.
        """
        ...

    def __enter__(self) -> "CameraInterface":
        """
        Enter the runtime context related to this object.
        Automatically starts capture upon entering.
        """
        return self

    def __exit__(
        self,
        exc_type: Optional[type],
        exc_value: Optional[BaseException],
        traceback: Optional[Any],
    ) -> None:
        """
        Exit the runtime context and clean up.
        Automatically stops capture and closes the camera.
        """
        try:
            self.stop_capture()
        finally:
            self.close()

    @abstractmethod
    def start_capture(self) -> None:
        """
        Begin image acquisition or live stream.
        """
        ...

    @abstractmethod
    def stop_capture(self) -> None:
        """
        Halt image acquisition or live stream.
        """
        ...

    @property
    @abstractmethod
    def exposure(self) -> float:
        """Get or set the camera exposure time in seconds."""
        ...

    @exposure.setter
    @abstractmethod
    def exposure(self, value: float) -> None: ...

    @property
    @abstractmethod
    def framerate(self) -> float:
        """Get or set the camera frame rate in frames per second."""
        ...

    @framerate.setter
    @abstractmethod
    def framerate(self, value: float) -> None: ...

    @property
    @abstractmethod
    def gain(self) -> float:
        """Get or set the camera gain (e.g., sensor analog gain)."""
        ...

    @gain.setter
    @abstractmethod
    def gain(self, value: float) -> None: ...

    @abstractmethod
    def get_image(self, wait: bool = True) -> np.ndarray:
        """
        Retrieve the latest image frame.
        :param wait: block until a new frame is available
        :return: 2D numpy array representing the image
        """
        ...

    @abstractmethod
    def take_dark(
        self, frames: int = 100, save_path: Optional[Path] = None
    ) -> np.ndarray:
        """
        Acquire a dark frame by averaging multiple captures.
        :param frames: number of frames to average
        :param save_path: optional file path to save the dark frame
        :return: dark frame array
        """
        ...

    @abstractmethod
    def load_dark(self, file: Union[str, Path]) -> None:
        """
        Load a previously saved dark frame from disk.
        """
        ...

    @abstractmethod
    def close(self) -> None:
        """
        Release all resources and shut down the camera.
        """
        ...