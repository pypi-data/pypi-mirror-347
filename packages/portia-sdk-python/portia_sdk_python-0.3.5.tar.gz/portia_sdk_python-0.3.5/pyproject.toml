[tool.poetry]
name = "portia-sdk-python"
version = "0.3.5"
description = "Portia Labs Python SDK for building agentic workflows."
authors = ["Hello <hello@portialabs.ai>"]
readme = "README.md"
repository = "https://github.com/portiaAI/portia-sdk-python"
homepage = "https://www.portialabs.ai/"
license = "MIT License"
packages = [
  {include = "portia"}
]
documentation = "https://docs.portialabs.ai"
keywords = ["LLM", "agentic", "workflow"]
classifiers = [
    "Development Status :: 3 - Alpha"
]

[tool.poetry.dependencies]
python = ">=3.11"
pydantic = "^2.10.3"
jinja2 = "^3.1.4"
instructor = {version = "^1.7.7", python = ">=3.11,<4.0"}
anthropic = ">=0.41.0"
langchain-anthropic = {version = "^0.3.0", python = ">=3.11,<4.0"}
langchain-core = {version = "^0.3.25", python = ">=3.11,<4.0"}
langchain-mistralai = {version = "^0.2.3", optional = true, python = ">=3.11,<4.0"}
langchain-openai = {version = "^0.3", python = ">=3.11,<4.0"}
mistralai = {version = "^1.2.5", optional = true}
langchain = {version = "^0.3.17", python = ">=3.11,<4.0"}
langgraph = {version = "^0.2.59", python = ">=3.11,<4.0"}
click = "^8.1.7"
loguru = {version = "^0.7.3", python = ">=3.11,<4.0"}
python-dotenv = "^1.0.1"
pandas = "^2.2.3"
pytest-mock = "^3.14.0"
openpyxl = "^3.1.5"
mcp = "^1.6.0"
langsmith = {version = "^0.3.15", python = ">=3.11,<4.0"}
google-generativeai = {version = "^0.8.4", optional = true, python = ">=3.11,<4.0"}
langchain-google-genai = {version = "^2.0.10", optional = true, python = ">=3.11,<4.0"}
playwright = { version = "^1.49.0", optional = true }
browser-use = { version = "0.1.40", optional = true, python = ">=3.11,<4.0" }
tiktoken = "^0.9.0"
jsonref = "^1.1.0"
browserbase = { version = "^1.2.0", optional = true }
langchain-ollama = {version = "^0.2.2", optional = true, python = ">=3.11,<4.0"}

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8.0"
ruff = "^0.8.0"
pytest = ">=8.3.3"
pytest-rerunfailures = "^14.0"
pytest-cov = "^5.0.0"
pyright = "^1.1.382"
pytest-httpx = "^0.33.0"
pytest-xdist = {extras = ["psutil"], version = "^3.6.1"}
pytest-asyncio = "^0.25.3"

[tool.poetry.extras]
mistral = ["langchain-mistralai", "mistralai"]
mistralai = ["langchain-mistralai", "mistralai"]
google = ["langchain-google-genai", "google-generativeai"]
ollama = ["langchain-ollama"]

# Tools that require extra dependencies
tools-browser-local = ["playwright", "browser-use"]
tools-browser-browserbase = ["playwright", "browser-use", "browserbase"]
tools-pdf-reader = ["mistralai"]

# All group - add all dependencies from above
all = [
  "langchain-mistralai",
  "mistralai",
  "langchain-google-genai",
  "google-generativeai",
  "langchain-ollama",
  "playwright",
  "browser-use",
  "browserbase",
]

[tool.ruff]
line-length=100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "COM812",  # Disables checks for trailing commas as they are fixed by the formatted and running both is not recommended.
  "D203",    # Disables checks for having a blank line before a class docstring. We instead have no-blank-line-before-class (D211) enabled.
  "D213",    # Disables checks for multi-line docstrings not starting on the first line. We instead have multi-line-summary-first-line (D212) enabled.
  "EM101",   # Disables checks for missing exception message arguments. We prefer single-line exception statements for simplicity and terseness.
  "EM102",   # Disables checks for f-string usage in exception messages. We prefer single-line exception statements with f-strings for simplicity and terseness.
  "TRY003",  # Disables checks for long error messages. We prefer to provide as much context to users as possible but want to avoid a proliferation of error classes.
]

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = [
  "S101",    # Disables check for asserts. Asserts in test cases can be useful.
  "PLR2004", # Disables magic number checks. Its normal to assert using magic numbers for things like array length.
  "INP001",  # Disables checks for implicit namespace packages. Tests are not part of the package.
]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
  "pydantic.BaseModel", # Tells ruff that BaseModel instances need to be evaluated at runtime.
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true  # Allows **kwargs: Any in type signatures.

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.setuptools.package-data]
portia = ["templates/**/*.jinja"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:Failing to pass a value to the 'type_params' parameter of 'typing.ForwardRef._evaluate':DeprecationWarning",  # this comes from LangChain
    "ignore::DeprecationWarning:langchain_core.load.serializable",  # Pydantic via LangChain
]
addopts = [
  "--cov",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--import-mode=importlib"
]
asyncio_mode = "auto"

[tool.coverage.run]
omit = [
    "*/tests/*", # Don't cover test files themselves
    "example.py", # Don't cover example
    "*/_unstable/**",  # Don't check _unstable files
    "portia/cli.py",  # Best effort test coverage
]

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
    "pragma: no cover",
]

[[tool.pydoc-markdown.loaders]]
type = "python"

[[tool.pydoc-markdown.processors]]
type = "filter"
expression = "not 'test' in name and not 'cli' in name and not 'prefixed_uuid' in name and not 'common' in name and not 'templates' in name and not '_unstable' in name and default()"
skip_empty_modules = true

[[tool.pydoc-markdown.processors]]
type = "smart"

[[tool.pydoc-markdown.processors]]
type = "crossref"

[tool.pydoc-markdown.renderer]
type = "docusaurus"
relative_output_path="SDK"
sidebar_top_level_label=""

[tool.poetry.scripts]
portia-cli = "portia.cli:cli"

[tool.licensecheck]
using = "poetry"
ignore_packages = [
  "mistralai", # MistralAI is Apache 2.0 licensed: https://github.com/mistralai/client-python?tab=Apache-2.0-1-ov-file
] 
