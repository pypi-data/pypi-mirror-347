# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.unchecked_base_model import UncheckedBaseModel
from .automations_get_response_data_status import AutomationsGetResponseDataStatus
from .automations_get_response_data_trigger import AutomationsGetResponseDataTrigger
from .automations_get_response_data_workflow_item import AutomationsGetResponseDataWorkflowItem


class AutomationsGetResponseData(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    Unique identifier for the automation
    """

    name: str = pydantic.Field()
    """
    User-defined name for the automation
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional description for the automation
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    User-defined key-value metadata for the automation.
    """

    trigger: AutomationsGetResponseDataTrigger = pydantic.Field()
    """
    The event and conditions that trigger this automation.
    """

    workflow: typing.List[AutomationsGetResponseDataWorkflowItem] = pydantic.Field()
    """
    The sequence of tasks to be executed when the automation is triggered. The structure of each task object varies depending on its 'kind'.
    """

    status: AutomationsGetResponseDataStatus = pydantic.Field()
    """
    Current status of the automation
    """

    created: dt.datetime = pydantic.Field()
    """
    Timestamp when the automation was created
    """

    updated: dt.datetime = pydantic.Field()
    """
    Timestamp when the automation was last updated
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
