# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawTasksClient, RawTasksClient
from .types.tasks_create_request_kind import TasksCreateRequestKind
from .types.tasks_create_response import TasksCreateResponse
from .types.tasks_get_response import TasksGetResponse
from .types.tasks_list_filtered_request_kind import TasksListFilteredRequestKind
from .types.tasks_list_filtered_request_status import TasksListFilteredRequestStatus
from .types.tasks_list_filtered_response import TasksListFilteredResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TasksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTasksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTasksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTasksClient
        """
        return self._raw_client

    def list_filtered(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        status: typing.Optional[TasksListFilteredRequestStatus] = None,
        kind: typing.Optional[TasksListFilteredRequestKind] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TasksListFilteredResponse:
        """
        Retrieves a list of tasks for the project, optionally filtered by status or kind.

        Parameters
        ----------
        page : typing.Optional[int]
            Page number.

        limit : typing.Optional[int]
            Items per page.

        status : typing.Optional[TasksListFilteredRequestStatus]
            Filter by task status.

        kind : typing.Optional[TasksListFilteredRequestKind]
            Filter by task kind.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TasksListFilteredResponse
            A list of tasks.

        Examples
        --------
        from ittybit import Ittybit
        client = Ittybit(token="YOUR_TOKEN", )
        client.tasks.list_filtered()
        """
        _response = self._raw_client.list_filtered(
            page=page, limit=limit, status=status, kind=kind, request_options=request_options
        )
        return _response.data

    def create(
        self,
        *,
        kind: TasksCreateRequestKind,
        url: typing.Optional[str] = OMIT,
        input: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        file_id: typing.Optional[str] = OMIT,
        workflow: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        format: typing.Optional[str] = OMIT,
        width: typing.Optional[int] = OMIT,
        height: typing.Optional[int] = OMIT,
        quality: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TasksCreateResponse:
        """
        Creates a new processing task (e.g., ingest, video transcode, speech analysis) or a workflow task.

        Parameters
        ----------
        kind : TasksCreateRequestKind
            The type of task to create.

        url : typing.Optional[str]
            URL of the source file (required for 'ingest' kind unless file_id is used, can be used for others).

        input : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Task-specific input parameters depending on the kind of task.

        file_id : typing.Optional[str]
            ID of an existing file to use as input (alternative to url).

        workflow : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]
            An array of task definition objects for a workflow.

        webhook_url : typing.Optional[str]
            An optional HTTPS URL to send a webhook notification to upon task completion or failure.

        filename : typing.Optional[str]
            Desired filename for the output (if applicable).

        folder : typing.Optional[str]
            Desired output folder (if applicable).

        format : typing.Optional[str]
            Output format (e.g., for video/image tasks).

        width : typing.Optional[int]
            Output width (for video/image tasks).

        height : typing.Optional[int]
            Output height (for video/image tasks).

        quality : typing.Optional[int]
            Output quality setting (e.g., for video/image tasks, 0-100).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TasksCreateResponse
            Created task (Deprecated endpoint)

        Examples
        --------
        from ittybit import Ittybit
        client = Ittybit(token="YOUR_TOKEN", )
        client.tasks.create(kind="ingest", url='https://example.com/some_video.mov', input={'options': {'filename': 'custom_name.mov'}
        }, )
        """
        _response = self._raw_client.create(
            kind=kind,
            url=url,
            input=input,
            file_id=file_id,
            workflow=workflow,
            webhook_url=webhook_url,
            filename=filename,
            folder=folder,
            format=format,
            width=width,
            height=height,
            quality=quality,
            request_options=request_options,
        )
        return _response.data

    def get_task_config(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Retrieves available task kinds and their configuration options.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Task configuration details.

        Examples
        --------
        from ittybit import Ittybit
        client = Ittybit(token="YOUR_TOKEN", )
        client.tasks.get_task_config()
        """
        _response = self._raw_client.get_task_config(request_options=request_options)
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> TasksGetResponse:
        """
        Retrieves the details of a specific task by its ID.

        Parameters
        ----------
        id : str
            The ID of the task to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TasksGetResponse
            Task details.

        Examples
        --------
        from ittybit import Ittybit
        client = Ittybit(token="YOUR_TOKEN", )
        client.tasks.get(id='id', )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data


class AsyncTasksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTasksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTasksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTasksClient
        """
        return self._raw_client

    async def list_filtered(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        status: typing.Optional[TasksListFilteredRequestStatus] = None,
        kind: typing.Optional[TasksListFilteredRequestKind] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TasksListFilteredResponse:
        """
        Retrieves a list of tasks for the project, optionally filtered by status or kind.

        Parameters
        ----------
        page : typing.Optional[int]
            Page number.

        limit : typing.Optional[int]
            Items per page.

        status : typing.Optional[TasksListFilteredRequestStatus]
            Filter by task status.

        kind : typing.Optional[TasksListFilteredRequestKind]
            Filter by task kind.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TasksListFilteredResponse
            A list of tasks.

        Examples
        --------
        from ittybit import AsyncIttybit
        import asyncio
        client = AsyncIttybit(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tasks.list_filtered()
        asyncio.run(main())
        """
        _response = await self._raw_client.list_filtered(
            page=page, limit=limit, status=status, kind=kind, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        kind: TasksCreateRequestKind,
        url: typing.Optional[str] = OMIT,
        input: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        file_id: typing.Optional[str] = OMIT,
        workflow: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        webhook_url: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        format: typing.Optional[str] = OMIT,
        width: typing.Optional[int] = OMIT,
        height: typing.Optional[int] = OMIT,
        quality: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TasksCreateResponse:
        """
        Creates a new processing task (e.g., ingest, video transcode, speech analysis) or a workflow task.

        Parameters
        ----------
        kind : TasksCreateRequestKind
            The type of task to create.

        url : typing.Optional[str]
            URL of the source file (required for 'ingest' kind unless file_id is used, can be used for others).

        input : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Task-specific input parameters depending on the kind of task.

        file_id : typing.Optional[str]
            ID of an existing file to use as input (alternative to url).

        workflow : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]
            An array of task definition objects for a workflow.

        webhook_url : typing.Optional[str]
            An optional HTTPS URL to send a webhook notification to upon task completion or failure.

        filename : typing.Optional[str]
            Desired filename for the output (if applicable).

        folder : typing.Optional[str]
            Desired output folder (if applicable).

        format : typing.Optional[str]
            Output format (e.g., for video/image tasks).

        width : typing.Optional[int]
            Output width (for video/image tasks).

        height : typing.Optional[int]
            Output height (for video/image tasks).

        quality : typing.Optional[int]
            Output quality setting (e.g., for video/image tasks, 0-100).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TasksCreateResponse
            Created task (Deprecated endpoint)

        Examples
        --------
        from ittybit import AsyncIttybit
        import asyncio
        client = AsyncIttybit(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tasks.create(kind="ingest", url='https://example.com/some_video.mov', input={'options': {'filename': 'custom_name.mov'}
            }, )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            kind=kind,
            url=url,
            input=input,
            file_id=file_id,
            workflow=workflow,
            webhook_url=webhook_url,
            filename=filename,
            folder=folder,
            format=format,
            width=width,
            height=height,
            quality=quality,
            request_options=request_options,
        )
        return _response.data

    async def get_task_config(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Retrieves available task kinds and their configuration options.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Task configuration details.

        Examples
        --------
        from ittybit import AsyncIttybit
        import asyncio
        client = AsyncIttybit(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tasks.get_task_config()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_task_config(request_options=request_options)
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> TasksGetResponse:
        """
        Retrieves the details of a specific task by its ID.

        Parameters
        ----------
        id : str
            The ID of the task to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TasksGetResponse
            Task details.

        Examples
        --------
        from ittybit import AsyncIttybit
        import asyncio
        client = AsyncIttybit(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tasks.get(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data
