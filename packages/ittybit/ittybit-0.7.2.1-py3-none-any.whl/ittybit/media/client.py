# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.media_list_response import MediaListResponse
from .raw_client import AsyncRawMediaClient, RawMediaClient
from .types.media_create_response import MediaCreateResponse
from .types.media_delete_response import MediaDeleteResponse
from .types.media_get_response import MediaGetResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MediaClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMediaClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMediaClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMediaClient
        """
        return self._raw_client

    def list(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaListResponse:
        """
        Retrieves a list of all media for the current project

        Parameters
        ----------
        page : typing.Optional[int]
            Page number for pagination.

        limit : typing.Optional[int]
            Number of media items to return per page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaListResponse
            A list of media items

        Examples
        --------
        from ittybit import Ittybit
        client = Ittybit(token="YOUR_TOKEN", )
        client.media.list()
        """
        _response = self._raw_client.list(page=page, limit=limit, request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        url: typing.Optional[str] = OMIT,
        label: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        async_: typing.Optional[bool] = OMIT,
        empty: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaCreateResponse:
        """
        Creates a new media item from a URL or as an empty placeholder

        Parameters
        ----------
        url : typing.Optional[str]
            URL of the media file to ingest. Required unless 'empty' is true.

        label : typing.Optional[str]
            Label for the media

        folder : typing.Optional[str]
            Folder to store the media in

        filename : typing.Optional[str]
            Filename for the media

        title : typing.Optional[str]
            Title for the media

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Additional metadata for the media

        async_ : typing.Optional[bool]
            Whether to process the media asynchronously

        empty : typing.Optional[bool]
            Create an empty media placeholder

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaCreateResponse
            Media created successfully

        Examples
        --------
        from ittybit import Ittybit
        client = Ittybit(token="YOUR_TOKEN", )
        client.media.create(url='https://storage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4', folder='examples/movies', filename='escapes.mp4', metadata={'genre': 'Animation'
        , 'rating': 'G'
        }, )
        """
        _response = self._raw_client.create(
            url=url,
            label=label,
            folder=folder,
            filename=filename,
            title=title,
            metadata=metadata,
            async_=async_,
            empty=empty,
            request_options=request_options,
        )
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> MediaGetResponse:
        """
        Retrieves a specific media item by its ID

        Parameters
        ----------
        id : str
            The media ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaGetResponse
            Media item details

        Examples
        --------
        from ittybit import Ittybit
        client = Ittybit(token="YOUR_TOKEN", )
        client.media.get(id='id', )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> MediaDeleteResponse:
        """
        Deletes a specific media item by its ID

        Parameters
        ----------
        id : str
            The media ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaDeleteResponse
            Media deleted successfully

        Examples
        --------
        from ittybit import Ittybit
        client = Ittybit(token="YOUR_TOKEN", )
        client.media.delete(id='id', )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data


class AsyncMediaClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMediaClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMediaClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMediaClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaListResponse:
        """
        Retrieves a list of all media for the current project

        Parameters
        ----------
        page : typing.Optional[int]
            Page number for pagination.

        limit : typing.Optional[int]
            Number of media items to return per page.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaListResponse
            A list of media items

        Examples
        --------
        from ittybit import AsyncIttybit
        import asyncio
        client = AsyncIttybit(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.media.list()
        asyncio.run(main())
        """
        _response = await self._raw_client.list(page=page, limit=limit, request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        url: typing.Optional[str] = OMIT,
        label: typing.Optional[str] = OMIT,
        folder: typing.Optional[str] = OMIT,
        filename: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        async_: typing.Optional[bool] = OMIT,
        empty: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MediaCreateResponse:
        """
        Creates a new media item from a URL or as an empty placeholder

        Parameters
        ----------
        url : typing.Optional[str]
            URL of the media file to ingest. Required unless 'empty' is true.

        label : typing.Optional[str]
            Label for the media

        folder : typing.Optional[str]
            Folder to store the media in

        filename : typing.Optional[str]
            Filename for the media

        title : typing.Optional[str]
            Title for the media

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Additional metadata for the media

        async_ : typing.Optional[bool]
            Whether to process the media asynchronously

        empty : typing.Optional[bool]
            Create an empty media placeholder

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaCreateResponse
            Media created successfully

        Examples
        --------
        from ittybit import AsyncIttybit
        import asyncio
        client = AsyncIttybit(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.media.create(url='https://storage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4', folder='examples/movies', filename='escapes.mp4', metadata={'genre': 'Animation'
            , 'rating': 'G'
            }, )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            url=url,
            label=label,
            folder=folder,
            filename=filename,
            title=title,
            metadata=metadata,
            async_=async_,
            empty=empty,
            request_options=request_options,
        )
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> MediaGetResponse:
        """
        Retrieves a specific media item by its ID

        Parameters
        ----------
        id : str
            The media ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaGetResponse
            Media item details

        Examples
        --------
        from ittybit import AsyncIttybit
        import asyncio
        client = AsyncIttybit(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.media.get(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> MediaDeleteResponse:
        """
        Deletes a specific media item by its ID

        Parameters
        ----------
        id : str
            The media ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MediaDeleteResponse
            Media deleted successfully

        Examples
        --------
        from ittybit import AsyncIttybit
        import asyncio
        client = AsyncIttybit(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.media.delete(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data
