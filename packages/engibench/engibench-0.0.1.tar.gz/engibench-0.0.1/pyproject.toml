[build-system]
requires = ["setuptools >= 74.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "engibench"
dynamic = ["version"]
description="A suite of benchmarks for automated engineering design."
readme = "README.md"
requires-python = ">= 3.10"
authors = [{ name = "Florian Felten", email = "ffelten@mavt.ethz.ch" }]
license = { text = "GPL-3.0" }
keywords = ["Mechanical Engineering", "Machine Learning", "AI", "Optimization"]
classifiers = [
    "Development Status :: 4 - Beta",  # change to `5 - Production/Stable` when ready
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
]
dependencies = [
    "numpy <=2.0",
    "gymnasium >= 1.0.0",
    "datasets[vision] >= 3.1.0", # imports modules with image features
    "pandas >= 2.2.3",
    "matplotlib >= 3.9.3",
    "pyarrow >= 15.0.0, < 20.0.0", # HF datasets not migrated to pyarrow 20.0.0 yet
]

[project.optional-dependencies]
airfoil = ["sqlitedict>=1.6"] # for pyopt_history.py
electronics = ["networkx >= 3.2.1"]
beams2d = ["cvxopt >= 1.3.2", "seaborn"]
thermoelastic2d = ["cvxopt >= 1.3.2", "mmapy >= 0.3.0"]
photonics2d = ["ceviche >= 0.1.3"]
all = [
    # All dependencies above
    "engibench[airfoil,beams2d,thermoelastic2d,photonics2d,electronics]"
]

doc = [
    "sphinx",
    "sphinx-autobuild",
    "myst-parser",
    "sphinx-gallery==0.14.0",
    "sphinx-book-theme",
    "sphinx_github_changelog",
    "tabulate",
]
testing = ["pytest >= 8.3.2"]
dev = [
    "engibench[doc,testing,all]"
]

[project.urls]
Homepage = "https://ideal.ethz.ch/"
Repository = "https://github.com/IDEALLab/EngiBench"
Documentation = "https://engibench.ethz.ch"
"Bug Report" = "https://github.com/IDEALLab/EngiBench/issues"

[tool.setuptools]
dynamic = {version = {attr = "engibench.__version__"}}
include-package-data = true

[tool.setuptools.packages.find]
include = ["engibench", "engibench.*"]

[tool.setuptools.package-data]
engibench = [
    "**/*.json",
    "**/templates/*",
    "**/data/*",
]

######################## Linters and Test tools #########################

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "templates",
    "venv",
    "docs",
]

# Same as Black.
line-length = 124
indent-width = 4
target-version = "py310"


######################################## LINTING ########################################
[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN",      # flake8-annotations (mypy's job)
  "COM812",   # missing-trailing-comma (conflicts with formatter)
  "CPY",      # flake8-copyright
  "D105",     # undocumented-magic-method
  "D107",     # undocumented-public-init
  "D401",     # non-imperative-mood
  "E501",     # line-too-long (formatter's job)
  "EM101",    # raw-string-in-exception
  "EM102",    # f-string-in-exception
  "E741",     # ambiguous-variable-name
  "FIX002",   # flake8-fixme (flake8-todos is enough)
  "PTH",      # flake8-use-pathlib
  "S101",     # flake8-bandit: assert
  "S301",     # suspicious-pickle-usage
  "S603",     # subprocess-without-shell-equals-true
  "S607",     # start-process-with-partial-path
  "T201",     # print
  "TRY003",     # print
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Google format for docstring
[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.isort]
# Settings for google standard.
force-single-line = true
force-sort-within-sections = true
single-line-exclusions = [
    "typing",
    "collections.abc",
    "typing_extensions",
]
order-by-type = false



######################################## PER FILE IGNORES ########################################
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "B018",    # B018 - Found useless expression - necessary for testing exceptions are raised.
    "D100",    # D100 - Module dostrings not required in test files.
    "D104",    # D104 - Package dostrings not required in test files.
    "ARG",     # ARG - Unused args are common in tests with mock patches and mock functions.
    "D",       # Pydocstyle
]
"*/__init__.py" = [
    "F401",    # Module imported but unused
    "D104",    # D104 - Package dostrings not required in init files.
    "E402"
]
"docs/**" = [
    "D",       # Pydocstyle
]
"setup.py" = [
    "D",       # Pydocstyle
    "ANN",      # annotations
    "SIM",      # simplify
    "TRY",      # tryceratops

]
"**/templates/**/*.py" = ["ALL"]


###################################### FORMAT ########################################
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"



###################################### PYRIGHT ########################################
[tool.pyright]
include = ["engibench/**"]
exclude = ["**/node_modules", "**/__pycache__", "**/templates/**", "**/study*", "**/pyopt_history.py"]
strict = []

typeCheckingMode = "basic"
pythonVersion = "3.10"
pythonPlatform = "All"
typeshedPath = "typeshed"
enableTypeIgnoreComments = true

# This is required as the CI pre-commit does not download the module (i.e. numpy, pygame)
#   Therefore, we have to ignore missing imports
reportMissingImports = "none"
# Some modules are missing type stubs, which is an issue when running pyright locally
reportMissingTypeStubs = false
# For warning and error, will raise an error when
reportInvalidTypeVarUse = "none"
reportOptionalSubscript = "none"

reportGeneralTypeIssues = "none"  # -> commented out raises 489 errors
# reportUntypedFunctionDecorator = "none"  # -> pytest.mark.parameterize issues

# reportOptionalMemberAccess = "none" # -> commented out raises warnings
reportPrivateImportUsage = "warning" # ->

reportPrivateUsage = "warning"
reportUnboundVariable = "warning"

[tool.mypy]
warn_redundant_casts = true
warn_unused_ignores = true
files = ["engibench/", "tests/"]
exclude = [
  "^build/",
  "^templates/.*",
  "templates/.*",
  ".*/templates/.*",
  "^engibench_studies/problems/airfoil/study_[^/]*/",
  "^engibench/problems/airfoil/pyopt_history.py",
  "^docs/",
]
[[tool.mypy.overrides]]
module = [
    "mmapy",
    "fenics",
    "fenics_adjoint",
    "gymnasium",
    "scipy.*",
    "seaborn",
    "matplotlib",
    "matplotlib.*",
    "pyoptsparse",
    "pandas",
    "cvxopt",
    "cvxopt.*",
    "datasets",
    "networkx",
    "autograd",
    "autograd.*",
    "ceviche",
    "ceviche.*",
    "sqlitedict",
    "sqlitedict.*",
]
ignore_missing_imports = true
