# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnippetArgs', 'Snippet']

@pulumi.input_type
class SnippetArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Snippet resource.
        :param pulumi.Input[builtins.str] description: The Description param.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] labels: The Labels param.
        :param pulumi.Input[builtins.str] name: The Name param.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Description param.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The Labels param.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _SnippetState:
    def __init__(__self__, *,
                 created_in: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 folders: Optional[pulumi.Input[Sequence[pulumi.Input['SnippetFolderArgs']]]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 last_update: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 shared_in: Optional[pulumi.Input[builtins.str]] = None,
                 tfid: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Snippet resources.
        :param pulumi.Input[builtins.str] created_in: The CreatedIn param.
        :param pulumi.Input[builtins.str] description: The Description param.
        :param pulumi.Input[builtins.str] display_name: The DisplayName param.
        :param pulumi.Input[Sequence[pulumi.Input['SnippetFolderArgs']]] folders: The Folders param.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] labels: The Labels param.
        :param pulumi.Input[builtins.str] last_update: The LastUpdate param.
        :param pulumi.Input[builtins.str] name: The Name param.
        :param pulumi.Input[builtins.str] shared_in: The SharedIn param.
        :param pulumi.Input[builtins.str] type: The Type param. String must be one of these: `"predefined"`.
        """
        if created_in is not None:
            pulumi.set(__self__, "created_in", created_in)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if folders is not None:
            pulumi.set(__self__, "folders", folders)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shared_in is not None:
            pulumi.set(__self__, "shared_in", shared_in)
        if tfid is not None:
            pulumi.set(__self__, "tfid", tfid)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdIn")
    def created_in(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CreatedIn param.
        """
        return pulumi.get(self, "created_in")

    @created_in.setter
    def created_in(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_in", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Description param.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The DisplayName param.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def folders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnippetFolderArgs']]]]:
        """
        The Folders param.
        """
        return pulumi.get(self, "folders")

    @folders.setter
    def folders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnippetFolderArgs']]]]):
        pulumi.set(self, "folders", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The Labels param.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The LastUpdate param.
        """
        return pulumi.get(self, "last_update")

    @last_update.setter
    def last_update(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_update", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sharedIn")
    def shared_in(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SharedIn param.
        """
        return pulumi.get(self, "shared_in")

    @shared_in.setter
    def shared_in(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "shared_in", value)

    @property
    @pulumi.getter
    def tfid(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "tfid")

    @tfid.setter
    def tfid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tfid", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Type param. String must be one of these: `"predefined"`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("scm:index/snippet:Snippet")
class Snippet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.Snippet("example")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The Description param.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] labels: The Labels param.
        :param pulumi.Input[builtins.str] name: The Name param.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SnippetArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Retrieves a config item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_scm as scm

        example = scm.Snippet("example")
        ```

        :param str resource_name: The name of the resource.
        :param SnippetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnippetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnippetArgs.__new__(SnippetArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["created_in"] = None
            __props__.__dict__["display_name"] = None
            __props__.__dict__["folders"] = None
            __props__.__dict__["last_update"] = None
            __props__.__dict__["shared_in"] = None
            __props__.__dict__["tfid"] = None
            __props__.__dict__["type"] = None
        super(Snippet, __self__).__init__(
            'scm:index/snippet:Snippet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_in: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            display_name: Optional[pulumi.Input[builtins.str]] = None,
            folders: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SnippetFolderArgs', 'SnippetFolderArgsDict']]]]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            last_update: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            shared_in: Optional[pulumi.Input[builtins.str]] = None,
            tfid: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'Snippet':
        """
        Get an existing Snippet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] created_in: The CreatedIn param.
        :param pulumi.Input[builtins.str] description: The Description param.
        :param pulumi.Input[builtins.str] display_name: The DisplayName param.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SnippetFolderArgs', 'SnippetFolderArgsDict']]]] folders: The Folders param.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] labels: The Labels param.
        :param pulumi.Input[builtins.str] last_update: The LastUpdate param.
        :param pulumi.Input[builtins.str] name: The Name param.
        :param pulumi.Input[builtins.str] shared_in: The SharedIn param.
        :param pulumi.Input[builtins.str] type: The Type param. String must be one of these: `"predefined"`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnippetState.__new__(_SnippetState)

        __props__.__dict__["created_in"] = created_in
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["folders"] = folders
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_update"] = last_update
        __props__.__dict__["name"] = name
        __props__.__dict__["shared_in"] = shared_in
        __props__.__dict__["tfid"] = tfid
        __props__.__dict__["type"] = type
        return Snippet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdIn")
    def created_in(self) -> pulumi.Output[builtins.str]:
        """
        The CreatedIn param.
        """
        return pulumi.get(self, "created_in")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The Description param.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[builtins.str]:
        """
        The DisplayName param.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def folders(self) -> pulumi.Output[Sequence['outputs.SnippetFolder']]:
        """
        The Folders param.
        """
        return pulumi.get(self, "folders")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The Labels param.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> pulumi.Output[builtins.str]:
        """
        The LastUpdate param.
        """
        return pulumi.get(self, "last_update")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The Name param.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sharedIn")
    def shared_in(self) -> pulumi.Output[builtins.str]:
        """
        The SharedIn param.
        """
        return pulumi.get(self, "shared_in")

    @property
    @pulumi.getter
    def tfid(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "tfid")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The Type param. String must be one of these: `"predefined"`.
        """
        return pulumi.get(self, "type")

