#!/usr/bin/env python3

import unittest
from highctidh import ctidh
from highctidh import InvalidFieldSize, InvalidPublicKey, CSIDHError
from struct import pack

import ctypes

#
# NOTE:
# The Golang blinding vectors are from the early elixxir/ctidh_go blinding api.
# The Golang vector data is from this commit:
# https://git.xx.network/elixxir/ctidh_cgo/-/commit/aaaa57d66c604830d50a7a8a5d080fb38d5258c8
# The newer blinding api in golang with hkdf+sha2 is not tested here.
#

# Golang static 511 vectors

# From https://git.xx.network/elixxir/ctidh_cgo/-/blob/master/vectors511_test.go
golang_alice_sk_511_vector = bytes.fromhex(
    "fd020202fb01ff020001fbffff0003020502ff020500fefefe02010501fb01fcfffc03010001000101fb000400fe000100fc030100000301fcfe0001ffff01ff00fe00ff000300ffff00"
)
golang_alice_pk_511_vector = bytes.fromhex(
    "17f085e2f4ada10a3f0b15b0e3cff0e13ee915d3915dd779ae22c4664f067966c1ec2fae5fafb2af06222b8bdc3b7a649114ac5cc0dbd13cf35e4b5e61a74815"
)
golang_bob_sk_511_vector = bytes.fromhex(
    "02ff0401fe02fdff00040001fbfafefd00000002fe02fcfeff00fe010303020004fe0105fc00fd00ff0001fd04fe0302feff000000fe00ff02fefefdfe00010000030000000002fe0201"
)
golang_bob_pk_511_vector = bytes.fromhex(
    "839aa1c32d36bb9e75cdb5c5ea62aea6ee56b8521dfae8bbfde9a70895f8f381b5a36bf5a87c2a5cda8b498711add07f21deaed998d985f7f79578759e233c25"
)
golang_ss_511_vector = bytes.fromhex(
    "74cc3560ed96ca88ad111f2feb5002240bc3a389c1b768eb588e4c4432a9ed748a5341b68618ed49bb81b3554fb6a5bc41289513c5321faa9b8230611f50f311"
)
golang_blinding_pk_511_vector = bytes.fromhex(
    "025c39c2f0c91a549470c497566cf2ba4114e5facd24635e8cee6088a4c5ce73d91b18ccf02609c7f5f200b4a92ae18036a56b308add0fbf5b3d96a347e49f59"
)
golang_blinding_factor_511_vector = bytes.fromhex(
    "44b793fa59e54f8ebcb3e3e2f9a35707964c12b55fa0dd39eda24046fafe383fd71098144eef914d92729f0836b46f4fe3cd0a75afb1ccb1fa2b36fcf15b7489dacfacdff74d5cc53973"
)
golang_blinding_output_511_vector = bytes.fromhex(
    "53defe8218c10d123390328c31165039854d31ab3099dce28a1fb31873a2104f16c02e59e5739078cd5dec5ec90f518178e2964569733e053c85248048361f32"
)

# Python static 511 vectors (generated by an earlier version of this program)
python_alice_sk_511_vector = bytes.fromhex(
    "ff01000503f801020003fffe0401fd000501fe030002fc03fffc00fc00000104fb00fe02040200000003feff0100ff0101000100fffe0302fffeff000301010100ff0100ffff00000100"
)
python_alice_pk_511_vector = bytes.fromhex(
    "27e65081c09f7dee63101e78309ef0ec892342435f04f237194d3fcef22fd850875fae3b7237d0d5952b9ab6351571967c6d0ba219158ee276192adc3a177713"
)
python_alice_blinding_factor_511_vector = bytes.fromhex(
    "04fe02010302010501ff0701fefdfe01ff00fcff0002fc01fefefcfeff03ff050002ff0600fe00fa00ff0004fffeffff0001fbff0101fdfffdfd000000000201ff0003ffff01ffffff00"
)
python_alice_blinding_output_511_vector = bytes.fromhex(
    "200440f22113b41e8462dcf70a9ba9413b7cbb4bb0ab1a23b9616654bd3edab4011bd7cd04325f4507f9f0a9e547194f3bc2a3a7aaaed4a2caee0fcad9cb1f58"
)
python_bob_sk_511_vector = bytes.fromhex(
    "040000fdfafeff0003fffffa01fdfe02fe03fffc00ffff00fb030201fefd02fd01fe010300fd0202020300020101000100fa03ff00000000fd00ff030201020000000103000001010100"
)
python_bob_pk_511_vector = bytes.fromhex(
    "1c025d14327ca5dcad356f5f96df318c1d04434c554b7e79fc9a9a0c15e1f9b81665d5db19d5c1417dd0c7a31160db09b117817bb297faed7a068fb491627920"
)
python_ss_511_vector = bytes.fromhex(
    "5ecc8e5159cdb3bfac9281e183d9b3cbf2e289c28dee69f99b2fd840f141686fb133a3a40360a4e6056230a649be57b4e045b4c28c5558f80f57f85b43bbaf33"
)
python_ss_dh_511_vector = bytes.fromhex(
    "4da2a2c3c83c0f7faa42fe89822a83ef835e2c5f3ff1aaec8c41789fdfb2faacbcaf6dc5868b63b8c9a748c65b4acde282fde70615d8143b7bf3b0ee301f46cc"
)

# Golang static 512 vectors
# From https://git.xx.network/elixxir/ctidh_cgo/-/blob/master/vectors512_test.go
golang_alice_sk_512_vector = bytes.fromhex(
    "0500ff0500fbfc04020a04010001050701ff01fcfc00fbff00fd010601fc00fffefd01f901f700fe000401ff0306fdff000102ff000204fdfd02ff01fc0000010401fd0000fffeff0500"
)
golang_alice_pk_512_vector = bytes.fromhex(
    "a9f14cf61e8c8b9bf701c704ed66324ec3813eb7869106d636e4f72b09ac07e44979d45634f616ae12d876aec0de546f21cd9219d47e07da0929ec456d939338"
)
golang_bob_sk_512_vector = bytes.fromhex(
    "06fc0009fc01ff0201060304fcf501010004020104fd02fff8fefffc0103030100ffff040304ff0102fa0002ff000101fafdfe03ff0400fe01fa00fd0101ff03fe020101030200ff0001"
)
golang_bob_pk_512_vector = bytes.fromhex(
    "1e4a6a12ae0218f3eda0213d28e640bf4e39a56847b0374576cb02a18219d7c64ea7e87414ce20eb45566f6cf6243e8fb6f4554e5553e6d4418b4ca609ff6c3a"
)
golang_ss_512_vector = bytes.fromhex(
    "24081588d4f3232f788e4e65db4870a223942ad272722a70577c26533c93adcd798cd166f26bfbafa6d6e428bf502a98e753a5a17ba2669869b2082f50266932"
)
golang_blinding_pk_512_vector = bytes.fromhex(
    "928d8753b4749add1a24a1eb7f3654535cdc8137fadd54d548fd7870c2bafa7cbd02a605fa7567679a5a01914f8c8c411843ac5890fd34ba1e99f4f6bd9bf612"
)
golang_blinding_factor_512_vector = bytes.fromhex(
    "4972d672d1acd58c3f3a3e3ba6d928c90e7dc4c35455fb9bdb5022de7018afd7ec09a13c8ed1892c8dfedac81d2c32956446ca9b37630879f92060e10040ea6d11ff8a9ef128a4328810"
)
golang_blinding_output_512_vector = bytes.fromhex(
    "a34b8ccd7b4f97859f1a0d2962b31a083d363a7d671340471516bd36f58def0b0203f44af2a799028a17a8856e18a7b603190e1a63adc215c0ae53d21c45761c"
)

# Python static 512 vectors (generated by an earlier version of this program)
python_alice_sk_512_vector = bytes.fromhex(
    "fcfbfd01f6090104fe09ff0502040000060100fcfefc06ff04060000ff03fe010300010307ff01040201020006020000fcfefd01fe0000fdf9fdff040104000201fe0001fd020201fe00"
)
python_alice_pk_512_vector = bytes.fromhex(
    "f0e3123870580f84f10e269a5150baaaf7058a6f0437cb8678c5ad6a0dddd3355c76435ae054a873e76bf5f8bc58ec29053d02162c7d3f309764443e2a3f0f38"
)
python_alice_blinding_factor_512_vector = bytes.fromhex(
    "01f703f702f903fc02ff05f800030802feffff03fc02fdfa01fc0100030002fe010506fffb000402fdfe00fffe00f700fffeff0205020002ff03ff0001fc0201fb040000060100010000"
)
python_alice_blinding_output_512_vector = bytes.fromhex(
    "27c9c9725c97e1b893b8fb47b579e70ed287ac3fd28ff572d801a2d7ae90e400ee40e99e3aab26e1b3e1b8b58db5605ee157cffa30e28f80dcf3b47396cee806"
)
python_bob_sk_512_vector = bytes.fromhex(
    "02f90009ff06ff03fb0701010501fffafdffff070204fdfefc02fe04fc00060302fefeff01f9020002fffb0000fe02ff00f6030003ff01010105fbfffd01fffe0302fc000101fc000101"
)
python_bob_pk_512_vector = bytes.fromhex(
    "7369aaee2b543f17655fd57a78e03140b9a7fda3773651920c89fcd2aa9875dd633c3762f39fbda81961c70b0716974352ad5833564c6764ee082f17545b374d"
)
python_ss_512_vector = bytes.fromhex(
    "0d84960ea3c52ad6264a53915757d1ff8733629914577151140ae28bd28325bc31151ae3a1447e0d68aae42abcc63dae249072a8e729678ab73fd333b32a7a3d"
)
python_ss_dh_512_vector = bytes.fromhex(
    "3b2930e8ad3174aeb58041ae8efc2c34776d6d926caabd504c110539b5b1f8e3db3f15dbb005184dbdc67d21d8582c6bbc666839ab70037b9c3996b983d9e8e7"
)

# Golang static 1024 vectors
# From https://git.xx.network/elixxir/ctidh_cgo/-/blob/master/vectors1024_test.go
golang_alice_sk_1024_vector = bytes.fromhex(
    "fe0001010000fe0100fe00ff00fc0300ffffff0000ff0100000000ff01010200000201fe01000100ff0000fdff010001ffffff03fd0000000000feff000101ff000401000100000100040000010001ff00000001000100000101ffffff010001ff00ff00ffff0000fe000100000100ff0000000002ff0000fe0000010000ff000000"
)
golang_alice_pk_1024_vector = bytes.fromhex(
    "b962dadf244d6239ab74d808b0a88b2078b549bb03fab005ef6a97c1ee448bdc5a37892aaddf762e0157de5670320e8007398fb3eeab00a09fcbfe3caffb1fcebd03c38144e76b5d1dcd623871dbc6fe13470a23901dbadac77626fd05f891f18416a94123f9333ef1bdfb7570fa248f2567e33a8661c1411c42963b93e7a506"
)
golang_bob_sk_1024_vector = bytes.fromhex(
    "ffff01fe0000ff000102010103000000ff02000102fe0000000100fffefeff00000000fd01fe00fefd0001000000fc00fe0000fe000102000100000002feff0001ff0001010100ff01ffff0000010102000000020100010003fffd0000fe000000ff00ff01000001fd0001ff0000000001010000ff0100ffff010100ff000000ff00"
)
golang_bob_pk_1024_vector = bytes.fromhex(
    "e859133b1bb959a4f17135cd337477141f81684317b30a7f14bad81a867df388477c2bf7a7af738618b568f323b91762f2282706875341b9343a3cd0450073783a91fc71edca8c8b30f9ec6379137c91ce33dcae9dc3c7fd1a951925e299bafdbff6a29dcdb9ae1207f7fb986b6b1087bf05b79c542dca25993c5a43ef7dc105"
)
golang_ss_1024_vector = bytes.fromhex(
    "411abafeca991f77b6f9263721ca3e2898031871e18d91b61c33c8664a9fc3fccf331729a9dd60465687e53c3d7649abfd4a3e32f4ea86e351535c9b281a76a74fa6b057d94403e55941de7e91432e2e85cc8f5b13fa28314a8dc8f09360e44c802bfc8b036451b26bc54200e133dde3976aa1f4885277a7692da9d38c09e301"
)
golang_blinding_pk_1024_vector = bytes.fromhex(
    "859070e07094657ae90acfa5e03c0342cb1909bf73cc1d0992ef48f533444bdc334846872333cbf17b0b3a763f64b4d5435c91742269d6dfcfe5347473b28f881045a55f3e10a7a7dd5a7192013a932d29703a1236eb1964563a9892ab19fffa3590a0f0a2e02a2205baf6af83d192822f24516fb311506f4cc18687a18c1e0c"
)
golang_blinding_factor_1024_vector = bytes.fromhex(
    "82b843e2e941649c8e25aafde8e088e2c3406f8a1cd5803566e9204c2178bf68e7fa0febcc721ef527d514c4a79d29d549f59c876a69b18d3b7112f2b2b2b68b6acb0037a60c00981c7f6edfbaeccba1dc54df5dd85c96256b9649f3df3676dba7578163075b4fff7012c2fadb9bd03b3b9488b5577bab3918d1899b3cba0ff5b046"
)
golang_blinding_output_1024_vector = bytes.fromhex(
    "b7f1fb4cba440e61d516d4cdb6a8b542c057b76eb4b277e0114a544c943756721ee2d09136b0ce97eb099961a6b383820cf7aebec2217b6f7cb7169aec7d00788b5bf549e274a743d496258b99f3cd36d176d253cc858719f0db4027959d2c8fd8f731c5101cba9198dabe11ebf3f67191bd8210b5a5fd9387ff5892d2565200"
)

# Python static 1024 vectors (generated by an earlier version of this program)
python_alice_sk_1024_vector = bytes.fromhex(
    "000200fffd0000ff03fffe0200010000fd00ff0000fffd010001fe01000001ff00ff020100fe00fffd010100000101feff0100010101fd000000000000fefffffe02000101020000ff0101020000ffffff00000002000001020101ff00ff0200ffff0000000100000000000001ffff00000100fd000000010000fe00ffff00000000"
)
python_alice_pk_1024_vector = bytes.fromhex(
    "f364c4b220d57528d6b64432e93fb40495177faf9a224955f34b5700cf1cf35be7c476e43681a375602fc57eba16aa0c5c4ae02f3031d55d84c2cb679969074216ca0f114d7c798dc12c65b9820d2dce650070c79f992f34c6653963d62fba82a9f48293940ec6001093a06023ee0b80022d19e33d3a669934cbd289c87ddb01"
)
python_alice_blinding_factor_1024_vector = bytes.fromhex(
    "00020101ff010002000000fefeff00ffff01030000000002fffefe000000030100ff0000020300fe00010001fffe010000ff01000200fffe0000ff0000030000010100fffeffff01fe0001fe00000202000000ff00ff0001fe010200ff00ff00ff0000ff0000ff0103000001000000000001000100000000000201fe0000fe000000"
)
python_alice_blinding_output_1024_vector = bytes.fromhex(
    "35c75fd8e766a31ea7f0985a2463f2708d7f6620450f809a373ca8fb28274e98097bcbcf201d9afe36f2ff450136befe200fb2e979d296cc620f849c9dd13af1ba300d53a13f6bbf84366770f7ea6e24a80510af826fae44e0ce29580a203845e2d0723e1c040bd6c6e439ddf4461ff1c1539fa535754aa4ad04ee6d1804dd05"
)
python_bob_sk_1024_vector = bytes.fromhex(
    "00fe00fe0101000200fe0002000100fe01000001020200000100ff040000ff000003010002000001010000fc0100010200fe00010000fe000000fe00000201ff000202ffff000000ff00ff0002ff0101fe010000000101ff0001fe00000001000000ff00ff020100000000ff00ffff0000ff00000000ffff0003ff000100ff000000"
)
python_bob_pk_1024_vector = bytes.fromhex(
    "90d51cc0f48b0ce2712bc8305e7415300bde7feef634e17211ae493ea57b56d1ad81914e85e3b8b43275e7a31c9d440f3f88ef476a31c7e504520f7b538bcbe80fd3bbbc76726c4c37c6c8f9f857618602fcbbc6899e8ac420de32e1ebb1f1178dd13f600afba82276b5f5e6b40dc421b5c3b1f342a9152009b1fae95d372303"
)
python_ss_1024_vector = bytes.fromhex(
    "b5ab3b4d9cac68c451a43d1b499e190d462788362089ca5f3e4462c1502bb06cc820fe2e46c0f9ddaf8de6fcf8c0b4238e677497ebc6f5bb622a894c3c485c9e16142579392b6af434db46b146416aab5d5bd43c3d0f1bc55755f1af93d137d20540e65fc54e7b2b564dceec6484dc2b8bdd30db2b4ea7ba86adecfcb3e7ba08"
)
python_ss_dh_1024_vector = bytes.fromhex(
    "a5bc28ad1db5c523f8f53eff8227b7c29e2c9be0c4ba7c254ded8d6fb17c6db13d4c3ddcdcb311da639ab762c6d27083dd92ea2280ebecd15391b656bcbc92c5d5db89aba48421ae050aa25c914a9b9a7403d2ce650cba9e08f38705f37b0854eb3f3bd1e6d885ad3af5b1bdf5de172528df629612dc06cebd797d5cb762d04d"
)

# Golang static 2048 vectors
# From https://git.xx.network/elixxir/ctidh_cgo/-/blob/master/vectors2048_test.go
golang_alice_sk_2048_vector = bytes.fromhex(
    "000000000000010000000000ff0000ff00010000ff00ff000000000000ff000100ff00000000fe00000100000000010000ffff000000ff00000000000100010000ff0100000000000000ff0000ff000000ff00000000000000000000000000fe0000ff000000000000000000fe0100ff00010000010000000000ff0000ffff00000101000100010000000000000101000000000000ff000001ff000001ff000100000000000000000101ff00000000000000ff01000000000000000001000101000000000000000000ff0000000000000100000000000000000000000000000000ff0000000000"
)
golang_alice_pk_2048_vector = bytes.fromhex(
    "21e57c6198f94739d91dfd3ce3bf73c0a272309c49a6495f47d14b8facf7abcf2f20668e9c3eb8c1630d8259596a035c17e153825b93fa1df44bc172e7b48d6b79291ce4fa4cc54a7e52c1f466d9de824d71a4164c2b0e50d61cbf44aa16a3e3ff8f9d39f92a4835c144f1f64e34a72561648c8b7d447681c1b8c97e36c9f73d9666b3749515a32a9f293ac30d1a3fe0d3e4c8ef4907ae1d074a1ee994adf35242c4a743bc47215c816539ff11691dd2f20be8f81b499696f01c5053437a594f1c1f30ed0caca6c4966b6c4115b343b18af1d6648725d5746ed45bc78b010217b172c400f2a7608ee5a991b3a03990709754f0f4e2870d921e16a80920b8c300"
)
golang_bob_sk_2048_vector = bytes.fromhex(
    "0000000000000000000100010000000100000000000000ff01ff0000ff000001ff0000000000fe01000000ff00000000ff0000000000010000ff0000000100000000fe0000000000ff000000ff000000000000000000000000ff00000000ff0001000000000002000000ff0000000000ff00ff00ff00000000fe0000ff00000000ff000001ff0000ff00000000ff00ff00000000000000ff00000001000002000000000000ff000100ff00000000010000000000ff0000ffff000000000000ff0001000000ff000001000000000000ff000000000000000000000000010000000000000000ff00"
)
golang_bob_pk_2048_vector = bytes.fromhex(
    "4c494a11faa365e6b22bce7f3074b3285668f5ed99e83492f3860e4957a65ca0da1ce5e8a86e880bdc8b91cb57962114d3ae94de4399953345ec6a8e7a76e9c34b6b7bde647e7339e48a19ca05fcc0b69c25369588f85e41cbbee54543e3886a2f6213d7d1fd04892420501df582cc2ce974a13d2c71131b8d36aa304c5222532b064ef0a06886bfeffae4049672fcbb1f92ee4cf99b4cb83d3efa0e5a461b425d900147570e09610159d6af16628957dc781b5c84e8f198d6041ffdaf5a67e11f054f1876981fa52cea9a796a20052d1c68df0aa51b682c5ebbf9c2464fdfa90ac0e619097c2f713ced9dd0a2c4fabdd373626936a282281110fde352da7729"
)
golang_ss_2048_vector = bytes.fromhex(
    "660261a31b1ce1ba858ae7a0c17314b5587f13dc1c31a6eb7a38933037705bfe7b19cfd387d32dc0ea99de95f6fa1bfc7667066b668542358b6cd244b64e75a558130d583761c21c5d67f012acc846319e23c73cbcee02bb26a397f2c06fa7f73332d9761a1dd19ef73b9d8f3a8a235fc9f85d73da4240f7de268cf7dc2682a56d4afca6bad9fbfd899d9d3d22273b3f12e37dba810fd76e4ccacb2e1c7b7e42db692cb3b7fb7ffb3077e7674a4fec683c43eef1a92df1789e764fc08c9e02c3db0f8df04450f5f6a3f84b1380c061351feaa9e7f4d3814dd334b8100437432619abb1b874e4d93460430921d27cd8affdbca1236bea9307a91c97eeb2f0d72d"
)
golang_blinding_pk_2048_vector = bytes.fromhex(
    "21418e787fe5ca6b7ac5c9fc4463e6e1ea5ef8d7b11bb96f6d1a7d2a70427c7a9f6ed48c32c390f573f9e6e01ef23ad84903492eea776470f68b13cadedbb1eb7cc184ff363e883d45603646301c2a477ef3c13c213503b8c21ee637ddb6b10f5f215bc7a07d3451b6bdac99cff25a1c795ade4b3b61d2a8800269d79c0b5b7d30bc917e42ed84fc55dd2cf7e26dfb024cb9af7cdde07b32ae23c2b6c47f815767e0e184b22b80acbfee433586f4d8a7e57d83dae8ed3f37553367d4e2a183c9771548ad9e25ba7f86a40bacc71911fa5b9a059b18ac9fe358e12bd5f315385f9aed96ede4ed2ff8089de64e9caf8a9b1d615b610fbc95c57f25ce9b445d7533"
)
golang_blinding_factor_2048_vector = bytes.fromhex(
    "dcd05b1450127b4ce5670e5796c63686c9afb12735f155d883250aabcd98e49ddba9d9edb632181d891ee4d5e78550b45e8e7a72365fede727d5f90acad97e7a2b70cace99765e8193e3d439d55b64576af0cca5fded676daa42f00809670572f8d3e48cd02f87d0c3c051c5730f1e9e84cf6b3c0c11311ce4f4ce110336f373d1247d339341e692b060087b0816e77879282b62211a8287281c487ba4d87e336f758093763342ec2ed4c256c2572d985d7f0b5fd2bba61203a8633277930d6840ab8865189dcfc9a63b82307e99818f52cfb158cb55a93e55387e1a08976823675e0b9c0e5a47"
)
golang_blinding_output_2048_vector = bytes.fromhex(
    "337ac185e41400e58970f28a424e13e808468b0eec1e791ff0eb31924747207a77177ba87e63a21a0c13c6563a5ab0cd53edf0e58bc6a01af1df283770120831643ca1f5ba168f0e526c6e81708a78c862daa50d8a0ccb22547ab35c782fc5e732b442742fcee23897820441e2359387ff79973fb86372aa0e80097bab6066a0e12856d36803b8e811f187e74fe9092d624d43d559785f8e0ec99b4935117e7a876576999a337d7ff45f86532fdeb46799e2535b4760b24311f6888f21743a9c2f927e970df6bc525b07b1cbee786f084e096d414c60d4c2d87cd4237d127e1a826de5469bdcb9d1c63848e30e996a3a0df7a0299277a5abbaaddd4faa3a762a"
)

# Python static 2048 vectors (generated by an earlier version of this program)
python_alice_sk_2048_vector = bytes.fromhex(
    "00010000000000000000000000ff000000ffff02ff00000000000000ff000000020000fe01000000000000000001ff0000010000000000ff00000000ff00000100ff0000ff00000001000001000000010000010000000000ff000000ff000001000000000001ff00010000000000ff00000001000000ff0000000000030000ffffff00000000000000000001ff00ff000000000000010100000000ff000000000000ff00020000000000000000ff00000001000000ffff0000000000ff000000000000000100000101000000ff00000000000000000000000000000000ff000000000001000000"
)
python_alice_pk_2048_vector = bytes.fromhex(
    "b2af3db1d3070879a0a0f4dbabd8c4d4e44536ad3caa22a1e212fffaa9886611b09904ba5e2d889e7aa54186d9b134e01a06da93f5c61b5c035a3d738388a121e3b6774f298fedaca36edfc4f1c5c10153ad40fa8a116f9668189bbbae25c09d42d34703756076e3326c6302dade803bbcdbb6a66650bf3115c72b40d9e71eca2309298a5b2c0469d62c1fa46a956287617395e04e7e3842f71e060ca73738461bb30f2ca3329c2c8bbdce4b4f4b47ef3c851799144003cab417d55988ddbe23920fd92692d00eb3aa1e63d04651ca4e10a885c7af948ebf93dae875152ca10a47feb67d79c7536c941122996a5d81e8ed3306056b2c31048edd3e8bbfa28c38"
)
python_alice_blinding_factor_2048_vector = bytes.fromhex(
    "00000000000100000000000001000000ff00010100ff0000010000000000000002ff0000000101ff0000000000fe00000000000100020001000000000000000001000000000000ff0000010000000000ffff00010001010000010000000000000000000001000001ff000000000001ff000000000000000001000000000100000100000002000000fe000001000000000000000000fe0000ff00000000010000ff00000000010000ff000000ffff00000001000000000000ff0000000000ff000100000000ff0000000000ffff0000000000000000000000000000000000000000ff0000010000"
)
python_alice_blinding_output_2048_vector = bytes.fromhex(
    "c1e13653b9cc108a84bb12f0d4e7efb92f6ded68f6efc01c7c23bf8b526de07047f1ef09ad5c7b70e1424e8297486728709759e7c6768d8becc8ef0ae6e8093efaf2dec88d23e67b4f9fb7c827be3e2db284a3db590282d6daadd812f06b7133ce391e565f0fda47ba010806cbb9993460026018728389b8da1ad2932267b1be1b46e24d53e95a32dbbfcd640215f3d53b30368306582e61ba80efa7d491a95295cfec4461dbff9a96dd70f0662e33bf607548ed0a7fa9cadbce51b5afb45d1a86b54e188b67b0f605353ecd6f50ad75fb69fe63d4afabe48a9c2933fb5f7a0593272f1cc284554433f6217f2ccc83f876028af64e2beaa9fbf181369b59d101"
)
python_bob_sk_2048_vector = bytes.fromhex(
    "0000000100000000000000ff00000100ff000000000000000001fe0000010000020000010000ff00000000000100010001000000ff00000100000000ff000000000000000000ffff00000000000000000000ff00fe0000000000ff00000100000000ff000001000000ff00ff000000000000010002000000ff00000001ff0000ff00ff00000000000000000001000000000100000100000001000000ff0000ff010000000000000101ff0000000000000100000100000001000000ff00000000000000010000ff0000ff00000000000000010000000000000000000000000000ff000000010000"
)
python_bob_pk_2048_vector = bytes.fromhex(
    "135d73849ad45f7e14134b5b550e9700923cdd2f2c6eba69a6a34317120c0fcba202b171924ff08eaa6b0c7635b457e9d5e3ce2a09ea562704166d59ca57fb3ae8046a0aa330c60978add40ea6e3c386c4ca3c7b33ef02f8aec3f166c31949e93a30e665c971588faa4eb4ef07f3143fb6c0efd4f7264f1dde8fdb6d277657b2129439b7f01aba57b82efa2c2fe12a637b99a5f974ae08c3ae24a2f70eff86947dbde7f7624b082143ea3e4864afbb3d1a40af0f2e1acc09eb07922d05f99072fdd534f3d96edd09dc642cbc452345a49d0f30b515078a76696bed53c175b436c58bbcfb95893b99f252896bb3d29bb711d401a89969aeaf7b88409c76b4e834"
)
python_ss_2048_vector = bytes.fromhex(
    "f61ebdb51cff8de704e1940b702b7359f3936f632b9ac33a18d9f58f85153875e14fdc701912cc8717f0cb4c32729bc5eb9dbfc9ef207281103ae381f2ba0553686cbc43c279d1da8897e5fbab50e2a05e38ef7b012a85b856ebb3c1ebd133dc32f710dd6d67f80093b37402e5581f350f09188ac97b2ea7a14fbaa3c5db0bb38036ac2e81e34f1a04fae0fd91b90b3bca1fa3ae5b5bd37e0edebf08d806eb4cd9ab136289c9e86aba3f8839fabec86ae0cdbd794409a6b6f81b3a5c5f9f56da5e9bdeaf8f6d802be6f987ab5772f35b3855291c9ab3b1848d654841a24e014f7a112cf7591d16bf1d33b2d46e4294fca42cacb1c2eacdbe9040ab794906353f"
)
python_ss_dh_2048_vector = bytes.fromhex(
    "cff74e644b96f8dbccdc4e25b088e132d44ed56ce0c7df0d00fb03d7ad122272f0d5993275b118c7a99b7d4a743849f8183af28e31d6b99cece63d72038bdd60d0098085b5da032abfd903eaa224ed83fb7957c91d5d7410995f9200ac51fe0272a37b21ab69e285446fceaeaa5207cc74440bf92148227f00b726bfd25524a75c9488130ea4f7463672508bda624271ae745a2d475ff8529d51043902946e97b9219f4fa9d3f4b966a459969bcb5ef9e1c38de77fba7fa1406dd1f3dc71b881bf221ef73312b0bf34fbd393be04d3bc9394e0635bb38999f2b2178a3aab826e688397aea60d5db8bd5f89323fbd06dacc14002a176eb501686ff76b8600ffc2"
)


class TestHighCTIDH(unittest.TestCase):
    def test_500_field_size(self):
        with self.assertRaises(InvalidFieldSize):
            ctidh510 = ctidh(510)

    def withrng_test_kat(self, field_size):
        priv_gh1_kats = {
            511: b"\x00\xff\x01\xf8\x00\x01\x04\x04\x01\x00\xff\x01\xfa\x01\xfe\x01\x05\xfd\xfd\x00\x01\xfe\x04\xfe\xfc\xff\x03\x00\xf9\x00\xfe\x00\x00\x01\x04\x03\x03\x00\xff\x02\xfc\xff\x00\x00\xff\x00\xff\xfc\x01\xfc\x02\x00\x00\x04\x00\x02\x01\x02\x00\x03\xfe\x00\x01\x00\x04\xff\x00\xff\xff\xfe\xff\x01\x00\xff",
            512: b"\xff\xfd\x02\xfb\x00\x04\xff\xfe\x00\x01\xfc\x02\xfe\xfb\x00\x00\x01\x0b\x00\x01\xfc\x09\xfd\xff\x01\xfe\x03\xf7\xfe\xfe\x01\xfa\x01\x01\x04\x00\xf9\xfd\xff\xfc\x02\x00\x00\xfe\xfc\x00\x01\xff\x00\x04\x03\x01\xfd\x07\x01\xff\x01\x00\xfd\xfe\x00\x02\xfd\xff\x02\x02\x02\x05\x01\x00\xfd\x00\x00\x01",
            1024: b"\x01\xff\x01\x01\x01\x03\x01\x00\xff\x00\xff\xfe\x00\x02\x04\x00\x01\xff\x00\x00\xff\x00\xff\x00\x01\xff\x02\x03\x01\x00\x00\x00\x01\xff\x00\x02\x01\xff\xff\x00\x00\x02\xfe\xff\xfb\x00\x01\x00\x00\x00\x00\x01\xff\xfe\x00\x00\x00\x01\x01\x00\x00\xff\xfe\xff\x00\xfd\x00\x00\xfe\x01\x00\x00\x00\x00\x04\x00\xfe\x00\x00\xfe\x00\xfe\x00\x02\x00\xff\x00\xfc\x00\x00\x00\x00\x01\x01\xff\x00\x00\x00\xff\x00\x02\x01\x01\x00\x00\x01\x01\x00\x00\xff\xff\x00\x02\x00\x00\x00\x00\x00\xff\x00\xff\xfe\x02\x00\x00\x01\x00\x00\x01\x00",
            2048: b"\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\xff\x00\xff\xff\x00\x00\x00\x00\x00\x01\x00\x01\x00\xff\x00\x00\x00\x00\xff\x00\x00\x01\xff\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00\xff\x00\xff\x00\x00\x00\x01\x00\x00\x01\x00\x00\x00\xff\x00\x00\xff\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x01\x01\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\xff\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\xff\xff\x00\x01\x00\x01\x00\x00\xff\x00\x00\x00\xff\x00\x00\xff\x00\x00\x00\x00\x00\x01\xff\x00\x00\x01\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\xff\x00\x00\x01\x00\x00\x00\x00\x00\x00\xff\x00\x02\x00\xff\x00\x00\x00\x00\x01\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00\x00",
        }
        priv_gh3_kats = {
            511: b"\x02\x03\x02\x00\x07\x00\xfe\xfd\xfb\x01\xff\x02\xfe\xfd\x00\xfd\xff\x01\x00\x01\xfe\x04\x00\x04\xff\xfe\xfb\x00\x05\x01\x04\x01\x01\x01\xff\xfc\xfa\x00\x00\xff\xfc\x00\x00\xfb\xfe\xfd\xfe\x00\xfb\x00\xfe\x00\x01\x02\x00\xfe\xfe\x02\x02\xff\x02\x00\xff\x02\xff\x00\x01\x01\x01\xff\x01\xff\x01\xff",
            512: b"\x03\xfa\xf5\x02\x01\x01\xfa\xfd\x00\x05\xfc\x05\x00\xfd\x00\xfc\xfe\x08\x07\xfe\x05\xff\xfe\x01\x00\x06\x01\x01\x06\x01\xf9\x00\xfe\x00\x00\x03\x00\x03\xf9\xfe\x01\x03\xfe\x01\x01\xfc\x00\x03\x02\x00\x03\x00\x05\xfe\xfe\xfe\x01\xff\xfb\x01\x00\xff\xff\xfe\xfa\x01\x00\x01\xff\x03\xfc\xff\xfe\x00",
            1024: b"\x00\x02\x01\x00\x02\xff\x00\xfd\x00\x01\x02\x01\x00\xfe\x00\xff\x02\x00\x01\xfe\xff\x03\x00\xfe\x00\x00\x00\x01\x01\x00\x01\xff\x01\x02\x01\x00\xfe\x00\x01\xff\xfd\x00\x01\x00\x01\xff\xff\xff\x00\xff\xff\x00\x00\xff\xff\xfd\x00\x01\xfd\x00\xff\x01\x00\xff\x00\x01\xff\x00\x00\x00\x04\xff\x00\xff\x01\x02\x01\x00\xff\x00\x00\xfe\x00\x00\x02\x00\x01\x00\x00\xfe\x00\x00\xff\x00\xfe\xfe\x01\x00\xff\x00\xff\x01\x02\x02\x00\x00\xff\x00\x00\x00\x00\x01\x01\x00\x00\x00\x02\x00\x01\x00\xff\x02\x00\x00\x00\x00\x00\x00\xfe\x00",
            2048: b"\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\xff\x00\x00\x00\x01\x00\xff\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xfe\x00\x00\x00\xff\x00\x00\x00\x00\x01\x00\x00\xff\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x01\x00\x00\x00\x00\xff\x00\xff\x00\x00\x00\x01\x00\x00\xff\x00\x00\xff\x00\x01\x00\x00\xff\x00\x01\x00\xff\x00\xfe\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00\x00\x00\xff\x00\x00\x00\x00\xff\x00\x01\x00\x00\x00\xff\x00\xff\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\xff\x00\x00\x00\x00\x01\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        }
        pub_gh1_kats = {
            511: [
                0xB61824684D4B9D2A,
                0xF09EDDAAEA9E4245,
                0x5BD2BCD2A72DF32F,
                0xE62BD967A767F660,
                0x4E40C6D0F765865D,
                0x347441D14290232A,
                0x27C5E0BEBEB6E03E,
                0x1307FB449EA00E28,
            ],
            512: [
                0x2F451B77CFE93FC8,
                0x5D14A7E94A6BF51B,
                0x1B9FE8BD58C2A1E2,
                0x924BD38EA0DE359B,
                0xA10303D0F111864E,
                0x1256BA1137DFC882,
                0xCFDA5F713F7EF7A7,
                0x3B21F906355FFDE5,
            ],
            1024: [
                0x145A4FA93FF3473C,
                0x3F4F6D848078517C,
                0x54BD4B5260B98237,
                0x4385BA5B5880943A,
                0xA00D7A581ADD9491,
                0x607B0B25E32A0767,
                0x4FF219CF1E3B78BC,
                0xBB57D39D048D3941,
                0xA778914F32EA4C60,
                0xFF150A8DBDC1FFB7,
                0x5F6E36BE62ED8CBC,
                0x3F847D188B6B2F1A,
                0xFEE36E770460AB3,
                0xACE25B28B4FA79D0,
                0x5C48F2F5F18D3E89,
                0x1DF39A760BFFBBE,
            ],
            2048: [
                0x800E67B0BC7BFD06,
                0x3BCE48AF8FB38F7E,
                0xF35B04D14F8D3822,
                0xDBD9C7AB897E9002,
                0x9D0632BA7D6422D,
                0xA430BF8309412C3A,
                0x287B134C7B93EF50,
                0xBC8750ECF09BDCD7,
                0x466BCB717F690ADA,
                0x994A81A2CC2DCBEE,
                0xD02D8D4AF1B5FE87,
                0xAB609C45D4EF5C97,
                0xDD1654456C056FB,
                0x7A16750215BDA5A1,
                0xA6CB44B15A09CE1,
                0x31CD404807D3AC3E,
                0x310023F9FA68BEF5,
                0x7A05048B7952E891,
                0xB15888F8B7A441EC,
                0xC1830CE2018AC99F,
                0x9B9B2DAA5EE2BA5,
                0xA17B9F5786813EAD,
                0x9B51AC5FBA38238D,
                0xE7CAEDF72D093B61,
                0x718D2D4B5DF6A5DC,
                0x15339F1E604F8B87,
                0x8B45733C8A5D6DFB,
                0xD62D63A17956E30C,
                0x93A13FE8336BE9C5,
                0x84FFD577F0611092,
                0xA5D20C27372FFBA8,
                0x1405C6A16C6553CD,
            ],
        }
        pub_gh3_kats = {
            511: [
                0xE514FE7C2E1286E6,
                0x1CE5E4A70D3A6D81,
                0x8B9E923CBBE99B47,
                0x709FA5200C18E198,
                0xE2116C819AFF0BEE,
                0x1B8387AFD644CA97,
                0x8AFA9F58E4890E18,
                0x397DD8A2421BC30D,
            ],
            512: [
                0xC3DE1E9A0CE452EA,
                0x2C7F834207CFA321,
                0x51DF39B2D45A52F7,
                0x6CE5234C0C96B630,
                0x5D73222E4F2C034B,
                0x904B4B9B9F5D8B54,
                0xFDF299A7DC08F21C,
                0x14F78A9CDE33342E,
            ],
            1024: [
                0x4999F9E76365F7B8,
                0x28FCDE7EADDB3ECF,
                0x5E03424D4D458410,
                0xCC3095BAAA51F010,
                0xFD2CC5C863A9CCD1,
                0xAF63CB97B7E9302B,
                0xA83B97EF56EE2F7A,
                0x6FC0D03B1C528643,
                0x424070484C4B7E01,
                0x26E1D849D6CB5025,
                0xC2822ACACA0ABCDE,
                0x72DE377972CC49DB,
                0x70AFBE77C427E919,
                0xA0416DC6F13B6733,
                0x3328508D4670521F,
                0xD2C91FFE09E4916,
            ],
            2048: [
                0x486944AA1A228592,
                0xB9FD80F9B7999A42,
                0x494715C67F92A993,
                0x7A91CF86DDBC9B97,
                0x9F2A59D87C64A702,
                0xABDD79B97F1F09FB,
                0xA21E23BC2FC6501A,
                0x7877755ADCCDB64E,
                0xC1FEB8ACB842E1A7,
                0xE607DB2A89EA6202,
                0xB06862730B72FF4F,
                0x25B9317E27622E98,
                0x16704FA976AC2827,
                0x65C2B263B28EF808,
                0xF788659A466B500B,
                0x6E72A5279BE5DB9F,
                0x8229BF4AC0634C32,
                0xDE4CD3657E339E9,
                0x1C13A055F5421490,
                0x8C464347B0409AC0,
                0xB5F5CDD1AE02A855,
                0xCD836B96F35F1F3F,
                0x20BECDC3AF44B723,
                0x936DB66FB4F90BC6,
                0x3254C4B8FF7C6E12,
                0x3AAF8AB2DA5CAE01,
                0x792B5A7CD4BF56FA,
                0x110FBC3CF246D6EB,
                0xFF60123491275202,
                0xF08D0713A53CD183,
                0xA2EA0DFE213C3C1C,
                0x21F1FB24E497B8BE,
            ],
        }
        ctidh_f = ctidh(field_size)
        import struct

        def uint64(n):
            return n & 0xFFFFFFFFFFFFFFFF

        def test_fillrandom_hash(oldhash, outptr):
            assert len(outptr) % 4 == 0
            newhash = oldhash
            for idx in range(0, len(outptr), 4):
                newhash = uint64(
                    (
                        (
                            uint64(uint64(newhash << 5) + oldhash + newhash)
                            + (newhash >> 8)
                        )
                    )
                )
                outptr[idx : idx + 4] = struct.pack("=I", (newhash & 0xFFFFFFFF))
            return newhash

        global fillrandom_global_hash
        fillrandom_global_hash = 0

        def fillrandom_impl_global(out, context):
            global fillrandom_global_hash
            fillrandom_global_hash = uint64(
                fillrandom_global_hash
                + test_fillrandom_hash(fillrandom_global_hash, out)
            )

        fillrandom_global_hash = uint64(0x123456789ABCDEF0)
        priv_gh1 = ctidh_f.generate_secret_key(rng=fillrandom_impl_global)
        fillrandom_global_hash = uint64(0x123456789ABCDEF0)
        priv_gh2 = ctidh_f.generate_secret_key(rng=fillrandom_impl_global)
        priv_gh3 = ctidh_f.generate_secret_key(rng=fillrandom_impl_global)
        assert bytes(priv_gh1) == bytes(priv_gh2), (bytes(priv_gh1), bytes(priv_gh2))
        assert bytes(priv_gh1) != bytes(priv_gh3)
        assert bytes(priv_gh1) == priv_gh1_kats[field_size]
        assert bytes(priv_gh3) == priv_gh3_kats[field_size]
        pub_gh1 = ctidh_f.derive_public_key(priv_gh1)
        pub_gh3 = ctidh_f.derive_public_key(priv_gh3)
        assert list(pub_gh1.A) == pub_gh1_kats[field_size]
        assert list(pub_gh3.A) == pub_gh3_kats[field_size]

    def test_511_withrng_kat(self):
        self.withrng_test_kat(511)

    def test_512_withrng_kat(self):
        self.withrng_test_kat(512)

    def test_1024_withrng_kat(self):
        self.withrng_test_kat(1024)

    def test_2048_withrng_kat(self):
        self.withrng_test_kat(2048)

    def test_511_withrng(self):
        self.withrng_test(511)

    def test_512_withrng(self):
        self.withrng_test(512)

    def test_1024_withrng(self):
        self.withrng_test(1024)

    def test_2048_withrng(self):
        self.withrng_test(2048)

    def withrng_test(self, fieldsize):
        """tests csidh_private_withrng for the given *fieldsize*."""
        ctidh_f = ctidh(fieldsize)
        import secrets

        def myrng(buf, ctx):
            """realistic rng for real usage"""
            buf[:] = secrets.token_bytes(len(buf))

        x = ctidh_f.generate_secret_key(rng=myrng)
        y = ctidh_f.generate_secret_key(rng=myrng)
        assert bytes(x.e) != bytes(y.e)
        import random

        x = ctidh_f.generate_secret_key(rng=myrng)
        y = ctidh_f.generate_secret_key(rng=myrng)
        z = ctidh_f.private_key()
        z.e[:] = x.e[:]
        assert bytes(x.e) != bytes(y.e)
        assert bytes(x.e) == bytes(z.e)
        x.e[:] = y.e[:]
        assert bytes(x.e) == bytes(y.e)
        assert bytes(x.e) != bytes(z.e)
        ctxs = {}

        def clear_ctxs():
            for ctx in list(ctxs.keys()):
                del ctxs[ctx]

        def unsafe_rng(buf, ctx):
            """deterministic rng, not for real-world usage.
            seeded with the pointer to the private_key byte storage."""
            if not ctxs.get(ctx, None):
                random.seed(ctx)
                ctxs[ctx] = random.getstate()
            random.setstate(ctxs[ctx])
            buf[:] = random.randbytes(len(buf))
            ctxs[ctx] = random.getstate()

        clear_ctxs()
        ctidh_f.generate_secret_key_inplace(x, rng=unsafe_rng)
        ctidh_f.generate_secret_key_inplace(y, rng=unsafe_rng)
        ctidh_f.generate_secret_key_inplace(z, rng=unsafe_rng)
        assert bytes(x.e) != bytes(z.e)
        z.e[:] = x.e[:]
        x.e[:] = y.e[:]
        assert bytes(x.e) == bytes(y.e)  # x is the old y
        assert bytes(x.e) != bytes(z.e)  # z is the old x (which is now y)
        clear_ctxs()
        ctidh_f.generate_secret_key_inplace(x, rng=unsafe_rng)
        assert bytes(x.e) != bytes(y.e)  # x is the old x, no longer y
        assert bytes(x.e) == bytes(z.e)  # z is the old x
        old_y = ctidh_f.private_key()
        old_y.e[:] = y.e[:]
        assert bytes(old_y.e) == bytes(y.e)
        y.e[:] = z.e[:]
        assert bytes(old_y.e) != bytes(y.e)
        ctidh_f.generate_secret_key_inplace(y, rng=unsafe_rng)  # restore y
        assert bytes(old_y.e) == bytes(y.e)
        assert bytes(x.e) != bytes(y.e)  # x's ctx is diff from y's, so differs
        shared_ctx = {"seed": 0, "ctx": None}

        def unsafe_rng_shared(buf, ctx):
            """deterministic rng, not for real-world usage.
            seed and state are global,
            so not useful for multithread operation without a lock."""
            if not shared_ctx["ctx"]:
                random.seed(shared_ctx["seed"])
                shared_ctx["ctx"] = random.getstate()
            random.setstate(shared_ctx["ctx"])
            buf[:] = random.randbytes(len(buf))
            shared_ctx["ctx"] = random.getstate()

        s0_x = ctidh_f.generate_secret_key(rng=unsafe_rng_shared)
        s0_y = ctidh_f.generate_secret_key(rng=unsafe_rng_shared)
        assert bytes(s0_x.e) != bytes(s0_y.e)
        shared_ctx["ctx"] = None
        s0_x2 = ctidh_f.generate_secret_key(rng=unsafe_rng_shared)
        s0_y2 = ctidh_f.generate_secret_key(rng=unsafe_rng_shared)
        # check that it's deterministic with seed 0:
        assert bytes(s0_x.e) == bytes(s0_x2.e)
        assert bytes(s0_y.e) == bytes(s0_y2.e)

        shared_ctx["ctx"] = None
        shared_ctx["seed"] = 123
        s123_x = ctidh_f.generate_secret_key(rng=unsafe_rng_shared)
        s123_y = ctidh_f.generate_secret_key(rng=unsafe_rng_shared)
        shared_ctx["ctx"] = None
        shared_ctx["seed"] = 123
        s123_x2 = ctidh_f.generate_secret_key(rng=unsafe_rng_shared)
        s123_y2 = ctidh_f.generate_secret_key(rng=unsafe_rng_shared)
        # check that it's determinitic with seed 123:
        assert bytes(s123_x.e) != bytes(s123_y.e)
        assert bytes(s123_x.e) == bytes(s123_x2.e)
        assert bytes(s123_y.e) == bytes(s123_y2.e)
        # deterministic, but different seed:
        assert bytes(s123_x.e) != bytes(s0_x.e)
        assert bytes(s123_y.e) != bytes(s0_y.e)

        # Test deterministic keygen with explicit context
        explicit_ctxs = {}
        def unsafe_rng_explicit(buf, ctx):
            '''prng with explicit context'''
            random.setstate(explicit_ctxs[ctx]) # fails if ctx is not there
            buf[:] = random.randbytes(len(buf))
            explicit_ctxs[ctx] = random.getstate()
        random.seed(0)
        explicit_ctxs[1] = random.getstate()
        explicit_ctxs[2] = random.getstate()
        random.seed(1)
        explicit_ctxs[3] = random.getstate()
        explicit_ctxs[4] = random.getstate()
        # Both with seed 0:
        priv_explicit1 = ctidh_f.generate_secret_key(rng=unsafe_rng_explicit, context=1)
        priv_explicit2 = ctidh_f.generate_secret_key(rng=unsafe_rng_explicit, context=2)
        # Both with seed 1:
        priv_explicit3 = ctidh_f.generate_secret_key(rng=unsafe_rng_explicit, context=3)
        priv_explicit4 = ctidh_f.generate_secret_key(rng=unsafe_rng_explicit, context=4)
        # Initial seed was 1, but offset is advanced after 1 keygen:
        priv_explicit5 = ctidh_f.generate_secret_key(rng=unsafe_rng_explicit, context=4)
        priv_explicit6 = ctidh_f.generate_secret_key(rng=unsafe_rng_explicit, context=3)
        assert bytes(priv_explicit1) == bytes(priv_explicit2), \
            (bytes(priv_explicit1), bytes(priv_explicit2))
        assert bytes(priv_explicit1) != bytes(priv_explicit3), \
            (bytes(priv_explicit1), bytes(priv_explicit3))
        assert bytes(priv_explicit3) == bytes(priv_explicit4), \
            (bytes(priv_explicit3), bytes(priv_explicit4))
        assert bytes(priv_explicit4) != bytes(priv_explicit5), \
            (bytes(priv_explicit4), bytes(priv_explicit5))
        assert bytes(priv_explicit5) == bytes(priv_explicit6), \
            (bytes(priv_explicit5), bytes(priv_explicit6))

    def public_key_serialization(self, field_size):
        ctidh_f = ctidh(field_size)
        sk = ctidh_f.generate_secret_key()
        pk = ctidh_f.derive_public_key(sk)
        pk_bytes = bytes(pk)
        pk2 = ctidh_f.public_key_from_bytes(pk_bytes)
        assert bytes(pk2) == bytes(pk_bytes)

        # bind public_key_to_bytes and check that we agree with the conversion:
        c_pk_to_bytes = ctidh_f._lib.__getattr__(
            'highctidh_' + str(field_size) + '_public_key_to_bytes'
        )
        c_pk_to_bytes.restype = None
        c_pk_to_bytes.argtypes = [ ctypes.c_uint8 * ctidh_f.pk_size,
                                   ctypes.POINTER(type(pk)) ]
        cbytes_pk2 = c_pk_to_bytes.argtypes[0]()
        c_pk_to_bytes(cbytes_pk2, pk2)
        assert bytes(cbytes_pk2) == pk_bytes, '.so serializes PKs differently'

        c_pk_from_bytes = ctidh_f._lib.__getattr__(
            'highctidh_' + str(field_size) + '_public_key_from_bytes'
        )
        c_pk_from_bytes.restype = None
        c_pk_from_bytes.argtypes = [ ctypes.POINTER(type(pk)),
                                     ctypes.c_uint8 * ctidh_f.pk_size ]
        c_pk2 = ctidh_f.public_key()
        c_pk_from_bytes(c_pk2, cbytes_pk2)
        assert bytes(c_pk2) == bytes(pk), '.so deserializes PKs differently'

    def test_511_public_key_serialization(self):
        self.public_key_serialization(511)
    def test_512_public_key_serialization(self):
        self.public_key_serialization(512)
    def test_1024_public_key_serialization(self):
        self.public_key_serialization(1024)
    def test_2048_public_key_serialization(self):
        self.public_key_serialization(2048)

    def test_511_blinding_static_golang_vectors(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key_from_bytes(
            golang_blinding_factor_511_vector
        )
        alice_public_key = ctidh511.public_key_from_bytes(golang_blinding_pk_511_vector)
        alice_blinded_public_key = ctidh511.blind(alice_private_key, alice_public_key)
        self.assertEqual(
            bytes(alice_blinded_public_key), golang_blinding_output_511_vector
        )

    def test_511_blinding_static(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key_from_bytes(python_alice_sk_511_vector)
        alice_public_key = ctidh511.derive_public_key(alice_private_key)
        alice_blinding_factor = ctidh511.private_key_from_bytes(
            python_alice_blinding_factor_511_vector
        )
        alice_blinded_public_key = ctidh511.blind(
            alice_blinding_factor, alice_public_key
        )
        self.assertEqual(
            bytes(alice_blinded_public_key), python_alice_blinding_output_511_vector
        )

    def test_511_blinded_manual_static_csidh(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key_from_bytes(python_alice_sk_511_vector)
        alice_public_key = ctidh511.derive_public_key(alice_private_key)
        bob_private_key = ctidh511.private_key_from_bytes(python_bob_sk_511_vector)
        bob_public_key = ctidh511.derive_public_key(bob_private_key)
        # This is a shared key that is shared between alice and bob out of band
        blinding_factor0 = ctidh511.private_key_from_bytes(
            python_alice_blinding_factor_511_vector
        )
        shared_key_a_0 = ctidh511.public_key()
        shared_key_b_0 = ctidh511.public_key()
        shared_key_a_1 = ctidh511.public_key()
        shared_key_b_1 = ctidh511.public_key()
        ctidh511.csidh(shared_key_a_0, bob_public_key, alice_private_key)
        ctidh511.csidh(shared_key_a_1, shared_key_a_0, blinding_factor0)
        ctidh511.csidh(shared_key_b_0, alice_public_key, bob_private_key)
        ctidh511.csidh(shared_key_b_1, shared_key_b_0, blinding_factor0)
        self.assertEqual(bytes(shared_key_a_1).hex(), bytes(shared_key_b_1).hex())

    def test_511_blinded_manual_static_blind_dh(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key_from_bytes(python_alice_sk_511_vector)
        alice_public_key = ctidh511.derive_public_key(alice_private_key)
        bob_private_key = ctidh511.private_key_from_bytes(python_bob_sk_511_vector)
        bob_public_key = ctidh511.derive_public_key(bob_private_key)
        # This is a shared key that is shared between alice and bob out of band
        blinding_factor0 = ctidh511.private_key_from_bytes(
            python_alice_blinding_factor_511_vector
        )
        x = ctidh511.blind_dh(blinding_factor0, alice_private_key, bob_public_key)
        y = ctidh511.blind_dh(blinding_factor0, bob_private_key, alice_public_key)
        self.assertEqual(bytes(x).hex(), bytes(y).hex())

    def test_511_failed_csidh(self):
        with self.assertRaises(InvalidPublicKey):
            ctidh511 = ctidh(511)
            bob_private_key = ctidh511.private_key()
            # This is 'p'
            failure = pack(
                "<" + "Q" * 8,
                *[
                    0x8DC0DC8299E3643D,
                    0xE1390DFA2BD6541A,
                    0xA8B398660F85A792,
                    0xD3D56362B3F9AA83,
                    0x2D7DFE63499164E6,
                    0x5A16841D76E44621,
                    0xFE455868AF1F2625,
                    0x32DA4747BA07C4DF,
                ]
            )
            alice_public_key = ctidh511.public_key_from_bytes(failure)
            bob_public_key = ctidh511.public_key_from_bytes(failure)
            base = ctidh511.public_key()
            ctidh511.csidh(alice_public_key, bob_public_key, bob_private_key)

    def test_511_invalid_public_key_two(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        # This is '2'
        failure = pack(
            "<" + "Q" * 8,
            *[
                8536400358637704601,
                3730515660038518518,
                7564934682790818883,
                13378538787190036187,
                4112930085568384763,
                8871764544990823092,
                1245962080449233546,
                250291945332690752,
            ]
        )
        with self.assertRaises(InvalidPublicKey):
            alice_public_key = ctidh511.public_key_from_bytes(failure)

    def test_511_invalid_public_key_minus_two(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        # This is '-2'
        failure = pack(
            "<" + "Q" * 8,
            *[
                11892412458086216418,
                10280776466921419070,
                16747520083844389602,
                17149892788049149483,
                2443181526801758929,
                4111277804978653582,
                16951589577170471360,
                7078347295084591743,
            ]
        )
        with self.assertRaises(InvalidPublicKey):
            alice_public_key = ctidh511.public_key_from_bytes(failure)

    def test_511_invalid_public_key_p(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        # This is 'p'
        failure = pack(
            "<" + "Q" * 8,
            *[
                0x8DC0DC8299E3643D,
                0xE1390DFA2BD6541A,
                0xA8B398660F85A792,
                0xD3D56362B3F9AA83,
                0x2D7DFE63499164E6,
                0x5A16841D76E44621,
                0xFE455868AF1F2625,
                0x32DA4747BA07C4DF,
            ]
        )
        with self.assertRaises(InvalidPublicKey):
            alice_public_key = ctidh511.public_key_from_bytes(failure)

    def test_511_invalid_public_key_p_minus_one(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        # This is 'p-1'
        failure = pack(
            "<" + "Q" * 8,
            *[
                16160612637405068718,
                2922662260085902521,
                11306615388385023236,
                14615790144789391769,
                4499646569585951311,
                8547160077474065128,
                17574570617395088133,
                7203493267750937119,
            ]
        )
        with self.assertRaises(InvalidPublicKey):
            alice_public_key = ctidh511.public_key_from_bytes(failure)

    def test_511_invalid_public_key_p_plus_one(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        # This is 'p+1'
        failure = pack(
            "<" + "Q" * 8,
            *[
                4268200179318852300,
                11088629866874035067,
                13005839378250185249,
                15912641430449793901,
                2056465042784192381,
                4435882272495411546,
                622981040224616773,
                125145972666345376,
            ]
        )
        with self.assertRaises(InvalidPublicKey):
            alice_public_key = ctidh511.public_key_from_bytes(failure)

    def test_511_base_len(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        self.assertEqual(bytes(ctidh511.base), bytes(base))

    def test_511_empty_private_keys(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key()
        bob_private_key = ctidh511.private_key()
        self.assertEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_511_empty_public_keys(self):
        ctidh511 = ctidh(511)
        alice_public_key = ctidh511.private_key()
        bob_public_key = ctidh511.private_key()
        self.assertEqual(bytes(alice_public_key), bytes(bob_public_key))

    def test_511_random_keys(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key()
        bob_private_key = ctidh511.private_key()
        ctidh511.csidh_private(alice_private_key)
        ctidh511.csidh_private(bob_private_key)
        self.assertNotEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_511_validate_pk(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        alice_private_key = ctidh511.private_key()
        ctidh511.csidh_private(alice_private_key)
        alice_public_key = ctidh511.public_key()
        self.assertTrue(ctidh511.validate(alice_public_key))

    def test_511_dynamic(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        alice_private_key = ctidh511.private_key()
        bob_private_key = ctidh511.private_key()
        ctidh511.csidh_private(alice_private_key)
        ctidh511.csidh_private(bob_private_key)
        alice_public_key = ctidh511.public_key()
        bob_public_key = ctidh511.public_key()
        self.assertTrue(ctidh511.csidh(alice_public_key, base, alice_private_key))
        self.assertTrue(ctidh511.validate(alice_public_key))
        self.assertTrue(ctidh511.csidh(bob_public_key, base, bob_private_key))
        self.assertTrue(ctidh511.validate(bob_public_key))
        self.assertNotEqual(bytes(alice_public_key), bytes(bob_public_key))
        alice_shared_key = ctidh511.public_key()
        bob_shared_key = ctidh511.public_key()
        self.assertTrue(
            ctidh511.csidh(alice_shared_key, bob_public_key, alice_private_key)
        )
        self.assertTrue(
            ctidh511.csidh(bob_shared_key, alice_public_key, bob_private_key)
        )
        self.assertEqual(bytes(alice_shared_key), bytes(bob_shared_key))

    def test_511_dynamic_dh(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.generate_secret_key()
        bob_private_key = ctidh511.generate_secret_key()
        alice_public_key = ctidh511.derive_public_key(alice_private_key)
        bob_public_key = ctidh511.derive_public_key(bob_private_key)
        self.assertEqual(
            ctidh511.dh(alice_private_key, bob_public_key),
            ctidh511.dh(bob_private_key, alice_public_key),
        )

    def test_511_static_dh_from_hex(self):
        ctidh511 = ctidh(511)
        python_alice_sk_511_vector_hex = python_alice_sk_511_vector.hex()
        python_alice_pk_511_vector_hex = python_alice_pk_511_vector.hex()
        python_bob_sk_511_vector_hex = python_bob_sk_511_vector.hex()
        python_bob_pk_511_vector_hex = python_bob_pk_511_vector.hex()
        alice_private_key = ctidh511.private_key_from_hex(
            python_alice_sk_511_vector_hex
        )
        bob_private_key = ctidh511.private_key_from_hex(python_bob_sk_511_vector_hex)
        alice_public_key = ctidh511.public_key_from_hex(python_alice_pk_511_vector_hex)
        bob_public_key = ctidh511.public_key_from_hex(python_bob_pk_511_vector_hex)
        self.assertEqual(
            ctidh511.dh(alice_private_key, bob_public_key), python_ss_dh_511_vector
        )
        self.assertEqual(
            ctidh511.dh(bob_private_key, alice_public_key), python_ss_dh_511_vector
        )

    def test_511_static_dh(self):
        ctidh511 = ctidh(511)
        alice_private_key = ctidh511.private_key_from_bytes(python_alice_sk_511_vector)
        bob_private_key = ctidh511.private_key_from_bytes(python_bob_sk_511_vector)
        alice_public_key = ctidh511.derive_public_key(alice_private_key)
        bob_public_key = ctidh511.derive_public_key(bob_private_key)
        self.assertEqual(
            ctidh511.dh(alice_private_key, bob_public_key), python_ss_dh_511_vector
        )
        self.assertEqual(
            ctidh511.dh(bob_private_key, alice_public_key), python_ss_dh_511_vector
        )

    def test_511_static_vectors(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        alice_python_public_key = ctidh511.public_key()
        self.assertTrue(
            ctidh511.csidh(
                alice_python_public_key,
                base,
                ctidh511.private_key_from_bytes(python_alice_sk_511_vector),
            )
        )
        self.assertEqual(
            bytes(alice_python_public_key).hex(),
            bytes(ctidh511.public_key_from_bytes(python_alice_pk_511_vector)).hex(),
        )
        bob_python_public_key = ctidh511.public_key()
        self.assertTrue(
            ctidh511.csidh(
                bob_python_public_key,
                base,
                ctidh511.private_key_from_bytes(python_bob_sk_511_vector),
            )
        )
        self.assertEqual(
            bytes(bob_python_public_key).hex(),
            bytes(ctidh511.public_key_from_bytes(python_bob_pk_511_vector)).hex(),
        )
        bob_python_shared_key = ctidh511.public_key()
        alice_python_shared_key = ctidh511.public_key()
        self.assertTrue(
            ctidh511.csidh(
                alice_python_shared_key,
                bob_python_public_key,
                ctidh511.private_key_from_bytes(python_alice_sk_511_vector),
            )
        )
        self.assertTrue(
            ctidh511.csidh(
                bob_python_shared_key,
                alice_python_public_key,
                ctidh511.private_key_from_bytes(python_bob_sk_511_vector),
            )
        )
        self.assertEqual(
            bytes(alice_python_shared_key).hex(), python_ss_511_vector.hex()
        )
        self.assertEqual(bytes(bob_python_shared_key).hex(), python_ss_511_vector.hex())
        self.assertTrue(
            ctidh511.validate(
                ctidh511.public_key_from_bytes(python_alice_pk_511_vector)
            )
        )
        self.assertTrue(
            ctidh511.validate(ctidh511.public_key_from_bytes(python_bob_pk_511_vector))
        )

    def test_511_static_golang_vectors(self):
        ctidh511 = ctidh(511)
        base = ctidh511.public_key()
        alice_public_key = ctidh511.public_key()
        self.assertTrue(
            ctidh511.csidh(
                alice_public_key,
                base,
                ctidh511.private_key_from_bytes(golang_alice_sk_511_vector),
            )
        )
        self.assertEqual(
            bytes(alice_public_key).hex(),
            bytes(ctidh511.public_key_from_bytes(golang_alice_pk_511_vector)).hex(),
        )
        bob_public_key = ctidh511.public_key()
        self.assertTrue(
            ctidh511.csidh(
                bob_public_key,
                base,
                ctidh511.private_key_from_bytes(golang_bob_sk_511_vector),
            )
        )
        self.assertEqual(
            bytes(bob_public_key).hex(),
            bytes(ctidh511.public_key_from_bytes(golang_bob_pk_511_vector)).hex(),
        )
        bob_shared_key = ctidh511.public_key()
        alice_shared_key = ctidh511.public_key()
        self.assertTrue(
            ctidh511.csidh(
                alice_shared_key,
                bob_public_key,
                ctidh511.private_key_from_bytes(golang_alice_sk_511_vector),
            )
        )
        self.assertTrue(
            ctidh511.csidh(
                bob_shared_key,
                alice_public_key,
                ctidh511.private_key_from_bytes(golang_bob_sk_511_vector),
            )
        )
        self.assertEqual(bytes(alice_shared_key).hex(), golang_ss_511_vector.hex())
        self.assertEqual(bytes(bob_shared_key).hex(), golang_ss_511_vector.hex())

    def test_512_blinding_static_golang_vectors(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key_from_bytes(
            golang_blinding_factor_512_vector
        )
        alice_public_key = ctidh512.public_key_from_bytes(golang_blinding_pk_512_vector)
        alice_blinded_public_key = ctidh512.blind(alice_private_key, alice_public_key)
        self.assertEqual(
            bytes(alice_blinded_public_key), golang_blinding_output_512_vector
        )

    def test_512_blinding_static(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key_from_bytes(python_alice_sk_512_vector)
        alice_public_key = ctidh512.derive_public_key(alice_private_key)
        alice_blinding_factor = ctidh512.private_key_from_bytes(
            python_alice_blinding_factor_512_vector
        )
        alice_blinded_public_key = ctidh512.blind(
            alice_blinding_factor, alice_public_key
        )
        self.assertEqual(
            bytes(alice_blinded_public_key), python_alice_blinding_output_512_vector
        )

    def test_512_blinded_manual_static_csidh(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key_from_bytes(python_alice_sk_512_vector)
        alice_public_key = ctidh512.derive_public_key(alice_private_key)
        bob_private_key = ctidh512.private_key_from_bytes(python_bob_sk_512_vector)
        bob_public_key = ctidh512.derive_public_key(bob_private_key)
        # This is a shared key that is shared between alice and bob out of band
        blinding_factor0 = ctidh512.private_key_from_bytes(
            python_alice_blinding_factor_512_vector
        )
        shared_key_a_0 = ctidh512.public_key()
        shared_key_b_0 = ctidh512.public_key()
        shared_key_a_1 = ctidh512.public_key()
        shared_key_b_1 = ctidh512.public_key()
        ctidh512.csidh(shared_key_a_0, bob_public_key, alice_private_key)
        ctidh512.csidh(shared_key_a_1, shared_key_a_0, blinding_factor0)
        ctidh512.csidh(shared_key_b_0, alice_public_key, bob_private_key)
        ctidh512.csidh(shared_key_b_1, shared_key_b_0, blinding_factor0)
        self.assertEqual(bytes(shared_key_a_1).hex(), bytes(shared_key_b_1).hex())

    def test_512_blinded_manual_static_blind_dh(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key_from_bytes(python_alice_sk_512_vector)
        alice_public_key = ctidh512.derive_public_key(alice_private_key)
        bob_private_key = ctidh512.private_key_from_bytes(python_bob_sk_512_vector)
        bob_public_key = ctidh512.derive_public_key(bob_private_key)
        # This is a shared key that is shared between alice and bob out of band
        blinding_factor0 = ctidh512.private_key_from_bytes(
            python_alice_blinding_factor_512_vector
        )
        x = ctidh512.blind_dh(blinding_factor0, alice_private_key, bob_public_key)
        y = ctidh512.blind_dh(blinding_factor0, bob_private_key, alice_public_key)
        self.assertEqual(bytes(x).hex(), bytes(y).hex())

    def test_512_base_len(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()
        self.assertEqual(bytes(ctidh512.base), bytes(base))

    def test_512_empty_private_keys(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key()
        bob_private_key = ctidh512.private_key()
        self.assertEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_512_empty_public_keys(self):
        ctidh512 = ctidh(512)
        alice_public_key = ctidh512.private_key()
        bob_public_key = ctidh512.private_key()
        self.assertEqual(bytes(alice_public_key), bytes(bob_public_key))

    def test_512_random_keys(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key()
        bob_private_key = ctidh512.private_key()
        ctidh512.csidh_private(alice_private_key)
        ctidh512.csidh_private(bob_private_key)
        self.assertNotEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_512_validate_pk(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()
        alice_private_key = ctidh512.private_key()
        ctidh512.csidh_private(alice_private_key)
        alice_public_key = ctidh512.public_key()
        self.assertTrue(ctidh512.validate(alice_public_key))

    def test_512_dynamic(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()
        alice_private_key = ctidh512.private_key()
        bob_private_key = ctidh512.private_key()
        ctidh512.csidh_private(alice_private_key)
        ctidh512.csidh_private(bob_private_key)
        alice_public_key = ctidh512.public_key()
        bob_public_key = ctidh512.public_key()
        self.assertTrue(ctidh512.csidh(alice_public_key, base, alice_private_key))
        self.assertTrue(ctidh512.validate(alice_public_key))
        self.assertTrue(ctidh512.csidh(bob_public_key, base, bob_private_key))
        self.assertTrue(ctidh512.validate(bob_public_key))
        self.assertNotEqual(bytes(alice_public_key), bytes(bob_public_key))
        alice_shared_key = ctidh512.public_key()
        bob_shared_key = ctidh512.public_key()
        self.assertTrue(
            ctidh512.csidh(alice_shared_key, bob_public_key, alice_private_key)
        )
        self.assertTrue(
            ctidh512.csidh(bob_shared_key, alice_public_key, bob_private_key)
        )
        self.assertEqual(bytes(alice_shared_key), bytes(bob_shared_key))

    def test_512_dynamic_dh(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.generate_secret_key()
        bob_private_key = ctidh512.generate_secret_key()
        alice_public_key = ctidh512.derive_public_key(alice_private_key)
        bob_public_key = ctidh512.derive_public_key(bob_private_key)
        self.assertEqual(
            ctidh512.dh(alice_private_key, bob_public_key),
            ctidh512.dh(bob_private_key, alice_public_key),
        )

    def test_512_static_dh(self):
        ctidh512 = ctidh(512)
        alice_private_key = ctidh512.private_key_from_bytes(python_alice_sk_512_vector)
        bob_private_key = ctidh512.private_key_from_bytes(python_bob_sk_512_vector)
        alice_public_key = ctidh512.derive_public_key(alice_private_key)
        bob_public_key = ctidh512.derive_public_key(bob_private_key)
        self.assertEqual(
            ctidh512.dh(alice_private_key, bob_public_key), python_ss_dh_512_vector
        )
        self.assertEqual(
            ctidh512.dh(bob_private_key, alice_public_key), python_ss_dh_512_vector
        )

    def test_512_static_vectors(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()
        alice_python_public_key = ctidh512.public_key()
        self.assertTrue(
            ctidh512.csidh(
                alice_python_public_key,
                base,
                ctidh512.private_key_from_bytes(python_alice_sk_512_vector),
            )
        )
        self.assertEqual(
            bytes(alice_python_public_key).hex(),
            bytes(ctidh512.public_key_from_bytes(python_alice_pk_512_vector)).hex(),
        )
        bob_python_public_key = ctidh512.public_key()
        self.assertTrue(
            ctidh512.csidh(
                bob_python_public_key,
                base,
                ctidh512.private_key_from_bytes(python_bob_sk_512_vector),
            )
        )
        self.assertEqual(
            bytes(bob_python_public_key).hex(),
            bytes(ctidh512.public_key_from_bytes(python_bob_pk_512_vector)).hex(),
        )
        bob_python_shared_key = ctidh512.public_key()
        alice_python_shared_key = ctidh512.public_key()
        self.assertTrue(
            ctidh512.csidh(
                alice_python_shared_key,
                bob_python_public_key,
                ctidh512.private_key_from_bytes(python_alice_sk_512_vector),
            )
        )
        self.assertTrue(
            ctidh512.csidh(
                bob_python_shared_key,
                alice_python_public_key,
                ctidh512.private_key_from_bytes(python_bob_sk_512_vector),
            )
        )
        self.assertEqual(
            bytes(alice_python_shared_key).hex(), python_ss_512_vector.hex()
        )
        self.assertEqual(bytes(bob_python_shared_key).hex(), python_ss_512_vector.hex())
        self.assertTrue(
            ctidh512.validate(
                ctidh512.public_key_from_bytes(python_alice_pk_512_vector)
            )
        )
        self.assertTrue(
            ctidh512.validate(ctidh512.public_key_from_bytes(python_bob_pk_512_vector))
        )

    def test_512_static_golang_vectors(self):
        ctidh512 = ctidh(512)
        base = ctidh512.public_key()
        alice_public_key = ctidh512.public_key()
        self.assertTrue(
            ctidh512.csidh(
                alice_public_key,
                base,
                ctidh512.private_key_from_bytes(golang_alice_sk_512_vector),
            )
        )
        self.assertEqual(
            bytes(alice_public_key).hex(),
            bytes(ctidh512.public_key_from_bytes(golang_alice_pk_512_vector)).hex(),
        )
        bob_public_key = ctidh512.public_key()
        self.assertTrue(
            ctidh512.csidh(
                bob_public_key,
                base,
                ctidh512.private_key_from_bytes(golang_bob_sk_512_vector),
            )
        )
        self.assertEqual(
            bytes(bob_public_key).hex(),
            bytes(ctidh512.public_key_from_bytes(golang_bob_pk_512_vector)).hex(),
        )
        bob_shared_key = ctidh512.public_key()
        alice_shared_key = ctidh512.public_key()
        self.assertTrue(
            ctidh512.csidh(
                alice_shared_key,
                bob_public_key,
                ctidh512.private_key_from_bytes(golang_alice_sk_512_vector),
            )
        )
        self.assertTrue(
            ctidh512.csidh(
                bob_shared_key,
                alice_public_key,
                ctidh512.private_key_from_bytes(golang_bob_sk_512_vector),
            )
        )
        self.assertEqual(bytes(alice_shared_key).hex(), golang_ss_512_vector.hex())
        self.assertEqual(bytes(bob_shared_key).hex(), golang_ss_512_vector.hex())

    def test_1024_blinding_static_golang_vectors(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key_from_bytes(
            golang_blinding_factor_1024_vector
        )
        alice_public_key = ctidh1024.public_key_from_bytes(
            golang_blinding_pk_1024_vector
        )
        alice_blinded_public_key = ctidh1024.blind(alice_private_key, alice_public_key)
        self.assertEqual(
            bytes(alice_blinded_public_key), golang_blinding_output_1024_vector
        )

    def test_1024_blinding_static(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key_from_bytes(
            python_alice_sk_1024_vector
        )
        alice_public_key = ctidh1024.derive_public_key(alice_private_key)
        alice_blinding_factor = ctidh1024.private_key_from_bytes(
            python_alice_blinding_factor_1024_vector
        )
        alice_blinded_public_key = ctidh1024.blind(
            alice_blinding_factor, alice_public_key
        )
        self.assertEqual(
            bytes(alice_blinded_public_key), python_alice_blinding_output_1024_vector
        )

    def test_1024_blinded_manual_static_csidh(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key_from_bytes(
            python_alice_sk_1024_vector
        )
        alice_public_key = ctidh1024.derive_public_key(alice_private_key)
        bob_private_key = ctidh1024.private_key_from_bytes(python_bob_sk_1024_vector)
        bob_public_key = ctidh1024.derive_public_key(bob_private_key)
        # This is a shared key that is shared between alice and bob out of band
        blinding_factor0 = ctidh1024.private_key_from_bytes(
            python_alice_blinding_factor_1024_vector
        )
        shared_key_a_0 = ctidh1024.public_key()
        shared_key_b_0 = ctidh1024.public_key()
        shared_key_a_1 = ctidh1024.public_key()
        shared_key_b_1 = ctidh1024.public_key()
        ctidh1024.csidh(shared_key_a_0, bob_public_key, alice_private_key)
        ctidh1024.csidh(shared_key_a_1, shared_key_a_0, blinding_factor0)
        ctidh1024.csidh(shared_key_b_0, alice_public_key, bob_private_key)
        ctidh1024.csidh(shared_key_b_1, shared_key_b_0, blinding_factor0)
        self.assertEqual(bytes(shared_key_a_1).hex(), bytes(shared_key_b_1).hex())

    def test_1024_blinded_manual_static_blind_dh(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key_from_bytes(
            python_alice_sk_1024_vector
        )
        alice_public_key = ctidh1024.derive_public_key(alice_private_key)
        bob_private_key = ctidh1024.private_key_from_bytes(python_bob_sk_1024_vector)
        bob_public_key = ctidh1024.derive_public_key(bob_private_key)
        # This is a shared key that is shared between alice and bob out of band
        blinding_factor0 = ctidh1024.private_key_from_bytes(
            python_alice_blinding_factor_1024_vector
        )
        x = ctidh1024.blind_dh(blinding_factor0, alice_private_key, bob_public_key)
        y = ctidh1024.blind_dh(blinding_factor0, bob_private_key, alice_public_key)
        self.assertEqual(bytes(x).hex(), bytes(y).hex())

    def test_1024_base_len(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()
        self.assertEqual(bytes(ctidh1024.base), bytes(base))

    def test_1024_empty_private_keys(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key()
        bob_private_key = ctidh1024.private_key()
        self.assertEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_1024_empty_public_keys(self):
        ctidh1024 = ctidh(1024)
        alice_public_key = ctidh1024.private_key()
        bob_public_key = ctidh1024.private_key()
        self.assertEqual(bytes(alice_public_key), bytes(bob_public_key))

    def test_1024_random_keys(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key()
        bob_private_key = ctidh1024.private_key()
        ctidh1024.csidh_private(alice_private_key)
        ctidh1024.csidh_private(bob_private_key)
        self.assertNotEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_1024_validate_pk(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()
        alice_private_key = ctidh1024.private_key()
        ctidh1024.csidh_private(alice_private_key)
        alice_public_key = ctidh1024.public_key()
        self.assertTrue(ctidh1024.validate(alice_public_key))

    def test_1024_dynamic(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()
        alice_private_key = ctidh1024.private_key()
        bob_private_key = ctidh1024.private_key()
        ctidh1024.csidh_private(alice_private_key)
        ctidh1024.csidh_private(bob_private_key)
        alice_public_key = ctidh1024.public_key()
        bob_public_key = ctidh1024.public_key()
        self.assertTrue(ctidh1024.csidh(alice_public_key, base, alice_private_key))
        self.assertTrue(ctidh1024.validate(alice_public_key))
        self.assertTrue(ctidh1024.csidh(bob_public_key, base, bob_private_key))
        self.assertTrue(ctidh1024.validate(bob_public_key))
        self.assertNotEqual(bytes(alice_public_key), bytes(bob_public_key))
        alice_shared_key = ctidh1024.public_key()
        bob_shared_key = ctidh1024.public_key()
        self.assertTrue(
            ctidh1024.csidh(alice_shared_key, bob_public_key, alice_private_key)
        )
        self.assertTrue(
            ctidh1024.csidh(bob_shared_key, alice_public_key, bob_private_key)
        )
        self.assertEqual(bytes(alice_shared_key), bytes(bob_shared_key))

    def test_1024_dynamic_dh(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.generate_secret_key()
        bob_private_key = ctidh1024.generate_secret_key()
        alice_public_key = ctidh1024.derive_public_key(alice_private_key)
        bob_public_key = ctidh1024.derive_public_key(bob_private_key)
        self.assertEqual(
            ctidh1024.dh(alice_private_key, bob_public_key),
            ctidh1024.dh(bob_private_key, alice_public_key),
        )

    def test_1024_static_dh(self):
        ctidh1024 = ctidh(1024)
        alice_private_key = ctidh1024.private_key_from_bytes(
            python_alice_sk_1024_vector
        )
        bob_private_key = ctidh1024.private_key_from_bytes(python_alice_sk_1024_vector)
        alice_public_key = ctidh1024.derive_public_key(alice_private_key)
        bob_public_key = ctidh1024.derive_public_key(bob_private_key)
        self.assertEqual(
            ctidh1024.dh(alice_private_key, bob_public_key), python_ss_dh_1024_vector
        )
        self.assertEqual(
            ctidh1024.dh(bob_private_key, alice_public_key), python_ss_dh_1024_vector
        )

    def test_1024_static_vectors(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()
        alice_python_public_key = ctidh1024.public_key()
        self.assertTrue(
            ctidh1024.csidh(
                alice_python_public_key,
                base,
                ctidh1024.private_key_from_bytes(python_alice_sk_1024_vector),
            )
        )
        self.assertEqual(
            bytes(alice_python_public_key).hex(),
            bytes(ctidh1024.public_key_from_bytes(python_alice_pk_1024_vector)).hex(),
        )
        bob_python_public_key = ctidh1024.public_key()
        self.assertTrue(
            ctidh1024.csidh(
                bob_python_public_key,
                base,
                ctidh1024.private_key_from_bytes(python_bob_sk_1024_vector),
            )
        )
        self.assertEqual(
            bytes(bob_python_public_key).hex(),
            bytes(ctidh1024.public_key_from_bytes(python_bob_pk_1024_vector)).hex(),
        )
        bob_python_shared_key = ctidh1024.public_key()
        alice_python_shared_key = ctidh1024.public_key()
        self.assertTrue(
            ctidh1024.csidh(
                alice_python_shared_key,
                bob_python_public_key,
                ctidh1024.private_key_from_bytes(python_alice_sk_1024_vector),
            )
        )
        self.assertTrue(
            ctidh1024.csidh(
                bob_python_shared_key,
                alice_python_public_key,
                ctidh1024.private_key_from_bytes(python_bob_sk_1024_vector),
            )
        )
        self.assertEqual(
            bytes(alice_python_shared_key).hex(), python_ss_1024_vector.hex()
        )
        self.assertEqual(
            bytes(bob_python_shared_key).hex(), python_ss_1024_vector.hex()
        )
        self.assertTrue(
            ctidh1024.validate(
                ctidh1024.public_key_from_bytes(python_alice_pk_1024_vector)
            )
        )
        self.assertTrue(
            ctidh1024.validate(
                ctidh1024.public_key_from_bytes(python_bob_pk_1024_vector)
            )
        )

    def test_1024_static_golang_vectors(self):
        ctidh1024 = ctidh(1024)
        base = ctidh1024.public_key()
        alice_public_key = ctidh1024.public_key()
        self.assertTrue(
            ctidh1024.csidh(
                alice_public_key,
                base,
                ctidh1024.private_key_from_bytes(golang_alice_sk_1024_vector),
            )
        )
        self.assertEqual(
            bytes(alice_public_key).hex(),
            bytes(ctidh1024.public_key_from_bytes(golang_alice_pk_1024_vector)).hex(),
        )
        bob_public_key = ctidh1024.public_key()
        self.assertTrue(
            ctidh1024.csidh(
                bob_public_key,
                base,
                ctidh1024.private_key_from_bytes(golang_bob_sk_1024_vector),
            )
        )
        self.assertEqual(
            bytes(bob_public_key).hex(),
            bytes(ctidh1024.public_key_from_bytes(golang_bob_pk_1024_vector)).hex(),
        )
        bob_shared_key = ctidh1024.public_key()
        alice_shared_key = ctidh1024.public_key()
        self.assertTrue(
            ctidh1024.csidh(
                alice_shared_key,
                bob_public_key,
                ctidh1024.private_key_from_bytes(golang_alice_sk_1024_vector),
            )
        )
        self.assertTrue(
            ctidh1024.csidh(
                bob_shared_key,
                alice_public_key,
                ctidh1024.private_key_from_bytes(golang_bob_sk_1024_vector),
            )
        )
        self.assertEqual(bytes(alice_shared_key).hex(), golang_ss_1024_vector.hex())
        self.assertEqual(bytes(bob_shared_key).hex(), golang_ss_1024_vector.hex())

    def test_2048_blinding_static_golang_vectors(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key_from_bytes(
            golang_blinding_factor_2048_vector
        )
        alice_public_key = ctidh2048.public_key_from_bytes(
            golang_blinding_pk_2048_vector
        )
        alice_blinded_public_key = ctidh2048.blind(alice_private_key, alice_public_key)
        self.assertEqual(
            bytes(alice_blinded_public_key), golang_blinding_output_2048_vector
        )

    def test_2048_blinding_static(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key_from_bytes(
            python_alice_sk_2048_vector
        )
        alice_public_key = ctidh2048.derive_public_key(alice_private_key)
        alice_blinding_factor = ctidh2048.private_key_from_bytes(
            python_alice_blinding_factor_2048_vector
        )
        alice_blinded_public_key = ctidh2048.blind(
            alice_blinding_factor, alice_public_key
        )
        self.assertEqual(
            bytes(alice_blinded_public_key), python_alice_blinding_output_2048_vector
        )

    def test_2048_blinded_manual_static_csidh(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key_from_bytes(
            python_alice_sk_2048_vector
        )
        alice_public_key = ctidh2048.derive_public_key(alice_private_key)
        bob_private_key = ctidh2048.private_key_from_bytes(python_bob_sk_2048_vector)
        bob_public_key = ctidh2048.derive_public_key(bob_private_key)
        # This is a shared key that is shared between alice and bob out of band
        blinding_factor0 = ctidh2048.private_key_from_bytes(
            python_alice_blinding_factor_2048_vector
        )
        shared_key_a_0 = ctidh2048.public_key()
        shared_key_b_0 = ctidh2048.public_key()
        shared_key_a_1 = ctidh2048.public_key()
        shared_key_b_1 = ctidh2048.public_key()
        ctidh2048.csidh(shared_key_a_0, bob_public_key, alice_private_key)
        ctidh2048.csidh(shared_key_a_1, shared_key_a_0, blinding_factor0)
        ctidh2048.csidh(shared_key_b_0, alice_public_key, bob_private_key)
        ctidh2048.csidh(shared_key_b_1, shared_key_b_0, blinding_factor0)
        self.assertEqual(bytes(shared_key_a_1).hex(), bytes(shared_key_b_1).hex())

    def test_2048_blinded_manual_static_blind_dh(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key_from_bytes(
            python_alice_sk_2048_vector
        )
        alice_public_key = ctidh2048.derive_public_key(alice_private_key)
        bob_private_key = ctidh2048.private_key_from_bytes(python_bob_sk_2048_vector)
        bob_public_key = ctidh2048.derive_public_key(bob_private_key)
        # This is a shared key that is shared between alice and bob out of band
        blinding_factor0 = ctidh2048.private_key_from_bytes(
            python_alice_blinding_factor_2048_vector
        )
        x = ctidh2048.blind_dh(blinding_factor0, alice_private_key, bob_public_key)
        y = ctidh2048.blind_dh(blinding_factor0, bob_private_key, alice_public_key)
        self.assertEqual(bytes(x).hex(), bytes(y).hex())

    def test_2048_base_len(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()
        self.assertEqual(bytes(ctidh2048.base), bytes(base))

    def test_2048_empty_private_keys(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key()
        bob_private_key = ctidh2048.private_key()
        self.assertEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_2048_empty_public_keys(self):
        ctidh2048 = ctidh(2048)
        alice_public_key = ctidh2048.private_key()
        bob_public_key = ctidh2048.private_key()
        self.assertEqual(bytes(alice_public_key), bytes(bob_public_key))

    def test_2048_random_keys(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key()
        bob_private_key = ctidh2048.private_key()
        ctidh2048.csidh_private(alice_private_key)
        ctidh2048.csidh_private(bob_private_key)
        self.assertNotEqual(bytes(alice_private_key), bytes(bob_private_key))

    def test_2048_validate_pk(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()
        alice_private_key = ctidh2048.private_key()
        ctidh2048.csidh_private(alice_private_key)
        alice_public_key = ctidh2048.public_key()
        self.assertTrue(ctidh2048.validate(alice_public_key))

    def test_2048_dynamic(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()
        alice_private_key = ctidh2048.private_key()
        bob_private_key = ctidh2048.private_key()
        ctidh2048.csidh_private(alice_private_key)
        ctidh2048.csidh_private(bob_private_key)
        alice_public_key = ctidh2048.public_key()
        bob_public_key = ctidh2048.public_key()
        self.assertTrue(ctidh2048.csidh(alice_public_key, base, alice_private_key))
        self.assertTrue(ctidh2048.validate(alice_public_key))
        self.assertTrue(ctidh2048.csidh(bob_public_key, base, bob_private_key))
        self.assertTrue(ctidh2048.validate(bob_public_key))
        self.assertNotEqual(bytes(alice_public_key), bytes(bob_public_key))
        alice_shared_key = ctidh2048.public_key()
        bob_shared_key = ctidh2048.public_key()
        self.assertTrue(
            ctidh2048.csidh(alice_shared_key, bob_public_key, alice_private_key)
        )
        self.assertTrue(
            ctidh2048.csidh(bob_shared_key, alice_public_key, bob_private_key)
        )
        self.assertEqual(bytes(alice_shared_key), bytes(bob_shared_key))

    def test_2048_dynamic_dh(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.generate_secret_key()
        bob_private_key = ctidh2048.generate_secret_key()
        alice_public_key = ctidh2048.derive_public_key(alice_private_key)
        bob_public_key = ctidh2048.derive_public_key(bob_private_key)
        self.assertEqual(
            ctidh2048.dh(alice_private_key, bob_public_key),
            ctidh2048.dh(bob_private_key, alice_public_key),
        )

    def test_2048_static_dh(self):
        ctidh2048 = ctidh(2048)
        alice_private_key = ctidh2048.private_key_from_bytes(
            python_alice_sk_2048_vector
        )
        bob_private_key = ctidh2048.private_key_from_bytes(python_alice_sk_2048_vector)
        alice_public_key = ctidh2048.derive_public_key(alice_private_key)
        bob_public_key = ctidh2048.derive_public_key(bob_private_key)
        self.assertEqual(
            ctidh2048.dh(alice_private_key, bob_public_key), python_ss_dh_2048_vector
        )
        self.assertEqual(
            ctidh2048.dh(bob_private_key, alice_public_key), python_ss_dh_2048_vector
        )

    def test_2048_static_vectors(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()
        alice_python_public_key = ctidh2048.public_key()
        self.assertTrue(
            ctidh2048.csidh(
                alice_python_public_key,
                base,
                ctidh2048.private_key_from_bytes(python_alice_sk_2048_vector),
            )
        )
        self.assertEqual(
            bytes(alice_python_public_key).hex(),
            bytes(ctidh2048.public_key_from_bytes(python_alice_pk_2048_vector)).hex(),
        )
        bob_python_public_key = ctidh2048.public_key()
        self.assertTrue(
            ctidh2048.csidh(
                bob_python_public_key,
                base,
                ctidh2048.private_key_from_bytes(python_bob_sk_2048_vector),
            )
        )
        self.assertEqual(
            bytes(bob_python_public_key).hex(),
            bytes(ctidh2048.public_key_from_bytes(python_bob_pk_2048_vector)).hex(),
        )
        bob_python_shared_key = ctidh2048.public_key()
        alice_python_shared_key = ctidh2048.public_key()
        self.assertTrue(
            ctidh2048.csidh(
                alice_python_shared_key,
                bob_python_public_key,
                ctidh2048.private_key_from_bytes(python_alice_sk_2048_vector),
            )
        )
        self.assertTrue(
            ctidh2048.csidh(
                bob_python_shared_key,
                alice_python_public_key,
                ctidh2048.private_key_from_bytes(python_bob_sk_2048_vector),
            )
        )
        self.assertEqual(
            bytes(alice_python_shared_key).hex(), python_ss_2048_vector.hex()
        )
        self.assertEqual(
            bytes(bob_python_shared_key).hex(), python_ss_2048_vector.hex()
        )
        self.assertTrue(
            ctidh2048.validate(
                ctidh2048.public_key_from_bytes(python_alice_pk_2048_vector)
            )
        )
        self.assertTrue(
            ctidh2048.validate(
                ctidh2048.public_key_from_bytes(python_bob_pk_2048_vector)
            )
        )

    def test_2048_static_golang_vectors(self):
        ctidh2048 = ctidh(2048)
        base = ctidh2048.public_key()
        alice_public_key = ctidh2048.public_key()
        self.assertTrue(
            ctidh2048.csidh(
                alice_public_key,
                base,
                ctidh2048.private_key_from_bytes(golang_alice_sk_2048_vector),
            )
        )
        self.assertEqual(
            bytes(alice_public_key).hex(),
            bytes(ctidh2048.public_key_from_bytes(golang_alice_pk_2048_vector)).hex(),
        )
        bob_public_key = ctidh2048.public_key()
        self.assertTrue(
            ctidh2048.csidh(
                bob_public_key,
                base,
                ctidh2048.private_key_from_bytes(golang_bob_sk_2048_vector),
            )
        )
        self.assertEqual(
            bytes(bob_public_key).hex(),
            bytes(ctidh2048.public_key_from_bytes(golang_bob_pk_2048_vector)).hex(),
        )
        bob_shared_key = ctidh2048.public_key()
        alice_shared_key = ctidh2048.public_key()
        self.assertTrue(
            ctidh2048.csidh(
                alice_shared_key,
                bob_public_key,
                ctidh2048.private_key_from_bytes(golang_alice_sk_2048_vector),
            )
        )
        self.assertTrue(
            ctidh2048.csidh(
                bob_shared_key,
                alice_public_key,
                ctidh2048.private_key_from_bytes(golang_bob_sk_2048_vector),
            )
        )
        self.assertEqual(bytes(alice_shared_key).hex(), golang_ss_2048_vector.hex())
        self.assertEqual(bytes(bob_shared_key).hex(), golang_ss_2048_vector.hex())


if __name__ == "__main__":
    unittest.main()
