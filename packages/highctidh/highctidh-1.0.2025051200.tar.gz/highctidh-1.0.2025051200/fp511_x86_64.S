/* DO NOT EDIT! generated by ./autogen */
#if HIGHCTIDH_PORTABLE == 0

.intel_syntax noprefix

//#include "uintbig_namespace.h"
//#include "fp_namespace.h"

.section .rodata

.set pbits,511
.set pbytes,64
.set plimbs,8

.hidden .uintbig_p_local
.uintbig_p_local:
    .quad 0x1b81b90533c6c87b, 0xc2721bf457aca835, 0x516730cc1f0b4f25, 0xa7aac6c567f35507
    .quad 0x5afbfcc69322c9cd, 0xb42d083aedc88c42, 0xfc8ab0d15e3e4c4a, 0x65b48e8f740f89bf

#include "fp_const_le_511.s"

.section .text
.p2align 4,,15

.global highctidh_511_fp_copy
highctidh_511_fp_copy:
    cld
    mov rcx, plimbs
    rep movsq
    ret

.global highctidh_511_fp_cmov
highctidh_511_fp_cmov:
    movzx rax, dl
    neg rax
    .set k, 0
    .rept plimbs
        mov rcx, [rdi + 8*k]
        mov rdx, [rsi + 8*k]

        xor rdx, rcx
        and rdx, rax
        xor rcx, rdx

        mov [rdi + 8*k], rcx

        .set k, k+1
    .endr
    ret

.global highctidh_511_fp_cswap
highctidh_511_fp_cswap:
    movzx rax, dl
    neg rax
    .set k, 0
    .rept plimbs
        mov rcx, [rdi + 8*k]
        mov rdx, [rsi + 8*k]

        mov r8, rcx
        xor r8, rdx
        and r8, rax

        xor rcx, r8
        xor rdx, r8

        mov [rdi + 8*k], rcx
        mov [rsi + 8*k], rdx

        .set k, k+1
    .endr
    ret

.highctidh_511_reduce_once:
    push rbp
    mov rbp, rdi

    mov rdi, [rbp + 0]
    sub rdi, [rip + .uintbig_p_local + 0]
    mov rsi, [rbp + 8]
    sbb rsi, [rip + .uintbig_p_local + 8]
    mov rdx, [rbp + 16]
    sbb rdx, [rip + .uintbig_p_local + 16]
    mov rcx, [rbp + 24]
    sbb rcx, [rip + .uintbig_p_local + 24]
    mov r8,  [rbp + 32]
    sbb r8,  [rip + .uintbig_p_local + 32]
    mov r9,  [rbp + 40]
    sbb r9,  [rip + .uintbig_p_local + 40]
    mov r10, [rbp + 48]
    sbb r10, [rip + .uintbig_p_local + 48]
    mov r11, [rbp + 56]
    sbb r11, [rip + .uintbig_p_local + 56]

    setnc al
    movzx rax, al
    neg rax

.macro cswap2, r, m
    xor \r, \m
    and \r, rax
    xor \m, \r
.endm

    cswap2 rdi, [rbp + 0]
    cswap2 rsi, [rbp + 8]
    cswap2 rdx, [rbp + 16]
    cswap2 rcx, [rbp + 24]
    cswap2 r8, [rbp + 32]
    cswap2 r9, [rbp + 40]
    cswap2 r10, [rbp + 48]
    cswap2 r11, [rbp + 56]

    pop rbp
    ret

.global highctidh_511_fp_add2
highctidh_511_fp_add2:
    mov rdx, rdi
.global highctidh_511_fp_add3
highctidh_511_fp_add3:
    push rdi
    call highctidh_511_uintbig_add3
    pop rdi
    jmp .highctidh_511_reduce_once

.global highctidh_511_fp_sub2
highctidh_511_fp_sub2:
  mov rdx, rdi
  xchg rsi, rdx
.global highctidh_511_fp_sub3
highctidh_511_fp_sub3:
    push rdi
    call highctidh_511_uintbig_sub3
    pop rdi
    neg rax

    sub rsp, pbytes

    mov rcx, [rip + .uintbig_p_local +  0]
    and rcx, rax
    mov [rsp + 0],rcx
    .set k, 1
    .rept plimbs-1
        mov rcx, [rip + .uintbig_p_local + 8*k]
        and rcx, rax
        mov [rsp + 8*k], rcx
        .set k, k+1
    .endr

    mov rcx, [rsp +  0]
    add rcx, [rdi +  0]
    mov [rdi +  0], rcx
    .set k, 1
    .rept plimbs-1
        mov rcx, [rsp + 8*k]
        adc rcx, [rdi + 8*k]
        mov [rdi + 8*k], rcx
        .set k, k+1
    .endr

    add rsp, pbytes
    ret


/* Montgomery arithmetic */

.global highctidh_511_fp_mul2
highctidh_511_fp_mul2:
  mov rdx, rdi
.global highctidh_511_fp_mul3
highctidh_511_fp_mul3:
    push rbp
    push rbx
    push r12
    push r13
    push r14
    push r15

    push rdi

    mov rdi, rsi
    mov rsi, rdx

    xor r8,  r8
    xor r9,  r9
    xor r10, r10
    xor r11, r11
    xor r12, r12
    xor r13, r13
    xor r14, r14
    xor r15, r15
    xor rbp, rbp

    /* flags are already cleared */

.macro MULSTEP, k, r0, r1, r2, r3, r4, r5, r6, r7, r8

    mov rdx, [rsi +  0]
    mulx rcx, rdx, [rdi + 8*\k]
    add rdx, \r0
    mulx rcx, rdx, [rip + .highctidh_511_inv_min_p_mod_r]

    xor rax, rax /* clear flags */

    mulx rbx, rax, [rip + .uintbig_p_local +  0]
    adox \r0, rax

    mulx rcx, rax, [rip + .uintbig_p_local +  8]
    adcx \r1, rbx
    adox \r1, rax

    mulx rbx, rax, [rip + .uintbig_p_local + 16]
    adcx \r2, rcx
    adox \r2, rax

    mulx rcx, rax, [rip + .uintbig_p_local + 24]
    adcx \r3, rbx
    adox \r3, rax

    mulx rbx, rax, [rip + .uintbig_p_local + 32]
    adcx \r4, rcx
    adox \r4, rax

    mulx rcx, rax, [rip + .uintbig_p_local + 40]
    adcx \r5, rbx
    adox \r5, rax

    mulx rbx, rax, [rip + .uintbig_p_local + 48]
    adcx \r6, rcx
    adox \r6, rax

    mulx rcx, rax, [rip + .uintbig_p_local + 56]
    adcx \r7, rbx
    adox \r7, rax

    mov rax, 0
    adcx \r8, rcx
    adox \r8, rax


    mov rdx, [rdi + 8*\k]

    xor rax, rax /* clear flags */

    mulx rbx, rax, [rsi +  0]
    adox \r0, rax

    mulx rcx, rax, [rsi +  8]
    adcx \r1, rbx
    adox \r1, rax

    mulx rbx, rax, [rsi + 16]
    adcx \r2, rcx
    adox \r2, rax

    mulx rcx, rax, [rsi + 24]
    adcx \r3, rbx
    adox \r3, rax

    mulx rbx, rax, [rsi + 32]
    adcx \r4, rcx
    adox \r4, rax

    mulx rcx, rax, [rsi + 40]
    adcx \r5, rbx
    adox \r5, rax

    mulx rbx, rax, [rsi + 48]
    adcx \r6, rcx
    adox \r6, rax

    mulx rcx, rax, [rsi + 56]
    adcx \r7, rbx
    adox \r7, rax

    mov rax, 0
    adcx \r8, rcx
    adox \r8, rax

.endm

    MULSTEP 0, r8,  r9,  r10, r11, r12, r13, r14, r15, rbp
    MULSTEP 1, r9,  r10, r11, r12, r13, r14, r15, rbp, r8
    MULSTEP 2, r10, r11, r12, r13, r14, r15, rbp, r8,  r9
    MULSTEP 3, r11, r12, r13, r14, r15, rbp, r8,  r9,  r10
    MULSTEP 4, r12, r13, r14, r15, rbp, r8,  r9,  r10, r11
    MULSTEP 5, r13, r14, r15, rbp, r8,  r9,  r10, r11, r12
    MULSTEP 6, r14, r15, rbp, r8,  r9,  r10, r11, r12, r13
    MULSTEP 7, r15, rbp, r8,  r9,  r10, r11, r12, r13, r14

    pop rdi

    mov [rdi +  0], rbp
    mov [rdi +  8], r8
    mov [rdi + 16], r9
    mov [rdi + 24], r10
    mov [rdi + 32], r11
    mov [rdi + 40], r12
    mov [rdi + 48], r13
    mov [rdi + 56], r14

    pop r15
    pop r14
    pop r13
    pop r12
    pop rbx
    pop rbp
    jmp .highctidh_511_reduce_once

.global highctidh_511_fp_sq1
highctidh_511_fp_sq1:
    mov rsi, rdi
.global highctidh_511_fp_sq2
highctidh_511_fp_sq2:
    /* TODO implement optimized Montgomery squaring */
    mov rdx, rsi
    jmp highctidh_511_fp_mul3

#endif
