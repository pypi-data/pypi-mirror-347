/* DO NOT EDIT! generated by ./autogen */
#if HIGHCTIDH_PORTABLE == 0

.intel_syntax noprefix

//#include "uintbig_namespace.h"
//#include "fp_namespace.h"

.section .rodata

.set pbits,2047
.set pbytes,256
.set plimbs,32

.hidden .uintbig_p_local
.uintbig_p_local:
    .quad 0x7790d615ea034943, 0xdc703f0cd8c4d918, 0x95a98036c813c788, 0xe111b0d22ab8ecaa
    .quad 0x6478407d7a9a56ee, 0xa7bec86fabaf787f, 0x44454e851cf305ab, 0x44084e1a73c76cb2
    .quad 0x2842bbe4dbacc65e, 0x58e89497ef35bbb9, 0x9796620b3ad8a5d4, 0x5377d53e856cc9a3
    .quad 0x7c4cb419996f45e7, 0x88c691b2d452a8ac, 0x0da1783672767abb, 0x9844e5c09baf59ec
    .quad 0xe33586d1208a1017, 0x7d84f102b5fde2ea, 0x30d2edfe50198c64, 0x095ac8a9f3ce2b0c
    .quad 0x93e73abd17e3aa46, 0xc680497933375253, 0x6557ebe96d91aedd, 0x4dd6024bf2f8feab
    .quad 0xb8523d6a302abf28, 0x33a8779a1ec8b8c2, 0x584eb12932f72abb, 0xdbd1fc2133770253
    .quad 0xddffdcf1aee53f12, 0x4d8854e8b3e19c53, 0x97fefc90e8196ed9, 0x438efcab10254c64

#include "fp_const_le_2048.s"

.section .text
.p2align 4,,15

.global highctidh_2048_fp_copy
highctidh_2048_fp_copy:
    cld
    mov rcx, plimbs
    rep movsq
    ret

.global highctidh_2048_fp_cmov
highctidh_2048_fp_cmov:
    movzx rax, dl
    neg rax
    .set k, 0
    .rept plimbs
        mov rcx, [rdi + 8*k]
        mov rdx, [rsi + 8*k]

        xor rdx, rcx
        and rdx, rax
        xor rcx, rdx

        mov [rdi + 8*k], rcx

        .set k, k+1
    .endr
    ret

.global highctidh_2048_fp_cswap
highctidh_2048_fp_cswap:
    movzx rax, dl
    neg rax
    .set k, 0
    .rept plimbs
        mov rcx, [rdi + 8*k]
        mov rdx, [rsi + 8*k]

        mov r8, rcx
        xor r8, rdx
        and r8, rax

        xor rcx, r8
        xor rdx, r8

        mov [rdi + 8*k], rcx
        mov [rsi + 8*k], rdx

        .set k, k+1
    .endr
    ret

.highctidh_2048_reduce_once:
    push rbp
    sub rsp, 192
    mov rbp, rdi

    mov rdi, [rbp + 0]
    sub rdi, [rip + .uintbig_p_local + 0]
    mov qword ptr [rsp + 0], rdi
    mov rsi, [rbp + 8]
    sbb rsi, [rip + .uintbig_p_local + 8]
    mov qword ptr [rsp + 8], rsi
    mov rdx, [rbp + 16]
    sbb rdx, [rip + .uintbig_p_local + 16]
    mov qword ptr [rsp + 16], rdx
    mov rcx, [rbp + 24]
    sbb rcx, [rip + .uintbig_p_local + 24]
    mov qword ptr [rsp + 24], rcx
    mov r8,  [rbp + 32]
    sbb r8,  [rip + .uintbig_p_local + 32]
    mov qword ptr [rsp + 32], r8
    mov r9,  [rbp + 40]
    sbb r9,  [rip + .uintbig_p_local + 40]
    mov qword ptr [rsp + 40], r9
    mov r10, [rbp + 48]
    sbb r10, [rip + .uintbig_p_local + 48]
    mov qword ptr [rsp + 48], r10
    mov r11, [rbp + 56]
    sbb r11, [rip + .uintbig_p_local + 56]
    mov qword ptr [rsp + 56], r11
    mov rdi, [rbp + 64]
    sbb rdi, [rip + .uintbig_p_local + 64]
    mov qword ptr [rsp + 64], rdi
    mov rsi, [rbp + 72]
    sbb rsi, [rip + .uintbig_p_local + 72]
    mov qword ptr [rsp + 72], rsi
    mov rdx, [rbp + 80]
    sbb rdx, [rip + .uintbig_p_local + 80]
    mov qword ptr [rsp + 80], rdx
    mov rcx, [rbp + 88]
    sbb rcx, [rip + .uintbig_p_local + 88]
    mov qword ptr [rsp + 88], rcx
    mov r8,  [rbp + 96]
    sbb r8,  [rip + .uintbig_p_local + 96]
    mov qword ptr [rsp + 96], r8
    mov r9,  [rbp + 104]
    sbb r9,  [rip + .uintbig_p_local + 104]
    mov qword ptr [rsp + 104], r9
    mov r10, [rbp + 112]
    sbb r10, [rip + .uintbig_p_local + 112]
    mov qword ptr [rsp + 112], r10
    mov r11, [rbp + 120]
    sbb r11, [rip + .uintbig_p_local + 120]
    mov qword ptr [rsp + 120], r11
    mov rdi, [rbp + 128]
    sbb rdi, [rip + .uintbig_p_local + 128]
    mov qword ptr [rsp + 128], rdi
    mov rsi, [rbp + 136]
    sbb rsi, [rip + .uintbig_p_local + 136]
    mov qword ptr [rsp + 136], rsi
    mov rdx, [rbp + 144]
    sbb rdx, [rip + .uintbig_p_local + 144]
    mov qword ptr [rsp + 144], rdx
    mov rcx, [rbp + 152]
    sbb rcx, [rip + .uintbig_p_local + 152]
    mov qword ptr [rsp + 152], rcx
    mov r8,  [rbp + 160]
    sbb r8,  [rip + .uintbig_p_local + 160]
    mov qword ptr [rsp + 160], r8
    mov r9,  [rbp + 168]
    sbb r9,  [rip + .uintbig_p_local + 168]
    mov qword ptr [rsp + 168], r9
    mov r10, [rbp + 176]
    sbb r10, [rip + .uintbig_p_local + 176]
    mov qword ptr [rsp + 176], r10
    mov r11, [rbp + 184]
    sbb r11, [rip + .uintbig_p_local + 184]
    mov qword ptr [rsp + 184], r11
    mov rdi, [rbp + 192]
    sbb rdi, [rip + .uintbig_p_local + 192]
    mov rsi, [rbp + 200]
    sbb rsi, [rip + .uintbig_p_local + 200]
    mov rdx, [rbp + 208]
    sbb rdx, [rip + .uintbig_p_local + 208]
    mov rcx, [rbp + 216]
    sbb rcx, [rip + .uintbig_p_local + 216]
    mov r8,  [rbp + 224]
    sbb r8,  [rip + .uintbig_p_local + 224]
    mov r9,  [rbp + 232]
    sbb r9,  [rip + .uintbig_p_local + 232]
    mov r10, [rbp + 240]
    sbb r10, [rip + .uintbig_p_local + 240]
    mov r11, [rbp + 248]
    sbb r11, [rip + .uintbig_p_local + 248]

    setnc al
    movzx rax, al
    neg rax

.macro cswap2, r, m
    xor \r, \m
    and \r, rax
    xor \m, \r
.endm

    cswap2 rdi, [rbp + 192]
    cswap2 rsi, [rbp + 200]
    cswap2 rdx, [rbp + 208]
    cswap2 rcx, [rbp + 216]
    cswap2 r8, [rbp + 224]
    cswap2 r9, [rbp + 232]
    cswap2 r10, [rbp + 240]
    cswap2 r11, [rbp + 248]
    mov rdi, [rsp + 0]
    cswap2 rdi, [rbp + 0]
    mov rsi, [rsp + 8]
    cswap2 rsi, [rbp + 8]
    mov rdx, [rsp + 16]
    cswap2 rdx, [rbp + 16]
    mov rcx, [rsp + 24]
    cswap2 rcx, [rbp + 24]
    mov r8, [rsp + 32]
    cswap2 r8, [rbp + 32]
    mov r9, [rsp + 40]
    cswap2 r9, [rbp + 40]
    mov r10, [rsp + 48]
    cswap2 r10, [rbp + 48]
    mov r11, [rsp + 56]
    cswap2 r11, [rbp + 56]
    mov rdi, [rsp + 64]
    cswap2 rdi, [rbp + 64]
    mov rsi, [rsp + 72]
    cswap2 rsi, [rbp + 72]
    mov rdx, [rsp + 80]
    cswap2 rdx, [rbp + 80]
    mov rcx, [rsp + 88]
    cswap2 rcx, [rbp + 88]
    mov r8, [rsp + 96]
    cswap2 r8, [rbp + 96]
    mov r9, [rsp + 104]
    cswap2 r9, [rbp + 104]
    mov r10, [rsp + 112]
    cswap2 r10, [rbp + 112]
    mov r11, [rsp + 120]
    cswap2 r11, [rbp + 120]
    mov rdi, [rsp + 128]
    cswap2 rdi, [rbp + 128]
    mov rsi, [rsp + 136]
    cswap2 rsi, [rbp + 136]
    mov rdx, [rsp + 144]
    cswap2 rdx, [rbp + 144]
    mov rcx, [rsp + 152]
    cswap2 rcx, [rbp + 152]
    mov r8, [rsp + 160]
    cswap2 r8, [rbp + 160]
    mov r9, [rsp + 168]
    cswap2 r9, [rbp + 168]
    mov r10, [rsp + 176]
    cswap2 r10, [rbp + 176]
    mov r11, [rsp + 184]
    cswap2 r11, [rbp + 184]

    add rsp, 192
    pop rbp
    ret

.global highctidh_2048_fp_add2
highctidh_2048_fp_add2:
    mov rdx, rdi
.global highctidh_2048_fp_add3
highctidh_2048_fp_add3:
    push rdi
    call highctidh_2048_uintbig_add3
    pop rdi
    jmp .highctidh_2048_reduce_once

.global highctidh_2048_fp_sub2
highctidh_2048_fp_sub2:
  mov rdx, rdi
  xchg rsi, rdx
.global highctidh_2048_fp_sub3
highctidh_2048_fp_sub3:
    push rdi
    call highctidh_2048_uintbig_sub3
    pop rdi
    neg rax

    sub rsp, pbytes

    mov rcx, [rip + .uintbig_p_local +  0]
    and rcx, rax
    mov [rsp + 0],rcx
    .set k, 1
    .rept plimbs-1
        mov rcx, [rip + .uintbig_p_local + 8*k]
        and rcx, rax
        mov [rsp + 8*k], rcx
        .set k, k+1
    .endr

    mov rcx, [rsp +  0]
    add rcx, [rdi +  0]
    mov [rdi +  0], rcx
    .set k, 1
    .rept plimbs-1
        mov rcx, [rsp + 8*k]
        adc rcx, [rdi + 8*k]
        mov [rdi + 8*k], rcx
        .set k, k+1
    .endr

    add rsp, pbytes
    ret


/* Montgomery arithmetic */

.global highctidh_2048_fp_mul2
highctidh_2048_fp_mul2:
  mov rdx, rdi
.global highctidh_2048_fp_mul3
highctidh_2048_fp_mul3:
    push rbp
    push rbx

  sub rsp,272
  mov [rsp+264],rdi
  mov rdi,rsi
  mov rsi,rdx

  /* XXX: put directly into output */
  xor rax,rax
  mov [rsp+0],rax
  mov [rsp+8],rax
  mov [rsp+16],rax
  mov [rsp+24],rax
  mov [rsp+32],rax
  mov [rsp+40],rax
  mov [rsp+48],rax
  mov [rsp+56],rax
  mov [rsp+64],rax
  mov [rsp+72],rax
  mov [rsp+80],rax
  mov [rsp+88],rax
  mov [rsp+96],rax
  mov [rsp+104],rax
  mov [rsp+112],rax
  mov [rsp+120],rax
  mov [rsp+128],rax
  mov [rsp+136],rax
  mov [rsp+144],rax
  mov [rsp+152],rax
  mov [rsp+160],rax
  mov [rsp+168],rax
  mov [rsp+176],rax
  mov [rsp+184],rax
  mov [rsp+192],rax
  mov [rsp+200],rax
  mov [rsp+208],rax
  mov [rsp+216],rax
  mov [rsp+224],rax
  mov [rsp+232],rax
  mov [rsp+240],rax
  mov [rsp+248],rax
  mov [rsp+256],rax

.macro MULSTEP, k, I0, I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22, I23, I24, I25, I26, I27, I28, I29, I30, I31, I32

    mov r11,[rsp+\I0]
    mov rdx, [rsi +  0]
    mulx rcx, rdx, [rdi + 8*\k]
    add rdx, r11
    mulx rcx, rdx, [rip + .highctidh_2048_inv_min_p_mod_r]

    xor rax, rax /* clear flags */

    mulx rbx, rax, [rip + .uintbig_p_local +  0]
    adox r11, rax
    mov [rsp+\I0],r11

    mov r11,[rsp+\I1]
    mulx rcx, rax, [rip + .uintbig_p_local + 8]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I1],r11

    mov r11,[rsp+\I2]
    mulx rbx, rax, [rip + .uintbig_p_local + 16]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I2],r11

    mov r11,[rsp+\I3]
    mulx rcx, rax, [rip + .uintbig_p_local + 24]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I3],r11

    mov r11,[rsp+\I4]
    mulx rbx, rax, [rip + .uintbig_p_local + 32]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I4],r11

    mov r11,[rsp+\I5]
    mulx rcx, rax, [rip + .uintbig_p_local + 40]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I5],r11

    mov r11,[rsp+\I6]
    mulx rbx, rax, [rip + .uintbig_p_local + 48]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I6],r11

    mov r11,[rsp+\I7]
    mulx rcx, rax, [rip + .uintbig_p_local + 56]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I7],r11

    mov r11,[rsp+\I8]
    mulx rbx, rax, [rip + .uintbig_p_local + 64]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I8],r11

    mov r11,[rsp+\I9]
    mulx rcx, rax, [rip + .uintbig_p_local + 72]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I9],r11

    mov r11,[rsp+\I10]
    mulx rbx, rax, [rip + .uintbig_p_local + 80]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I10],r11

    mov r11,[rsp+\I11]
    mulx rcx, rax, [rip + .uintbig_p_local + 88]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I11],r11

    mov r11,[rsp+\I12]
    mulx rbx, rax, [rip + .uintbig_p_local + 96]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I12],r11

    mov r11,[rsp+\I13]
    mulx rcx, rax, [rip + .uintbig_p_local + 104]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I13],r11

    mov r11,[rsp+\I14]
    mulx rbx, rax, [rip + .uintbig_p_local + 112]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I14],r11

    mov r11,[rsp+\I15]
    mulx rcx, rax, [rip + .uintbig_p_local + 120]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I15],r11

    mov r11,[rsp+\I16]
    mulx rbx, rax, [rip + .uintbig_p_local + 128]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I16],r11

    mov r11,[rsp+\I17]
    mulx rcx, rax, [rip + .uintbig_p_local + 136]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I17],r11

    mov r11,[rsp+\I18]
    mulx rbx, rax, [rip + .uintbig_p_local + 144]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I18],r11

    mov r11,[rsp+\I19]
    mulx rcx, rax, [rip + .uintbig_p_local + 152]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I19],r11

    mov r11,[rsp+\I20]
    mulx rbx, rax, [rip + .uintbig_p_local + 160]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I20],r11

    mov r11,[rsp+\I21]
    mulx rcx, rax, [rip + .uintbig_p_local + 168]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I21],r11

    mov r11,[rsp+\I22]
    mulx rbx, rax, [rip + .uintbig_p_local + 176]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I22],r11

    mov r11,[rsp+\I23]
    mulx rcx, rax, [rip + .uintbig_p_local + 184]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I23],r11

    mov r11,[rsp+\I24]
    mulx rbx, rax, [rip + .uintbig_p_local + 192]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I24],r11

    mov r11,[rsp+\I25]
    mulx rcx, rax, [rip + .uintbig_p_local + 200]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I25],r11

    mov r11,[rsp+\I26]
    mulx rbx, rax, [rip + .uintbig_p_local + 208]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I26],r11

    mov r11,[rsp+\I27]
    mulx rcx, rax, [rip + .uintbig_p_local + 216]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I27],r11

    mov r11,[rsp+\I28]
    mulx rbx, rax, [rip + .uintbig_p_local + 224]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I28],r11

    mov r11,[rsp+\I29]
    mulx rcx, rax, [rip + .uintbig_p_local + 232]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I29],r11

    mov r11,[rsp+\I30]
    mulx rbx, rax, [rip + .uintbig_p_local + 240]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I30],r11

    mov r11,[rsp+\I31]
    mulx rcx, rax, [rip + .uintbig_p_local + 248]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I31],r11

    mov r11,[rsp+\I32]
    mov rax, 0
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I32],r11

    mov rdx, [rdi + 8*\k]

    xor rax, rax /* clear flags */

    mov r11,[rsp+\I0]
    mulx rbx, rax, [rsi +  0]
    adox r11, rax
    mov [rsp+\I0],r11

    mov r11,[rsp+\I1]
    mulx rcx, rax, [rsi + 8]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I1],r11

    mov r11,[rsp+\I2]
    mulx rbx, rax, [rsi + 16]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I2],r11

    mov r11,[rsp+\I3]
    mulx rcx, rax, [rsi + 24]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I3],r11

    mov r11,[rsp+\I4]
    mulx rbx, rax, [rsi + 32]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I4],r11

    mov r11,[rsp+\I5]
    mulx rcx, rax, [rsi + 40]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I5],r11

    mov r11,[rsp+\I6]
    mulx rbx, rax, [rsi + 48]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I6],r11

    mov r11,[rsp+\I7]
    mulx rcx, rax, [rsi + 56]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I7],r11

    mov r11,[rsp+\I8]
    mulx rbx, rax, [rsi + 64]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I8],r11

    mov r11,[rsp+\I9]
    mulx rcx, rax, [rsi + 72]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I9],r11

    mov r11,[rsp+\I10]
    mulx rbx, rax, [rsi + 80]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I10],r11

    mov r11,[rsp+\I11]
    mulx rcx, rax, [rsi + 88]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I11],r11

    mov r11,[rsp+\I12]
    mulx rbx, rax, [rsi + 96]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I12],r11

    mov r11,[rsp+\I13]
    mulx rcx, rax, [rsi + 104]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I13],r11

    mov r11,[rsp+\I14]
    mulx rbx, rax, [rsi + 112]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I14],r11

    mov r11,[rsp+\I15]
    mulx rcx, rax, [rsi + 120]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I15],r11

    mov r11,[rsp+\I16]
    mulx rbx, rax, [rsi + 128]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I16],r11

    mov r11,[rsp+\I17]
    mulx rcx, rax, [rsi + 136]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I17],r11

    mov r11,[rsp+\I18]
    mulx rbx, rax, [rsi + 144]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I18],r11

    mov r11,[rsp+\I19]
    mulx rcx, rax, [rsi + 152]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I19],r11

    mov r11,[rsp+\I20]
    mulx rbx, rax, [rsi + 160]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I20],r11

    mov r11,[rsp+\I21]
    mulx rcx, rax, [rsi + 168]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I21],r11

    mov r11,[rsp+\I22]
    mulx rbx, rax, [rsi + 176]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I22],r11

    mov r11,[rsp+\I23]
    mulx rcx, rax, [rsi + 184]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I23],r11

    mov r11,[rsp+\I24]
    mulx rbx, rax, [rsi + 192]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I24],r11

    mov r11,[rsp+\I25]
    mulx rcx, rax, [rsi + 200]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I25],r11

    mov r11,[rsp+\I26]
    mulx rbx, rax, [rsi + 208]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I26],r11

    mov r11,[rsp+\I27]
    mulx rcx, rax, [rsi + 216]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I27],r11

    mov r11,[rsp+\I28]
    mulx rbx, rax, [rsi + 224]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I28],r11

    mov r11,[rsp+\I29]
    mulx rcx, rax, [rsi + 232]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I29],r11

    mov r11,[rsp+\I30]
    mulx rbx, rax, [rsi + 240]
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I30],r11

    mov r11,[rsp+\I31]
    mulx rcx, rax, [rsi + 248]
    adcx r11, rbx
    adox r11, rax
    mov [rsp+\I31],r11

    mov r11,[rsp+\I32]
    mov rax, 0
    adcx r11, rcx
    adox r11, rax
    mov [rsp+\I32],r11

.endm

    .set k, 0
    .rept plimbs
        MULSTEP k, 8*(k+1), (8*(k+2))%264, (8*(k+3))%264, (8*(k+4))%264, (8*(k+5))%264, (8*(k+6))%264, (8*(k+7))%264, (8*(k+8))%264, (8*(k+9))%264, (8*(k+10))%264, (8*(k+11))%264, (8*(k+12))%264, (8*(k+13))%264, (8*(k+14))%264, (8*(k+15))%264, (8*(k+16))%264, (8*(k+17))%264, (8*(k+18))%264, (8*(k+19))%264, (8*(k+20))%264, (8*(k+21))%264, (8*(k+22))%264, (8*(k+23))%264, (8*(k+24))%264, (8*(k+25))%264, (8*(k+26))%264, (8*(k+27))%264, (8*(k+28))%264, (8*(k+29))%264, (8*(k+30))%264, (8*(k+31))%264, (8*(k+32))%264, 8*k
        .set k, k+1
    .endr

    mov rdi,[rsp+264]

    mov r11,[rsp+0]
    mov [rdi+0],r11
    mov r11,[rsp+8]
    mov [rdi+8],r11
    mov r11,[rsp+16]
    mov [rdi+16],r11
    mov r11,[rsp+24]
    mov [rdi+24],r11
    mov r11,[rsp+32]
    mov [rdi+32],r11
    mov r11,[rsp+40]
    mov [rdi+40],r11
    mov r11,[rsp+48]
    mov [rdi+48],r11
    mov r11,[rsp+56]
    mov [rdi+56],r11
    mov r11,[rsp+64]
    mov [rdi+64],r11
    mov r11,[rsp+72]
    mov [rdi+72],r11
    mov r11,[rsp+80]
    mov [rdi+80],r11
    mov r11,[rsp+88]
    mov [rdi+88],r11
    mov r11,[rsp+96]
    mov [rdi+96],r11
    mov r11,[rsp+104]
    mov [rdi+104],r11
    mov r11,[rsp+112]
    mov [rdi+112],r11
    mov r11,[rsp+120]
    mov [rdi+120],r11
    mov r11,[rsp+128]
    mov [rdi+128],r11
    mov r11,[rsp+136]
    mov [rdi+136],r11
    mov r11,[rsp+144]
    mov [rdi+144],r11
    mov r11,[rsp+152]
    mov [rdi+152],r11
    mov r11,[rsp+160]
    mov [rdi+160],r11
    mov r11,[rsp+168]
    mov [rdi+168],r11
    mov r11,[rsp+176]
    mov [rdi+176],r11
    mov r11,[rsp+184]
    mov [rdi+184],r11
    mov r11,[rsp+192]
    mov [rdi+192],r11
    mov r11,[rsp+200]
    mov [rdi+200],r11
    mov r11,[rsp+208]
    mov [rdi+208],r11
    mov r11,[rsp+216]
    mov [rdi+216],r11
    mov r11,[rsp+224]
    mov [rdi+224],r11
    mov r11,[rsp+232]
    mov [rdi+232],r11
    mov r11,[rsp+240]
    mov [rdi+240],r11
    mov r11,[rsp+248]
    mov [rdi+248],r11

    add rsp,272

    pop rbx
    pop rbp
    jmp .highctidh_2048_reduce_once

.global highctidh_2048_fp_sq1
highctidh_2048_fp_sq1:
    mov rsi, rdi
.global highctidh_2048_fp_sq2
highctidh_2048_fp_sq2:
    /* TODO implement optimized Montgomery squaring */
    mov rdx, rsi
    jmp highctidh_2048_fp_mul3

#endif
