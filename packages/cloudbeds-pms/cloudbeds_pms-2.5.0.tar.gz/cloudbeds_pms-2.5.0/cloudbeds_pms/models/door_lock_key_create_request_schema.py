# coding: utf-8

"""
    Cloudbeds API

    <p>Welcome to the documentation for <strong>Cloudbeds API Version v2</strong>! If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data for your Cloudbeds customers, then you've come to the right place.</p><p>In this document you will find all the API methods we provide along with explanations for parameters and response examples.</p><p>If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our <a href='https://integrations.cloudbeds.com/hc/en-us'>Integrations Portal</a>.</p><p>Be sure to <a href='https://go.pardot.com/l/308041/2018-07-24/qb2lg'>subscribe</a> to the monthly Cloudbeds API announcement mailing list to receive information on new additions and improvements to the Cloudbeds API and related developer tools.</p><p><strong>Endpoint:</strong> https://api.cloudbeds.com/{method}</p><p><strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it.</p><p><strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded)</p><p><strong>Response Format:</strong> JSON</p><p><strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support and troubleshooting.</p><p><strong><a href='https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection'><img src='https://run.pstmn.io/button.svg' alt='Run in Postman'></a></strong> use this link to access our Public collection in Postman.</p>

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DoorLockKeyCreateRequestSchema(BaseModel):
    """
    DoorLockKeyCreateRequestSchema
    """ # noqa: E501
    property_id: StrictStr = Field(alias="propertyId")
    reservation_id: StrictStr = Field(description="Reservation identifier.", alias="reservationId")
    sub_reservation_id: StrictStr = Field(description="Sub-reservation identifier.", alias="subReservationId")
    issuer_id: StrictStr = Field(alias="issuerId")
    start_date_time: StrictStr = Field(description="Start date and time of key.", alias="startDateTime")
    end_date_time: StrictStr = Field(description="End date and time of key.", alias="endDateTime")
    key_type: StrictStr = Field(description="Key type.", alias="keyType")
    rooms: Optional[List[StrictStr]] = Field(default=None, description="List of common room IDs.")
    common_rooms: Optional[List[StrictStr]] = Field(default=None, description="List of common room ids.", alias="commonRooms")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    key_code: Optional[StrictStr] = Field(default=None, description="Custom key code.", alias="keyCode")
    status: Optional[StrictStr] = Field(default='processing', description="Key status.")
    encoder: Optional[StrictStr] = None
    mobile_id: Optional[StrictStr] = Field(default=None, alias="mobileId")
    guest_id: Optional[StrictStr] = Field(default=None, alias="guestId")
    __properties: ClassVar[List[str]] = ["propertyId", "reservationId", "subReservationId", "issuerId", "startDateTime", "endDateTime", "keyType", "rooms", "commonRooms", "externalId", "keyCode", "status", "encoder", "mobileId", "guestId"]

    @field_validator('key_type')
    def key_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['key_card', 'access_code', 'mobile_key']):
            raise ValueError("must be one of enum values ('key_card', 'access_code', 'mobile_key')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['processing', 'completed']):
            raise ValueError("must be one of enum values ('processing', 'completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DoorLockKeyCreateRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if key_code (nullable) is None
        # and model_fields_set contains the field
        if self.key_code is None and "key_code" in self.model_fields_set:
            _dict['keyCode'] = None

        # set to None if encoder (nullable) is None
        # and model_fields_set contains the field
        if self.encoder is None and "encoder" in self.model_fields_set:
            _dict['encoder'] = None

        # set to None if mobile_id (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_id is None and "mobile_id" in self.model_fields_set:
            _dict['mobileId'] = None

        # set to None if guest_id (nullable) is None
        # and model_fields_set contains the field
        if self.guest_id is None and "guest_id" in self.model_fields_set:
            _dict['guestId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DoorLockKeyCreateRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyId": obj.get("propertyId"),
            "reservationId": obj.get("reservationId"),
            "subReservationId": obj.get("subReservationId"),
            "issuerId": obj.get("issuerId"),
            "startDateTime": obj.get("startDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "keyType": obj.get("keyType"),
            "rooms": obj.get("rooms"),
            "commonRooms": obj.get("commonRooms"),
            "externalId": obj.get("externalId"),
            "keyCode": obj.get("keyCode"),
            "status": obj.get("status") if obj.get("status") is not None else 'processing',
            "encoder": obj.get("encoder"),
            "mobileId": obj.get("mobileId"),
            "guestId": obj.get("guestId")
        })
        return _obj


