import numpy as np
from scipy.stats import chi2

# Ported from Bruce Hansen's GAUSS/MATLAB/R code for SupF test p-values
# Based on Hansen, B. E. (1997). Approximate asymptotic p-values for structural-change tests. 
# Journal of Business & Economic Statistics, 15(1), 60-67.
# And Hansen, B. E. (2000). Erratum: Approximate asymptotic p-values for structural-change tests.
# Journal of Business & Economic Statistics, 18(4), 511.

# Coefficients for p-value approximation
# beta[k-1] corresponds to k parameters
_beta_coeffs_qlr = {
    1: np.array([
            [-0.06484670, 0.99671156, 1.25732410], [-0.15305667, 0.96757645, 1.43651315],
            [-0.23071675, 0.95825013, 1.56531261], [-0.29247661, 0.95715782, 1.68851898],
            [-0.35706588, 0.95237505, 1.77889686], [-0.40514715, 0.96055795, 1.89761322],
            [-0.45248386, 0.95810999, 1.98370422], [-0.50458517, 0.96149538, 2.07086519],
            [-0.55009159, 0.96684273, 2.17244338], [-0.60241623, 0.96518399, 2.23509053],
            [-0.64308746, 0.97354902, 2.33722161], [-0.68833676, 0.97829106, 2.42776524],
            [-0.73136161, 0.98206870, 2.50833918], [-0.78078198, 0.99475319, 2.62095510],
            [-0.82894221, 1.00023473, 2.70286643], [-0.88430133, 1.00162529, 2.77835798],
            [-0.94992650, 1.00384268, 2.84325795], [-0.98828874, 1.01604712, 2.96752918],
            [-1.04892713, 1.02570939, 3.08442682], [-1.11527783, 1.03526033, 3.19770394],
            [-1.14992644, 1.06643436, 3.44739573], [-1.24010871, 1.06929468, 3.54993605],
            [-1.38522113, 1.06808543, 3.61667211], [-1.48296473, 1.12839690, 4.07202473],
            [-1.78738608, 1.17220925, 4.47267010]
        ]),
    2: np.array([
            [-0.03933112, 0.99525784, 2.44239332], [-0.14650989,    0.99386540,    2.78837829],
         [-0.28765583,    0.98139359,    2.93724618],
         [-0.35528752,    0.99427390,    3.18187129],
         [-0.49538961,    0.96923268,    3.19484388],
         [-0.58780544,    0.97339124,    3.32763253],
         [-0.66900489,    0.97444133,    3.44170617],
         [-0.77825803,    0.96678414,    3.48652761],
         [-0.87260977,    0.97626434,    3.61709836],
         [-0.96782445,    0.97636983,    3.67795020],
         [-1.07358977,    0.97407744,    3.71945379],
         [-1.12531079,    0.99897105,    3.95114475],
         [-1.16041007,    1.01629918,    4.14932643],
         [-1.29757970,    1.01526800,    4.17103882],
         [-1.36743697,    1.03004743,    4.32238040],
         [-1.43012785,    1.05139461,    4.53836755],
         [-1.53311747,    1.05280599,    4.61175851],
         [-1.65273586,    1.05932633,    4.69340428],
         [-1.79350728,    1.04936541,    4.68380985],
         [-1.91177470,    1.05884590,    4.80733540],
         [-2.02659329,    1.07200268,    4.97772701],
         [-2.18499383,    1.08674781,    5.14231666],
         [-2.37658580,    1.11342895,    5.40268693],
         [-2.51267262,    1.15305027,    5.88573096],
         [-3.05559851,    1.17629253,    6.11067794]
        ]),

    3: np.array([
        [-0.12508560,    0.98151496,    3.43036267],
        [-0.27323021,    0.98324873,    3.83943122],
        [-0.43148524,    0.98336371,    4.07662685],
        [-0.48172245,    1.00450689,    4.44796533],
         [-0.68989320,    0.99692978,    4.49665381],
         [-0.79285790,    1.00417536,    4.69772537],
         [-0.85066146,    1.01852003,    4.95584784],
         [-1.06133796,    1.00719185,    4.90812703],
         [-1.11977435,    1.03046019,    5.20741484],
         [-1.20203015,    1.03885443,    5.36939250],
         [-1.28736105,    1.04597379,    5.52416853],
         [-1.45874969,    1.03549948,    5.48885270],
         [-1.60889159,    1.03374376,    5.50958245],
         [-1.64346161,    1.06767681,    5.89426861],
         [-1.68334797,    1.09676432,    6.23634969],
         [-1.81974576,    1.10216977,    6.34122715],
         [-2.02648892,    1.09629880,    6.29077373],
         [-2.04820499,    1.13491785,    6.75208304],
         [-2.32304920,    1.12030935,    6.59886028],
         [-2.59516448,    1.09122076,    6.32294425],
         [-2.79776102,    1.09109337,    6.35576003],
         [-3.03865047,    1.09037434,    6.37212114],
         [-3.31299004,    1.10476754,    6.52822890],
         [-3.65667229,    1.13355758,    6.84167661],
         [-4.09174097,    1.21034051,    7.79013953]
        ]),
    4: np.array([
            [-0.40798205,    0.90528031,    3.93318971],
         [-0.58214849,    0.91505724,    4.41094611],
         [-0.67464799,    0.93646880,    4.85980413],
         [-0.85920669,    0.93433918,    5.01958587],
         [-0.99797889,    0.94119330,    5.22477986],
         [-1.10019761,    0.95132377,    5.46557096],
         [-1.24048639,    0.96334287,    5.67239340],
         [-1.44519417,    0.96603109,    5.73132847],
         [-1.43104108,    1.00890357,    6.29613628],
         [-1.52887344,    1.02148881,    6.51227891],
         [-1.66695722,    1.02616925,    6.63448592],
         [-1.79016819,    1.03765517,    6.82686641],
         [-1.91159633,    1.04392701,    6.95318158],
         [-1.93474222,    1.07119800,    7.36997641],
         [-1.94039709,    1.10122554,    7.82328663],
         [-2.14388035,    1.09891616,    7.83079173],
         [-2.34856811,    1.10457466,    7.89044965],
         [-2.52186324,    1.10727065,    7.95561422],
         [-2.81381108,    1.10513873,    7.90116455],
         [-3.02543477,    1.12012324,    8.08624226],
         [-3.33386150,    1.12405358,    8.08884313],
         [-3.70012182,    1.12268437,    8.00223819],
         [-4.08017759,    1.14201041,    8.18314656],
         [-4.47426188,    1.17607899,    8.60611855],
         [-5.32601074,    1.21390643,    8.90496643]
        ]),

    5: np.array([
    [-0.11619422, 1.02457601, 5.80252297],
    [-0.46546717, 1.01129094, 6.12710758],
    [-0.74391826, 1.00172704, 6.30619245],
    [-1.02744491, 0.98909190, 6.35729244],
    [-1.26392205, 0.98620432, 6.45912570],
    [-1.42145334, 0.99724660, 6.71491425],
    [-1.65407989, 0.99253425, 6.74047300],
    [-1.81536469, 1.00443530, 6.95402735],
    [-2.02334533, 1.00046922, 6.98677984],
    [-2.09938834, 1.01518764, 7.27464455],
    [-2.20567987, 1.02275886, 7.47265174],
    [-2.44943836, 1.02127435, 7.46129265],
    [-2.63257362, 1.01887636, 7.46907351],
    [-2.81161264, 1.02006744, 7.52690766],
    [-2.98179286, 1.03055270, 7.67224919],
    [-3.13342287, 1.04465740, 7.90265755],
    [-3.30649507, 1.05369295, 8.05397638],
    [-3.46464220, 1.06781143, 8.27206632],
    [-3.54117909, 1.10989892, 8.90945304],
    [-3.53272742, 1.15870693, 9.72776829],
    [-3.80907119, 1.17183781, 9.91294592],
    [-4.20676069, 1.17153767, 9.84654688],
    [-4.84259892, 1.14601974, 9.30420469],
    [-5.47685207, 1.15819167, 9.30236461],
    [-6.39138173, 1.17642784, 9.41930982]
]),
        
    6: np.array([
            [-0.06878690,    1.03775792,    7.09045346],
         [-0.33471313,    1.03320405,    7.62520471],
         [-0.58645046,    1.03391895,    7.96566986],
         [-0.84305517,    1.03864019,    8.22807265],
         [-1.17255237,    1.02620388,    8.19864669],
         [-1.46491217,    1.01747206,    8.19286900],
         [-1.55238215,    1.02887917,    8.53383279],
         [-1.79236992,    1.02880434,    8.59456107],
         [-1.78127768,    1.06533575,    9.26858010],
         [-2.21251422,    1.04598986,    8.91322396],
         [-2.47288843,    1.04669836,    8.92953537],
         [-2.61217463,    1.05733536,    9.17320934],
         [-2.93562547,    1.04956126,    9.00301305],
         [-3.34428329,    1.03025578,    8.63825734],
         [-3.48448133,    1.04393869,    8.87565157],
         [-3.64732289,    1.05837582,    9.13002628],
         [-3.79479594,    1.07938759,    9.47650111],
         [-4.04745714,    1.08339951,    9.51466537],
         [-4.13484904,    1.11380916,   10.08288929],
         [-4.27469148,    1.13359417,   10.47680321],
         [-4.61491387,    1.14810477,   10.64305003],
         [-4.91271109,    1.18479646,   11.18061590],
         [-5.37456783,    1.19305880,   11.24873153],
         [-6.01333062,    1.22140239,   11.55114952],
         [-7.08021496,    1.25536339,   11.84388128]
        ]),

    7: np.array([
            [-0.53689878,    0.95219603,    7.10283690],
         [-0.58562073,    0.98400121,    8.16310859],
         [-0.95896123,    0.97640322,    8.31297248],
         [-1.31359234,    0.97126847,    8.39458871],
         [-1.55985878,    0.97651275,    8.61161920],
         [-1.74442449,    0.99363695,    8.97007085],
         [-2.01759670,    0.99545856,    9.05632019],
         [-2.20599731,    1.00681619,    9.31295267],
         [-2.25783227,    1.03037828,    9.83449349],
         [-2.53419037,    1.02237747,    9.74010484],
         [-2.83535247,    1.01736263,    9.65255439],
         [-2.94857734,    1.03701081,   10.05826180],
         [-3.23125462,    1.04527054,   10.13194554],
         [-3.35534682,    1.07043687,   10.59763704],
         [-3.46151576,    1.08475765,   10.91888223],
         [-3.87863069,    1.07699402,   10.68834341],
         [-4.23908351,    1.07739268,   10.59992445],
         [-4.41913790,    1.10217153,   11.01503763],
         [-4.82113958,    1.10489462,   10.94912199],
         [-4.95712189,    1.14759912,   11.72034341],
         [-5.33535348,    1.15489501,   11.78096338],
         [-5.94327236,    1.14993703,   11.48022849],
         [-6.21449140,    1.21176160,   12.57656495],
         [-6.95870114,    1.21291275,   12.41746897],
         [-8.48837563,    1.16895303,   11.05683140]
        ]),

    8: np.array([
            [-0.06587378,    1.00259864,    9.00416324],
         [-0.58124366,    0.98811229,    9.29588314],
         [-0.53482076,    1.02737978,   10.38413127],
         [-0.70899479,    1.03875734,   10.86726887],
         [-1.07383099,    1.03945526,   10.98596388],
         [-1.05381577,    1.07841850,   11.87560902],
         [-1.27585106,    1.10005486,   12.30981590],
         [-1.68931537,    1.09777938,   12.24252384],
         [-2.18809932,    1.08874332,   12.00013658],
         [-2.50101866,    1.08718514,   11.97891812],
         [-2.85948167,    1.08365161,   11.88283066],
         [-3.35512723,    1.06078274,   11.38799144],
         [-3.65167655,    1.06322641,   11.38822596],
         [-4.01035186,    1.06373417,   11.32180872],
         [-4.24709439,    1.07465019,   11.50213594],
         [-4.50345226,    1.09341658,   11.80959613],
         [-4.90996550,    1.08551877,   11.57319597],
         [-5.36063931,    1.07646817,   11.25922919],
         [-5.73370206,    1.07605364,   11.18469963],
         [-6.09245707,    1.07280436,   11.07807286],
         [-6.46768896,    1.08010850,   11.14611701],
         [-6.84622409,    1.09621271,   11.40693419],
         [-7.23578885,    1.12575792,   11.92603449],
         [-7.80794405,    1.15036691,   12.32590546],
         [-9.19862689,    1.17118238,   12.18766263]
        ]),

        9: np.array([
            [-0.83778440,    0.93113614,    8.58838690],
         [-1.18727357,    0.93903334,    9.24954183],
         [-1.67892814,    0.93065103,    9.29685978],
         [-2.13655356,    0.92934556,    9.33656379],
         [-2.40733753,    0.94488795,    9.70552238],
         [-2.37013442,    0.97862192,   10.57272004],
         [-2.49480314,    0.99988795,   11.11202863],
         [-2.82625963,    0.99845236,   11.11899557],
         [-3.17119868,    0.99862288,   11.12620845],
         [-3.56365370,    0.99017086,   10.91577546],
         [-3.88321378,    0.99461650,   10.95270011],
         [-4.03132540,    1.01955132,   11.46852117],
         [-4.38155427,    1.01232498,   11.27876602],
         [-4.50039414,    1.03871207,   11.86056231],
         [-4.87091786,    1.03085863,   11.63335876],
         [-5.13839820,    1.03917618,   11.78048327],
         [-5.39812039,    1.05170079,   11.99793995],
         [-5.43335672,    1.10431373,   13.09302596],
         [-6.18441355,    1.06499129,   12.01561699],
         [-6.60044603,    1.07700965,   12.12034223],
         [-7.11669991,    1.08089240,   12.02669094],
         [-7.46755944,    1.09541073,   12.30726854],
         [-8.07312922,    1.10955270,   12.39994474],
         [-8.86841479,    1.11196659,   12.21815495],
         [-10.22371148,    1.13939491,   12.28861527]]),

    10: np.array([
    [-0.12732608, 1.01972827, 11.23288885],
    [-0.77782321, 0.99827640, 11.39255875],
    [-1.24808905, 0.99995480, 11.66130981],
    [-1.76904345, 0.98955787, 11.58597271],
    [-2.09486459, 0.99858018, 11.87831304],
    [-2.30685545, 1.01743721, 12.36966797],
    [-2.70509677, 1.02589592, 12.51217351],
    [-2.92069286, 1.04951504, 13.04128558],
    [-3.19976180, 1.06492822, 13.38535841],
    [-3.63379340, 1.05272485, 13.09507410],
    [-4.01274834, 1.05200434, 13.03221170],
    [-4.50166071, 1.03350523, 12.57591029],
    [-4.97277337, 1.01177319, 12.03313903],
    [-5.21536918, 1.03214392, 12.43310006],
    [-5.65195302, 1.01761463, 12.01632623],
    [-6.06457328, 1.01623184, 11.88077482],
    [-6.05959360, 1.06276209, 12.97932137],
    [-6.46819929, 1.06017100, 12.81597962],
    [-6.87347962, 1.06428574, 12.80920657],
    [-7.25454462, 1.07640874, 12.97479282],
    [-7.76257167, 1.07583608, 12.81308974],
    [-8.18205476, 1.09754669, 13.20385908],
    [-8.84260296, 1.10727034, 13.19094338],
    [-9.55384281, 1.13929623, 13.69566019],
    [-11.00985153, 1.14309480, 13.27442097]
]),
    11: np.array([
    [-0.28687631, 0.98957614, 11.83783861],
    [-1.01453484, 0.96835936, 11.90975793],
    [-1.74016510, 0.95855704, 11.79102043],
    [-2.14079218, 0.97100936, 12.15587054],
    [-2.50789978, 0.96858600, 12.25383710],
    [-2.62260858, 0.99972676, 13.05242107],
    [-2.88704980, 1.00826291, 13.33554168],
    [-3.25691388, 1.01123650, 13.40020219],
    [-3.77111395, 1.00174976, 13.11446290],
    [-4.02040298, 1.01270387, 13.37818178],
    [-4.21877289, 1.02263415, 13.67803712],
    [-4.20809405, 1.06043526, 14.67639243],
    [-4.62395981, 1.05332870, 14.43892816],
    [-5.28744427, 1.03341760, 13.74971322],
    [-5.60464823, 1.04034926, 13.84817867],
    [-6.19483467, 1.01589606, 13.11638006],
    [-6.56252902, 1.01908267, 13.10678460],
    [-6.78917650, 1.03551668, 13.48939975],
    [-6.97852808, 1.06079144, 14.12219368],
    [-7.81007221, 1.01892107, 12.80828328],
    [-8.50886767, 0.99945890, 12.06993783],
    [-9.01689388, 1.01879789, 12.34966736],
    [-9.55606731, 1.06131659, 13.13286940],
    [-10.47717098, 1.06036243, 12.77710316],
    [-11.89998388, 1.11053955, 13.39248273]
]),
    12: np.array([
    [-0.20697609, 0.99318500, 13.02526679],
    [-1.25560706, 0.95738412, 12.61430280],
    [-1.38547294, 0.98877323, 13.70117093],
    [-1.87046797, 0.99752949, 13.97922155],
    [-2.32172961, 1.00261042, 14.15156668],
    [-2.77530991, 1.00830993, 14.27368705],
    [-3.42319608, 0.99496327, 13.84539441],
    [-3.91419160, 0.99569457, 13.77323571],
    [-3.98123284, 1.03266760, 14.75121929],
    [-4.27776907, 1.03969503, 14.92183058],
    [-4.10943673, 1.08139639, 16.20106765],
    [-4.62176712, 1.06960628, 15.83163865],
    [-5.31805601, 1.05319163, 15.14323043],
    [-5.80163800, 1.04781506, 14.88197405],
    [-6.31362677, 1.03917077, 14.50509125],
    [-6.83561824, 1.03283667, 14.18372982],
    [-7.27842657, 1.03422740, 14.07860787],
    [-7.79706943, 1.02343400, 13.63889444],
    [-8.24233569, 1.02377082, 13.53052355],
    [-8.75119040, 1.01203272, 13.11206506],
    [-9.26781892, 1.03507954, 13.44530299],
    [-9.85615645, 1.04416615, 13.45292064],
    [-10.35040195, 1.09166954, 14.47635207],
    [-11.37537184, 1.05858260, 13.31219885],
    [-12.87922864, 1.06208248, 12.83248868]
]),
    13: np.array([
    [-0.96032292, 0.96782155, 12.96494958],
    [-1.78562028, 0.94350733, 12.91224967],
    [-1.97966067, 0.96963899, 13.91086002],
    [-2.42158333, 0.97543310, 14.20571032],
    [-2.48856717, 1.00870226, 15.25854613],
    [-3.28051437, 0.98402078, 14.52667154],
    [-3.78503843, 0.99298565, 14.63233359],
    [-4.14403801, 1.00465319, 14.90420398],
    [-4.43321221, 1.01579244, 15.22639182],
    [-4.69094902, 1.02854159, 15.56571593],
    [-5.06109662, 1.03493729, 15.68524541],
    [-5.72733410, 1.01128328, 14.90697688],
    [-5.79578200, 1.04440256, 15.81532942],
    [-6.50909126, 1.01770567, 14.89617531],
    [-6.60160327, 1.05548531, 15.88779531],
    [-6.91561016, 1.06849333, 16.18754384],
    [-7.54515073, 1.06249592, 15.76113514],
    [-7.93078073, 1.06995710, 15.86478742],
    [-8.41010623, 1.08030302, 15.98357275],
    [-8.86495369, 1.10123141, 16.37129480],
    [-9.52126643, 1.09017381, 15.84531873],
    [-10.30207235, 1.07135898, 15.05116768],
    [-11.06975833, 1.07145152, 14.77495506],
    [-12.15664045, 1.07848089, 14.48652940],
    [-13.88493811, 1.09269398, 14.09406033]
]),
    14: np.array([
    [-0.53057890, 0.98368009, 14.62946881],
    [-0.80812173, 1.01109688, 16.00894877],
    [-1.59572361, 1.00005397, 15.88694739],
    [-2.19031473, 0.99792404, 15.93684770],
    [-2.39824582, 1.03020888, 16.90193781],
    [-2.75800734, 1.03961272, 17.24362728],
    [-3.49182845, 1.01938528, 16.59438834],
    [-4.05510978, 1.01959643, 16.46717786],
    [-4.45062227, 1.03128162, 16.72458913],
    [-4.75937805, 1.04463912, 17.05600286],
    [-5.16988136, 1.04163329, 16.95591334],
    [-5.77217189, 1.02954537, 16.46927443],
    [-5.90079070, 1.05276183, 17.16009456],
    [-6.28750433, 1.06353614, 17.37618590],
    [-6.66785584, 1.07798238, 17.64938382],
    [-7.29857891, 1.06357005, 17.05375164],
    [-7.96433421, 1.05648117, 16.58128765],
    [-8.54188927, 1.04729101, 16.11546709],
    [-8.94534315, 1.07352566, 16.69846699],
    [-9.35262892, 1.08488023, 16.94832682],
    [-9.73355542, 1.11384048, 17.67968688],
    [-10.52623971, 1.10944281, 17.23924469],
    [-11.51719761, 1.11004154, 16.80463243],
    [-12.35480897, 1.15898291, 17.87674562],
    [-14.61237001, 1.15307761, 16.55755233]
]),
    15: np.array([
    [-0.67396160, 0.96758770, 15.25728555],
    [-1.03059879, 0.98646992, 16.45491413],
    [-1.04906844, 1.01868047, 17.87873686],
    [-1.25236282, 1.04215207, 18.83215491],
    [-1.64262441, 1.05467658, 19.31397857],
    [-1.54300336, 1.09638126, 20.79452208],
    [-2.48260690, 1.08329937, 20.12425910],
    [-3.10322952, 1.08183200, 19.95277639],
    [-3.81410781, 1.08601992, 19.81833633],
    [-4.42629192, 1.08458304, 19.58738850],
    [-5.30936470, 1.06292778, 18.63729564],
    [-5.73487329, 1.06520085, 18.66118103],
    [-6.59234495, 1.04157247, 17.61777071],
    [-6.77170123, 1.06366213, 18.31681133],
    [-7.57864760, 1.03613103, 17.20167832],
    [-8.08212767, 1.04059581, 17.15999253],
    [-8.54406816, 1.04916238, 17.25797283],
    [-9.05194333, 1.05477016, 17.22576198],
    [-9.35900130, 1.08401132, 18.02889558],
    [-9.73494274, 1.10730545, 18.63943558],
    [-10.57869777, 1.09893801, 18.01695357],
    [-11.42062974, 1.09102591, 17.44317122],
    [-12.44191891, 1.07604096, 16.55885361],
    [-13.69538964, 1.06057172, 15.52893606],
    [-15.48531300, 1.03827923, 14.10625561]
]),
    16: np.array([
    [-0.09134650, 1.00135334, 17.44844463],
    [-1.04378984, 0.98376663, 17.48342087],
    [-1.96856694, 0.97066665, 17.18307302],
    [-2.55693634, 0.97587169, 17.39099592],
    [-3.48268362, 0.96434741, 16.83961037],
    [-3.98503866, 0.97076823, 17.00297254],
    [-4.68248535, 0.96454779, 16.65995197],
    [-4.79433839, 0.99366441, 17.63287496],
    [-5.22778799, 1.01098551, 18.04404405],
    [-5.61157139, 1.01795115, 18.19984089],
    [-5.77881057, 1.04350812, 19.01734887],
    [-6.24269823, 1.05369725, 19.19847986],
    [-7.00486744, 1.04041905, 18.47770031],
    [-7.59116740, 1.04728599, 18.44453170],
    [-8.17764741, 1.03465732, 17.88295181],
    [-8.21284923, 1.06781106, 19.04304380],
    [-8.56768956, 1.08294771, 19.44003984],
    [-9.13026570, 1.08679108, 19.32503948],
    [-9.38913624, 1.12271764, 20.40520153],
    [-10.30386897, 1.10369615, 19.39385495],
    [-11.01233954, 1.12282902, 19.63063480],
    [-11.70690938, 1.14842385, 20.12473257],
    [-12.26629045, 1.19537226, 21.43391832],
    [-13.95205351, 1.17989802, 20.06497381],
    [-16.33802631, 1.14691263, 17.84014338]
]),
    17: np.array([
    [-1.19451064, 0.96213021, 16.67034331],
    [-0.61304263, 1.02910449, 19.84900333],
    [-1.78139109, 1.00688152, 19.19472094],
    [-1.74865854, 1.04644760, 20.80901562],
    [-2.95068847, 1.01743683, 19.63995018],
    [-3.94648680, 1.00624209, 18.96154153],
    [-4.11204387, 1.03555902, 19.97354223],
    [-5.01078513, 1.01746947, 19.14389422],
    [-5.30560447, 1.04014327, 19.86179186],
    [-5.99452544, 1.02756756, 19.27339377],
    [-6.35254017, 1.04446620, 19.73926209],
    [-6.84941244, 1.04282184, 19.60762015],
    [-7.22864758, 1.05195602, 19.81835460],
    [-8.40745421, 1.00952605, 17.93825819],
    [-8.73700419, 1.03603070, 18.62634828],
    [-9.42296398, 1.02982490, 18.16414262],
    [-9.91701341, 1.04509046, 18.43859768],
    [-10.45110576, 1.04570811, 18.25837821],
    [-10.81712311, 1.07909554, 19.20599318],
    [-11.30777705, 1.09802480, 19.64492200],
    [-11.96527304, 1.10697097, 19.68717938],
    [-12.76105449, 1.11400431, 19.57373518],
    [-13.73171703, 1.14524902, 20.08927800],
    [-15.05430428, 1.14911289, 19.62156890],
    [-17.20018832, 1.15443460, 18.79900119]
]),
    18: np.array([
    [-0.57901589, 0.98622919, 18.77173073],
    [-0.61566409, 1.02219984, 20.85053838],
    [-1.94156883, 1.00123632, 20.04023678],
    [-2.62055985, 1.00211368, 20.13829144],
    [-2.77904140, 1.03422849, 21.37945116],
    [-3.57177154, 1.02910203, 21.06068346],
    [-4.42213185, 1.02211869, 20.57597229],
    [-5.10532787, 1.01642223, 20.24004620],
    [-5.46108672, 1.03819744, 20.90280333],
    [-6.46824055, 1.01047248, 19.60643024],
    [-6.35209946, 1.05135326, 21.18669406],
    [-7.19429720, 1.03651021, 20.37872334],
    [-7.76122523, 1.03574401, 20.15817732],
    [-8.09612319, 1.05605009, 20.75737492],
    [-8.86934521, 1.03830396, 19.85238989],
    [-9.24340158, 1.06235959, 20.52349087],
    [-9.82676851, 1.06441205, 20.37023029],
    [-10.62998450, 1.05028481, 19.53064308],
    [-11.27685859, 1.06503994, 19.72250170],
    [-12.03859451, 1.06183990, 19.27746128],
    [-12.73477308, 1.07685809, 19.45448463],
    [-13.40440195, 1.10629121, 20.15939105],
    [-14.15023958, 1.14425550, 21.17276423],
    [-15.65001360, 1.15140506, 20.63867090],
    [-18.09895960, 1.17029897, 19.96762244]
]),
    19: np.array([
    [-1.32304249, 0.95832919, 18.48023306],
    [-2.79621128, 0.93353500, 17.84287279],
    [-3.56766199, 0.93210709, 17.94912876],
    [-4.05795479, 0.94709624, 18.54127463],
    [-4.89711879, 0.93567098, 18.06100574],
    [-5.92841321, 0.91165966, 16.99663380],
    [-6.39059643, 0.91773957, 17.17688227],
    [-7.08768290, 0.91252457, 16.79805798],
    [-7.53083000, 0.92187570, 17.03570870],
    [-8.01208734, 0.92170289, 16.92467236],
    [-8.70797744, 0.90225855, 16.08050151],
    [-9.44730653, 0.88036159, 15.10697972],
    [-9.83731797, 0.88884871, 15.27001414],
    [-10.01036700, 0.92151941, 16.36094134],
    [-10.64602144, 0.90818127, 15.66802961],
    [-11.18554702, 0.89770414, 15.17074312],
    [-11.63296397, 0.90139634, 15.16459209],
    [-12.13704880, 0.90008482, 14.94170023],
    [-12.52353920, 0.91853667, 15.46218201],
    [-13.00828860, 0.92199325, 15.45235636],
    [-13.58216050, 0.92194461, 15.24901053],
    [-14.17176731, 0.94080557, 15.66519855],
    [-14.94024433, 0.96868608, 16.27646089],
    [-16.01544412, 1.01592580, 17.37790692],
    [-18.18744736, 1.04257134, 17.17560191]
]),
    20: np.array([
    [-0.93767346, 0.97989282, 20.31537415],
    [-1.39743879, 1.00526196, 21.87285020],
    [-2.78023901, 0.97254899, 20.71574061],
    [-3.13333051, 0.99926250, 21.81622923],
    [-3.69819450, 1.00898788, 22.17948485],
    [-4.63133758, 0.99712304, 21.55110669],
    [-5.05468994, 1.01308178, 22.10566166],
    [-5.93983376, 0.99844861, 21.32350727],
    [-6.51943117, 1.00599883, 21.44378380],
    [-7.34041405, 0.98818312, 20.55047206],
    [-7.87705422, 0.99043401, 20.49316663],
    [-8.34525685, 0.99739582, 20.64475672],
    [-8.86884710, 0.99682660, 20.46923537],
    [-9.52077570, 1.00334801, 20.41596695],
    [-10.19551877, 0.99669217, 19.90054772],
    [-10.86984218, 0.99308869, 19.50959355],
    [-11.59017802, 0.97738919, 18.67196064],
    [-12.13536344, 0.97206863, 18.31406331],
    [-12.88553549, 0.98125679, 18.25001052],
    [-13.70987004, 0.95151093, 16.87702723],
    [-14.26661135, 0.99125929, 17.99806101],
    [-15.21057964, 0.96736269, 16.73489655],
    [-16.08902791, 0.98651967, 17.01761330],
    [-17.11358176, 1.00653595, 17.31938288],
    [-18.99297261, 1.02028684, 16.98233441]
])

}

def _get_hansen_coeffs(k_params, trim_ratio):
    """
    Selects the appropriate row of Hansen's coefficients (b0, b1, b2)
    based on the number of parameters (k) and the trimming proportion.

    This version uses the logic derived from the user's original `_pv_sup`
    to map `trim_ratio` to a specific row in the 25-row coefficient tables.

    Args:
        k_params (int): Number of regressors whose coefficients are tested.
        trim_ratio (float): Trimming proportion (e.g., 0.01 to 0.49).

    Returns:
        np.ndarray: A 1D array of 3 coefficients (b0, b1, b2) for the
                    closest matching trim level, or raises an error if k_params
                    is unsupported.
    """
    # Determine the maximum k for which you have 2D tables in _beta_coeffs_qlr
    # This should correspond to the keys in your _beta_coeffs_qlr
    if not hasattr(_get_hansen_coeffs, "MAX_K_SUPPORTED"): # Lazy init
        _get_hansen_coeffs.MAX_K_SUPPORTED = 0
        if '_beta_coeffs_qlr' in globals() and isinstance(_beta_coeffs_qlr, dict):
            _get_hansen_coeffs.MAX_K_SUPPORTED = max(_beta_coeffs_qlr.keys()) if _beta_coeffs_qlr else 0
    
    MAX_K_SUPPORTED = _get_hansen_coeffs.MAX_K_SUPPORTED

    k_adj = max(1, min(k_params, MAX_K_SUPPORTED))

    if k_adj not in _beta_coeffs_qlr:
        raise ValueError(f"Coefficient table for k={k_adj} (adjusted from k_params={k_params}) not found in _beta_coeffs_qlr.")

    coeffs_table_for_k = _beta_coeffs_qlr[k_adj]

    if not isinstance(coeffs_table_for_k, np.ndarray) or coeffs_table_for_k.ndim != 2:
        raise ValueError(f"_beta_coeffs_qlr[{k_adj}] must be a 2D NumPy array. "
                         f"Got shape: {coeffs_table_for_k.shape if isinstance(coeffs_table_for_k, np.ndarray) else type(coeffs_table_for_k)}")

    num_rows_in_table = coeffs_table_for_k.shape[0]
    if num_rows_in_table == 0:
        raise ValueError(f"Coefficient table for k={k_adj} is empty.")

    # Map trim_ratio to an R-style index (1 to num_rows_in_table) using the taua logic.
    # The original R code's taua mapped trim_ratio=0.01 to R-index 25, and trim_ratio=0.49 to R-index 1.
    # This means row 0 (Python) is for trim_ratio ~0.49, and row (num_rows_in_table-1) is for trim_ratio ~0.01.
    
    # Clamp trim_ratio to avoid issues at the very edges if taua formula behaves unexpectedly
    clamped_trim_ratio = max(0.01, min(trim_ratio, 0.49))
    
    # Calculate R-style float index (1-based, higher value for smaller trim_ratio)
    # If num_rows_in_table is 25, this maps [0.01, 0.49] to [25, 1]
    r_style_float_idx = (0.5 - clamped_trim_ratio + 0.01) * ( (num_rows_in_table * 2) / (0.5 - 0.01 + 0.01) * 0.5 )
    r_style_float_idx = (0.5 - clamped_trim_ratio + 0.01) * (num_rows_in_table / 0.5) # Simplified from above

    # Convert to 0-based Python index and clamp to valid range
    # Remember: R-idx 1 -> Py-idx 0, R-idx `num_rows_in_table` -> Py-idx `num_rows_in_table - 1`
    # However, the `taua` logic was: taua=1 for trim=0.49 (maps to py_idx 0)
    #                               taua=25 for trim=0.01 (maps to py_idx 24, if 25 rows)
    # So, if `py_idx_from_taua = int(round(taua)) -1`, this should work.
    
    py_idx = int(round(r_style_float_idx)) - 1 # Convert R-style (1 to num_rows) to Python (0 to num_rows-1)

    selected_coeffs = coeffs_table_for_k[py_idx]

    if selected_coeffs.ndim != 1 or len(selected_coeffs) != 3:
        raise ValueError(f"Selected coefficients for k={k_adj}, trim_ratio={trim_ratio} (row {py_idx}) "
                         f"are not a 1D array of 3 elements. Shape: {selected_coeffs.shape}")
                         
    return selected_coeffs


def get_qlr_pvalue(f_stat, k_params, trim_ratio):
    """
    Calculates the asymptotic p-value for the QLR (supF) statistic
    using Hansen's (1997/2000) approximation.

    Args:
        f_stat (float): The calculated QLR (max F) statistic.
        k_params (int): Number of regressors whose coefficients are tested for stability.
        trim_ratio (float): The trimming proportion used (e.g., 0.15).
                            Used to select the correct coefficients.

    Returns:
        float: The asymptotic p-value.
    """
    if f_stat <= 0:
        return 1.0

    # Get Hansen's coefficients (b0, b1, b2) based on k_params and trim_ratio
    # The R script's _sup_beta directly maps k to a set of coefficients,
    # and then another mapping for `eps1` (trim_ratio).
    # Here we use the simplified _get_hansen_coeffs for now.
    try:
        b0, b1, b2 = _get_hansen_coeffs(k_params, trim_ratio)
    except IndexError:
        # Fallback or error if trim_ratio doesn't map well
        # print(f"Warning: Could not find exact Hansen coeffs for trim_ratio={trim_ratio}. Using approximation.")
        # Defaulting to a common row if specific one not found (e.g., for trim=0.15 often row index 6)
        k_adj = max(1, min(k_params, 20))
        coeffs_for_k = _beta_coeffs_qlr.get(k_adj, _beta_coeffs_qlr[20]) # Fallback to k=20
        b0, b1, b2 = coeffs_for_k[6, :] # Assuming trim 0.15 as a common case (index 6)


    # Hansen's p-value formula: P(supF > x) ~ P(Chi2(m) > (x - a0)/a1 )
    # where m = a2 (degrees of freedom for Chi2)
    # x is the f_stat
    # (b0, b1, b2) from Hansen's paper are (a0, a1, m) respectively in some notations
    # Here, using notation from Hansen (1997) paper itself:
    # P(S > x) approx 1 - CDF_Chi2( (x - b0)/b1, df=b2 )
    # where S is the supLR, supLM, or supWald (supF) statistic.
    # b0, b1 are location and scale parameters, b2 is degrees of freedom.

    if b1 == 0: # Avoid division by zero
        return 1.0 if f_stat < b0 else 0.0 # Or handle as an error/warning

    val = (f_stat - b0) / b1
    
    if val < 0 or b2 <= 0: # Chi2 is undefined for negative values or non-positive df
        return 1.0 # p-value is large if statistic is very small or params are problematic

    # Ensure degrees of freedom is an integer for scipy.stats.chi2
    # Hansen's b2 coefficients are often non-integer; chi2 cdf can handle this.
    df_m = b2

    p_value = 1.0 - chi2.cdf(val, df_m)
    return max(0.0, min(1.0, p_value)) # Ensure p-value is in [0,1]