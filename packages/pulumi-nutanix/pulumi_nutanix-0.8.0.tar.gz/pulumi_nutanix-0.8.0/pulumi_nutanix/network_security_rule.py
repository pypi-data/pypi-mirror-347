# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkSecurityRuleArgs', 'NetworkSecurityRule']

@pulumi.input_type
class NetworkSecurityRuleArgs:
    def __init__(__self__, *,
                 ad_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListArgs']]]] = None,
                 ad_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListArgs']]]] = None,
                 ad_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ad_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs']]]] = None,
                 ad_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
                 allow_ipv6_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 app_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListArgs']]]] = None,
                 app_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListArgs']]]] = None,
                 app_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs']]]] = None,
                 app_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleCategoryArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 is_policy_hitlog_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 isolation_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 isolation_rule_first_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 isolation_rule_first_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs']]]] = None,
                 isolation_rule_first_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 isolation_rule_second_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 isolation_rule_second_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs']]]] = None,
                 isolation_rule_second_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 project_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a NetworkSecurityRule resource.
        :param pulumi.Input[builtins.str] ad_rule_action: - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListArgs']]] ad_rule_inbound_allow_lists: - (Optional) The set of categories that matching VMs need to have.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListArgs']]] ad_rule_outbound_allow_lists: - (Optional)
        :param pulumi.Input[builtins.str] ad_rule_target_group_default_internal_policy: - (Optional) - Default policy for communication within target group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ad_rule_target_group_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs']]] ad_rule_target_group_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] ad_rule_target_group_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] ad_rule_target_group_peer_specification_type: - (Optional) - Way to identify the object for which rule is applied.
        :param pulumi.Input[builtins.str] app_rule_action: - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListArgs']]] app_rule_inbound_allow_lists: - (Optional) The set of categories that matching VMs need to have.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListArgs']]] app_rule_outbound_allow_lists: - (Optional)
        :param pulumi.Input[builtins.str] app_rule_target_group_default_internal_policy: - (Optional) - Default policy for communication within target group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_rule_target_group_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs']]] app_rule_target_group_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] app_rule_target_group_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] app_rule_target_group_peer_specification_type: - (Optional) - Way to identify the object for which rule is applied.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleCategoryArgs']]] categories: - (Optional) Categories for the network_security_rule.
        :param pulumi.Input[builtins.str] description: - (Optional) A description for network_security_rule.
        :param pulumi.Input[builtins.str] isolation_rule_action: - (Optional) - These rules are used for environmental isolation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] isolation_rule_first_entity_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs']]] isolation_rule_first_entity_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] isolation_rule_first_entity_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] isolation_rule_second_entity_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs']]] isolation_rule_second_entity_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] isolation_rule_second_entity_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] owner_reference: - (Optional) The reference to a user.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] project_reference: - (Optional) The reference to a project.
        """
        if ad_rule_action is not None:
            pulumi.set(__self__, "ad_rule_action", ad_rule_action)
        if ad_rule_inbound_allow_lists is not None:
            pulumi.set(__self__, "ad_rule_inbound_allow_lists", ad_rule_inbound_allow_lists)
        if ad_rule_outbound_allow_lists is not None:
            pulumi.set(__self__, "ad_rule_outbound_allow_lists", ad_rule_outbound_allow_lists)
        if ad_rule_target_group_default_internal_policy is not None:
            pulumi.set(__self__, "ad_rule_target_group_default_internal_policy", ad_rule_target_group_default_internal_policy)
        if ad_rule_target_group_filter_kind_lists is not None:
            pulumi.set(__self__, "ad_rule_target_group_filter_kind_lists", ad_rule_target_group_filter_kind_lists)
        if ad_rule_target_group_filter_params is not None:
            pulumi.set(__self__, "ad_rule_target_group_filter_params", ad_rule_target_group_filter_params)
        if ad_rule_target_group_filter_type is not None:
            pulumi.set(__self__, "ad_rule_target_group_filter_type", ad_rule_target_group_filter_type)
        if ad_rule_target_group_peer_specification_type is not None:
            pulumi.set(__self__, "ad_rule_target_group_peer_specification_type", ad_rule_target_group_peer_specification_type)
        if allow_ipv6_traffic is not None:
            pulumi.set(__self__, "allow_ipv6_traffic", allow_ipv6_traffic)
        if app_rule_action is not None:
            pulumi.set(__self__, "app_rule_action", app_rule_action)
        if app_rule_inbound_allow_lists is not None:
            pulumi.set(__self__, "app_rule_inbound_allow_lists", app_rule_inbound_allow_lists)
        if app_rule_outbound_allow_lists is not None:
            pulumi.set(__self__, "app_rule_outbound_allow_lists", app_rule_outbound_allow_lists)
        if app_rule_target_group_default_internal_policy is not None:
            pulumi.set(__self__, "app_rule_target_group_default_internal_policy", app_rule_target_group_default_internal_policy)
        if app_rule_target_group_filter_kind_lists is not None:
            pulumi.set(__self__, "app_rule_target_group_filter_kind_lists", app_rule_target_group_filter_kind_lists)
        if app_rule_target_group_filter_params is not None:
            pulumi.set(__self__, "app_rule_target_group_filter_params", app_rule_target_group_filter_params)
        if app_rule_target_group_filter_type is not None:
            pulumi.set(__self__, "app_rule_target_group_filter_type", app_rule_target_group_filter_type)
        if app_rule_target_group_peer_specification_type is not None:
            pulumi.set(__self__, "app_rule_target_group_peer_specification_type", app_rule_target_group_peer_specification_type)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_policy_hitlog_enabled is not None:
            pulumi.set(__self__, "is_policy_hitlog_enabled", is_policy_hitlog_enabled)
        if isolation_rule_action is not None:
            pulumi.set(__self__, "isolation_rule_action", isolation_rule_action)
        if isolation_rule_first_entity_filter_kind_lists is not None:
            pulumi.set(__self__, "isolation_rule_first_entity_filter_kind_lists", isolation_rule_first_entity_filter_kind_lists)
        if isolation_rule_first_entity_filter_params is not None:
            pulumi.set(__self__, "isolation_rule_first_entity_filter_params", isolation_rule_first_entity_filter_params)
        if isolation_rule_first_entity_filter_type is not None:
            pulumi.set(__self__, "isolation_rule_first_entity_filter_type", isolation_rule_first_entity_filter_type)
        if isolation_rule_second_entity_filter_kind_lists is not None:
            pulumi.set(__self__, "isolation_rule_second_entity_filter_kind_lists", isolation_rule_second_entity_filter_kind_lists)
        if isolation_rule_second_entity_filter_params is not None:
            pulumi.set(__self__, "isolation_rule_second_entity_filter_params", isolation_rule_second_entity_filter_params)
        if isolation_rule_second_entity_filter_type is not None:
            pulumi.set(__self__, "isolation_rule_second_entity_filter_type", isolation_rule_second_entity_filter_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_reference is not None:
            pulumi.set(__self__, "owner_reference", owner_reference)
        if project_reference is not None:
            pulumi.set(__self__, "project_reference", project_reference)

    @property
    @pulumi.getter(name="adRuleAction")
    def ad_rule_action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        """
        return pulumi.get(self, "ad_rule_action")

    @ad_rule_action.setter
    def ad_rule_action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ad_rule_action", value)

    @property
    @pulumi.getter(name="adRuleInboundAllowLists")
    def ad_rule_inbound_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListArgs']]]]:
        """
        - (Optional) The set of categories that matching VMs need to have.
        """
        return pulumi.get(self, "ad_rule_inbound_allow_lists")

    @ad_rule_inbound_allow_lists.setter
    def ad_rule_inbound_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListArgs']]]]):
        pulumi.set(self, "ad_rule_inbound_allow_lists", value)

    @property
    @pulumi.getter(name="adRuleOutboundAllowLists")
    def ad_rule_outbound_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListArgs']]]]:
        """
        - (Optional)
        """
        return pulumi.get(self, "ad_rule_outbound_allow_lists")

    @ad_rule_outbound_allow_lists.setter
    def ad_rule_outbound_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListArgs']]]]):
        pulumi.set(self, "ad_rule_outbound_allow_lists", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupDefaultInternalPolicy")
    def ad_rule_target_group_default_internal_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - Default policy for communication within target group.
        """
        return pulumi.get(self, "ad_rule_target_group_default_internal_policy")

    @ad_rule_target_group_default_internal_policy.setter
    def ad_rule_target_group_default_internal_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ad_rule_target_group_default_internal_policy", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterKindLists")
    def ad_rule_target_group_filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_kind_lists")

    @ad_rule_target_group_filter_kind_lists.setter
    def ad_rule_target_group_filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ad_rule_target_group_filter_kind_lists", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterParams")
    def ad_rule_target_group_filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs']]]]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_params")

    @ad_rule_target_group_filter_params.setter
    def ad_rule_target_group_filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs']]]]):
        pulumi.set(self, "ad_rule_target_group_filter_params", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterType")
    def ad_rule_target_group_filter_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_type")

    @ad_rule_target_group_filter_type.setter
    def ad_rule_target_group_filter_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ad_rule_target_group_filter_type", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupPeerSpecificationType")
    def ad_rule_target_group_peer_specification_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - Way to identify the object for which rule is applied.
        """
        return pulumi.get(self, "ad_rule_target_group_peer_specification_type")

    @ad_rule_target_group_peer_specification_type.setter
    def ad_rule_target_group_peer_specification_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ad_rule_target_group_peer_specification_type", value)

    @property
    @pulumi.getter(name="allowIpv6Traffic")
    def allow_ipv6_traffic(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "allow_ipv6_traffic")

    @allow_ipv6_traffic.setter
    def allow_ipv6_traffic(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_ipv6_traffic", value)

    @property
    @pulumi.getter(name="appRuleAction")
    def app_rule_action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        """
        return pulumi.get(self, "app_rule_action")

    @app_rule_action.setter
    def app_rule_action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_rule_action", value)

    @property
    @pulumi.getter(name="appRuleInboundAllowLists")
    def app_rule_inbound_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListArgs']]]]:
        """
        - (Optional) The set of categories that matching VMs need to have.
        """
        return pulumi.get(self, "app_rule_inbound_allow_lists")

    @app_rule_inbound_allow_lists.setter
    def app_rule_inbound_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListArgs']]]]):
        pulumi.set(self, "app_rule_inbound_allow_lists", value)

    @property
    @pulumi.getter(name="appRuleOutboundAllowLists")
    def app_rule_outbound_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListArgs']]]]:
        """
        - (Optional)
        """
        return pulumi.get(self, "app_rule_outbound_allow_lists")

    @app_rule_outbound_allow_lists.setter
    def app_rule_outbound_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListArgs']]]]):
        pulumi.set(self, "app_rule_outbound_allow_lists", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupDefaultInternalPolicy")
    def app_rule_target_group_default_internal_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - Default policy for communication within target group.
        """
        return pulumi.get(self, "app_rule_target_group_default_internal_policy")

    @app_rule_target_group_default_internal_policy.setter
    def app_rule_target_group_default_internal_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_rule_target_group_default_internal_policy", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterKindLists")
    def app_rule_target_group_filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "app_rule_target_group_filter_kind_lists")

    @app_rule_target_group_filter_kind_lists.setter
    def app_rule_target_group_filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "app_rule_target_group_filter_kind_lists", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterParams")
    def app_rule_target_group_filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs']]]]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "app_rule_target_group_filter_params")

    @app_rule_target_group_filter_params.setter
    def app_rule_target_group_filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs']]]]):
        pulumi.set(self, "app_rule_target_group_filter_params", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterType")
    def app_rule_target_group_filter_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "app_rule_target_group_filter_type")

    @app_rule_target_group_filter_type.setter
    def app_rule_target_group_filter_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_rule_target_group_filter_type", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupPeerSpecificationType")
    def app_rule_target_group_peer_specification_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - Way to identify the object for which rule is applied.
        """
        return pulumi.get(self, "app_rule_target_group_peer_specification_type")

    @app_rule_target_group_peer_specification_type.setter
    def app_rule_target_group_peer_specification_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_rule_target_group_peer_specification_type", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleCategoryArgs']]]]:
        """
        - (Optional) Categories for the network_security_rule.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) A description for network_security_rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isPolicyHitlogEnabled")
    def is_policy_hitlog_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_policy_hitlog_enabled")

    @is_policy_hitlog_enabled.setter
    def is_policy_hitlog_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_policy_hitlog_enabled", value)

    @property
    @pulumi.getter(name="isolationRuleAction")
    def isolation_rule_action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - These rules are used for environmental isolation.
        """
        return pulumi.get(self, "isolation_rule_action")

    @isolation_rule_action.setter
    def isolation_rule_action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "isolation_rule_action", value)

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterKindLists")
    def isolation_rule_first_entity_filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_kind_lists")

    @isolation_rule_first_entity_filter_kind_lists.setter
    def isolation_rule_first_entity_filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "isolation_rule_first_entity_filter_kind_lists", value)

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterParams")
    def isolation_rule_first_entity_filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs']]]]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_params")

    @isolation_rule_first_entity_filter_params.setter
    def isolation_rule_first_entity_filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs']]]]):
        pulumi.set(self, "isolation_rule_first_entity_filter_params", value)

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterType")
    def isolation_rule_first_entity_filter_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_type")

    @isolation_rule_first_entity_filter_type.setter
    def isolation_rule_first_entity_filter_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "isolation_rule_first_entity_filter_type", value)

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterKindLists")
    def isolation_rule_second_entity_filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_kind_lists")

    @isolation_rule_second_entity_filter_kind_lists.setter
    def isolation_rule_second_entity_filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "isolation_rule_second_entity_filter_kind_lists", value)

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterParams")
    def isolation_rule_second_entity_filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs']]]]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_params")

    @isolation_rule_second_entity_filter_params.setter
    def isolation_rule_second_entity_filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs']]]]):
        pulumi.set(self, "isolation_rule_second_entity_filter_params", value)

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterType")
    def isolation_rule_second_entity_filter_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_type")

    @isolation_rule_second_entity_filter_type.setter
    def isolation_rule_second_entity_filter_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "isolation_rule_second_entity_filter_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        - (Optional) The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @owner_reference.setter
    def owner_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "owner_reference", value)

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        - (Optional) The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @project_reference.setter
    def project_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "project_reference", value)


@pulumi.input_type
class _NetworkSecurityRuleState:
    def __init__(__self__, *,
                 ad_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListArgs']]]] = None,
                 ad_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListArgs']]]] = None,
                 ad_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ad_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs']]]] = None,
                 ad_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
                 allow_ipv6_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 api_version: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListArgs']]]] = None,
                 app_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListArgs']]]] = None,
                 app_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs']]]] = None,
                 app_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleCategoryArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 is_policy_hitlog_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 isolation_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 isolation_rule_first_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 isolation_rule_first_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs']]]] = None,
                 isolation_rule_first_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 isolation_rule_second_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 isolation_rule_second_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs']]]] = None,
                 isolation_rule_second_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 project_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering NetworkSecurityRule resources.
        :param pulumi.Input[builtins.str] ad_rule_action: - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListArgs']]] ad_rule_inbound_allow_lists: - (Optional) The set of categories that matching VMs need to have.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListArgs']]] ad_rule_outbound_allow_lists: - (Optional)
        :param pulumi.Input[builtins.str] ad_rule_target_group_default_internal_policy: - (Optional) - Default policy for communication within target group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ad_rule_target_group_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs']]] ad_rule_target_group_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] ad_rule_target_group_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] ad_rule_target_group_peer_specification_type: - (Optional) - Way to identify the object for which rule is applied.
        :param pulumi.Input[builtins.str] api_version: The version of the API.
        :param pulumi.Input[builtins.str] app_rule_action: - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListArgs']]] app_rule_inbound_allow_lists: - (Optional) The set of categories that matching VMs need to have.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListArgs']]] app_rule_outbound_allow_lists: - (Optional)
        :param pulumi.Input[builtins.str] app_rule_target_group_default_internal_policy: - (Optional) - Default policy for communication within target group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_rule_target_group_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs']]] app_rule_target_group_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] app_rule_target_group_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] app_rule_target_group_peer_specification_type: - (Optional) - Way to identify the object for which rule is applied.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleCategoryArgs']]] categories: - (Optional) Categories for the network_security_rule.
        :param pulumi.Input[builtins.str] description: - (Optional) A description for network_security_rule.
        :param pulumi.Input[builtins.str] isolation_rule_action: - (Optional) - These rules are used for environmental isolation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] isolation_rule_first_entity_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs']]] isolation_rule_first_entity_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] isolation_rule_first_entity_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] isolation_rule_second_entity_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs']]] isolation_rule_second_entity_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] isolation_rule_second_entity_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: - The network_security_rule kind metadata.
        :param pulumi.Input[builtins.str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] owner_reference: - (Optional) The reference to a user.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] project_reference: - (Optional) The reference to a project.
        """
        if ad_rule_action is not None:
            pulumi.set(__self__, "ad_rule_action", ad_rule_action)
        if ad_rule_inbound_allow_lists is not None:
            pulumi.set(__self__, "ad_rule_inbound_allow_lists", ad_rule_inbound_allow_lists)
        if ad_rule_outbound_allow_lists is not None:
            pulumi.set(__self__, "ad_rule_outbound_allow_lists", ad_rule_outbound_allow_lists)
        if ad_rule_target_group_default_internal_policy is not None:
            pulumi.set(__self__, "ad_rule_target_group_default_internal_policy", ad_rule_target_group_default_internal_policy)
        if ad_rule_target_group_filter_kind_lists is not None:
            pulumi.set(__self__, "ad_rule_target_group_filter_kind_lists", ad_rule_target_group_filter_kind_lists)
        if ad_rule_target_group_filter_params is not None:
            pulumi.set(__self__, "ad_rule_target_group_filter_params", ad_rule_target_group_filter_params)
        if ad_rule_target_group_filter_type is not None:
            pulumi.set(__self__, "ad_rule_target_group_filter_type", ad_rule_target_group_filter_type)
        if ad_rule_target_group_peer_specification_type is not None:
            pulumi.set(__self__, "ad_rule_target_group_peer_specification_type", ad_rule_target_group_peer_specification_type)
        if allow_ipv6_traffic is not None:
            pulumi.set(__self__, "allow_ipv6_traffic", allow_ipv6_traffic)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if app_rule_action is not None:
            pulumi.set(__self__, "app_rule_action", app_rule_action)
        if app_rule_inbound_allow_lists is not None:
            pulumi.set(__self__, "app_rule_inbound_allow_lists", app_rule_inbound_allow_lists)
        if app_rule_outbound_allow_lists is not None:
            pulumi.set(__self__, "app_rule_outbound_allow_lists", app_rule_outbound_allow_lists)
        if app_rule_target_group_default_internal_policy is not None:
            pulumi.set(__self__, "app_rule_target_group_default_internal_policy", app_rule_target_group_default_internal_policy)
        if app_rule_target_group_filter_kind_lists is not None:
            pulumi.set(__self__, "app_rule_target_group_filter_kind_lists", app_rule_target_group_filter_kind_lists)
        if app_rule_target_group_filter_params is not None:
            pulumi.set(__self__, "app_rule_target_group_filter_params", app_rule_target_group_filter_params)
        if app_rule_target_group_filter_type is not None:
            pulumi.set(__self__, "app_rule_target_group_filter_type", app_rule_target_group_filter_type)
        if app_rule_target_group_peer_specification_type is not None:
            pulumi.set(__self__, "app_rule_target_group_peer_specification_type", app_rule_target_group_peer_specification_type)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_policy_hitlog_enabled is not None:
            pulumi.set(__self__, "is_policy_hitlog_enabled", is_policy_hitlog_enabled)
        if isolation_rule_action is not None:
            pulumi.set(__self__, "isolation_rule_action", isolation_rule_action)
        if isolation_rule_first_entity_filter_kind_lists is not None:
            pulumi.set(__self__, "isolation_rule_first_entity_filter_kind_lists", isolation_rule_first_entity_filter_kind_lists)
        if isolation_rule_first_entity_filter_params is not None:
            pulumi.set(__self__, "isolation_rule_first_entity_filter_params", isolation_rule_first_entity_filter_params)
        if isolation_rule_first_entity_filter_type is not None:
            pulumi.set(__self__, "isolation_rule_first_entity_filter_type", isolation_rule_first_entity_filter_type)
        if isolation_rule_second_entity_filter_kind_lists is not None:
            pulumi.set(__self__, "isolation_rule_second_entity_filter_kind_lists", isolation_rule_second_entity_filter_kind_lists)
        if isolation_rule_second_entity_filter_params is not None:
            pulumi.set(__self__, "isolation_rule_second_entity_filter_params", isolation_rule_second_entity_filter_params)
        if isolation_rule_second_entity_filter_type is not None:
            pulumi.set(__self__, "isolation_rule_second_entity_filter_type", isolation_rule_second_entity_filter_type)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_reference is not None:
            pulumi.set(__self__, "owner_reference", owner_reference)
        if project_reference is not None:
            pulumi.set(__self__, "project_reference", project_reference)

    @property
    @pulumi.getter(name="adRuleAction")
    def ad_rule_action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        """
        return pulumi.get(self, "ad_rule_action")

    @ad_rule_action.setter
    def ad_rule_action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ad_rule_action", value)

    @property
    @pulumi.getter(name="adRuleInboundAllowLists")
    def ad_rule_inbound_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListArgs']]]]:
        """
        - (Optional) The set of categories that matching VMs need to have.
        """
        return pulumi.get(self, "ad_rule_inbound_allow_lists")

    @ad_rule_inbound_allow_lists.setter
    def ad_rule_inbound_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleInboundAllowListArgs']]]]):
        pulumi.set(self, "ad_rule_inbound_allow_lists", value)

    @property
    @pulumi.getter(name="adRuleOutboundAllowLists")
    def ad_rule_outbound_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListArgs']]]]:
        """
        - (Optional)
        """
        return pulumi.get(self, "ad_rule_outbound_allow_lists")

    @ad_rule_outbound_allow_lists.setter
    def ad_rule_outbound_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleOutboundAllowListArgs']]]]):
        pulumi.set(self, "ad_rule_outbound_allow_lists", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupDefaultInternalPolicy")
    def ad_rule_target_group_default_internal_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - Default policy for communication within target group.
        """
        return pulumi.get(self, "ad_rule_target_group_default_internal_policy")

    @ad_rule_target_group_default_internal_policy.setter
    def ad_rule_target_group_default_internal_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ad_rule_target_group_default_internal_policy", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterKindLists")
    def ad_rule_target_group_filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_kind_lists")

    @ad_rule_target_group_filter_kind_lists.setter
    def ad_rule_target_group_filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ad_rule_target_group_filter_kind_lists", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterParams")
    def ad_rule_target_group_filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs']]]]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_params")

    @ad_rule_target_group_filter_params.setter
    def ad_rule_target_group_filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs']]]]):
        pulumi.set(self, "ad_rule_target_group_filter_params", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterType")
    def ad_rule_target_group_filter_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_type")

    @ad_rule_target_group_filter_type.setter
    def ad_rule_target_group_filter_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ad_rule_target_group_filter_type", value)

    @property
    @pulumi.getter(name="adRuleTargetGroupPeerSpecificationType")
    def ad_rule_target_group_peer_specification_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - Way to identify the object for which rule is applied.
        """
        return pulumi.get(self, "ad_rule_target_group_peer_specification_type")

    @ad_rule_target_group_peer_specification_type.setter
    def ad_rule_target_group_peer_specification_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ad_rule_target_group_peer_specification_type", value)

    @property
    @pulumi.getter(name="allowIpv6Traffic")
    def allow_ipv6_traffic(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "allow_ipv6_traffic")

    @allow_ipv6_traffic.setter
    def allow_ipv6_traffic(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_ipv6_traffic", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="appRuleAction")
    def app_rule_action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        """
        return pulumi.get(self, "app_rule_action")

    @app_rule_action.setter
    def app_rule_action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_rule_action", value)

    @property
    @pulumi.getter(name="appRuleInboundAllowLists")
    def app_rule_inbound_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListArgs']]]]:
        """
        - (Optional) The set of categories that matching VMs need to have.
        """
        return pulumi.get(self, "app_rule_inbound_allow_lists")

    @app_rule_inbound_allow_lists.setter
    def app_rule_inbound_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleInboundAllowListArgs']]]]):
        pulumi.set(self, "app_rule_inbound_allow_lists", value)

    @property
    @pulumi.getter(name="appRuleOutboundAllowLists")
    def app_rule_outbound_allow_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListArgs']]]]:
        """
        - (Optional)
        """
        return pulumi.get(self, "app_rule_outbound_allow_lists")

    @app_rule_outbound_allow_lists.setter
    def app_rule_outbound_allow_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleOutboundAllowListArgs']]]]):
        pulumi.set(self, "app_rule_outbound_allow_lists", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupDefaultInternalPolicy")
    def app_rule_target_group_default_internal_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - Default policy for communication within target group.
        """
        return pulumi.get(self, "app_rule_target_group_default_internal_policy")

    @app_rule_target_group_default_internal_policy.setter
    def app_rule_target_group_default_internal_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_rule_target_group_default_internal_policy", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterKindLists")
    def app_rule_target_group_filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "app_rule_target_group_filter_kind_lists")

    @app_rule_target_group_filter_kind_lists.setter
    def app_rule_target_group_filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "app_rule_target_group_filter_kind_lists", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterParams")
    def app_rule_target_group_filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs']]]]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "app_rule_target_group_filter_params")

    @app_rule_target_group_filter_params.setter
    def app_rule_target_group_filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs']]]]):
        pulumi.set(self, "app_rule_target_group_filter_params", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterType")
    def app_rule_target_group_filter_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "app_rule_target_group_filter_type")

    @app_rule_target_group_filter_type.setter
    def app_rule_target_group_filter_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_rule_target_group_filter_type", value)

    @property
    @pulumi.getter(name="appRuleTargetGroupPeerSpecificationType")
    def app_rule_target_group_peer_specification_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - Way to identify the object for which rule is applied.
        """
        return pulumi.get(self, "app_rule_target_group_peer_specification_type")

    @app_rule_target_group_peer_specification_type.setter
    def app_rule_target_group_peer_specification_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_rule_target_group_peer_specification_type", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleCategoryArgs']]]]:
        """
        - (Optional) Categories for the network_security_rule.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) A description for network_security_rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isPolicyHitlogEnabled")
    def is_policy_hitlog_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_policy_hitlog_enabled")

    @is_policy_hitlog_enabled.setter
    def is_policy_hitlog_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_policy_hitlog_enabled", value)

    @property
    @pulumi.getter(name="isolationRuleAction")
    def isolation_rule_action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - These rules are used for environmental isolation.
        """
        return pulumi.get(self, "isolation_rule_action")

    @isolation_rule_action.setter
    def isolation_rule_action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "isolation_rule_action", value)

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterKindLists")
    def isolation_rule_first_entity_filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_kind_lists")

    @isolation_rule_first_entity_filter_kind_lists.setter
    def isolation_rule_first_entity_filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "isolation_rule_first_entity_filter_kind_lists", value)

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterParams")
    def isolation_rule_first_entity_filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs']]]]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_params")

    @isolation_rule_first_entity_filter_params.setter
    def isolation_rule_first_entity_filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs']]]]):
        pulumi.set(self, "isolation_rule_first_entity_filter_params", value)

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterType")
    def isolation_rule_first_entity_filter_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_type")

    @isolation_rule_first_entity_filter_type.setter
    def isolation_rule_first_entity_filter_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "isolation_rule_first_entity_filter_type", value)

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterKindLists")
    def isolation_rule_second_entity_filter_kind_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_kind_lists")

    @isolation_rule_second_entity_filter_kind_lists.setter
    def isolation_rule_second_entity_filter_kind_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "isolation_rule_second_entity_filter_kind_lists", value)

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterParams")
    def isolation_rule_second_entity_filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs']]]]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_params")

    @isolation_rule_second_entity_filter_params.setter
    def isolation_rule_second_entity_filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs']]]]):
        pulumi.set(self, "isolation_rule_second_entity_filter_params", value)

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterType")
    def isolation_rule_second_entity_filter_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_type")

    @isolation_rule_second_entity_filter_type.setter
    def isolation_rule_second_entity_filter_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "isolation_rule_second_entity_filter_type", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        - The network_security_rule kind metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        - (Optional) The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @owner_reference.setter
    def owner_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "owner_reference", value)

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        - (Optional) The reference to a project.
        """
        return pulumi.get(self, "project_reference")

    @project_reference.setter
    def project_reference(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "project_reference", value)


@pulumi.type_token("nutanix:index/networkSecurityRule:NetworkSecurityRule")
class NetworkSecurityRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ad_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleInboundAllowListArgs', 'NetworkSecurityRuleAdRuleInboundAllowListArgsDict']]]]] = None,
                 ad_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleOutboundAllowListArgs', 'NetworkSecurityRuleAdRuleOutboundAllowListArgsDict']]]]] = None,
                 ad_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ad_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAdRuleTargetGroupFilterParamArgsDict']]]]] = None,
                 ad_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
                 allow_ipv6_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 app_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleInboundAllowListArgs', 'NetworkSecurityRuleAppRuleInboundAllowListArgsDict']]]]] = None,
                 app_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleOutboundAllowListArgs', 'NetworkSecurityRuleAppRuleOutboundAllowListArgsDict']]]]] = None,
                 app_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAppRuleTargetGroupFilterParamArgsDict']]]]] = None,
                 app_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleCategoryArgs', 'NetworkSecurityRuleCategoryArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 is_policy_hitlog_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 isolation_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 isolation_rule_first_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 isolation_rule_first_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgsDict']]]]] = None,
                 isolation_rule_first_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 isolation_rule_second_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 isolation_rule_second_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgsDict']]]]] = None,
                 isolation_rule_second_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 project_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Provides a Nutanix network security rule resource to Create a network security rule.

        > NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow

        ## Example Usage

        ### Isolation Rule Example

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        isolation = nutanix.NetworkSecurityRule("isolation",
            description="Isolation Rule Example",
            isolation_rule_action="APPLY",
            isolation_rule_first_entity_filter_kind_lists=["vm"],
            isolation_rule_first_entity_filter_params=[{
                "name": "Environment",
                "values": ["Dev"],
            }],
            isolation_rule_first_entity_filter_type="CATEGORIES_MATCH_ALL",
            isolation_rule_second_entity_filter_kind_lists=["vm"],
            isolation_rule_second_entity_filter_params=[{
                "name": "Environment",
                "values": ["Production"],
            }],
            isolation_rule_second_entity_filter_type="CATEGORIES_MATCH_ALL")
        ```

        ### Usage with service and address groups
        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        service1 = nutanix.ServiceGroup("service1",
            description="test",
            service_lists=[{
                "protocol": "TCP",
                "tcp_port_range_lists": [
                    {
                        "start_port": 22,
                        "end_port": 22,
                    },
                    {
                        "start_port": 2222,
                        "end_port": 2222,
                    },
                ],
            }])
        address1 = nutanix.AddressGroup("address1",
            description="test",
            ip_address_block_lists=[{
                "ip": "10.0.0.0",
                "prefix_length": 24,
            }])
        ad_group_user_1 = nutanix.CategoryValue("ad-group-user-1",
            description="group user category value",
            value="AD")
        v_di = nutanix.NetworkSecurityRule("vDI",
            ad_rule_action="APPLY",
            description="test",
            ad_rule_inbound_allow_lists=[{
                "ip_subnet": "10.0.0.0",
                "ip_subnet_prefix_length": "8",
                "peer_specification_type": "IP_SUBNET",
                "protocol": "ALL",
            }],
            ad_rule_target_group_default_internal_policy="DENY_ALL",
            ad_rule_target_group_filter_kind_lists=["vm"],
            ad_rule_target_group_filter_params=[{
                "name": "AD",
                "values": ["AD"],
            }],
            ad_rule_target_group_filter_type="CATEGORIES_MATCH_ALL",
            ad_rule_target_group_peer_specification_type="FILTER",
            ad_rule_outbound_allow_lists=[{
                "peer_specification_type": "ALL",
                "service_group_lists": [{
                    "kind": "service_group",
                    "uuid": service1.id,
                }],
                "address_group_inclusion_lists": [{
                    "kind": "address_group",
                    "uuid": address1.id,
                }],
            }],
            opts = pulumi.ResourceOptions(depends_on=[ad_group_user_1]))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] ad_rule_action: - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleInboundAllowListArgs', 'NetworkSecurityRuleAdRuleInboundAllowListArgsDict']]]] ad_rule_inbound_allow_lists: - (Optional) The set of categories that matching VMs need to have.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleOutboundAllowListArgs', 'NetworkSecurityRuleAdRuleOutboundAllowListArgsDict']]]] ad_rule_outbound_allow_lists: - (Optional)
        :param pulumi.Input[builtins.str] ad_rule_target_group_default_internal_policy: - (Optional) - Default policy for communication within target group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ad_rule_target_group_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAdRuleTargetGroupFilterParamArgsDict']]]] ad_rule_target_group_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] ad_rule_target_group_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] ad_rule_target_group_peer_specification_type: - (Optional) - Way to identify the object for which rule is applied.
        :param pulumi.Input[builtins.str] app_rule_action: - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleInboundAllowListArgs', 'NetworkSecurityRuleAppRuleInboundAllowListArgsDict']]]] app_rule_inbound_allow_lists: - (Optional) The set of categories that matching VMs need to have.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleOutboundAllowListArgs', 'NetworkSecurityRuleAppRuleOutboundAllowListArgsDict']]]] app_rule_outbound_allow_lists: - (Optional)
        :param pulumi.Input[builtins.str] app_rule_target_group_default_internal_policy: - (Optional) - Default policy for communication within target group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_rule_target_group_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAppRuleTargetGroupFilterParamArgsDict']]]] app_rule_target_group_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] app_rule_target_group_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] app_rule_target_group_peer_specification_type: - (Optional) - Way to identify the object for which rule is applied.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleCategoryArgs', 'NetworkSecurityRuleCategoryArgsDict']]]] categories: - (Optional) Categories for the network_security_rule.
        :param pulumi.Input[builtins.str] description: - (Optional) A description for network_security_rule.
        :param pulumi.Input[builtins.str] isolation_rule_action: - (Optional) - These rules are used for environmental isolation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] isolation_rule_first_entity_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgsDict']]]] isolation_rule_first_entity_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] isolation_rule_first_entity_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] isolation_rule_second_entity_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgsDict']]]] isolation_rule_second_entity_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] isolation_rule_second_entity_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] owner_reference: - (Optional) The reference to a user.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] project_reference: - (Optional) The reference to a project.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NetworkSecurityRuleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Nutanix network security rule resource to Create a network security rule.

        > NOTE: The use of network_security_rule is only applicable in AHV clusters and requires Microsegmentation to be enabled. This feature is a function of the Flow product and requires a Flow license. For more information on Flow and Microsegmentation please visit https://www.nutanix.com/products/flow

        ## Example Usage

        ### Isolation Rule Example

        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        isolation = nutanix.NetworkSecurityRule("isolation",
            description="Isolation Rule Example",
            isolation_rule_action="APPLY",
            isolation_rule_first_entity_filter_kind_lists=["vm"],
            isolation_rule_first_entity_filter_params=[{
                "name": "Environment",
                "values": ["Dev"],
            }],
            isolation_rule_first_entity_filter_type="CATEGORIES_MATCH_ALL",
            isolation_rule_second_entity_filter_kind_lists=["vm"],
            isolation_rule_second_entity_filter_params=[{
                "name": "Environment",
                "values": ["Production"],
            }],
            isolation_rule_second_entity_filter_type="CATEGORIES_MATCH_ALL")
        ```

        ### Usage with service and address groups
        ```python
        import pulumi
        import pulumi_nutanix as nutanix

        service1 = nutanix.ServiceGroup("service1",
            description="test",
            service_lists=[{
                "protocol": "TCP",
                "tcp_port_range_lists": [
                    {
                        "start_port": 22,
                        "end_port": 22,
                    },
                    {
                        "start_port": 2222,
                        "end_port": 2222,
                    },
                ],
            }])
        address1 = nutanix.AddressGroup("address1",
            description="test",
            ip_address_block_lists=[{
                "ip": "10.0.0.0",
                "prefix_length": 24,
            }])
        ad_group_user_1 = nutanix.CategoryValue("ad-group-user-1",
            description="group user category value",
            value="AD")
        v_di = nutanix.NetworkSecurityRule("vDI",
            ad_rule_action="APPLY",
            description="test",
            ad_rule_inbound_allow_lists=[{
                "ip_subnet": "10.0.0.0",
                "ip_subnet_prefix_length": "8",
                "peer_specification_type": "IP_SUBNET",
                "protocol": "ALL",
            }],
            ad_rule_target_group_default_internal_policy="DENY_ALL",
            ad_rule_target_group_filter_kind_lists=["vm"],
            ad_rule_target_group_filter_params=[{
                "name": "AD",
                "values": ["AD"],
            }],
            ad_rule_target_group_filter_type="CATEGORIES_MATCH_ALL",
            ad_rule_target_group_peer_specification_type="FILTER",
            ad_rule_outbound_allow_lists=[{
                "peer_specification_type": "ALL",
                "service_group_lists": [{
                    "kind": "service_group",
                    "uuid": service1.id,
                }],
                "address_group_inclusion_lists": [{
                    "kind": "address_group",
                    "uuid": address1.id,
                }],
            }],
            opts = pulumi.ResourceOptions(depends_on=[ad_group_user_1]))
        ```

        :param str resource_name: The name of the resource.
        :param NetworkSecurityRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkSecurityRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ad_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleInboundAllowListArgs', 'NetworkSecurityRuleAdRuleInboundAllowListArgsDict']]]]] = None,
                 ad_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleOutboundAllowListArgs', 'NetworkSecurityRuleAdRuleOutboundAllowListArgsDict']]]]] = None,
                 ad_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ad_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAdRuleTargetGroupFilterParamArgsDict']]]]] = None,
                 ad_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 ad_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
                 allow_ipv6_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 app_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleInboundAllowListArgs', 'NetworkSecurityRuleAppRuleInboundAllowListArgsDict']]]]] = None,
                 app_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleOutboundAllowListArgs', 'NetworkSecurityRuleAppRuleOutboundAllowListArgsDict']]]]] = None,
                 app_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAppRuleTargetGroupFilterParamArgsDict']]]]] = None,
                 app_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 app_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleCategoryArgs', 'NetworkSecurityRuleCategoryArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 is_policy_hitlog_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 isolation_rule_action: Optional[pulumi.Input[builtins.str]] = None,
                 isolation_rule_first_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 isolation_rule_first_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgsDict']]]]] = None,
                 isolation_rule_first_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 isolation_rule_second_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 isolation_rule_second_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgsDict']]]]] = None,
                 isolation_rule_second_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 project_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkSecurityRuleArgs.__new__(NetworkSecurityRuleArgs)

            __props__.__dict__["ad_rule_action"] = ad_rule_action
            __props__.__dict__["ad_rule_inbound_allow_lists"] = ad_rule_inbound_allow_lists
            __props__.__dict__["ad_rule_outbound_allow_lists"] = ad_rule_outbound_allow_lists
            __props__.__dict__["ad_rule_target_group_default_internal_policy"] = ad_rule_target_group_default_internal_policy
            __props__.__dict__["ad_rule_target_group_filter_kind_lists"] = ad_rule_target_group_filter_kind_lists
            __props__.__dict__["ad_rule_target_group_filter_params"] = ad_rule_target_group_filter_params
            __props__.__dict__["ad_rule_target_group_filter_type"] = ad_rule_target_group_filter_type
            __props__.__dict__["ad_rule_target_group_peer_specification_type"] = ad_rule_target_group_peer_specification_type
            __props__.__dict__["allow_ipv6_traffic"] = allow_ipv6_traffic
            __props__.__dict__["app_rule_action"] = app_rule_action
            __props__.__dict__["app_rule_inbound_allow_lists"] = app_rule_inbound_allow_lists
            __props__.__dict__["app_rule_outbound_allow_lists"] = app_rule_outbound_allow_lists
            __props__.__dict__["app_rule_target_group_default_internal_policy"] = app_rule_target_group_default_internal_policy
            __props__.__dict__["app_rule_target_group_filter_kind_lists"] = app_rule_target_group_filter_kind_lists
            __props__.__dict__["app_rule_target_group_filter_params"] = app_rule_target_group_filter_params
            __props__.__dict__["app_rule_target_group_filter_type"] = app_rule_target_group_filter_type
            __props__.__dict__["app_rule_target_group_peer_specification_type"] = app_rule_target_group_peer_specification_type
            __props__.__dict__["categories"] = categories
            __props__.__dict__["description"] = description
            __props__.__dict__["is_policy_hitlog_enabled"] = is_policy_hitlog_enabled
            __props__.__dict__["isolation_rule_action"] = isolation_rule_action
            __props__.__dict__["isolation_rule_first_entity_filter_kind_lists"] = isolation_rule_first_entity_filter_kind_lists
            __props__.__dict__["isolation_rule_first_entity_filter_params"] = isolation_rule_first_entity_filter_params
            __props__.__dict__["isolation_rule_first_entity_filter_type"] = isolation_rule_first_entity_filter_type
            __props__.__dict__["isolation_rule_second_entity_filter_kind_lists"] = isolation_rule_second_entity_filter_kind_lists
            __props__.__dict__["isolation_rule_second_entity_filter_params"] = isolation_rule_second_entity_filter_params
            __props__.__dict__["isolation_rule_second_entity_filter_type"] = isolation_rule_second_entity_filter_type
            __props__.__dict__["name"] = name
            __props__.__dict__["owner_reference"] = owner_reference
            __props__.__dict__["project_reference"] = project_reference
            __props__.__dict__["api_version"] = None
            __props__.__dict__["metadata"] = None
        super(NetworkSecurityRule, __self__).__init__(
            'nutanix:index/networkSecurityRule:NetworkSecurityRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ad_rule_action: Optional[pulumi.Input[builtins.str]] = None,
            ad_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleInboundAllowListArgs', 'NetworkSecurityRuleAdRuleInboundAllowListArgsDict']]]]] = None,
            ad_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleOutboundAllowListArgs', 'NetworkSecurityRuleAdRuleOutboundAllowListArgsDict']]]]] = None,
            ad_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
            ad_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            ad_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAdRuleTargetGroupFilterParamArgsDict']]]]] = None,
            ad_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
            ad_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
            allow_ipv6_traffic: Optional[pulumi.Input[builtins.bool]] = None,
            api_version: Optional[pulumi.Input[builtins.str]] = None,
            app_rule_action: Optional[pulumi.Input[builtins.str]] = None,
            app_rule_inbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleInboundAllowListArgs', 'NetworkSecurityRuleAppRuleInboundAllowListArgsDict']]]]] = None,
            app_rule_outbound_allow_lists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleOutboundAllowListArgs', 'NetworkSecurityRuleAppRuleOutboundAllowListArgsDict']]]]] = None,
            app_rule_target_group_default_internal_policy: Optional[pulumi.Input[builtins.str]] = None,
            app_rule_target_group_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            app_rule_target_group_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAppRuleTargetGroupFilterParamArgsDict']]]]] = None,
            app_rule_target_group_filter_type: Optional[pulumi.Input[builtins.str]] = None,
            app_rule_target_group_peer_specification_type: Optional[pulumi.Input[builtins.str]] = None,
            categories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleCategoryArgs', 'NetworkSecurityRuleCategoryArgsDict']]]]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            is_policy_hitlog_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            isolation_rule_action: Optional[pulumi.Input[builtins.str]] = None,
            isolation_rule_first_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            isolation_rule_first_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgsDict']]]]] = None,
            isolation_rule_first_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
            isolation_rule_second_entity_filter_kind_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            isolation_rule_second_entity_filter_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgsDict']]]]] = None,
            isolation_rule_second_entity_filter_type: Optional[pulumi.Input[builtins.str]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            owner_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            project_reference: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None) -> 'NetworkSecurityRule':
        """
        Get an existing NetworkSecurityRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] ad_rule_action: - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleInboundAllowListArgs', 'NetworkSecurityRuleAdRuleInboundAllowListArgsDict']]]] ad_rule_inbound_allow_lists: - (Optional) The set of categories that matching VMs need to have.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleOutboundAllowListArgs', 'NetworkSecurityRuleAdRuleOutboundAllowListArgsDict']]]] ad_rule_outbound_allow_lists: - (Optional)
        :param pulumi.Input[builtins.str] ad_rule_target_group_default_internal_policy: - (Optional) - Default policy for communication within target group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ad_rule_target_group_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAdRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAdRuleTargetGroupFilterParamArgsDict']]]] ad_rule_target_group_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] ad_rule_target_group_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] ad_rule_target_group_peer_specification_type: - (Optional) - Way to identify the object for which rule is applied.
        :param pulumi.Input[builtins.str] api_version: The version of the API.
        :param pulumi.Input[builtins.str] app_rule_action: - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleInboundAllowListArgs', 'NetworkSecurityRuleAppRuleInboundAllowListArgsDict']]]] app_rule_inbound_allow_lists: - (Optional) The set of categories that matching VMs need to have.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleOutboundAllowListArgs', 'NetworkSecurityRuleAppRuleOutboundAllowListArgsDict']]]] app_rule_outbound_allow_lists: - (Optional)
        :param pulumi.Input[builtins.str] app_rule_target_group_default_internal_policy: - (Optional) - Default policy for communication within target group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_rule_target_group_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleAppRuleTargetGroupFilterParamArgs', 'NetworkSecurityRuleAppRuleTargetGroupFilterParamArgsDict']]]] app_rule_target_group_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] app_rule_target_group_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[builtins.str] app_rule_target_group_peer_specification_type: - (Optional) - Way to identify the object for which rule is applied.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleCategoryArgs', 'NetworkSecurityRuleCategoryArgsDict']]]] categories: - (Optional) Categories for the network_security_rule.
        :param pulumi.Input[builtins.str] description: - (Optional) A description for network_security_rule.
        :param pulumi.Input[builtins.str] isolation_rule_action: - (Optional) - These rules are used for environmental isolation.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] isolation_rule_first_entity_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleFirstEntityFilterParamArgsDict']]]] isolation_rule_first_entity_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] isolation_rule_first_entity_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] isolation_rule_second_entity_filter_kind_lists: - (Optional) - List of kinds associated with this filter.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgs', 'NetworkSecurityRuleIsolationRuleSecondEntityFilterParamArgsDict']]]] isolation_rule_second_entity_filter_params: - (Optional) - A list of category key and list of values.
        :param pulumi.Input[builtins.str] isolation_rule_second_entity_filter_type: - (Optional) - The type of the filter being used.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: - The network_security_rule kind metadata.
        :param pulumi.Input[builtins.str] name: - (Required) The name for the network_security_rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] owner_reference: - (Optional) The reference to a user.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] project_reference: - (Optional) The reference to a project.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkSecurityRuleState.__new__(_NetworkSecurityRuleState)

        __props__.__dict__["ad_rule_action"] = ad_rule_action
        __props__.__dict__["ad_rule_inbound_allow_lists"] = ad_rule_inbound_allow_lists
        __props__.__dict__["ad_rule_outbound_allow_lists"] = ad_rule_outbound_allow_lists
        __props__.__dict__["ad_rule_target_group_default_internal_policy"] = ad_rule_target_group_default_internal_policy
        __props__.__dict__["ad_rule_target_group_filter_kind_lists"] = ad_rule_target_group_filter_kind_lists
        __props__.__dict__["ad_rule_target_group_filter_params"] = ad_rule_target_group_filter_params
        __props__.__dict__["ad_rule_target_group_filter_type"] = ad_rule_target_group_filter_type
        __props__.__dict__["ad_rule_target_group_peer_specification_type"] = ad_rule_target_group_peer_specification_type
        __props__.__dict__["allow_ipv6_traffic"] = allow_ipv6_traffic
        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["app_rule_action"] = app_rule_action
        __props__.__dict__["app_rule_inbound_allow_lists"] = app_rule_inbound_allow_lists
        __props__.__dict__["app_rule_outbound_allow_lists"] = app_rule_outbound_allow_lists
        __props__.__dict__["app_rule_target_group_default_internal_policy"] = app_rule_target_group_default_internal_policy
        __props__.__dict__["app_rule_target_group_filter_kind_lists"] = app_rule_target_group_filter_kind_lists
        __props__.__dict__["app_rule_target_group_filter_params"] = app_rule_target_group_filter_params
        __props__.__dict__["app_rule_target_group_filter_type"] = app_rule_target_group_filter_type
        __props__.__dict__["app_rule_target_group_peer_specification_type"] = app_rule_target_group_peer_specification_type
        __props__.__dict__["categories"] = categories
        __props__.__dict__["description"] = description
        __props__.__dict__["is_policy_hitlog_enabled"] = is_policy_hitlog_enabled
        __props__.__dict__["isolation_rule_action"] = isolation_rule_action
        __props__.__dict__["isolation_rule_first_entity_filter_kind_lists"] = isolation_rule_first_entity_filter_kind_lists
        __props__.__dict__["isolation_rule_first_entity_filter_params"] = isolation_rule_first_entity_filter_params
        __props__.__dict__["isolation_rule_first_entity_filter_type"] = isolation_rule_first_entity_filter_type
        __props__.__dict__["isolation_rule_second_entity_filter_kind_lists"] = isolation_rule_second_entity_filter_kind_lists
        __props__.__dict__["isolation_rule_second_entity_filter_params"] = isolation_rule_second_entity_filter_params
        __props__.__dict__["isolation_rule_second_entity_filter_type"] = isolation_rule_second_entity_filter_type
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["owner_reference"] = owner_reference
        __props__.__dict__["project_reference"] = project_reference
        return NetworkSecurityRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adRuleAction")
    def ad_rule_action(self) -> pulumi.Output[builtins.str]:
        """
        - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        """
        return pulumi.get(self, "ad_rule_action")

    @property
    @pulumi.getter(name="adRuleInboundAllowLists")
    def ad_rule_inbound_allow_lists(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleAdRuleInboundAllowList']]:
        """
        - (Optional) The set of categories that matching VMs need to have.
        """
        return pulumi.get(self, "ad_rule_inbound_allow_lists")

    @property
    @pulumi.getter(name="adRuleOutboundAllowLists")
    def ad_rule_outbound_allow_lists(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleAdRuleOutboundAllowList']]:
        """
        - (Optional)
        """
        return pulumi.get(self, "ad_rule_outbound_allow_lists")

    @property
    @pulumi.getter(name="adRuleTargetGroupDefaultInternalPolicy")
    def ad_rule_target_group_default_internal_policy(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        - (Optional) - Default policy for communication within target group.
        """
        return pulumi.get(self, "ad_rule_target_group_default_internal_policy")

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterKindLists")
    def ad_rule_target_group_filter_kind_lists(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_kind_lists")

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterParams")
    def ad_rule_target_group_filter_params(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleAdRuleTargetGroupFilterParam']]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_params")

    @property
    @pulumi.getter(name="adRuleTargetGroupFilterType")
    def ad_rule_target_group_filter_type(self) -> pulumi.Output[builtins.str]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "ad_rule_target_group_filter_type")

    @property
    @pulumi.getter(name="adRuleTargetGroupPeerSpecificationType")
    def ad_rule_target_group_peer_specification_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        - (Optional) - Way to identify the object for which rule is applied.
        """
        return pulumi.get(self, "ad_rule_target_group_peer_specification_type")

    @property
    @pulumi.getter(name="allowIpv6Traffic")
    def allow_ipv6_traffic(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "allow_ipv6_traffic")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[builtins.str]:
        """
        The version of the API.
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="appRuleAction")
    def app_rule_action(self) -> pulumi.Output[builtins.str]:
        """
        - (Optional) - These rules govern what flows are allowed. Target group is a required attribute. Empty inbound_allow_list will not anything into target group. Empty outbound_allow_list will allow everything from target group.
        """
        return pulumi.get(self, "app_rule_action")

    @property
    @pulumi.getter(name="appRuleInboundAllowLists")
    def app_rule_inbound_allow_lists(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleAppRuleInboundAllowList']]:
        """
        - (Optional) The set of categories that matching VMs need to have.
        """
        return pulumi.get(self, "app_rule_inbound_allow_lists")

    @property
    @pulumi.getter(name="appRuleOutboundAllowLists")
    def app_rule_outbound_allow_lists(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleAppRuleOutboundAllowList']]:
        """
        - (Optional)
        """
        return pulumi.get(self, "app_rule_outbound_allow_lists")

    @property
    @pulumi.getter(name="appRuleTargetGroupDefaultInternalPolicy")
    def app_rule_target_group_default_internal_policy(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        - (Optional) - Default policy for communication within target group.
        """
        return pulumi.get(self, "app_rule_target_group_default_internal_policy")

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterKindLists")
    def app_rule_target_group_filter_kind_lists(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "app_rule_target_group_filter_kind_lists")

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterParams")
    def app_rule_target_group_filter_params(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleAppRuleTargetGroupFilterParam']]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "app_rule_target_group_filter_params")

    @property
    @pulumi.getter(name="appRuleTargetGroupFilterType")
    def app_rule_target_group_filter_type(self) -> pulumi.Output[builtins.str]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "app_rule_target_group_filter_type")

    @property
    @pulumi.getter(name="appRuleTargetGroupPeerSpecificationType")
    def app_rule_target_group_peer_specification_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        - (Optional) - Way to identify the object for which rule is applied.
        """
        return pulumi.get(self, "app_rule_target_group_peer_specification_type")

    @property
    @pulumi.getter
    def categories(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleCategory']]:
        """
        - (Optional) Categories for the network_security_rule.
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        - (Optional) A description for network_security_rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isPolicyHitlogEnabled")
    def is_policy_hitlog_enabled(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "is_policy_hitlog_enabled")

    @property
    @pulumi.getter(name="isolationRuleAction")
    def isolation_rule_action(self) -> pulumi.Output[builtins.str]:
        """
        - (Optional) - These rules are used for environmental isolation.
        """
        return pulumi.get(self, "isolation_rule_action")

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterKindLists")
    def isolation_rule_first_entity_filter_kind_lists(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_kind_lists")

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterParams")
    def isolation_rule_first_entity_filter_params(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleIsolationRuleFirstEntityFilterParam']]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_params")

    @property
    @pulumi.getter(name="isolationRuleFirstEntityFilterType")
    def isolation_rule_first_entity_filter_type(self) -> pulumi.Output[builtins.str]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "isolation_rule_first_entity_filter_type")

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterKindLists")
    def isolation_rule_second_entity_filter_kind_lists(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        - (Optional) - List of kinds associated with this filter.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_kind_lists")

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterParams")
    def isolation_rule_second_entity_filter_params(self) -> pulumi.Output[Sequence['outputs.NetworkSecurityRuleIsolationRuleSecondEntityFilterParam']]:
        """
        - (Optional) - A list of category key and list of values.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_params")

    @property
    @pulumi.getter(name="isolationRuleSecondEntityFilterType")
    def isolation_rule_second_entity_filter_type(self) -> pulumi.Output[builtins.str]:
        """
        - (Optional) - The type of the filter being used.
        """
        return pulumi.get(self, "isolation_rule_second_entity_filter_type")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        - The network_security_rule kind metadata.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        - (Required) The name for the network_security_rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerReference")
    def owner_reference(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        - (Optional) The reference to a user.
        """
        return pulumi.get(self, "owner_reference")

    @property
    @pulumi.getter(name="projectReference")
    def project_reference(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        - (Optional) The reference to a project.
        """
        return pulumi.get(self, "project_reference")

