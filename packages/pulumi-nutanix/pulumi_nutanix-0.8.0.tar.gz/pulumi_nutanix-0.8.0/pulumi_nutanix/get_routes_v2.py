# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetRoutesV2Result',
    'AwaitableGetRoutesV2Result',
    'get_routes_v2',
    'get_routes_v2_output',
]

@pulumi.output_type
class GetRoutesV2Result:
    """
    A collection of values returned by getRoutesV2.
    """
    def __init__(__self__, filter=None, id=None, limit=None, order_by=None, page=None, route_table_ext_id=None, routes=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if page and not isinstance(page, int):
            raise TypeError("Expected argument 'page' to be a int")
        pulumi.set(__self__, "page", page)
        if route_table_ext_id and not isinstance(route_table_ext_id, str):
            raise TypeError("Expected argument 'route_table_ext_id' to be a str")
        pulumi.set(__self__, "route_table_ext_id", route_table_ext_id)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter
    def filter(self) -> Optional[builtins.str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[builtins.int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[builtins.str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter
    def page(self) -> Optional[builtins.int]:
        return pulumi.get(self, "page")

    @property
    @pulumi.getter(name="routeTableExtId")
    def route_table_ext_id(self) -> builtins.str:
        return pulumi.get(self, "route_table_ext_id")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetRoutesV2RouteResult']:
        return pulumi.get(self, "routes")


class AwaitableGetRoutesV2Result(GetRoutesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoutesV2Result(
            filter=self.filter,
            id=self.id,
            limit=self.limit,
            order_by=self.order_by,
            page=self.page,
            route_table_ext_id=self.route_table_ext_id,
            routes=self.routes)


def get_routes_v2(filter: Optional[builtins.str] = None,
                  limit: Optional[builtins.int] = None,
                  order_by: Optional[builtins.str] = None,
                  page: Optional[builtins.int] = None,
                  route_table_ext_id: Optional[builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoutesV2Result:
    """
    Provides Nutanix resource to List Routes request.


    :param builtins.str filter: A URL query parameter that allows clients to filter a collection of resources.
           - The filter can be applied to the following fields:
    :param builtins.int limit: A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.
    :param builtins.str order_by: A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default
           - The orderby can be applied to the following fields:
           - `isActive`
    :param builtins.int page: A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.
    :param builtins.str route_table_ext_id: Route table UUID
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['orderBy'] = order_by
    __args__['page'] = page
    __args__['routeTableExtId'] = route_table_ext_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nutanix:index/getRoutesV2:getRoutesV2', __args__, opts=opts, typ=GetRoutesV2Result).value

    return AwaitableGetRoutesV2Result(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        order_by=pulumi.get(__ret__, 'order_by'),
        page=pulumi.get(__ret__, 'page'),
        route_table_ext_id=pulumi.get(__ret__, 'route_table_ext_id'),
        routes=pulumi.get(__ret__, 'routes'))
def get_routes_v2_output(filter: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                         limit: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                         order_by: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                         page: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                         route_table_ext_id: Optional[pulumi.Input[builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRoutesV2Result]:
    """
    Provides Nutanix resource to List Routes request.


    :param builtins.str filter: A URL query parameter that allows clients to filter a collection of resources.
           - The filter can be applied to the following fields:
    :param builtins.int limit: A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.
    :param builtins.str order_by: A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default
           - The orderby can be applied to the following fields:
           - `isActive`
    :param builtins.int page: A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.
    :param builtins.str route_table_ext_id: Route table UUID
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['limit'] = limit
    __args__['orderBy'] = order_by
    __args__['page'] = page
    __args__['routeTableExtId'] = route_table_ext_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('nutanix:index/getRoutesV2:getRoutesV2', __args__, opts=opts, typ=GetRoutesV2Result)
    return __ret__.apply(lambda __response__: GetRoutesV2Result(
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        limit=pulumi.get(__response__, 'limit'),
        order_by=pulumi.get(__response__, 'order_by'),
        page=pulumi.get(__response__, 'page'),
        route_table_ext_id=pulumi.get(__response__, 'route_table_ext_id'),
        routes=pulumi.get(__response__, 'routes')))
