import unittest
from loremipsum import Lorem, LoremIpsum, loremIpsum


class TestIntegration(unittest.TestCase):
    """Integration tests for the loremipsum package"""
    
    def test_lorem_loremipsum_compatibility(self):
        """Test that both APIs can work together in the same program"""
        # Generate text from both APIs
        lorem_word = Lorem.word()
        loremipsum_word = loremIpsum.generateWords(1)
        
        self.assertIsInstance(lorem_word, str)
        self.assertIsInstance(loremipsum_word, str)
        
        # Mix both APIs in the same operation
        combined = f"{lorem_word} {loremipsum_word}"
        self.assertGreater(len(combined), 0)
    
    def test_paragraph_comparison(self):
        """Compare paragraphs generated by both APIs"""
        # Generate paragraphs from both APIs
        lorem_paragraph = Lorem.paragraph()
        loremipsum_paragraph = loremIpsum.generateSentences(4)  # ~4 sentences
        
        # Both should be non-empty strings
        self.assertIsInstance(lorem_paragraph, str)
        self.assertIsInstance(loremipsum_paragraph, str)
        
        # Both should contain at least one period
        self.assertGreaterEqual(lorem_paragraph.count('.'), 1)
        self.assertGreaterEqual(loremipsum_paragraph.count('.'), 1)
        
        # Both should start with an uppercase letter
        self.assertTrue(lorem_paragraph[0].isupper())
        self.assertTrue(loremipsum_paragraph[0].isupper())
    
    def test_custom_instance_with_lorem_words(self):
        """Test creating a custom LoremIpsum instance with Lorem's word list"""
        # Create a new LoremIpsum instance with the Lorem word list
        custom_lorem = LoremIpsum(words=Lorem._WORDS)
        
        # Generate text with the custom instance
        text = custom_lorem.generateWords(10)
        self.assertEqual(len(text.split()), 10)
        
        # Every word should be in the Lorem word list
        for word in text.split():
            self.assertIn(word.lower(), Lorem._WORDS)
    
    def test_custom_functionality(self):
        """Test custom combination of functionality from both APIs"""
        # Generate a title with LoremIpsum
        title = loremIpsum.generateWords(5, capitalize=True)
        
        # Generate paragraphs with Lorem
        content = Lorem.paragraphs(3)
        
        # Generate a list with LoremIpsum
        bullet_points = loremIpsum.generateList(3, style="bullet")
        
        # Combine them into a document
        document = f"{title}\n\n{content}\n\n{bullet_points}"
        
        # Check that all components are present
        self.assertIn(title, document)
        self.assertIn(content, document)
        self.assertIn(bullet_points, document)
    
    def test_import_pattern(self):
        """Test different import patterns for the package"""
        # Test direct imports (done in setup)
        self.assertIsNotNone(Lorem)
        self.assertIsNotNone(LoremIpsum)
        self.assertIsNotNone(loremIpsum)
        
        # Test functionality after import
        self.assertIsInstance(Lorem.word(), str)
        self.assertIsInstance(loremIpsum.generateWords(), str)


if __name__ == "__main__":
    unittest.main() 