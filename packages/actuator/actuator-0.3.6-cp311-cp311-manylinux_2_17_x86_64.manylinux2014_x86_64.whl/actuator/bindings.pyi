# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

class PyRobstrideActuator:
    def __new__(cls, ports:typing.Sequence[builtins.str], py_actuators_config:typing.Sequence[tuple[builtins.int, PyRobstrideActuatorConfig]], polling_interval:builtins.float) -> PyRobstrideActuator: ...
    def command_actuators(self, commands:typing.Sequence[PyRobstrideActuatorCommand]) -> builtins.list[builtins.bool]: ...
    def configure_actuator(self, config:PyRobstrideConfigureRequest) -> builtins.bool: ...
    def get_actuators_state(self, actuator_ids:typing.Sequence[builtins.int]) -> builtins.list[PyRobstrideActuatorState]: ...

class PyRobstrideActuatorCommand:
    actuator_id: builtins.int
    position: typing.Optional[builtins.float]
    velocity: typing.Optional[builtins.float]
    torque: typing.Optional[builtins.float]
    def __new__(cls, actuator_id:builtins.int) -> PyRobstrideActuatorCommand: ...

class PyRobstrideActuatorConfig:
    actuator_type: builtins.int
    max_angle_change: typing.Optional[builtins.float]
    max_velocity: typing.Optional[builtins.float]
    def __new__(cls, actuator_type:builtins.int) -> PyRobstrideActuatorConfig: ...

class PyRobstrideActuatorState:
    actuator_id: builtins.int
    online: builtins.bool
    position: typing.Optional[builtins.float]
    velocity: typing.Optional[builtins.float]
    torque: typing.Optional[builtins.float]
    temperature: typing.Optional[builtins.float]

class PyRobstrideConfigureRequest:
    actuator_id: builtins.int
    kp: typing.Optional[builtins.float]
    kd: typing.Optional[builtins.float]
    max_torque: typing.Optional[builtins.float]
    torque_enabled: typing.Optional[builtins.bool]
    zero_position: typing.Optional[builtins.bool]
    new_actuator_id: typing.Optional[builtins.int]
    def __new__(cls, actuator_id:builtins.int) -> PyRobstrideConfigureRequest: ...

def get_version() -> builtins.str: ...

